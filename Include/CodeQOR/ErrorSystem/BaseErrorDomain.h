// BaseErrorDomain.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A root domain for error handling
//An error domain is a collection of error conditions and associated data for a particular subsystem
//The domain can also provide the subsystem specific code to turn the error data into a more portable form

#ifndef CODEQOR_ERROR_DOMAIN_H_1
#define CODEQOR_ERROR_DOMAIN_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR.h"
#include "Error.h"
#include "CodeQOR/Text/TString.h"
#include "CodeQOR/ErrorSystem/What.h"
#include "CodeQOR/ErrorSystem/Where.h"
#include "CodeQOR/ErrorSystem/When.h"

#if ( __QCMP_SUPPORTS(__QCMP_FEATURE_FUNCTION_CALL_IN_STATIC_CONST_DATA_INIT) )
#	define __QCS_ERRORPARAM( _DOMAIN, _X ) &_DOMAIN::GetParam< _X >
#else
#	define __QCS_ERRORPARAM( _DOMAIN, _X ) _X
#endif

//--------------------------------------------------------------------------------
//Declares a Base Error domain for generic errors.
// An error domain is generally a category sub division of the error handling 
// aspect covering a specific area of the code-base.

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __CODEQOR ) CBaseErrorDomain
    {

    public:

        __QCMP_STATIC_CONSTANT( unsigned int, MAX_ERRPARTS = 15 );
        __QCMP_STATIC_CONSTANT( unsigned int, MAX_ERRTEXT = 2048 );

        //--------------------------------------------------------------------------------
        enum E_Notes
        {
            UNKNOWN_NOTE,
            TRACE_NOTE,
            MAX_NOTES //Always last
        };

        //--------------------------------------------------------------------------------
        enum E_Warnings
        {               
            UNKNOWN_WARNING,
			MESSAGE_WARNING,
            MAX_WARNS //Always last
        };

        //--------------------------------------------------------------------------------
        enum E_Errors
        {       
            UNKNOWN_ERROR,
            LOGIC_ERROR,
            DOMAIN_ERROR,
            RANGE_ERROR,
            MAX_ERRORS //Always last
        };

        CBaseErrorDomain( const mxTCHAR* szDomainName );

        virtual ~CBaseErrorDomain();
		virtual bool GetDescription( CString& strDescription, CError* pError );

        //--------------------------------------------------------------------------------              
        template< int i >
        mxTCHAR* GetParam( CError* pError )
        { 
			return reinterpret_cast< mxTCHAR* >( pError->What().Parameter( static_cast< unsigned char >( i ) ) ); 
        }               

    //protected: Should be protected but VC6 doesn't make s_BaseError available to derived classes, Doh!
        
        typedef mxTCHAR* ( CBaseErrorDomain::*fpBaseErrorDescriptor )( CError* pError );

        //--------------------------------------------------------------------------------
		//An error definition consists of a format string, and a list of function pointers to functions for filling in the parameterized parts of the string from the error
        struct s_BaseError
        {
            const mxTCHAR* pText;
            fpBaseErrorDescriptor pDescriptorFuncs[ MAX_ERRPARTS ];
        };

    public:

        virtual const CBaseErrorDomain::s_BaseError* NoteTemplate( unsigned int uiCode );
        virtual const CBaseErrorDomain::s_BaseError* WarningTemplate( unsigned int uiCode );
        virtual const CBaseErrorDomain::s_BaseError* ErrorTemplate( unsigned int uiCode );              

    protected:

        virtual unsigned int GetErrorParts( CError* pError, const CBaseErrorDomain::s_BaseError& ErrorTemplate, void** ppszParts );

        static CBaseErrorDomain::s_BaseError m_Notes[ CBaseErrorDomain::MAX_NOTES ];
        static CBaseErrorDomain::s_BaseError m_Warnings[ CBaseErrorDomain::MAX_WARNS ];
        static CBaseErrorDomain::s_BaseError m_Errors[ CBaseErrorDomain::MAX_ERRORS ];
                
        const mxTCHAR* m_szDomainName;

    private:

        CBaseErrorDomain& operator = ( const CBaseErrorDomain& );
    };      

	extern __QOR_INTERFACE(__CODEQOR) CBaseErrorDomain GlobalErrorDomain;

	__QOR_INTERFACE( __CODEQOR ) CBaseErrorDomain* GetGlobalErrorDomain( void );

}//nsCodeQOR

#endif//CODEQOR_ERROR_DOMAIN_H_1
