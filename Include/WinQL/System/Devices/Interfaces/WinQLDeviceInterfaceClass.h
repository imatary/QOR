//DeviceInterfaceClass.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Device Interface Class

#ifndef WINQL_DEVICEINTERFACECLASS_H_3
#define WINQL_DEVICEINTERFACECLASS_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/IO.h"
#include <vector>
#include "WinQL/System/Devices/WinQLDeviceHandle.h"
#include "WinQL/System/Devices/WinQLDevice.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
#include "WinQL/CodeServices/Text/WinString.h"

__QOR_DECLARE_REF(nsWin32, __WINQL, CDeviceInterfaceClass, CTRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CDeviceInterface;
	
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CDeviceInterfaceClass
	{
	public:

		typedef std::vector< CDeviceInterface::ref_type >::iterator interface_iterator;
		__QOR_DECLARE_REF_TYPE(CDeviceInterfaceClass);
		__QOR_DECLARE_OCLASS_ID( CDeviceInterfaceClass );

		CDeviceInterfaceClass( nsCodeQOR::__mxGUID GUID, const CTString& strInterfaceName, CTStringRef refstrMachine = CTString::TheEmptyString().Ref() );
		CDeviceInterfaceClass( const CDeviceInterfaceClass& src );
		CDeviceInterfaceClass& operator = ( const CDeviceInterfaceClass& src );
		~CDeviceInterfaceClass();

		CTString Name( void );
		nsCodeQOR::__mxGUID& GUID( void );

		unsigned long RegisterInterface( CDeviceInterface::ref_type DeviceInterface );
		//TODO: UnregisterInterface

		CDeviceInterface::ref_type CreateObject( void );
		bool IsImplemented( void );
		void Enumerate( void );
		std::vector< CDeviceInterface::ref_type >& Interfaces( void );

	protected:

		CHandle m_Handle;

	private:

		nsCodeQOR::__mxGUID m_GUID;
		CTString m_strName;
		CTString m_strMachine;

		std::vector< CDeviceInterface::ref_type > m_VecInterfaceInstances;
		nsWinQAPI::CSetupAPI& m_Library;
		bool m_bEnumerated;
	};
	
}//nsWin32

#endif//WINQL_DEVICEINTERFACECLASS_H_3
