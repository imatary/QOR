//WinQLMouse.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Mouse Input

#ifndef WINQL_SYSTEM_DEVICE_MOUSE_H_3
#define WINQL_SYSTEM_DEVICE_MOUSE_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/GUI/GUI.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
#include "WinQL/CodeServices/WinQLSharedRef.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

__QOR_DECLARE_REF(nsWin32, __WINQL, CMouse, CTExtRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct tagMOUSEMOVEPOINT 
	{
		int x;
		int y;
		unsigned long time;
		Cmp_ulong_ptr dwExtraInfo;
	} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, *LPMOUSEMOVEPOINT;

	//--------------------------------------------------------------------------------
	typedef struct tagTRACKMOUSEEVENT 
	{
		unsigned long cbSize;
		unsigned long dwFlags;
		COSWindow* phwndTrack;
		unsigned long dwHoverTime;
	} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE(__WINQL) CMouse : public CDeviceInterface
	{

	public:

		__QOR_DECLARE_REF_TYPE(CMouse);
		__QOR_DECLARE_OCLASS_ID( CMouse );

		static nsCodeQOR::CTExternalRegEntry< CMouse > RegEntry;

		CMouse();
		virtual ~CMouse();
		bool DragDetect( COSWindow::refType Wnd, nsWin32::POINT pt );
		COSWindow::refType GetCapture( void );
		unsigned int GetDoubleClickTime( void );
		int GetMovePointsEx( unsigned int cbSize, nsWin32::LPMOUSEMOVEPOINT lppt, nsWin32::LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, unsigned long resolution );
		void event( unsigned long dwFlags, unsigned long dx, unsigned long dy, unsigned long dwData, Cmp_ulong_ptr dwExtraInfo );
		bool ReleaseCapture( void );
		COSWindow::refType SetCapture( COSWindow::refType Wnd );
		bool SetDoubleClickTime( unsigned int uInterval );
		bool SwapButton( bool fSwap );
		bool TrackEvent( nsWin32::LPTRACKMOUSEEVENT lpEventTrack );

	private:

		nsWinQAPI::CUser32& m_Library;

		__QCS_DECLARE_NONCOPYABLE( CMouse );

	};

}//nsWin32

#endif//WINQL_SYSTEM_DEVICE_MOUSE_H_3
