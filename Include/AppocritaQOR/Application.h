//Application.h

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Abstract base for applications

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef APPOCRITAQOR_APPLICATION_H_3
#define APPOCRITAQOR_APPLICATION_H_3

#include "AppocritaQOR/Controller.h"
#include "AppocritaQOR/Role.h"
#include "AppocritaQOR/Workflow.h"
#include "AppocritaQOR/IApplication.h"
#include "CodeQOR/Modules/ProcessBase.h"

//------------------------------------------------------------------------------
namespace nsQOR
{
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __APPOCRITA ) CApplication : public IApplication
	{
	public:

		CApplication();
		CApplication( CRole::ref_type Role );
		CApplication( const nsCodeQOR::mxGUID* pRoleID );
		virtual ~CApplication();

		virtual void SetRole( IRole::ref_type Role );
		virtual IRole::ref_type GetRole( void );
		virtual void SetWorkflow( IWorkflow::ref_type );
		virtual IWorkflow::ref_type GetWorkflow( void );
		virtual void SetOuter( IApplication::ref_type );
		virtual void Setup( void );
		virtual void Shutdown( void );
		virtual int Run( void );
		virtual int Run( IWorkflow::ref_type );
		virtual void EnqueueEvent( IEvent::ref_type pEvent );
		virtual void Stop( void );
		
		template< class TSubSystem >
		void AddSubSystem( const TSubSystem& SubSystem )
		{
			GetRole()->AddSubSystem( *TSubSystem::ClassID(), SubSystem.Ref() );
		}
		
	private:

		IApplication::ref_type m_Impl;
	};

}//nsQOR

__QOR_INTERFACE( __APPOCRITA ) nsQOR::CApplication::ref_type TheApplication( void );

#endif//APPOCRITAQOR_APPLICATION_H_3

