//WinQLTInterfaceMember.h

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_COM_TINTERFACEMEMBER_H_3
#define WINQL_COM_TINTERFACEMEMBER_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/COM/Server/BaseParts/WinQLServerObjectBase.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{	
	//--------------------------------------------------------------------------------
	template< class TInterface, class TBase = CServerObjectComponent< TInterface > >
	class CInterfaceImplBase : public TBase
	{
	public:

		typedef TInterface Interface;

		//--------------------------------------------------------------------------------
		CInterfaceImplBase( CIUnknownImplBase<>* pImpl ) : TBase( pImpl )
		{
			RegisterInterface( dynamic_cast< TInterface* >( this ) );
		}

		//--------------------------------------------------------------------------------
		virtual ~CInterfaceImplBase()
		{
		}

	};

	//--------------------------------------------------------------------------------
	template< class TImpl >
	class CTInterfaceMember
	{
	public:

		//--------------------------------------------------------------------------------
		CTInterfaceMember( CIUnknownImplBase<>* pImpl )
		{
			m_bOwnsPtr = true;
			m_pMember = 0;
			m_pUnknownImpl = pImpl;
		}

		//--------------------------------------------------------------------------------
		virtual ~CTInterfaceMember()
		{
			Free();
		}

		//--------------------------------------------------------------------------------
		operator TImpl*()
		{
			if( !m_pMember )
			{
				m_pMember = Allocate();
			}

			return m_pMember;
		}

		//--------------------------------------------------------------------------------
		TImpl* operator -> ()
		{
			if( !m_pMember )
			{
				m_pMember = Allocate();
			}

			return m_pMember;
		}

		//--------------------------------------------------------------------------------
		TImpl* operator & ()
		{
			if( !m_pMember )
			{
				m_pMember = Allocate();
			}

			return m_pMember;
		}

        //--------------------------------------------------------------------------------
        bool Configure( TImpl* pConf )
        {
            bool bResult = false;
			if( m_pMember == 0 )
			{
				m_bOwnsPtr = false;
				m_pUnknownImpl->RegisterInterface( dynamic_cast< typename TImpl::Interface* >( pConf ) );
				m_pMember = pConf;
				bResult = true;
			}
			return bResult;
        }

	protected:

		//--------------------------------------------------------------------------------
		virtual TImpl* Allocate()
		{
			m_bOwnsPtr = true;
			TImpl* pImpl = new TImpl( m_pUnknownImpl );
			m_pUnknownImpl->RegisterInterface( dynamic_cast< typename TImpl::Interface* >( pImpl ) );
			return pImpl;
		}

		//--------------------------------------------------------------------------------
		virtual void Free()
		{
            if( m_bOwnsPtr )
            {
    			delete m_pMember;
				m_bOwnsPtr = false;
				m_pMember = 0;
            }
		}

        TImpl* m_pMember;
        bool m_bOwnsPtr;
		CIUnknownImplBase<>* m_pUnknownImpl;
	};

}//nsWin32

#endif//WINQL_COM_TINTERFACEMEMBER_H_3
