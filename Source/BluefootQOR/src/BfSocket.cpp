//BfSocket.cpp

// Copyright Querysoft Limited 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements a Bluefoot Socket class

#include "BluefootQOR/BfSocket.h"
#include "BluefootQOR/Socket/BfSocketConnector.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

#if( QOR_SYS_OS == QOR_SYS_MSW )
#include "WinQL/Application/Comms/Network/WinQLSocket.h"
#endif
//------------------------------------------------------------------------------
namespace nsBluefoot
{
	__QOR_IMPLEMENT_OCLASS_LUID(ISocket);

	//------------------------------------------------------------------------------
	ISocket::Address::Address()
	{
		memset(&data, 0, byte_size);
	}

	//------------------------------------------------------------------------------
	ISocket::Address::Address(unsigned short AddressFamily) : Address()
	{
		sa_family = AddressFamily;
	}

	//------------------------------------------------------------------------------
	CSocket::CSocket() : m_Impl( new_shared_ref<nsPlatform::CSocket>().AsRef< ISocket >())
	{
		__QCS_MEMBER_FCONTEXT("CSocket::CSocket");
	}

	//------------------------------------------------------------------------------
	CSocket::CSocket(ISocket::ref_type Impl) : m_Impl( Impl )
	{
		__QCS_MEMBER_FCONTEXT("CSocket::CSocket");
	}

	//------------------------------------------------------------------------------
	CSocket::~CSocket()
	{
		__QCS_MEMBER_FCONTEXT("CSocket::~CSocket");
		m_Impl.Dispose();
	}

	//------------------------------------------------------------------------------
	CSocket::CSocket(const CSocket& src)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::CSocket");
		*this = src;
	}

	//------------------------------------------------------------------------------
	CSocket& CSocket::operator = (const CSocket& src)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::operator=");
		m_Impl.Dispose();
		m_Impl = src.m_Impl;
		return *this;
	}

	//------------------------------------------------------------------------------
	void CSocket::Create(eAddressFamily AF, eType Type, eProtocol Protocol)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::Create");
		m_Impl().Create(AF, Type, Protocol);
	}

	//------------------------------------------------------------------------------
	int CSocket::Bind( const Address& Address )
	{
		__QCS_MEMBER_FCONTEXT("CSocket::Bind");
		return m_Impl().Bind(Address);
	}

	//------------------------------------------------------------------------------
	int CSocket::Listen(int iBacklog)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::Listen");
		return m_Impl().Listen(iBacklog);
	}

	//------------------------------------------------------------------------------
	ISocket::ref_type CSocket::Accept( Address& Addr )
	{
		__QCS_MEMBER_FCONTEXT("CSocket::Accept");
		return m_Impl().Accept(Addr);
	}

	//------------------------------------------------------------------------------
	int CSocket::Connect( const Address& Addr )
	{
		__QCS_MEMBER_FCONTEXT("CSocket::Connect");
		return m_Impl().Connect(Addr);
	}

	//------------------------------------------------------------------------------
	int CSocket::GetPeerName( Address& Addr )
	{
		__QCS_MEMBER_FCONTEXT("CSocket::GetPeerName");
		return m_Impl().GetPeerName( Addr );
	}

	//------------------------------------------------------------------------------
	int CSocket::GetSockName( Address& Addr )
	{
		__QCS_MEMBER_FCONTEXT("CSocket::GetSockName");
		return m_Impl().GetSockName( Addr );
	}

	//------------------------------------------------------------------------------
	int CSocket::GetSockOpt(int iLevel, int iOptName, char* pOptVal, int* pOptLen)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::GetSockOpt");
		return m_Impl().GetSockOpt(iLevel, iOptName, pOptVal, pOptLen);
	}

	//------------------------------------------------------------------------------
	int CSocket::SetSockOpt(int iLevel, int iOptName, const char* pOptVal, int iOptLen)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::SetSockOpt");
		return m_Impl().SetSockOpt(iLevel, iOptName, pOptVal, iOptLen);
	}

	//------------------------------------------------------------------------------
	int CSocket::AsyncReceive(char* pBuffer, int iLen, void* pSyncObject)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::AsyncReceive");
		return m_Impl().AsyncReceive(pBuffer, iLen, pSyncObject );
	}

	//------------------------------------------------------------------------------
	int CSocket::Receive(char* buf, int len, int flags)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::Receive");
		return m_Impl().Receive(buf, len, flags);
	}

	//------------------------------------------------------------------------------
	int CSocket::ReceiveFrom(char* Buffer, int iLen, int iFlags, Address& From )
	{
		__QCS_MEMBER_FCONTEXT("CSocket::ReceiveFrom");
		return m_Impl().ReceiveFrom(Buffer, iLen, iFlags, From );
	}

	//------------------------------------------------------------------------------
	int CSocket::AsyncSend(char* Buffer, int iLen, void* pSyncObject )
	{
		__QCS_MEMBER_FCONTEXT("CSocket::AsyncSend");
		return m_Impl().AsyncSend(Buffer, iLen, pSyncObject);
	}

	//------------------------------------------------------------------------------
	int CSocket::Send(const char* Buffer, int iLen)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::Send");
		return m_Impl().Send(Buffer, iLen);
	}

	//------------------------------------------------------------------------------
	int CSocket::SendTo(const char* Buffer, int iLen, int iFlags, const Address& To )
	{
		__QCS_MEMBER_FCONTEXT("CSocket::SendTo");
		return m_Impl().SendTo(Buffer, iLen, iFlags, To );
	}

	//------------------------------------------------------------------------------
	int CSocket::Shutdown(int iHow)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::Shutdown");
		return m_Impl().Shutdown( iHow );
	}

	//------------------------------------------------------------------------------
	Cmp_uint_ptr CSocket::ID(void)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::ID");
		return m_Impl().ID();
	}

	//------------------------------------------------------------------------------
	int CSocket::GetLastError(void)
	{
		__QCS_MEMBER_FCONTEXT("CSocket::GetLastError");
		return m_Impl().GetLastError();
	}

}//nsBluefoot

