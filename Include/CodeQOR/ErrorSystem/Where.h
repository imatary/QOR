//Where.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Declares CWhere. A class to represent where something happened as part of an incident or error

#ifndef CODEQOR_ERR_WHERE_H_1
#define CODEQOR_ERR_WHERE_H_1

#include "CodeQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Text/TString.h"
#include "CodeQOR/ErrorSystem/Error.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __CODEQOR ) CWhere : public CErrorPropertyBase
	{
	public:

		CWhere();
		CWhere( const CWhere& );
		CWhere& operator = ( const CWhere& );
		virtual ~CWhere();
		virtual CErrorPropertyBase* Clone( void );

		void SetFile( const char* szFile );
		const char* GetFile( void ) const;
		void SetLine( unsigned int uiLine );
		unsigned int GetLine( void ) const;
		void SetFunction( const char* pszFunction );
		const char* GetFunction( void ) const;
		void SetDomain( CBaseErrorDomain* pDomain );
		CObjectContextBase& GetObjectContext( void );
		void SetObjectContext( CObjectContextBase& ObjContext );
		CBaseErrorDomain* GetDomain( void ) const;
		nsQOR::IThread::ref_type GetThreadContext( void ) const;
		void SetThreadContext( nsQOR::IThread::ref_type pThreadContext );
		CLoadableModuleBase* GetModuleContext( void ) const;
		void SetModuleContext( CLoadableModuleBase* pModuleContext );
		CProcessBase* GetProcessContext( void ) const;
		void SetProcessContext( CProcessBase* pProcessContext );
		bool GetInException( void ) const;
		void SetInException( bool bInExcpetion );

	private:

		unsigned int m_uiLine;
		const char* m_szFunction;
		const char* m_szFile;
		CObjectContextBase m_ObjContext;
		nsCodeQOR::CBaseErrorDomain* m_pDomain;
		nsQOR::IThread::ref_type m_pThreadContext;
		CLoadableModuleBase* m_pModuleContext;
		CProcessBase* m_pProcessContext;
		bool m_bInException;//TODO: probably should be an exception context pointer
	};	

}//nsCodeQOR

#endif//CODEQOR_ERR_WHERE_H_1
