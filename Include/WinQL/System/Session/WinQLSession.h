//WinQLSession.h

// Copyright Querysoft Limited 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_OSSERV_SESSION_H_3
#define WINQL_OSSERV_SESSION_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Traits/ReferenceTraits.h"
#include "CodeQOR/DataStructures/TRef.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/GUI/WindowStation.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/System/User/WinQLUser.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
	class __QOR_INTERFACE( __WINQAPI ) CAdvAPI32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE(__WINQL) CSession;
	class __QOR_INTERFACE(__WINQL) CShutdownBlock;
}//nsWin32


template<> struct nsCodeQOR::reference_type<nsWin32::CShutdownBlock> { typedef nsCodeQOR::CTRef< nsWin32::CShutdownBlock > type; };

//--------------------------------------------------------------------------------
namespace nsWin32
{
	typedef bool ( __QCMP_STDCALLCONVENTION* WindowStationEnumCallback )( TCHAR*, Cmp_long_ptr );

	//--------------------------------------------------------------------------------
	struct QuotaLimits 
	{
		Cmp_ulong_ptr PagedPoolLimit;
		Cmp_ulong_ptr NonPagedPoolLimit;
		Cmp_ulong_ptr MinimumWorkingSetSize;
		Cmp_ulong_ptr MaximumWorkingSetSize;
		Cmp_ulong_ptr PagefileLimit;
		LARGE_INTEGER TimeLimit;
	};

	//--------------------------------------------------------------------------------
	struct CypherBlock 
	{
		char data[ 8 ];
	};
    
	//--------------------------------------------------------------------------------
	struct LMOWFPassword 
	{
		CypherBlock data[ 2 ];
	};

	typedef LMOWFPassword	NTOWFPassword;

	//--------------------------------------------------------------------------------
	struct SamprEncryptedUserPassword
	{
		unsigned char Buffer[ (  256 * 2 ) + 4 ];
	};

	//--------------------------------------------------------------------------------
	struct EncryptedLMOWFPassword 
	{
		CypherBlock data[ 2 ];
	};

	typedef EncryptedLMOWFPassword	EncryptedNTOWFPassword;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSessionHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CSessionHelper );

		CSessionHelper();
		virtual ~CSessionHelper();
		bool ExitWindowsEx( unsigned int uFlags, unsigned long dwReason ) const;
		bool LockWorkStation( void ) const;
		bool ShutdownBlockReasonCreate( COSWindow::refType Wnd, const wchar_t* pwszReason ) const;
		bool ShutdownBlockReasonDestroy( COSWindow::refType Wnd ) const;
		CWString ShutdownBlockReasonQuery( COSWindow::refType Wnd ) const;
		bool EnumWindowStationsT( WindowStationEnumCallback lpEnumFunc, Cmp_long_ptr lParam ) const;
		bool AbortSystemShutdownT( const TCHAR* lpMachineName ) const;
		bool InitiateShutdownT( const TCHAR* lpMachineName, const TCHAR* lpMessage, unsigned long dwGracePeriod, unsigned long dwShutdownFlags, unsigned long dwReason ) const;
		bool LogonUserT( wchar_t* lpszUsername, wchar_t* lpszDomain, wchar_t* lpszPassword, unsigned long dwLogonType, unsigned long dwLogonProvider, nsWin32::TOKEN_GROUPS* pTokenGroups, void** phToken, void** ppLogonSid, void** ppProfileBuffer, unsigned long* pdwProfileLength, nsWin32::QuotaLimits* pQuotaLimits ) const;
		unsigned long MSChapSrvChangePassword( wchar_t* ServerName, wchar_t* UserName, unsigned char LmOldPresent, LMOWFPassword* LmOldOwfPassword, LMOWFPassword* LmNewOwfPassword, NTOWFPassword* NtOldOwfPassword, NTOWFPassword* NtNewOwfPassword ) const;
		unsigned long MSChapSrvChangePassword2( wchar_t* ServerName, wchar_t* UserName, SamprEncryptedUserPassword* NewPasswordEncryptedWithOldNt, 
			EncryptedNTOWFPassword* OldNtOwfPasswordEncryptedWithNewNt, unsigned char LmPresent, SamprEncryptedUserPassword* NewPasswordEncryptedWithOldLm, EncryptedLMOWFPassword* OldLmOwfPasswordEncryptedWithNewLmOrNt ) const;
			
	private:

		nsWinQAPI::CUser32& m_User32Library;
		nsWinQAPI::CAdvAPI32& m_AdvAPI32Library;

		__QCS_DECLARE_NONCOPYABLE( CSessionHelper );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE(__WINQL) CShutdownBlock
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CShutdownBlock);

		CShutdownBlock(const CSession& Session, COSWindow::refType Wnd, const wchar_t* pwszReason);
		~CShutdownBlock();

		CWString QueryReason( void );
		bool Status(void);

	private:

		CShutdownBlock();
		CShutdownBlock(const CShutdownBlock&);
		CShutdownBlock& operator = (const CShutdownBlock&);
		const CSession& m_Session;
		bool m_bStatus;
		COSWindow::refType m_WndShutdownBlock;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSession : public CSessionHelper
	{

	public:

		__QOR_DECLARE_OCLASS_ID(CSession);

		friend class CShutdownBlock;
		
		CSession();
		CSession(CSession&& move);
		CSession& operator = (CSession&& move);
		virtual ~CSession();
		nsCodeQOR::CTRef<CShutdownBlock> ShutdownBlock(COSWindow::refType Wnd, const wchar_t* pwszReason);
		CUser& User( void );

	protected:			

		bool BlockShutdown(COSWindow::refType Wnd, const wchar_t* pwszReason) const;
		bool ReleaseShutdown(COSWindow::refType Wnd) const;
		CWString QueryShutdownBlockReason(COSWindow::refType Wnd) const;

		CUser m_User;

	private:

		__QCS_DECLARE_NONCOPYABLE( CSession );
	};

}//nsWin32


#endif//WINQL_OSSERV_SESSION_H_3
