//WinQLBluetooth.h

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//WinQL Bluetooth Subsystem

#ifndef WINQL_SUBSYS_BLUETOOTH_H_1
#define WINQL_SUBSYS_BLUETOOTH_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "AppocritaQOR/Application.h"
#include "AppocritaQOR/SubSystem.h"
#include "WinQL/CodeServices/Handles/WinQLHandle.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/Threading/WinQLSynchronization.h"
#include "WinQL/Application/Comms/Bluetooth/WinQLBluetoothHost.h"
#include "WinQL/GUI/Controllers/Parts/DeviceChangeController.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CWin32Application;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CBluetooth : public nsQOR::CSubSystem
	{
	public:

		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE( __WINQL ) CHostWindowClass : public CWindowClass
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CHostWindowClass );

			__QOR_IMPL_REF( CHostWindowClass );


			CHostWindowClass();
			virtual ~CHostWindowClass();

			virtual const TCHAR* Name( void );
		};

		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE( __WINQL ) CDeviceChange : public CDeviceChangeController
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CDeviceChange );

			CDeviceChange( CBluetooth& Host, nsMammut::CModel* pModelItem, nsQOR::CController::ref_type Parent );
			~CDeviceChange();

			virtual long OnDeviceChange( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );

		private:

			long OnDBTCustomEvent( sDeviceBroadcastHeader* pDeviceBroadcastHeader );
			CBluetooth& m_Host;
		};

		typedef std::map< const BluetoothAddr, CBluetoothRemoteDevice::refType > AddrDeviceMapType;
		typedef std::vector< CBluetoothRadio::refType > VecRadiosType;
		typedef std::map< void*, CBluetoothRadio* > HandleRadioMapType;
		typedef std::map< nsCodeQOR::mxGUID, CBluetoothClient* > ServiceClientClassMapType;

		//--------------------------------------------------------------------------------
		enum eScanState
		{
			eInitial,
			eFirst,
			eNext,
			eLast,
		};

		__QOR_DECLARE_OCLASS_ID( CBluetooth );

		__QOR_IMPL_REF( CBluetooth );

		static nsCodeQOR::CTExternalRegEntry< CBluetooth > RegEntry;

		static CHostWindowClass s_WindowClass;

		CBluetooth();
		~CBluetooth();

		virtual void Setup( nsQOR::IApplication& Applicaton );
		virtual void Shutdown( nsQOR::IApplication& Application );

		long OnHCIEvent( BluetoothHCIEventInfo* pEventInfo, void* pRadioHandle );
		long OnL2CAPEvent( BluetoothL2CAPEventInfo* pEventInfo, void* pRadioHandle );
		long OnDeviceInRange( BluetoothRadioInRange* pEventInfo, void* pRadioHandle );
		long OnDeviceOutOfRange( BluetoothAddress* pEventInfo, void* pRadioHandle );

	private:

		void EnumerateRadios( void );
		CBluetoothRadio::refType RadioFromHandle( void* pRadioHandle );

		nsWinQAPI::CBthProps& m_Library;
		COSWindow* m_pHostWindow;
		CDeviceChange m_DeviceChangeController;
		eScanState m_ScanState;
		HandleRadioMapType m_MapRadioHandles;
		AddrDeviceMapType m_MapRemoteDevices;
		CBaseWindowController m_BaseWindowController;
		VecRadiosType m_VecRadios;
		//CAuthenticateSession m_AuthenticationSession;
	};

}//nsWin32

#endif//WINQL_SUBSYS_BLUETOOTH_H_1
