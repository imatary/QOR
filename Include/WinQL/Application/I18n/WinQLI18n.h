//WinQLI18n.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Internationalization

#ifndef WINQL_OSSERV_I18N_H_3
#define WINQL_OSSERV_I18N_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/System/Clock/WinQLTime.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CCodePage;


	typedef int ( __QCMP_STDCALLCONVENTION *CalInfoEnumCallback )( TCHAR* );
	typedef int ( __QCMP_STDCALLCONVENTION *CalInfoEnumCallbackEx )( TCHAR*, unsigned long );
	typedef int ( __QCMP_STDCALLCONVENTION *CalInfoEnumCallbackExEx )( wchar_t*, unsigned long, wchar_t*, Cmp_long_ptr );
	typedef int ( __QCMP_STDCALLCONVENTION *DateFormatEnumCallback )( TCHAR* );
	typedef int ( __QCMP_STDCALLCONVENTION *DateFormatEnumCalbackEx )( TCHAR*, unsigned long );
	typedef int ( __QCMP_STDCALLCONVENTION *DateFormatEnumCallbackExEx )( wchar_t*, unsigned long, Cmp_long_ptr );
	typedef int ( __QCMP_STDCALLCONVENTION *TimeFmtEnumCallback )( TCHAR* );
	typedef int ( __QCMP_STDCALLCONVENTION *TimeFmtEnumCallbackEx )( wchar_t*, Cmp_long_ptr );

	typedef int ( __QCMP_STDCALLCONVENTION *LangGroupLocaleEnumCallback )( unsigned long, unsigned long, TCHAR*, Cmp_long_ptr );
	typedef int ( __QCMP_STDCALLCONVENTION *CodePageEnumCallback )( TCHAR* );
	typedef int ( __QCMP_STDCALLCONVENTION *GeoEnumCallback )( long );
	typedef int ( __QCMP_STDCALLCONVENTION *LanguageGroupEnumCallback )( unsigned long, TCHAR*, TCHAR*, unsigned long, Cmp_long_ptr );
	typedef int ( __QCMP_STDCALLCONVENTION *LocaleEnumCallback )( TCHAR* );
	typedef int ( __QCMP_STDCALLCONVENTION *LocaleEnumCallbackA )( char* );
	typedef int ( __QCMP_STDCALLCONVENTION *LocaleEnumCallbackW )( wchar_t* );
	typedef int ( __QCMP_STDCALLCONVENTION *LocaleEnumCallbackEx )( wchar_t*, unsigned long, Cmp_long_ptr );

	typedef enum _NORM_FORM 
	{
		NormalizationOther  = 0,
		NormalizationC  = 0x1,
		NormalizationD  = 0x2,
		NormalizationKC  = 0x5,
		NormalizationKD  = 0x6
	}NORM_FORM;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CCalendarHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CCalendarHelper );

		CCalendarHelper();
		~CCalendarHelper();

		bool AdjustCalendarDate( CalDateTime& CalDateTime, int calUnit, int amount );
		bool ConvertCalDateTimeToSystemTime( const CalDateTime& CalDateTime, SystemTime& SysTime );
		bool ConvertSystemTimeToCalDateTime( const SystemTime& SysTime, unsigned long calId, CalDateTime& CalDateTime );
		bool EnumCalendarInfoT( CalInfoEnumCallback pCalInfoEnumProc, unsigned long Locale, unsigned long Calendar, unsigned long CalType );
		bool EnumCalendarInfoExT( CalInfoEnumCallbackEx pCalInfoEnumProcEx, unsigned long Locale, unsigned long Calendar, unsigned long CalType );
		bool EnumCalendarInfoExEx( CalInfoEnumCallbackExEx pCalInfoEnumProcExEx, const wchar_t* lpLocaleName, unsigned long Calendar, const wchar_t* lpReserved, unsigned long CalType, Cmp_long_ptr lParam );

		bool EnumDateFormatsT( DateFormatEnumCallback lpDateFmtEnumProc, unsigned long Locale, unsigned long dwFlags );
		bool EnumDateFormatsExT( DateFormatEnumCalbackEx lpDateFmtEnumProcEx, unsigned long Locale, unsigned long dwFlags );
		bool EnumDateFormatsExEx ( DateFormatEnumCallbackExEx lpDateFmtEnumProcExEx, const wchar_t* lpLocaleName, unsigned long dwFlags, Cmp_long_ptr lParam );

		bool EnumTimeFormatsT( TimeFmtEnumCallback lpTimeFmtEnumProc, unsigned long Locale, unsigned long dwFlags );
		bool EnumTimeFormatsEx( TimeFmtEnumCallbackEx lpTimeFmtEnumProcEx, const wchar_t* lpLocaleName, unsigned long dwFlags, Cmp_long_ptr lParam );

		bool GetCalendarDateFormatEx( const wchar_t* lpszLocale, unsigned long dwFlags, const CalDateTime* lpCalDateTime, const wchar_t* lpFormat, CWStringRef strDate );
		int GetCalendarInfoT( unsigned long Locale, unsigned long Calendar, unsigned long CalType, CTStringRef strCalData, unsigned long& Value );
		int GetCalendarInfoExT( const wchar_t* lpLocaleName, unsigned long Calendar, unsigned long CalType, CWStringRef strCalData, unsigned long& Value );
		bool GetCalendarSupportedDateRange( unsigned long Calendar, CalDateTime& CalMinDateTime, CalDateTime& CalMaxDateTime );
		int GetDateFormatT( unsigned long Locale, unsigned long dwFlags, const SystemTime* lpDate, const TCHAR* lpFormat, CTStringRef strDate );
		int GetDateFormatEx( const wchar_t* lpLocaleName, unsigned long dwFlags, const SystemTime& Date, const wchar_t* lpFormat, CWStringRef strDate, const wchar_t* lpCalendar );
		int GetDurationFormat( unsigned long Locale, unsigned long dwFlags, const SystemTime& Duration, Cmp_unsigned__int64 ullDuration, const wchar_t* lpFormat, CWStringRef strDuration );
		int GetDurationFormatEx( const wchar_t* lpLocaleName, unsigned long dwFlags, const SystemTime& Duration, Cmp_unsigned__int64 ullDuration, const wchar_t* lpFormat, CWStringRef strDuration );
		int GetTimeFormatT( unsigned long Locale, unsigned long dwFlags, const SystemTime& Time, const TCHAR* lpFormat, CTStringRef strTime );
		int GetTimeFormatEx( const wchar_t* lpLocaleName, unsigned long dwFlags, const SystemTime& Time, const wchar_t* lpFormat, CWStringRef strTime );
		bool IsCalendarLeapYear( unsigned long calId, unsigned int year, unsigned int era );
		int SetCalendarInfoT( unsigned long Locale, unsigned long Calendar, unsigned long CalType, const TCHAR* lpCalData );
		bool UpdateCalendarDayOfWeek( CalDateTime& CalDateTime );

	private:

		CCalendarHelper( const CCalendarHelper& );
		CCalendarHelper& operator = ( const CCalendarHelper& );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CLocaleHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CLocaleHelper );

		__QCMP_STATIC_CONSTANT( unsigned long, LGrpId_Installed		= 0x00000001 );// installed language group ids
		__QCMP_STATIC_CONSTANT( unsigned long, LGrpId_Supported		= 0x00000002 );// supported language group ids

		//--------------------------------------------------------------------------------
		enum eLanguageGroup
		{
			LangGroup_Arabic					= 0x000d,
			LangGroup_Armenian					= 0x0011,
			LangGroup_Baltic					= 0x0003,
			LangGroup_Central_Europe			= 0x0002,
			LangGroup_Cyrillic					= 0x0005,
			LangGroup_Georgian					= 0x0010,
			LangGroup_Greek						= 0x0004,
			LangGroup_Hebrew					= 0x000c,
			LangGroup_Indic						= 0x000f,
			LangGroup_Japanese					= 0x0007,
			LangGroup_Korean					= 0x0008,
			LangGroup_Simplified_Chinese		= 0x000a,
			LangGroup_Traditional_Chinese		= 0x0009,
			LangGroup_Thai						= 0x000b,
			LangGroup_Turkic					= 0x0006,
			LangGroup_Turkish					= 0x0006,
			LangGroup_Vietnamese				= 0x000e,
			LangGroup_Western_Europe			= 0x0001,
		};
			
		CLocaleHelper();
		~CLocaleHelper();
		int CompareStringOrdinal ( const wchar_t* lpString1, int cchCount1, const wchar_t* lpString2, int cchCount2, bool bIgnoreCase ) const;
		unsigned long ConvertDefaultLocale( unsigned long Locale ) const;// default locale 
		bool EnumLanguageGroupLocalesT( LangGroupLocaleEnumCallback pLangGroupLocaleEnumProc, eLanguageGroup LanguageGroup, Cmp_long_ptr lParam ) const;
		bool EnumSystemCodePagesT( CodePageEnumCallback lpCodePageEnumProc, unsigned long dwFlags ) const;
		bool EnumSystemGeoID( unsigned long GeoClass, long ParentGeoId, GeoEnumCallback lpGeoEnumProc ) const;
		bool EnumSystemLanguageGroupsT( LanguageGroupEnumCallback pLangGroupEnumProc, unsigned long dwFlags, Cmp_long_ptr lParam ) const;
		bool EnumSystemLocalesA( LocaleEnumCallbackA lpLocaleEnumProc, unsigned long dwFlags ) const;
		bool EnumSystemLocalesT( LocaleEnumCallback lpLocaleEnumProc, unsigned long dwFlags ) const;
		bool EnumSystemLocalesW( LocaleEnumCallbackW lpLocaleEnumProc, unsigned long dwFlags ) const;
		bool EnumSystemLocalesEx( LocaleEnumCallbackEx lpLocaleEnumProcEx, unsigned long dwFlags, Cmp_long_ptr lParam ) const;
		int FindNLSString ( unsigned long Locale, unsigned long dwFindNLSStringFlags, const wchar_t* lpStringSource, int cchSource, const wchar_t* lpStringValue, int cchValue, int* pcchFound ) const;
		int FindNLSStringEx ( const wchar_t* lpLocaleName, unsigned long dwFindNLSStringFlags, const wchar_t* lpStringSource, int cchSource, const wchar_t* lpStringValue, int cchValue, int* pcchFound, NLSVersionInfo* lpVersionInformation, void* lpReserved, Cmp_long_ptr lParam ) const;
		unsigned int GetACP( void ) const;
		nsCodeQOR::CTLRef< CPInfo > GetCPInfo( CCodePage& CodePage ) const;
		nsCodeQOR::CTLRef< CPInfoEx > GetCPInfoExT( CCodePage& CodePage ) const;
		int GetCurrencyFormatT( unsigned long Locale, unsigned long dwFlags, const TCHAR* lpValue, const CURRENCYFMT& Format, CTStringRef strCurrency ) const;
		int GetCurrencyFormatEx( const wchar_t* lpLocaleName, unsigned long dwFlags, const wchar_t* lpValue, const CURRENCYFMTW& Format, CWStringRef strCurrency ) const;
		CTString GetGeoInfoT( long GeoId, unsigned long GeoType, unsigned short language ) const;
		int GetLocaleInfoT( unsigned long Locale, unsigned long LCType, CTStringRef strLCData ) const;
		int GetLocaleInfoA( unsigned long Locale, unsigned long LCType, CAStringRef strLCData ) const;
		int GetLocaleInfoW( unsigned long Locale, unsigned long LCType, CWStringRef strLCData ) const;
		int GetLocaleInfoEx( const wchar_t* lpLocaleName, unsigned long LCType, CWStringRef strLCData ) const;
		bool GetNLSVersion( unsigned long Function, unsigned long Locale, NLSVersionInfo& VersionInformation ) const;
		bool GetNLSVersionEx( unsigned long function, const wchar_t* lpLocaleName, NLSVersionInfoEx& VersionInformation ) const;
		int GetNumberFormatT( unsigned long Locale, unsigned long dwFlags, const TCHAR* lpValue, const NUMBERFMT& Format, CTStringRef NumberStr ) const;
		int GetNumberFormatEx( const wchar_t* lpLocaleName, unsigned long dwFlags, const wchar_t* lpValue, const NUMBERFMTW& Format, CWStringRef NumberStr ) const;
		unsigned int GetOEMCP( void ) const;
		int GetStringScripts( unsigned long dwFlags, const wchar_t* lpString, int cchString, CWStringRef strScripts ) const;
		unsigned short GetSystemDefaultLangID( void ) const;
		unsigned long GetSystemDefaultLCID( void ) const;
		int GetSystemDefaultLocaleName( CWStringRef strLocaleName ) const;
		unsigned long GetThreadLocale( void ) const;
		unsigned short GetUserDefaultLangID( void ) const;
		unsigned long GetUserDefaultLCID( void ) const;
		CWString GetUserDefaultLocaleName() const;
		long GetUserGeoID( unsigned long GeoClass ) const;
		int IdnToAscii( unsigned long dwFlags, const wchar_t* lpUnicodeCharStr, int cchUnicodeChar, CWStringRef strASCIIChar ) const;
		int IdnToNameprepUnicode( unsigned long dwFlags, const wchar_t* lpUnicodeCharStr, int cchUnicodeChar, CWStringRef strNameprepChar ) const;
		int IdnToUnicode( unsigned long dwFlags, const wchar_t* lpASCIICharStr, int cchASCIIChar, CWStringRef strUnicodeChar ) const;
		bool IsNLSDefinedString( unsigned long Function, unsigned long dwFlags, NLSVersionInfo& VersionInfo, const wchar_t* lpString, int cchStr ) const;
		bool IsNormalizedString( NORM_FORM NormForm, const wchar_t* lpString, int cwLength ) const;
		bool IsValidCodePage( unsigned int CodePageID ) const;
		bool IsValidLanguageGroup( unsigned long LanguageGroup, unsigned long dwFlags ) const;
		bool IsValidLocale( unsigned long Locale, unsigned long dwFlags ) const;
		bool IsValidLocaleName( const wchar_t* lpLocaleName ) const;
		int LCIDToLocaleName( unsigned long Locale, CWStringRef strName, unsigned long dwFlags ) const;
		int LCMapStringT( unsigned long Locale, unsigned long dwMapFlags, const TCHAR* lpSrcStr, int cchSrc, CTStringRef strDestStr ) const;
		int LCMapStringA( unsigned long Locale, unsigned long dwMapFlags, const char* lpSrcStr, int cchSrc, CAStringRef strDestStr ) const;
		int LCMapStringW( unsigned long Locale, unsigned long dwMapFlags, const wchar_t* lpSrcStr, int cchSrc, CWStringRef strDestStr ) const;
		int LCMapStringEx( const wchar_t* lpLocaleName, unsigned long dwMapFlags, const wchar_t* lpSrcStr, int cchSrc, wchar_t* lpDestStr, int cchDest, NLSVersionInfo* lpVersionInformation, void* lpReserved, Cmp_long_ptr lParam ) const;
		unsigned long LocaleNameToLCID( wchar_t* lpName, unsigned long dwFlags ) const;
		int NormalizeString( NORM_FORM NormForm, const wchar_t* lpSrcString, int cwSrcLength, CWStringRef strDst ) const;
		bool SetLocaleInfoT( unsigned long Locale, unsigned long LCType, const TCHAR* lpLCData ) const;
		bool SetThreadLocale( unsigned long Locale ) const;
		bool SetUserGeoID( long GeoID ) const;
		bool VerifyScripts( unsigned long dwFlags, const wchar_t* lpLocaleScripts, int cchLocaleScripts, const wchar_t* lpTestScripts, int cchTestScripts ) const;
	};

}//nsWin32

#endif//WINQL_OSSERV_I18N_H_3
