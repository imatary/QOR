//MenuController.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//GUI Controller for Menu

#ifndef WINQL_GUI_CONTROLLER_MENU_H_3
#define WINQL_GUI_CONTROLLER_MENU_H_3

#include "WinQL/GUI/Views/InteractiveWindowView.h"
#include "WinQL/GUI/Controllers/Parts/BaseWindowPartController.h"

#if		( WINVER < 0x0500 )

typedef struct tagMENUGETOBJECTINFO 
{
  unsigned long  dwFlags;
  unsigned int  uPos;
  nsWin32::MenuHandle  hmenu;
  PVOID  riid;
  PVOID  pvObj;
} MENUGETOBJECTINFO, *PMENUGETOBJECTINFO;

#	define MNGO_NOINTERFACE     0x00000000
#	define MNGO_NOERROR         0x00000001

#define MND_CONTINUE       0
#define MND_ENDMENU        1

#endif//( WINVER < 0x0500 )


//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CMenuController : public CBaseWindowPartController
	{
	public:

		//--------------------------------------------------------------------------------
		struct MDINextMenu	//MDINEXTMENU
		{
			void*   hmenuIn;
			void*   hmenuNext;
			void*   hwndNext;
		};

		//--------------------------------------------------------------------------------
		struct MenuGetObjectInfo	//MENUGETOBJECTINFO
		{
			unsigned long dwFlags;
			unsigned int uPos;
			void* hmenu;
			void* riid;
			void* pvObj;
		};

		__QOR_DECLARE_OCLASS_ID( CMenuController );

		CMenuController( nsMammut::CModel* pModelItem = 0, nsQOR::CController::ref_type Parent = 0 );
		virtual ~CMenuController();

		virtual bool ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
			
		virtual void OnContextMenu( COSWindow& Window, COSWindow::refType refWnd, unsigned short wXPos, unsigned short wYPos );
		virtual void OnInitMenu( COSWindow& Window, CMenu::refType refMenu );
		virtual void OnInitMenuPopup( COSWindow& Window, CMenu::refType hMenu, unsigned short wPos, bool bWindowMenu );
		virtual void OnMenuSelect( COSWindow& Window, CMenu::refType hMenu, unsigned short wIndex, unsigned short wFlags );
		virtual long OnMenuChar( COSWindow& Window, CMenu::refType hMenu, unsigned short wCharCode, unsigned short wMenuType );
		virtual void OnNextMenu( COSWindow& Window, Cmp_uint_ptr wParam, CMenu::refType refMenuIn, CMenu::refType refNextMenu );
		virtual long OnGetObject( COSWindow& Window, MenuGetObjectInfo* pMenuObjectInfo );
		virtual void OnRButtonUp( COSWindow& Window, CMenu::refType hMenu, Cmp_uint_ptr wParam );
		virtual void OnMenuCommand( COSWindow& Window, CMenu::refType hMenu, int iIndex, unsigned short wItemID );
		virtual long OnMenuDrag( COSWindow& Window, CMenu::refType hMenu, unsigned short wParam );
		virtual void OnDestroyedMenuPopup( COSWindow& Window, CMenu::refType hMenu, unsigned short wDestroyedMenu );
		virtual void OnCommand( COSWindow& Window, unsigned short wMenuID );

	};

}//nsWin32

#endif//WINQL_GUI_CONTROLLER_MENU_H_3
