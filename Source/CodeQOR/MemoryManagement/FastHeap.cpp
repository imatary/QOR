//FastHeap.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"
//#include <stdio.h>
#include "CodeQOR/MemoryManagement/FastHeap.h"
#include "CodeQOR/MemoryManagement/ManagedAllocator.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CFastHeap::CFastHeap()
	{					
		m_ulAllocIndex = 0;
		Cmp_uint_ptr uiBucketSize = 1;
		for( Cmp_uint_ptr uiBucket = 0; uiBucket < suiRootBuckets; uiBucket++ )
		{
			m_InitialPages[ uiBucket ].SetSize( uiBucketSize );
			uiBucketSize *= 4;
		}
		m_InitialPages[ 0 ].Initialise();
	}

	//--------------------------------------------------------------------------------
	CFastHeap::~CFastHeap()
	{
	}

	//--------------------------------------------------------------------------------
	CFastBucket* CFastHeap::Bucket( Cmp_uint_ptr uiAllocSize )
	{
		Cmp_uint_ptr uiBasePage = 0;
		CFastBucket* pBucket = &m_InitialPages[ uiBasePage ];
		while( ( uiBasePage++ < suiRootBuckets ) && ( ( uiAllocSize * 2 ) > pBucket->PageSize() ) )
		{				
			pBucket = &m_InitialPages[ uiBasePage ];|
		}
		if( uiBasePage < suiRootBuckets )
		{
			pBucket->Initialise();
		}
		else
		{
			pBucket = 0;
		}
		return pBucket;
	}

	//--------------------------------------------------------------------------------
	void CFastHeap::Analyse( void(*pTrace)( char* ) )
	{
		/*
		char Buffer[ 2048 ];

		int iPages = 0;
		Cmp_uint_ptr uiObjects = 0;
		Cmp_uint_ptr uiSpace = 0;
		for( unsigned int uiBasePage = 0; uiBasePage < suiRootBuckets; uiBasePage++ )
		{
			CFastBucket* pBucket = &m_InitialPages[ uiBasePage ];
			if( pBucket )
			{
				uiObjects += pBucket->AllocatedItems();
				iPages += pBucket->AllocatedPages();
				uiSpace += pBucket->AllocatedSpace();
				sprintf( Buffer, "Bucket %u :-", uiBasePage );
				(pTrace)( Buffer );
				pBucket->Analyse( pTrace );
			}
		}

		sprintf( Buffer, "Fast Heap consists of %d pages in %u buckets managing the %u bytes of %u objects in %u bytes of system memory.", iPages, suiRootBuckets, m_uiTotalAlloc, uiObjects, uiSpace );		
		(pTrace)( Buffer );
		*/
	}

}//nsCodeQOR
