//WinQLHeap.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_CODESERV_HEAP_H_1
#define WINQL_CODESERV_HEAP_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "CodeQOR/ClassReg/ClassRegEntry.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef enum _HEAP_INFORMATION_CLASS 
	{
		HeapCompatibilityInformation,
		HeapEnableTerminationOnCorruption
	} HEAP_INFORMATION_CLASS;

	//--------------------------------------------------------------------------------
	typedef struct _PROCESS_HEAP_ENTRY 
	{
		void* lpData;
		unsigned long cbData;
		unsigned char cbOverhead;
		unsigned char iRegionIndex;
		unsigned short wFlags;
		union 
		{
			struct 
			{
				void* hMem;
				unsigned long dwReserved[ 3 ];
			} Block;
			struct 
			{
				unsigned long dwCommittedSize;
				unsigned long dwUnCommittedSize;
				void* lpFirstBlock;
				void* lpLastBlock;
			} Region;
		} DUMMYUNIONNAME;
	} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CHeap
	{
	public:

		//--------------------------------------------------------------------------------
		enum eAllocFlags
		{
			Generate_Exceptions		= 0x00000004,
			No_Serialize			= 0x00000001,
			Zero_Memory				= 0x00000008,
		};

		__QOR_DECLARE_OCLASS_ID( CHeap );

		CHeap();
		CHeap( unsigned long flOptions, Cmp_ulong_ptr dwInitialSize, Cmp_ulong_ptr dwMaximumSize );
		virtual ~CHeap();
		bool QueryInformation ( nsWin32::HEAP_INFORMATION_CLASS HeapInformationClass, void* HeapInformation, Cmp_ulong_ptr HeapInformationLength, Cmp_ulong_ptr* ReturnLength ) const;
		bool Lock() const;
		bool Unlock() const;
		void* Alloc( unsigned long dwFlags, Cmp_ulong_ptr dwBytes ) const;
		bool Free( unsigned long dwFlags, void* lpMem ) const;
		Cmp_ulong_ptr Compact( unsigned long dwFlags ) const;
		void* ReAlloc( unsigned long dwFlags, void* lpMem, Cmp_ulong_ptr dwBytes ) const;
		bool SetInformation( nsWin32::HEAP_INFORMATION_CLASS HeapInformationClass, void* HeapInformation, Cmp_ulong_ptr HeapInformationLength ) const;
		Cmp_ulong_ptr Size( unsigned long dwFlags, const void* lpMem ) const;
		bool Validate( unsigned long dwFlags, const void* lpMem ) const;
		bool Walk( nsWin32::LPPROCESS_HEAP_ENTRY lpEntry ) const;
		static unsigned long GetProcessHeaps( unsigned long NumberOfHeaps, void** ProcessHeaps );

	private:

		bool m_bDefault;
		void*  m_hHeap;

		__QCS_DECLARE_NONCOPYABLE( CHeap );
	};

}//nsWin32

#endif//WINQL_CODESERV_HEAP_H_1
