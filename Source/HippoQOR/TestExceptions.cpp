//TestExceptions.cpp

// Copyright Querysoft Limited 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "HippoQOR/TestExceptions.h"
#include "HippoQOR/print_arg.h"
#include "HippoQOR/tuple.h"
#include "HippoQOR/MockRepository.h"

//------------------------------------------------------------------------------
namespace nsUnitTesting
{
	//------------------------------------------------------------------------------
	void BaseException::setException(const char *description, MockRepository *repo) 
	{
		std::stringstream text;
		text << description;
		text << *repo;
		std::string result = text.str();
		strncpy(buffer, result.c_str(), sizeof(buffer)-1);
		//buffer[sizeof(buffer)-1] = '\0';
	}

	//------------------------------------------------------------------------------
	ExpectationException::ExpectationException( MockRepository* repo, const base_tuple* tuple, const char* funcName )
	{
		std::stringstream text;
		text << "Function ";
		text << funcName;
		if (tuple)
		tuple->printTo(text);
		else
		text << "(...)";
		text << " called with mismatching expectation!" << std::endl;
		std::string description = text.str();
		setException(description.c_str(), repo);
	}

	//------------------------------------------------------------------------------
	NotImplementedException::NotImplementedException( MockRepository* repo )
	{
		setException( "Function called without expectation!", repo );
	}

	//------------------------------------------------------------------------------
	CallMissingException::CallMissingException( MockRepository* repo )
	{
		setException("Function with expectation not called!", repo);
	}

	//------------------------------------------------------------------------------
	const char* NoResultSetUpException::what() const throw() 
	{ 
		return buffer; 
	}

	//------------------------------------------------------------------------------
	NoResultSetUpException::NoResultSetUpException( const base_tuple* tuple, const char* funcName )
	{
		std::stringstream text;
		text << "No result set up on call to ";
		text << funcName;
		if( tuple )
		{
			tuple->printTo(text);
		}
		else
		{
			text << "(...)";
		}
		text << std::endl;
		std::string result = text.str();
		strncpy( buffer, result.c_str(), sizeof(buffer)-1 );
	}


}//nsUnitTesting

