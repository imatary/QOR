//WinQLDeviceFile.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/WinQLDevice.h"
#include "WinQL/System/Devices/WinQLDeviceFile.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/SetupAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceFile );

	//--------------------------------------------------------------------------------
	CDeviceFile::~CDeviceFile()
	{
		_WINQ_FCONTEXT( "CDeviceFile::~CDeviceFile" );
	}

	//--------------------------------------------------------------------------------
	CDeviceHandle::ref_type CDeviceFile::Handle()
	{
		_WINQ_FCONTEXT( "CDeviceFile::Handle" );
		CDeviceHandle::ref_type refHandle( &m_Handle );
		return refHandle;
	}

	//protected:
	//--------------------------------------------------------------------------------
	CDeviceFile::CDeviceFile()
	{
		_WINQ_FCONTEXT( "CDeviceFile::CDeviceFile" );
	}

	//--------------------------------------------------------------------------------
	CDeviceFile::CDeviceFile( const TCHAR* pDeviceName, unsigned long dwDesiredAccess, unsigned long dwShareMode, unsigned long dwFlagsAndAttributes )
	{
		_WINQ_FCONTEXT( "CDeviceFile::CDeviceFile" );
		__QOR_PROTECT
		{				
			m_Handle = CKernel32::CreateFile( pDeviceName, dwDesiredAccess, dwShareMode, 0, OPEN_EXISTING, dwFlagsAndAttributes, 0 );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CDeviceFile::CDeviceFile( CDeviceHandle& hExisting )
	{
		_WINQ_FCONTEXT( "CDeviceFile::CDeviceFile" );

		m_Handle = hExisting;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceFile::Read( void* lpBuffer, unsigned long nNumberOfBytesToRead, unsigned long* lpNumberOfBytesRead, nsWin32::LPOVERLAPPED lpOverlapped )
	{
		_WINQ_FCONTEXT( "CDeviceFile::Read" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReadFile( m_Handle.Use(), lpBuffer, nNumberOfBytesToRead, lpNumberOfBytesRead, reinterpret_cast< ::LPOVERLAPPED >( lpOverlapped ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceFile::ReadEx( void* lpBuffer, unsigned long nNumberOfBytesToRead, nsWin32::LPOVERLAPPED lpOverlapped, nsWin32::LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_FCONTEXT( "CDeviceFile::ReadEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReadFileEx( m_Handle.Use(), lpBuffer, nNumberOfBytesToRead, reinterpret_cast< ::LPOVERLAPPED >( lpOverlapped ), reinterpret_cast< ::LPOVERLAPPED_COMPLETION_ROUTINE >( lpCompletionRoutine ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceFile::Write( const void* lpBuffer, unsigned long nNumberOfBytesToWrite, unsigned long* lpNumberOfBytesWritten, nsWin32::LPOVERLAPPED lpOverlapped )
	{
		_WINQ_FCONTEXT( "CDeviceFile::Write" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WriteFile( m_Handle.Use(), lpBuffer, nNumberOfBytesToWrite, lpNumberOfBytesWritten, reinterpret_cast< ::LPOVERLAPPED >( lpOverlapped ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceFile::WriteEx( const void* lpBuffer, unsigned long nNumberOfBytesToWrite, nsWin32::LPOVERLAPPED lpOverlapped, nsWin32::LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_FCONTEXT( "CDeviceFile::WriteEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WriteFileEx( m_Handle.Use(), lpBuffer, nNumberOfBytesToWrite, reinterpret_cast< ::LPOVERLAPPED >( lpOverlapped ), reinterpret_cast< ::LPOVERLAPPED_COMPLETION_ROUTINE >( lpCompletionRoutine ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceFile::IsOpen()
	{
		_WINQ_FCONTEXT( "CDeviceFile::IsOpen" );
		return ( !Handle()->IsInvalid() && !Handle()->IsNull() );
	}

	//--------------------------------------------------------------------------------
	bool CDeviceFile::FlushBuffers()
	{
		_WINQ_FCONTEXT( "CDeviceFile::FlushBuffers" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FlushFileBuffers( m_Handle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceFile::GetType()
	{
		_WINQ_FCONTEXT( "CDeviceFile::GetType" );
		unsigned long ulResult = File_Type_Unknown;
		__QOR_PROTECT
		{
			ulResult = CKernel32::GetFileType( m_Handle.Use() );
		}__QOR_ENDPROTECT
		return ulResult;			
	}

	//--------------------------------------------------------------------------------
	bool CDeviceFile::SetEOF()
	{
		_WINQ_FCONTEXT( "CDeviceFile::SetEOF" );
		//Base Device File does not support setting physical file length
		return false;
	}

	//--------------------------------------------------------------------------------
	Cmp__int64 CDeviceFile::Seek( Cmp__int64 pos, int mthd )
	{
		return -1;
	}

	//--------------------------------------------------------------------------------
	Cmp__int64 CDeviceFile::Tell()
	{
		return Seek( 0, File_Current );
	}

	//--------------------------------------------------------------------------------
	bool CDeviceFile::SupportsPosition( void )
	{
		return false;
	}

}//nsWin32
