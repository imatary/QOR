//WinQLKeyboardInput.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Windows Keyboard

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "CompilerQOR.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE(__QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use")
#include "WinQL/System/Devices/Keyboard/WinQLHotKey.h"
__QCMP_WARNING_POP
#include "WinQL/Application/Threading/WinQLThread.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--HotKey------------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID(CHotKey);

	//--------------------------------------------------------------------------------
	CHotKey::CHotKey() : m_Library(CUser32::Instance())
	{
		_WINQ_FCONTEXT("CHotKey::CHotKey");
		m_id = 0;
		m_pbResult = 0;
	}

	//--------------------------------------------------------------------------------
	CHotKey::CHotKey(COSWindow::refType Wnd, int id, unsigned int fsModifiers, unsigned int vk, int* pbResult) : m_Library(CUser32::Instance())
	{
		_WINQ_FCONTEXT("CHotKey::CHotKey");
		m_id = id;
		m_Wnd = Wnd;
		m_pbResult = pbResult;
		BOOL bResult = FALSE;
		__QOR_PROTECT
		{
			bResult = m_Library.RegisterHotKey(reinterpret_cast< ::HWND >(m_Wnd->Handle()->Use()), m_id, fsModifiers, vk);
		if (m_pbResult != NULL)
		{
			*m_pbResult = bResult;
		}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CHotKey::CHotKey(const CHotKey& src) : m_Library(CUser32::Instance())
	{
		_WINQ_FCONTEXT("CHotKey::CHotKey");
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CHotKey& CHotKey::operator = (const CHotKey& src)
	{
		_WINQ_FCONTEXT("CHotKey::operator =");
		if (&src != this)
		{
			m_id = src.m_id;
			m_Wnd = src.m_Wnd;
			m_pbResult = src.m_pbResult;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CHotKey::~CHotKey()
	{
		_WINQ_FCONTEXT("CHotKey::~CHotKey");
		BOOL bResult = FALSE;
		__QOR_PROTECT
		{
			if (!m_Wnd.IsNull())
			{
				bResult = m_Library.UnregisterHotKey(reinterpret_cast< ::HWND >(m_Wnd->Handle()->Use()), m_id);
			}
		if (m_pbResult != NULL)
		{
			*m_pbResult = bResult;
		}
		}__QOR_ENDPROTECT
	}

	__QOR_IMPLEMENT_OCLASS_LUID(CHotKeys);

	//--------------------------------------------------------------------------------
	CHotKeys::CHotKeys() : nsCodeQOR::CTArray< CHotKey*, CPolicy >()
	{
	}

	//--------------------------------------------------------------------------------
	CHotKeys::~CHotKeys()
	{
	}

	//--------------------------------------------------------------------------------
	CHotKey::refType CHotKeys::CreateHotKey(COSWindow::refType Wnd, int id, unsigned int fsModifiers, unsigned int vk, int* pbResult)
	{
		CHotKey* pNewHotKey = new CHotKey(Wnd, id, fsModifiers, vk, pbResult);
		Append(pNewHotKey);
		return CHotKey::refType(pNewHotKey, true);
	}
}//nsWin32

