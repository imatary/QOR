//WinQLGlobalAtoms.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR/System.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/Atoms/WinQLGlobalAtoms.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CGlobalAtomTable );

	//--------------------------------------------------------------------------------
	CGlobalAtomTable::CGlobalAtomTable()
	{
		_WINQ_FCONTEXT( "CGlobalAtomTable::CGlobalAtomTable" );
	}

	//--------------------------------------------------------------------------------
	CGlobalAtomTable::~CGlobalAtomTable()
	{
		_WINQ_FCONTEXT( "CGlobalAtomTable::~CGlobalAtomTable" );
	}

	//--------------------------------------------------------------------------------
	CGlobalAtom CGlobalAtomTable::Add ( const TCHAR* lpString )
	{
		_WINQ_FCONTEXT( "CGlobalAtomTable::Add" );
		CGlobalAtom atom( 0 );
		__QOR_PROTECT
		{
			atom = CKernel32::GlobalAddAtom( lpString );
		}__QOR_ENDPROTECT
		return atom;
	}

	//--------------------------------------------------------------------------------
	void CGlobalAtomTable::Delete( CGlobalAtom& Atom )
	{
		_WINQ_FCONTEXT( "CGlobalAtomTable::Delete" );
		__QOR_PROTECT
		{
			CKernel32::GlobalDeleteAtom( Atom.m_usAtom );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CGlobalAtom CGlobalAtomTable::Find( const TCHAR* lpString )
	{
		_WINQ_FCONTEXT( "CGlobalAtomTable::Find" );
		CGlobalAtom atom( 0 );
		__QOR_PROTECT
		{
			atom = CKernel32::GlobalFindAtom( lpString );
		}__QOR_ENDPROTECT
		return atom;
	}

	//--------------------------------------------------------------------------------
	CTString CGlobalAtomTable::GetName( const CGlobalAtom& Atom )
	{
		_WINQ_FCONTEXT( "CGlobalAtomTable::GetName" );
		CTString strName;
		__QOR_PROTECT
		{			
			unsigned int uiResult = CKernel32::GlobalGetAtomName( Atom.m_usAtom, strName.GetBufferSetLength( MAX_PATH ), MAX_PATH );
			strName.ValidateBuffer( static_cast< unsigned short >( uiResult ) );
		}__QOR_ENDPROTECT
		return strName;
	}

	//--------------------------------------------------------------------------------
	CGlobalAtomTable::refType CGlobalAtomTable::Ref()
	{
		return refType( this );
	}


	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CGlobalAtom );

	//--------------------------------------------------------------------------------
	CGlobalAtom::refType CreateGlobalAtom( const CTString& strName )
	{
		_WINQ_SFCONTEXT( "CreateGlobalAtom" );
		return CGlobalAtom::refType( new CGlobalAtom( strName ), true );
	}

	//--------------------------------------------------------------------------------
	CGlobalAtom::CGlobalAtom( unsigned short usAtom ) : m_usAtom( usAtom )
	{
		_WINQ_FCONTEXT( "CGlobalAtom::CGlobalAtom" );
	}

	//--------------------------------------------------------------------------------
	CGlobalAtom::CGlobalAtom( const CGlobalAtom & src )
	{
		_WINQ_FCONTEXT( "CGlobalAtom::CGlobalAtom" );
		if( &src != this )
		{
			m_usAtom = src.m_usAtom;
			( const_cast< CGlobalAtom& >( src ) ).m_usAtom = 0;
		}
	}

	//--------------------------------------------------------------------------------
	CGlobalAtom::CGlobalAtom( const CTString& strName, bool bUseExisting ) : m_usAtom( 0 )
	{
		_WINQ_FCONTEXT( "CGlobalAtom::CGlobalAtom" );
		if( bUseExisting )
		{
			*this = TheSystem().As< nsWin32::CSystem >()->AtomTable( QOR_PP_SHARED_OBJECT_ACCESS ).Find( strName );
		}
		if( m_usAtom == 0 )
		{
			*this = TheSystem().As< nsWin32::CSystem >()->AtomTable( QOR_PP_SHARED_OBJECT_ACCESS ).Add( strName );
		}		
	}

	//--------------------------------------------------------------------------------
	CGlobalAtom::~CGlobalAtom()
	{
		_WINQ_FCONTEXT( "CGlobalAtom::~CGlobalAtom" );
		if( m_usAtom != 0 )
		{
			TheSystem().As< nsWin32::CSystem >()->AtomTable( QOR_PP_SHARED_OBJECT_ACCESS ).Delete( *this );
		}
	}

	//--------------------------------------------------------------------------------
	CGlobalAtom& CGlobalAtom::operator = ( const CGlobalAtom& src )
	{
		_WINQ_FCONTEXT( "CGlobalAtom::operator = " );
		m_usAtom = src.m_usAtom;
		(const_cast< CGlobalAtom& >( src )).m_usAtom = 0;
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTString CGlobalAtom::GetName( void )
	{
		_WINQ_FCONTEXT( "CGlobalAtom::GetName" );
		CTString strName = TheSystem().As< nsWin32::CSystem >()->AtomTable( QOR_PP_SHARED_OBJECT_ACCESS ).GetName( *this );
		return strName;
	}

}//nsWin32

