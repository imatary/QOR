//ParagraphBreakFilter.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "BluefootQOR/Filters/ParagraphBreakFilter.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	CParagraphBreakFilter::CParagraphBreakFilter() : CFilter()
	,	m_bHighBreak( false )
	,	m_Break( eCRLF )
	{
	}

	//------------------------------------------------------------------------------
	CParagraphBreakFilter::~CParagraphBreakFilter()
	{
	}

	//------------------------------------------------------------------------------
	CParagraphBreakFilter::CParagraphBreakFilter( const CParagraphBreakFilter& src ) : CFilter( src )
	{
	}

	//------------------------------------------------------------------------------
	CParagraphBreakFilter& CParagraphBreakFilter::operator = ( const CParagraphBreakFilter& src )
	{
		if( &src != this ){}
		return *this;
	}

	//------------------------------------------------------------------------------
	bool CParagraphBreakFilter::Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead )
	{
		bool bResult = false;

		//Read up to the number of code points 1-to-1 for the number of UTF-16 requested
		if( m_SinkProxy.GetSource()->Read( ulUnitsRead, ulUnitsToRead ) )
		{
			unsigned int* pCodePointBuffer = reinterpret_cast< unsigned int* >( m_SinkProxy.GetSource()->GetBuffer()->ReadRequest( ulUnitsToRead ) );

			for( ulUnitsRead = 0; ulUnitsRead < ulUnitsToRead; ulUnitsRead++ )
			{
				if( 
					( pCodePointBuffer[ ulUnitsRead ] == 0x13 && ( m_Break == eCR ) ) ||
					( pCodePointBuffer[ ulUnitsRead ] == 0x10 && ( m_Break == eLF ) ) ||
					( pCodePointBuffer[ ulUnitsRead ] == 0x10 && ( m_Break == eCRLF ) && m_bHighBreak ) )
				{
					m_bHighBreak = false;
					break;
				}
				else if( pCodePointBuffer[ ulUnitsRead ] == 0x13 && ( m_Break == eCRLF ) && !m_bHighBreak )
				{
					m_bHighBreak = true;
				}
				else	
				{
					if( m_bHighBreak )
					{
						m_CodePointParagraph.Append( pCodePointBuffer[ ulUnitsRead - 1 ] );
						m_bHighBreak = false;
					}
					m_CodePointParagraph.Append( pCodePointBuffer[ ulUnitsRead ] );				
				}
			}

			m_SinkProxy.GetSource()->GetBuffer()->ReadAcknowledge( ulUnitsRead );
			bResult = ulUnitsRead > 0 ? true : false;
		}

		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CParagraphBreakFilter::Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite )
	{
		unsigned int* pCodePointBuffer = reinterpret_cast< unsigned int* >( m_SinkProxy.GetSource()->GetBuffer()->ReadRequest( ulUnitsToWrite ) );

		for( ulUnitsWritten = 0; ulUnitsWritten < ulUnitsToWrite; ulUnitsWritten++ )
		{
			if( 
				( pCodePointBuffer[ ulUnitsWritten ] == 0x13 && ( m_Break == eCR ) ) ||
				( pCodePointBuffer[ ulUnitsWritten ] == 0x10 && ( m_Break == eLF ) ) ||
				( pCodePointBuffer[ ulUnitsWritten ] == 0x10 && ( m_Break == eCRLF ) && m_bHighBreak ) )
			{
				unsigned long ulUnitsInParagraph = 0;
				m_SourceProxy.GetSink()->Write( ulUnitsInParagraph, m_CodePointParagraph.Size() );
				m_CodePointParagraph.Clear();
				m_bHighBreak = false;
			}
			else if( pCodePointBuffer[ ulUnitsWritten ] == 0x13 && ( m_Break == eCRLF ) && !m_bHighBreak )
			{
				m_bHighBreak = true;
			}
			else	
			{
				if( m_bHighBreak )
				{
					m_CodePointParagraph.Append( pCodePointBuffer[ ulUnitsWritten - 1 ] );
					m_bHighBreak = false;
				}
				m_CodePointParagraph.Append( pCodePointBuffer[ ulUnitsWritten ] );				
			}
		}

		m_SinkProxy.GetSource()->GetBuffer()->ReadAcknowledge( ulUnitsWritten );
		return ulUnitsWritten > 0 ? true : false;
	}

	//------------------------------------------------------------------------------
	void CParagraphBreakFilter::SetBreak( CParagraphBreakFilter::eBreak Break )
	{
		m_Break = Break;
	}

	//------------------------------------------------------------------------------
	CParagraphBreakFilter::eBreak CParagraphBreakFilter::GetBreak( void )
	{
		return m_Break;
	}

}//nsBluefoot
