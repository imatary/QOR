//StringSource.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Source for validatable string allocations

#ifndef CODEQOR_STRINGSOURCE_H_1
#define CODEQOR_STRINGSOURCE_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Traits/Policy.h"
#include "CodeQOR/Traits/MemoryTraits.h"
#include "CodeQOR/DataStructures/TBitArray.h"
#include "CodeQOR/DataStructures/TIndexedArray.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __CODEQOR ) CStringSource
	{
	public:

		CStringSource();
		virtual ~CStringSource();
		CStringSource( const CStringSource& src );
		CStringSource& operator = ( const CStringSource& src );

		virtual byte* Source( unsigned int uiByteCount );
		virtual void Free( byte* pMemory, unsigned int /*uiByteCount*/ );
		virtual bool IsStringMemory( byte* pMemory );

		//vector of pages ordered by least used
		//each page, 64k of string memory with an allocation map of 512 bytes, 4096 bits for maximum 4096 items of 16 bytes
		//each page should count the total data bytes in use to be used to order pages.
		//Each page should also maintain an allocation count which can be used to attempt placement within the space
		//Each alternating bit of the allocation count to be used to determine which half of the space to look in and each other bit to determine whether to look at the beginning or the end

		struct PageIndexByAvailableSpace;
		struct PageIndexByAllocationAddress;

		//--------------------------------------------------------------------------------
		class CStringPage
		{
		public:

			CStringPage();
			~CStringPage();

			//--------------------------------------------------------------------------------
			byte* TryAllocate( unsigned short usByteCount )
			{
				byte* pNew = 0;
				/*TODO:
				unsigned short usAllocation = ( ( usByteCount & 0xFFF0 ) + 16 );
				unsigned long ulMapBitCount = usAllocation / 16;

				unsigned short usAllocationCount = m_usAllocationsCount + 1;


				*/
				return pNew;
			}

			//--------------------------------------------------------------------------------
			bool Free( byte* pData, unsigned short usByteCount )
			{
				/*TODO:
				unsigned long ulFirstMapEntry = AddressToMap( pData );
				unsigned long ulMapBitCount = ( ( usByteCount & 0xFFF0 ) + 16 ) / 16;
				*/
			}

			//--------------------------------------------------------------------------------
			bool Test( byte* pData )
			{
				return ( pData > m_StringBytes && pData < ( m_StringBytes + 65536 ) ) ? true : false;
			}

		private:

			//--------------------------------------------------------------------------------
			unsigned long AddressToMap( byte* pData )
			{
				unsigned short usOffset = static_cast< unsigned short >( pData - m_StringBytes );
				unsigned long ulMapEntry = usOffset / 128;
				return ulMapEntry;
			}

			friend bool operator > ( const CStringSource::PageIndexByAvailableSpace& x0, const CStringSource::PageIndexByAvailableSpace& x1);
			friend bool operator < ( const CStringSource::PageIndexByAvailableSpace& x0, const CStringSource::PageIndexByAvailableSpace& x1);
			friend bool operator == ( const CStringSource::PageIndexByAvailableSpace& x0, const CStringSource::PageIndexByAvailableSpace& x1);
			friend bool operator > ( const CStringSource::PageIndexByAllocationAddress& x0, const CStringSource::PageIndexByAllocationAddress& x1);
			friend bool operator < ( const CStringSource::PageIndexByAllocationAddress& x0, const CStringSource::PageIndexByAllocationAddress& x1);
			friend bool operator == ( const CStringSource::PageIndexByAllocationAddress& x0, const CStringSource::PageIndexByAllocationAddress& x1);

			CStringPage( const CStringPage& );
			CStringPage& operator = ( const CStringPage& );

			unsigned short m_usAllocationsCount;
			unsigned short m_usBytesInUse;
			CTBitArray< CPolicy > m_AllocMap;
			byte m_StringBytes[ 65536 ];
		};

		//--------------------------------------------------------------------------------
		struct PageIndexByAvailableSpace
		{
			CStringPage* pPage;
		};

		//--------------------------------------------------------------------------------
		struct PageIndexByAllocationAddress
		{
			CStringPage* pPage;
		};

	protected:

		//CTIndexedArray< CStringPage*, nsCodeQOR::CPolicy > m_Pages; 
		//CTIndexedArray< PageIndex, CPolicy > m_Index;

		//sort the pages index to find the least used page. 
		//If the least used page doesn't have enough space allocate another page
	};

}//nsCodeQOR

#endif//CODEQOR_DEFAULTSOURCE_H_1
