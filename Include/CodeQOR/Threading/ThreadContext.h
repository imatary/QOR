// ThreadContext.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Base for per thread data to be extended for specific OS

#ifndef CODEQOR_THREADCONTEXT_H_3
#define CODEQOR_THREADCONTEXT_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Tracing/CallContextBase.h"
#include "CodeQOR/Instancing/STMember.h"
//#include "CodeQOR/Events/ThreadLocalEventManager.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//class __QOR_INTERFACE( __CODEQOR ) CBaseErrorDomain;
	//class __QOR_INTERFACE( __CODEQOR ) CFunctionContextBase;
	//class __QOR_INTERFACE( __CODEQOR ) CCodePage;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __CODEQOR ) CExceptionContextBase
	{

	public:

		CExceptionContextBase();
		CExceptionContextBase( const CExceptionContextBase& src );
		CExceptionContextBase& operator=( CExceptionContextBase const & src );
		virtual ~CExceptionContextBase();

		virtual int& ProcessingThrow( void );
		virtual void*& FrameInfoChain( void );
#if ( ( __QCMP_COMPILER != __QCMP_MSVC ) && ( __QCMP_COMPILER != __QCMP_INTEL ) )
		virtual void* CurrentException( void ) = 0;
#else
		virtual nsCompiler::EH::ExceptData& CurrentException( void ) = 0;
#endif

		int m_iDefaultProcessingThrow;
		void* m_pDummyFrameInfoChain;
#if ( __QCMP_COMPILER == __QCMP_MSVC || __QCMP_COMPILER == __QCMP_INTEL )
		nsCompiler::EH::ExceptData m_DummyExceptData;
#endif
	};
	/*
    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __CODEQOR ) CThreadContextBase
    {
		friend class CFunctionContextBase;

    public:

        CThreadContextBase();
		CThreadContextBase( const CThreadContextBase& src );
		CThreadContextBase& operator=( CThreadContextBase const & src );
        virtual ~CThreadContextBase();

		static CThreadContextBase* Create( void );
		static CThreadContextBase* GetCurrent( void );
                                                                            //Function Context
		virtual CFunctionContextBase* RegisterFunctionContext( CFunctionContextBase* pFContext );
		virtual void UnregisterFunctionContext( CFunctionContextBase* pFContext, CFunctionContextBase* pParent );
		virtual CFunctionContextBase* FunctionContext( void );
		virtual CBaseErrorDomain*& ErrorDomain( void );
		virtual CExceptionContextBase* ExceptionContext( void );

		unsigned long IncrementRecursionCount( void );                      //Stack depth tracking
		unsigned long DecrementRecursionCount( void );
		unsigned long RecursionCount( void );

		bool InErrorSystem();
		void LeaveErrorSystem( void );                                      //Error system stack boundary
		void EnterErrorSystem( void );

		unsigned int TlsAlloc( void );                                      //Thread Local Storage
		bool TlsFree( unsigned int uiTlsIndex );
		void* TlsGetValue( unsigned int uiTlsIndex );
		bool TlsSetValue( unsigned int uiTlsIndex, void* lpTlsValue );

		CTMap< mxGUID*, void*, CCodeQORPolicy >& ClassThreadMap( void );    //Flyer type-instance map

		CSTMember< CThreadLocalEventManager > LocalEventManager;            //lazy instance of thread synchronous event manager

		void SetTraceEnabled( bool );
		bool GetTraceEnabled( void );

		void SetCodePage( CCodePage* pCodePage );
		CCodePage* GetCodePage( void );

	protected:

		CFunctionContextBase* m_pBaseFContext;
		CBaseErrorDomain* m_pBaseErrorDomain;
		CExceptionContextBase* m_pBaseExceptionContext;
		CCodePage* m_pCodePage;

	private:

		unsigned long m_ulRecursionCount;
		CTArray< void* > m_aThreadLocalStorage;
		CTMap< mxGUID*, void*, CCodeQORPolicy > m_ClassThreadMap;
		bool m_bTraceEnabled;
    };
	*/
}//nsCodeQOR

#endif//CODEQOR_THREADCONTEXT_H_3
