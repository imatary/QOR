//MSW_signal.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include "SystemQOR/MSWindows/MSW_signal.h"
#include "errno.h"
#include "WinQL/WinQL.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	Csignal::Csignal()
	{
		__QCS_MEMBER_FCONTEXT( "Csignal::Csignal" );
	}

	//--------------------------------------------------------------------------------
	Csignal::~Csignal()
	{
		__QCS_MEMBER_FCONTEXT( "Csignal::~Csignal" );
	}

	//--------------------------------------------------------------------------------
	void Csignal::signal( int sig, psig_func )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	int Csignal::raise( int sig )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::kill( pid_t, int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::killpg( pid_t, int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	void Csignal::psiginfo( const siginfo_t*, const char * )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	void Csignal::psignal( int, const char * )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	int Csignal::pthread_kill( pthread_t, int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::pthread_sigmask( int, const sigset_t*, sigset_t* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigaction_( int, const sigaction*, sigaction* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigaddset( sigset_t*, int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	//set and get signal alternate stack context
	int Csignal::sigaltstack( const stack_t* ss, stack_t* old )
	{
		//TODO: implement the alternate signal stack for the current thread, muchos mysteryoso?!?
		int iResult = -1;

		if( ss ) 
		{
			if( ss->ss_size < MinSigStackSize ) 
			{
				errno = ENOMEM;
				return -1;
			}
			if( ss->ss_flags & ~SSDisable ) 
			{
				errno = EINVAL;
				return -1;
			}
		}
		//return syscall( SYS_sigaltstack, ss, old );

		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigdelset( sigset_t*, int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigemptyset( sigset_t* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigfillset( sigset_t* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sighold( int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigignore( int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::siginterrupt( int, int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigismember( const sigset_t*, int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigpause( int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigpending( sigset_t* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigprocmask( int, const sigset_t*, sigset_t* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigqueue( pid_t, int, const sigval )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigrelse( int )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	void Csignal::sigset( int, psig_func )
	{
		//TODO:
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigsuspend( const sigset_t* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigtimedwait( const sigset_t*, siginfo_t*, const timespec* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigwait( const sigset_t*, int* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Csignal::sigwaitinfo( const sigset_t*, siginfo_t* )
	{
		//TODO:
		int iResult = -1;
		return iResult;
	}

}//nsWin32

#endif//(QOR_SYS_OS == QOR_SYS_MSW)
