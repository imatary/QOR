//WinQLVolumeManagement.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/FileSystem/WinQLVolumeManagement.h"
#include "WinQL/System/FileSystem/WinQLFile.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CDosDeviceHelper );

	//--------------------------------------------------------------------------------
	CDosDeviceHelper::CDosDeviceHelper()
	{
		_WINQ_FCONTEXT( "CDosDeviceHelper::CDosDeviceHelper" );
	}

	//--------------------------------------------------------------------------------
	CDosDeviceHelper::CDosDeviceHelper( const CDosDeviceHelper& src )
	{
		_WINQ_FCONTEXT( "CDosDeviceHelper::CDosDeviceHelper" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CDosDeviceHelper& CDosDeviceHelper::operator = ( const CDosDeviceHelper& src )
	{
		_WINQ_FCONTEXT( "CDosDeviceHelper::operator =" );
		if( &src != this )
		{
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CDosDeviceHelper::~CDosDeviceHelper()
	{
		_WINQ_FCONTEXT( "CDosDeviceHelper::~CDosDeviceHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CDosDeviceHelper::Define( unsigned long dwFlags, const TCHAR* lpDeviceName, const TCHAR* lpTargetPath )
	{
		_WINQ_FCONTEXT( "CDosDeviceHelper::Define" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DefineDosDevice( dwFlags, lpDeviceName, lpTargetPath ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDosDeviceHelper::Query( const TCHAR* lpDeviceName, CTString& strTargetPath )
	{
		_WINQ_FCONTEXT( "CDosDeviceHelper::Query" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{			
			dwResult = CKernel32::QueryDosDevice( lpDeviceName, strTargetPath.GetBufferSetLength(MaxPath), MaxPath );
			strTargetPath.ValidateBuffer(static_cast< unsigned short>( dwResult ));
		}__QOR_ENDPROTECT
		return dwResult;
	}


	//--Drive Helper------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CDriveHelper );

	//--------------------------------------------------------------------------------
	CDriveHelper::CDriveHelper()
	{
		_WINQ_FCONTEXT( "CDriveHelper::CDriveHelper" );
	}

	//--------------------------------------------------------------------------------
	CDriveHelper::CDriveHelper( const CDriveHelper& src )
	{
		_WINQ_FCONTEXT( "CDriveHelper::CDriveHelper" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CDriveHelper& CDriveHelper::operator = ( const CDriveHelper& src )
	{
		_WINQ_FCONTEXT( "CDriveHelper::operator =" );
		if( &src != this )
		{
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CDriveHelper::~CDriveHelper()
	{
		_WINQ_FCONTEXT( "CDriveHelper::~CDriveHelper" );
	}

	//--------------------------------------------------------------------------------
	unsigned int CDriveHelper::GetType( const CTString& strRootPathName )
	{
		_WINQ_FCONTEXT( "CDriveHelper::GetType" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::GetDriveType( strRootPathName );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDriveHelper::GetDrives()
	{
		_WINQ_FCONTEXT( "CDriveHelper::GetDrives" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetLogicalDrives();
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDriveHelper::GetDriveCount()
	{
		_WINQ_FCONTEXT( "CDriveHelper::GetDriveCount" );
		unsigned long ulResult = 0;
		__QOR_PROTECT
		{
			unsigned long ulDriveMap = GetDrives();
			unsigned long ulDriveIterator = 0x00000001;
			for( unsigned long ulDriveMatch = 0; ulDriveMatch < ( sizeof( unsigned long ) * 8 ); ulDriveMatch++ )
			{
				if( ( ulDriveMap & ulDriveIterator ) > 0 )
				{
					ulResult++;
				}
				ulDriveIterator = ulDriveIterator << 1;
			}
		}__QOR_ENDPROTECT
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDriveHelper::GetDriveStrings( CTStringRef strBuffer )
	{
		_WINQ_FCONTEXT( "CDriveHelper::GetDriveStrings" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetLogicalDriveStrings( strBuffer->Allocation() == 0 ? 0 : strBuffer->Allocation() - 1, strBuffer->GetBuffer() );
			if( dwResult == 0 )
			{
				strBuffer->ReleaseBuffer();
				//TODO: Raise API error based on GetLastError
			}
			else if( dwResult >= strBuffer->Allocation() )
			{
				strBuffer->GetBufferSetLength( static_cast< unsigned short >( dwResult + 1 ) );
				dwResult = GetDriveStrings( strBuffer );
				strBuffer->ReleaseBuffer();
			}
			else
			{
				strBuffer->ValidateBuffer( static_cast< unsigned short >( dwResult ) );
			}
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDriveHelper::GetDriveList( nsCodeQOR::CTLinkedList< CTString >& ListDriveStrings )
	{
		_WINQ_FCONTEXT( "CDriveHelper::GetDriveList" );
		unsigned long ulDriveCount = GetDriveCount();
		__QOR_PROTECT
		{
			CTString strDrives;
			strDrives.GetBufferSetLength( static_cast< unsigned short >( ulDriveCount * 5 ) );
			CTStringRef refstrDrives( &strDrives );
			unsigned long ulCharCount = GetDriveStrings( refstrDrives );

			CTString* strTempDrive = 0;
			unsigned long ulChar = 0;
			while( ulChar < ulCharCount )
			{
				if( strTempDrive == 0 )
				{
					strTempDrive = new CTString();
				}
				strTempDrive->Append( strDrives[ ulChar ] );
				if( strDrives[ ulChar ] == (TCHAR)'\0' )
				{
					ListDriveStrings.Append( strTempDrive );
					strTempDrive = 0;
				}
				ulChar++;
			}
			if( strTempDrive )
			{
				ListDriveStrings.Append( strTempDrive );
			}
		}__QOR_ENDPROTECT
		return ulDriveCount;
	}

	//--Mount Point Helper------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CMountPointHelper );

	//--------------------------------------------------------------------------------
	CMountPointHelper::CMountPointHelper()
	{
		_WINQ_FCONTEXT( "CMountPointHelper::CMountPointHelper" );
	}

	//--------------------------------------------------------------------------------
	CMountPointHelper::CMountPointHelper( const CMountPointHelper& src )
	{
		_WINQ_FCONTEXT( "CMountPointHelper::CMountPointHelper" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CMountPointHelper& CMountPointHelper::operator = ( const CMountPointHelper& src )
	{
		_WINQ_FCONTEXT( "CMountPointHelper::operator =" );
		if( &src != this )
		{
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CMountPointHelper::~CMountPointHelper()
	{
		_WINQ_FCONTEXT( "CMountPointHelper::~CMountPointHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CMountPointHelper::Delete( const TCHAR* lpszVolumeMountPoint )
	{
		_WINQ_FCONTEXT( "CMountPointHelper::Delete" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DeleteVolumeMountPoint( lpszVolumeMountPoint ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMountPointHelper::Set( const TCHAR* lpszVolumeMountPoint, const TCHAR* lpszVolumeName )
	{
		_WINQ_FCONTEXT( "CMountPointHelper::Set" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetVolumeMountPoint( lpszVolumeMountPoint, lpszVolumeName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMountPointHelper::GetVolumeName( const TCHAR* lpszVolumeMountPoint, CTStringRef strVolumeName )
	{
		_WINQ_FCONTEXT( "CMountPointHelper::GetVolumenName" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetVolumeNameForVolumeMountPoint( lpszVolumeMountPoint, strVolumeName->GetBuffer(), strVolumeName->Allocation() ) ? true : false;
			strVolumeName->ReleaseBuffer();
		}__QOR_ENDPROTECT
		return bResult;
	}




	//--Find Volume-------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CFindVolume );

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in member's base for later usage." )
	//--------------------------------------------------------------------------------
	CFindVolume::CFindVolume() : m_Handle( this, 0 )
	,	m_strVolume()
	{
		_WINQ_FCONTEXT( "CFindVolume::CFindVolume" );
		m_Handle = CKernel32::FindFirstVolume(m_strVolume.GetBufferSetLength(MaxPath), MaxPath );
		m_strVolume.ReleaseBuffer();
	}
	__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CFindVolume::~CFindVolume()
	{
		_WINQ_FCONTEXT( "CFindVolume::~CFindVolume" );
		BOOL bResult = FALSE;
		__QOR_PROTECT
		{
			bResult = CKernel32::FindVolumeClose( m_Handle.Use() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CFindVolume::Next()
	{
		_WINQ_FCONTEXT( "CFindVolume::Next" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FindNextVolume( m_Handle.Use(), m_strVolume.GetBufferSetLength( MaxPath ), MaxPath ) ? true : false;
			m_strVolume.ReleaseBuffer();
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CVolume::ref_type CFindVolume::Volume()
	{
		return new_shared_ref<CVolume>(m_strVolume.Ref());
	}


	//--Find Mount Point--------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CFindMountPoint );

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in member's base for later usage." )
	//--------------------------------------------------------------------------------
	CFindMountPoint::CFindMountPoint( const CTString& strRootPathName ) : m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CFindMountPoint::CFindMountPoint" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::FindFirstVolumeMountPoint( const_cast< LPTSTR >( strRootPathName.operator const TCHAR *() ), m_strVolumeMountPoint.GetBufferSetLength( MaxPath * 2 ), MaxPath * 2 );
			m_ulStatus = CKernel32::GetLastError();
			m_strVolumeMountPoint.ReleaseBuffer();
		}__QOR_ENDPROTECT
	}
	__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CFindMountPoint::~CFindMountPoint()
	{
		_WINQ_FCONTEXT( "CFindMountPoint::~CFindMountPoint" );
		__QOR_PROTECT
		{
			CKernel32::FindVolumeMountPointClose( m_Handle.Use() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CFindMountPoint::Next()
	{
		_WINQ_FCONTEXT( "CFindMountPoint::Next" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FindNextVolumeMountPoint( m_Handle.Use(), m_strVolumeMountPoint.GetBufferSetLength( MaxPath * 2), MaxPath * 2 ) ? true : false;
			m_ulStatus = CKernel32::GetLastError();
			m_strVolumeMountPoint.ReleaseBuffer();
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFindMountPoint::IsValid()
	{
		return m_ulStatus == 0 ? true : false;
	}

	//--------------------------------------------------------------------------------
	CTString CFindMountPoint::MountPoint()
	{
		return m_strVolumeMountPoint;
	}

}//nsWin32
