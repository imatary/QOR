//CmdLineIPOWorkflow.cpp

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/Instancing/TInstancePtr.h"
#include "AppocritaQOR/AppocritaQOR.h"
#include "AppocritaQOR/Workflows/CmdLineIPOWorkflow.h"

//------------------------------------------------------------------------------
namespace nsQOR
{
	//------------------------------------------------------------------------------
	CCmdLineIPOWorkflow::CCmdLineIPOWorkflow( IApplication& Application ) : CWorkflow()
	,	m_StartupState( this )
	,	m_InputState( this )
	,	m_ProcessingState( this )
	,	m_OutputState( this )	
	,	m_ApplicationStartupCompleteEvent( Application )
	,	m_Application( Application )
	{		
		__QCS_FCONTEXT( "CCmdLineIPOWorkflow::CCmdLineIPOWorkflow" );
		m_Application.SetWorkflow( this );
	}

	//------------------------------------------------------------------------------
	CCmdLineIPOWorkflow::CCmdLineIPOWorkflow( const CCmdLineIPOWorkflow& src ) : CWorkflow( src )
	,	m_StartupState( this )
	,	m_InputState( this )
	,	m_ProcessingState( this )
	,	m_OutputState( this )	
	,	m_ApplicationStartupCompleteEvent( src.m_Application )
	,	m_Application( src.m_Application )
	{	
		__QCS_FCONTEXT( "CCmdLineIPOWorkflow::CCmdLineIPOWorkflow" );
	}
	
	//------------------------------------------------------------------------------
	CCmdLineIPOWorkflow::~CCmdLineIPOWorkflow()
	{
		__QCS_FCONTEXT( "CCmdLineIPOWorkflow::~CCmdLineIPOWorkflow" );
	}

	//------------------------------------------------------------------------------
	CCmdLineIPOWorkflow& CCmdLineIPOWorkflow::operator = ( const CCmdLineIPOWorkflow& src )
	{
		__QCS_FCONTEXT( "CCmdLineIPOWorkflow::operator =" );
		CWorkflow::operator=( src );
		return *this;
	}

	//------------------------------------------------------------------------------
	IState::ref_type CCmdLineIPOWorkflow::InitialState( void )
	{
		__QCS_FCONTEXT( "CCmdLineIPOWorkflow::InitialState" );
		return m_StartupState.Ref();
	}


	//------------------------------------------------------------------------------
	bool CApplicationStartupState::HandleEvent( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CApplicationStartupState::HandleEvent" );
		if( pEvent && m_pWorkflow )
		{
			CCmdLineIPOWorkflow* pWorkflow = dynamic_cast<CCmdLineIPOWorkflow*>( m_pWorkflow.operator nsQOR::IWorkflow*() );
			if( pEvent == pWorkflow->m_ApplicationStartupCompleteEvent.Ref() )
			{
				m_pWorkflow->PushState( pWorkflow->m_InputState.Ref(), pEvent );
			}
			else
			{
				m_pWorkflow->PopState( pEvent );
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	void CApplicationStartupState::OnEnter( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CApplicationStartupState::OnEvent" );
		//Do application startup tasks	

		CCmdLineIPOWorkflow* pWorkflow = m_pWorkflow.As< CCmdLineIPOWorkflow>();
		pWorkflow->m_ApplicationStartupCompleteEvent.OnSignaled();
	}
	
	//------------------------------------------------------------------------------
	void CApplicationStartupState::OnLeave( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CApplicationStartupState::OnLeave" );
		//Do application shutdown tasks
		CWorkflow* pWorkflow = m_pWorkflow.As< CWorkflow >();
		pWorkflow->GetApplication()->Stop();		
	}


	//------------------------------------------------------------------------------
	void CCmdLineInputState::OnEnter( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CCmdLineInputState::OnEnter" );
		//Get the Terminal subsystem and subscribe to its events
	}

	//------------------------------------------------------------------------------
	bool CCmdLineInputState::HandleEvent( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CCmdLineInputState::HandleEvent" );
		return false;
	}

	//------------------------------------------------------------------------------
	void CCmdLineInputState::OnLeave( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CCmdLineInputState::OnLeave" );
	}


	//------------------------------------------------------------------------------
	bool CProcessingState::HandleEvent( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CProcessingState::HandleEvent" );
		return false;
	}

	//------------------------------------------------------------------------------
	void CProcessingState::OnEnter( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CProcessingState::OnEnter" );
	}

	//------------------------------------------------------------------------------
	void CProcessingState::OnLeave( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CProcessingState::OnLeave" );
	}


	//------------------------------------------------------------------------------
	bool CCmdLineOutputState::HandleEvent( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CCmdLineOutputState::HandleEvent" );
		return false;
	}

	//------------------------------------------------------------------------------
	void CCmdLineOutputState::OnEnter( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CCmdLineOutputState::OnEnter" );
	}

	//------------------------------------------------------------------------------
	void CCmdLineOutputState::OnLeave( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CCmdLineOutputState::OnLeave" );
	}

}//nsQOR

