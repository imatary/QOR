//WinQLThermalZone.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Thermal Zone Device

#ifndef WINQL_DEVICE_THERMALZONE_H_3
#define WINQL_DEVICE_THERMALZONE_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
#include "WinQL/System/Devices/WinQLIODevice.h"

__QOR_DECLARE_REF(nsWin32, __WINQL, CThermalZone, CTExtRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CThermalZone : public CDeviceInterface
	{
	public:

		__QOR_DECLARE_REF_TYPE(CThermalZone);
		__QOR_DECLARE_OCLASS_ID( CThermalZone );

		static nsCodeQOR::CTExternalRegEntry< CThermalZone > RegEntry;
		__QCMP_STATIC_CONSTANT(unsigned long, File_Device_ThermalZone = 0x00000029);

		//--------------------------------------------------------------------------------
		struct ThermalInfoEx
		{
			unsigned long ThermalStamp;
			unsigned long ThermalConstant1;
			unsigned long ThermalConstant2;
			unsigned long Processors;
			unsigned long SamplingPeriod;
			unsigned long CurrentTemperature;
			unsigned long PassiveTripPoint;
			unsigned long CriticalTripPoint;
			unsigned char ActiveTripPointCount;
			unsigned long ActiveTripPoint[10];
			unsigned long S4TransitionTripPoint;
		};

		//--------------------------------------------------------------------------------
		struct Policy
		{
			unsigned long Version; 
			byte WaitForUpdate;
			byte Hibernate;
			byte Critical;
			byte ThermalStandby;
			unsigned long ActivationReasons;
			unsigned long PassiveLimit;
			unsigned long ActiveLevel;
		};

		//--------------------------------------------------------------------------------
		struct WaitRead
		{
			unsigned long Timeout;
			unsigned long LowTemperature;
			unsigned long HighTemperature;

		};

		//--------------------------------------------------------------------------------
		enum eThermalFunctions
		{
			Query = 0x20,
			Set_Cooling,
			Run_Active_Cooling,
		};

		//--------------------------------------------------------------------------------
		enum eActivationReasons
		{
			NotThrottled = 0x00000000,
			Thermal,
			Current_Limit,
		};

		CThermalZone();
		virtual ~CThermalZone();
		
		void Open(void);
		void Close(void);

	private:

		void QueryInformation(void);
		void SetCoolingPolicy(void);
		void RunActiveCoolingMethod(void);

		CThermalZone( const CThermalZone& src );
		CThermalZone& operator = ( const CThermalZone& src );

		CIODeviceFile::ref_type m_Session;
		
/*
//
// Thermal Zone driver interface (devices of registrying as GUID_DEVICE_THERMAL_ZONE)
//

#define MAX_ACTIVE_COOLING_LEVELS       10

//
// This structure has been depricated and the THERMAL_INFORMATION_EX
// structure should be used. THERMAL_INFORMATION has been left here for
// backward compatibility with the thermal WMI interface.
//
typedef struct _THERMAL_INFORMATION {
    ULONG           ThermalStamp;
    ULONG           ThermalConstant1;
    ULONG           ThermalConstant2;
    KAFFINITY       Processors;
    ULONG           SamplingPeriod;
    ULONG           CurrentTemperature;
    ULONG           PassiveTripPoint;
    ULONG           CriticalTripPoint;
    UCHAR           ActiveTripPointCount;
    ULONG           ActiveTripPoint[MAX_ACTIVE_COOLING_LEVELS];
} THERMAL_INFORMATION, *PTHERMAL_INFORMATION;

#define ACTIVE_COOLING          0x0
#define PASSIVE_COOLING         0x1
*/
/*
#define IOCTL_THERMAL_QUERY_INFORMATION \
        CTL_CODE(FILE_DEVICE_BATTERY, 0x20, METHOD_BUFFERED, FILE_READ_ACCESS)

#define IOCTL_THERMAL_SET_COOLING_POLICY\
        CTL_CODE(FILE_DEVICE_BATTERY, 0x21, METHOD_BUFFERED, FILE_WRITE_ACCESS)

#define IOCTL_RUN_ACTIVE_COOLING_METHOD\
        CTL_CODE(FILE_DEVICE_BATTERY, 0x22, METHOD_BUFFERED, FILE_WRITE_ACCESS)
*/
	};

}//nsWin32

#endif//WINQL_DEVICE_THERMALZONE_H_3
