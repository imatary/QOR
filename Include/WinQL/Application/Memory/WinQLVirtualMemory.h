//WinQLVirtualMemory.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_VIRTUALMEM_H_2
#define WINQL_VIRTUALMEM_H_2

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct _MEMORY_BASIC_INFORMATION 
	{
		void* BaseAddress;
		void* AllocationBase;
		unsigned long AllocationProtect;
		Cmp_ulong_ptr RegionSize;
		unsigned long State;
		unsigned long Protect;
		unsigned long Type;
	} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CVirtualHelper
	{
	public:

		__QCMP_STATIC_CONSTANT( unsigned long, PageNoAccess				= 0x01 );     
		__QCMP_STATIC_CONSTANT( unsigned long, PageReadOnly				= 0x02 );     
		__QCMP_STATIC_CONSTANT( unsigned long, PageReadWrite			= 0x04 );     
		__QCMP_STATIC_CONSTANT( unsigned long, PageWriteCopy			= 0x08 );     
		__QCMP_STATIC_CONSTANT( unsigned long, PageExecute              = 0x10 );     
		__QCMP_STATIC_CONSTANT( unsigned long, PageExecuteRead			= 0x20 );     
		__QCMP_STATIC_CONSTANT( unsigned long, PageExecuteReadWrite		= 0x40 );     
		__QCMP_STATIC_CONSTANT( unsigned long, PageExecuteWriteCopy		= 0x80 );     
		__QCMP_STATIC_CONSTANT( unsigned long, PageGuard				= 0x100 );     
		__QCMP_STATIC_CONSTANT( unsigned long, PageNoCache				= 0x200 );     
		__QCMP_STATIC_CONSTANT( unsigned long, PageWriteCombine			= 0x400 );


		__QCMP_STATIC_CONSTANT( unsigned long, MemFree			= 0x00010000 );
		__QCMP_STATIC_CONSTANT( unsigned long, MemCommit		= 0x00001000 );
		__QCMP_STATIC_CONSTANT( unsigned long, MemReserve		= 0x00002000 );
		__QCMP_STATIC_CONSTANT( unsigned long, MemDecommit		= 0x00004000 );
		__QCMP_STATIC_CONSTANT( unsigned long, MemRelease		= 0x00008000 );
		__QCMP_STATIC_CONSTANT( unsigned long, MemReset			= 0x00080000 );
		__QCMP_STATIC_CONSTANT( unsigned long, MemLargePages	= 0x20000000 );
		__QCMP_STATIC_CONSTANT( unsigned long, MemPhysical		= 0x00400000 );
		__QCMP_STATIC_CONSTANT( unsigned long, MemTopDown		= 0x00100000 );
		__QCMP_STATIC_CONSTANT( unsigned long, MemWriteWatch	= 0x00200000 );

		__QOR_DECLARE_OCLASS_ID( CVirtualHelper );

		CVirtualHelper();
		~CVirtualHelper();
		void* Alloc( void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long flAllocationType, unsigned long flProtect );
		void* AllocEx( void* hProcess, void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long flAllocationType, unsigned long flProtect );
		bool Free( void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long dwFreeType );
		bool FreeEx( void* hProcess, void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long dwFreeType );
		bool Lock( void* lpAddress, Cmp_ulong_ptr dwSize );
		bool Protect( void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long flNewProtect, unsigned long* lpflOldProtect );
		bool ProtectEx( void* hProcess, void* lpAddress, Cmp_ulong_ptr dwSize, unsigned long flNewProtect, unsigned long* lpflOldProtect );
		Cmp_ulong_ptr Query( const void* lpAddress, nsWin32::PMEMORY_BASIC_INFORMATION lpBuffer, Cmp_ulong_ptr dwLength );
		Cmp_ulong_ptr QueryEx( void* hProcess, const void* lpAddress, nsWin32::PMEMORY_BASIC_INFORMATION lpBuffer, Cmp_ulong_ptr dwLength );
		bool Unlock( void* lpAddress, Cmp_ulong_ptr dwSize );

	};

}//nsWin32

#endif//WINQL_VIRTUALMEM_H_2
