//DefaultConfig.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Default Configuration header for Querysoft Open Runtime

//This file configures the build for the entire framework
//No need to include it directly as it is picked up through CompilerQOR.h which is included everywhere
//If the confguration in this file is not suitable you can change it, at the risk that you will change
//every project your QOR is used to build, or you can #define __QOR_CONFIG_HEADER to the path and filename
//of a configuration header suitable for your project in your Make file or IDE project
//e.g. /D__QOR_CONFIG_HEADER="/home/me/work/projects/important1/Config.h"

#ifndef QOR_DEFAULTCONFIG_H_1
#define QOR_DEFAULTCONFIG_H_1


#ifndef QOR_CONFIG_INCLUDES
#	define QOR_CONFIG_INCLUDES (../../../include)
#endif

#define QOR_CONFIG_DEFINES1 ("QOR")

#ifdef QOR_MONOLITHIC
#	define QOR_CONFIG_DEFINES QOR_PP_LIST_APPEND( QOR_CONFIG_DEFINES1, ("QOR_MONOLITHIC") )
#else
#	define QOR_CONFIG_DEFINES QOR_CONFIG_DEFINES1
#endif

//QOR build configurations. These are samples at the extremes of safety vs performance for testing purposes

#ifndef NDEBUG//	Debug Configuration


//	These items can be set per compilation unit e.g. #define __QCMP_REPORTCONIG = 1 at the top of a Anything.cpp before any #includes

#	ifndef __QCMP_REPORTCONIG
#		define __QCMP_REPORTCONIG				__QCS_NO_			//Set to __QCS_YES_ at the top of a source file to get config output during compilation where supported
#	endif
#	ifndef __QCMP_REPORTDEFECITS
#		define __QCMP_REPORTDEFECITS			__QCS_YES_			//Set to __QCS_YES_ to report TODO: items during compilation on compilers that support it
#	endif

//	These items must be consistent for all compilation units across all the modules and libraries which are to be used together

#	ifndef __QOR_FUNCTION_CONTEXT_TRACKING
#		define __QOR_FUNCTION_CONTEXT_TRACKING	__QCS_YES_			//Turn on function context tracking. This is needed for several features
#	endif
#	ifndef __QOR_CPP_EXCEPTIONS
#		define __QOR_CPP_EXCEPTIONS				__QCS_YES_			//Turn on C++ exception handling
#	endif
#	ifndef __QOR_ERROR_SYSTEM										//Turn on the diagnostic error system
#		define __QOR_ERROR_SYSTEM				( __QOR_FUNCTION_CONTEXT_TRACKING )
#	endif
#	ifndef __QOR_PERFORMANCE
#		define __QOR_PERFORMANCE				5					//Tune level of error checking and size vs performance 0=ponderous safety - 10=reckless haste
#	endif
#	ifndef __QOR_UNICODE
#		define __QOR_UNICODE					__QCS_YES_			//Turn on UNICODE compilation where compiler and OS target supports it
#	endif
//	Error system configuration
#	ifndef __QOR_PARAMETER_CHECKING_
#		define __QOR_PARAMETER_CHECKING_		( __QOR_ERROR_SYSTEM )	//Turn on/off extended parameter checking on call using augmented types
#	endif
//	Code coverage
#	ifndef __QOR_CODE_COVERAGE
#		define __QOR_CODE_COVERAGE				( __QCS_NO_ )		//Produce build output messages for input to BlanketQOR Code Coverage tool where supported
#	endif

#	define QOR_ARCH_X86_CONFIG					QOR_ARCH_X86_FEATURE_SSE3

#else		//		Release Configuration

#	ifndef __QCMP_REPORTCONIG
#	define __QCMP_REPORTCONIG					__QCS_NO_			//Turn off additional compilation messages to speed up build
#	endif
#	ifndef __QCMP_REPORTDEFECITS
#	define __QCMP_REPORTDEFECITS				__QCS_NO_			//Turn off development build TODO: messages
#	endif
#	ifndef __QOR_FUNCTION_CONTEXT_TRACKING
#	define __QOR_FUNCTION_CONTEXT_TRACKING		__QCS_NO_			//Turn off function context and dependent features to speed execution
#	endif
#	ifndef __QOR_ERROR_SYSTEM
#	define __QOR_ERROR_SYSTEM					__QCS_NO_			//Turn off the diagnostic error system
#	endif
#	ifndef __QOR_CPP_EXCEPTIONS
#	define __QOR_CPP_EXCEPTIONS					__QCS_NO_			//Turn off C++ exception handling
#	endif
#	ifndef __QOR_PERFORANCE
#	define __QOR_PERFORMANCE					10					//Maximise performance. Only safe for perfect code of course
#	endif
#	ifndef __QOR_UNICODE
#	define __QOR_UNICODE						__QCS_YES_			//Turn on UNICODE compilation
#	endif
#	ifndef __QOR_PARAMETER_CHECKING
#	define __QOR_PARAMETER_CHECKING_			__QCS_NO_			//Turn off parameter checking for fast execution
#	endif
#endif

#endif//QOR_DEFAULTCONFIG_H_1
