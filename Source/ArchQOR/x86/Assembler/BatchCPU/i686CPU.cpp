//i686CPU.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement i686 Assembler intrinsics for x86PC platform

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/Assembler/BatchCPU/i686CPU.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		Ci686CPU::Ci686CPU( CCodeGeneratorBase* codeGenerator ) : Ci586CPU( codeGenerator )
		{
		}

		//------------------------------------------------------------------------------
		Ci686CPU::~Ci686CPU() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		//Undefined instruction - Raise invalid opcode exception.
		void Ci686CPU::ud2()
		{
			_emitInstruction( INST_UD2 );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmov( CONDITION cc, const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( ConditionToInstruction::toCMovCC( cc ), &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmov( CONDITION cc, const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( ConditionToInstruction::toCMovCC( cc ), &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmova( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVA, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmova( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVA, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovae( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVAE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovae( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVAE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovb( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovb( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovbe( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVBE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovbe( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVBE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovc( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVC, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovc( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVC, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmove( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmove( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovg( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVG, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovg( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVG, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovge( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVGE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovge( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVGE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovl( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVL, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovl( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVL, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovle( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVLE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovle( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVLE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovna( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNA, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovna( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNA, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnae( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNAE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnae( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNAE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnb( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnb( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnbe( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNBE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnbe( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNBE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnc( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNC, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnc( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNC, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovne( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovne( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovng( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNG, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovng( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNG, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnge( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNGE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnge( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNGE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnl( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNL, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnl( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNL, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnle( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNLE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnle( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNLE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovno( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNO, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovno( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNO, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnp( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNP, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnp( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNP, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovns( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovns( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnz( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVNZ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovnz( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVNZ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovo( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVO, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovo( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVO, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovp( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVP, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovp( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVP, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovpe( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVPE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovpe( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVPE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovpo( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVPO, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovpo( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVPO, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovs( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovs( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovz( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMOVZ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Conditional Move.
		void Ci686CPU::cmovz( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_CMOVZ, &dst, &src );
		}



		//------------------------------------------------------------------------------
		CP6FPU::CP6FPU( Cx86CPUCore& refCPU ) : CPentiumFPU( refCPU )
		{
		}

		//------------------------------------------------------------------------------
		CP6FPU::~CP6FPU()
		{
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
