//WinQLANSICodePointFilter.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/Text/BluefootFilters/WinQLANSICodePointFilter.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CANSICodePointFilter );

	//------------------------------------------------------------------------------
	CANSICodePointFilter::CANSICodePointFilter() : CFilter()
	{
		_WINQ_FCONTEXT( "CANSICodePointFilter::CANSICodePointFilter" );
	}

	//------------------------------------------------------------------------------
	CANSICodePointFilter::~CANSICodePointFilter()
	{
		_WINQ_FCONTEXT( "CANSICodePointFilter::~CANSICodePointFilter" );
	}

	//------------------------------------------------------------------------------
	CANSICodePointFilter::CANSICodePointFilter( const CANSICodePointFilter& src ) : CFilter( src )
	{
		_WINQ_FCONTEXT( "CANSICodePointFilter::CANSICodePointFilter" );
	}

	//------------------------------------------------------------------------------
	CANSICodePointFilter& CANSICodePointFilter::operator = ( const CANSICodePointFilter& src )
	{
		_WINQ_FCONTEXT( "CANSICodePointFilter::operator =" );
		if( &src != this ){}
		return *this;
	}

	//------------------------------------------------------------------------------
	bool CANSICodePointFilter::WriteCodePoint( unsigned int uiCodePoint )
	{
		_WINQ_FCONTEXT( "CANSICodePointFilter::WriteCodePoint" );
		bool bResult = false;
		unsigned long ulSingleItem = 1;
		unsigned int* pBuffer = reinterpret_cast< unsigned int* >( m_SourceBuffer.WriteRequest( ulSingleItem ) );
		if( ulSingleItem == 1 && pBuffer )
		{
			pBuffer[ 0 ] = uiCodePoint;
			m_SourceBuffer.WriteAcknowledge( ulSingleItem );
			bResult = true;
		}
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CANSICodePointFilter::Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead )
	{
		_WINQ_FCONTEXT( "CANSICodePointFilter::Read" );
		bool bResult = false;
		//Read up to the number of code points 1-to-1 for the number of UTF-16 requested
		if( m_SinkProxy.GetSource()->Read( ulUnitsRead, ulUnitsToRead ) )
		{
			char* pANSIBuffer = reinterpret_cast< char* >( m_SinkProxy.GetSource()->GetBuffer()->ReadRequest( ulUnitsToRead ) );
		
			for( ulUnitsRead = 0; ulUnitsRead < ulUnitsToRead; ulUnitsRead++ )
			{
				bool bDouble = m_CodePage.IsDBCSLeadByteEx( *pANSIBuffer );

				if( bDouble && ulUnitsRead >= ulUnitsToRead -1 )
				{
					break;//final byte is a lead byte so don't consume it
				}

				wchar_t utf16[ 2 ];
				unsigned long ulUTF16ToWrite = m_CodePage.MultiByteToWideChar( 0, &pANSIBuffer[ ulUnitsRead ], bDouble ? 2 : 1, utf16, 2 );

				if( ulUTF16ToWrite == 1 )
				{
					unsigned int uiUnicodePoint = static_cast< unsigned int >( utf16[ 0 ] );
					WriteCodePoint( uiUnicodePoint );
				}
				else if( ulUTF16ToWrite == 2 )
				{
					unsigned int uiUnicodePoint = ( utf16[ 0 ] << 10 ) + utf16[ 1 ] - 0x35FDC00;
					WriteCodePoint( uiUnicodePoint );
				}

				if( bDouble )
				{
					ulUnitsRead++;	//Two bytes of the input decoded in one pass so skip
				}
			}

			m_SinkProxy.GetSource()->GetBuffer()->ReadAcknowledge( ulUnitsRead );
			bResult = ulUnitsRead > 0 ? true : false;
		}
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CANSICodePointFilter::Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite )
	{
		_WINQ_FCONTEXT( "CANSICodePointFilter::Write" );
		char* pANSIBuffer = reinterpret_cast< char* >( m_SinkProxy.GetSource()->GetBuffer()->ReadRequest( ulUnitsToWrite ) );
		
		for( ulUnitsWritten = 0; ulUnitsWritten < ulUnitsToWrite; ulUnitsWritten++ )
		{
			bool bDouble = m_CodePage.IsDBCSLeadByteEx( *pANSIBuffer );

			if( bDouble && ulUnitsWritten >= ulUnitsToWrite -1 )
			{
				break;//final byte is a lead byte so don't consume it
			}

			wchar_t utf16[ 2 ];
			unsigned long ulUTF16ToWrite = m_CodePage.MultiByteToWideChar( 0, &pANSIBuffer[ ulUnitsWritten ], bDouble ? 2 : 1, utf16, 2 );

			if( ulUTF16ToWrite == 1 )
			{
				unsigned int uiUnicodePoint = static_cast< unsigned int >( utf16[ 0 ] );
				WriteCodePoint( uiUnicodePoint );
				unsigned long ulCodePoints = 0;
				m_SourceProxy.GetSink()->Write( ulCodePoints, 1 );
			}
			else if( ulUTF16ToWrite == 2 )
			{
				unsigned int uiUnicodePoint = ( utf16[ 0 ] << 10 ) + utf16[ 1 ] - 0x35FDC00;
				WriteCodePoint( uiUnicodePoint );
				unsigned long ulCodePoints = 0;
				m_SourceProxy.GetSink()->Write( ulCodePoints, 1 );
			}

			if( bDouble )
			{
				ulUnitsWritten++;	//Two bytes of the input decoded in one pass so skip
			}
		}

		m_SinkProxy.GetSource()->GetBuffer()->ReadAcknowledge( ulUnitsWritten );
		return ulUnitsWritten > 0 ? true : false;
	}
}