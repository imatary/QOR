//ObjectContextBase.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implementation of a basic object context tracking object

#include "CompilerQOR.h"
#include "CodeQOR/Tracing/ObjectContextBase.h"
#include "AppocritaQOR/Event.h"
#include <string.h>
//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	__QOR_IMPLEMENT_OCLASS_GUID( CObjectContextBase, 0xc000b4c3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

	CObjectContextBase CObjectContextBase::nullContext;

	//--------------------------------------------------------------------------------
	CObjectPointerBase::CObjectPointerBase() : m_p( 0 )
	{
	}

	//--------------------------------------------------------------------------------
	CObjectPointerBase::CObjectPointerBase( void* p ) : m_p( p )
	{
	}

	//--------------------------------------------------------------------------------
	CObjectPointerBase::CObjectPointerBase( const CObjectPointerBase& src )
	{
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CObjectPointerBase::~CObjectPointerBase()
	{
		m_p = 0;
	}

	//--------------------------------------------------------------------------------
	CObjectPointerBase& CObjectPointerBase::operator = ( const CObjectPointerBase& src )
	{
		if( &src != this )
		{
			m_p = src.m_p;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------		
	bool CObjectContextBase::IsNull( void )
	{
		return ( m_pPointer == 0 || m_pPointer->IsNull() );
	}

	//--------------------------------------------------------------------------------		
	CObjectContextBase& CObjectContextBase::NullContext()
	{
		return CObjectContextBase::nullContext;
	}

	//--------------------------------------------------------------------------------		
	CObjectContextBase::CObjectContextBase()
	{
		m_pPointer = 0;
	}

	//--------------------------------------------------------------------------------		
	CObjectContextBase::CObjectContextBase( const CObjectContextBase& src )
	{
		*this = src;
	}

	//--------------------------------------------------------------------------------		
	CObjectContextBase& CObjectContextBase::operator = ( const CObjectContextBase& src )
	{
		if( src.m_pPointer != 0 )
		{
			Local_memcpy( m_Backing, src.m_Backing, ( sizeof( ObjectContextBasePointer ) + sizeof(double) ) );		
			m_pPointer = reinterpret_cast< CObjectPointerBase* >( m_Backing + ( reinterpret_cast< unsigned char* >( src.m_pPointer ) - src.m_Backing ) );
		}
		else
		{
			m_pPointer = 0;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CObjectContextBase::~CObjectContextBase()
	{
		if( m_pPointer )
		{
			m_pPointer->~CObjectPointerBase();
		}
	}

	//--------------------------------------------------------------------------------
	CObjectContextBase::operator CObjectPointerBase&( void )
	{
		return *m_pPointer;
	}

	//--------------------------------------------------------------------------------
    byte* CObjectContextBase::Local_memcpy( byte* s1, const byte* s2, size_t n )
    {
        byte* p1 = s1;
        byte* p2 = const_cast< byte* >( s2 );

        while( n > 0 )
        {
            *p1 = *p2;
            p1++;
            p2++;
            n--;
        }

        return s1;
    }

}//nsCodeQOR

