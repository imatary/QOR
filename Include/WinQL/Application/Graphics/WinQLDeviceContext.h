//WinQLDeviceContext.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GRAPHICS_DEVICECONTEXT_H_3
#define WINQL_GRAPHICS_DEVICECONTEXT_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQLBitmap.h"
#include "WinQLBrush.h"
#include "WinQLRegion.h"
#include "DeviceContext/WinQLDCInternal.h"
#include "WinQLEnhMetaFile.h"
#include "WinQLFont.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
	class __QOR_INTERFACE( __WINQAPI ) CGDI32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	
#ifdef	__MINGW32__
#	ifdef UNICODE
#		define FONTENUMPROC FONTENUMPROCW
#	else
#		define FONTENUMPROC FONTENUMPROCA
#	endif
#endif//__MINGW32__


	//--------------------------------------------------------------------------------
	typedef struct tagPAINTSTRUCT 
	{
		void* hdc;
		int fErase;
		RECT rcPaint;
		int fRestore;
		int fIncUpdate;
		unsigned char rgbReserved[ 32 ];
	} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

	//--------------------------------------------------------------------------------
	typedef struct tagFONTSIGNATURE
	{
		unsigned long fsUsb[ 4 ];
		unsigned long fsCsb[ 2 ];
	} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

	//--------------------------------------------------------------------------------
	typedef struct tagPOLYTEXT
	{
		int       x;
		int       y;
		unsigned int n;
		const TCHAR* lpstr;
		unsigned int uiFlags;
		RECT      rcl;
		int      *pdx;
	} POLYTEXT, *PPOLYTEXT, *NPPOLYTEXT, *LPPOLYTEXT;

	//--------------------------------------------------------------------------------
	typedef struct tagWCRANGE
	{
		wchar_t wcLow;
		unsigned short cGlyphs;
	} WCRANGE, *PWCRANGE, *LPWCRANGE;

	//--------------------------------------------------------------------------------
	typedef struct tagGLYPHSET
	{
		unsigned long cbThis;
		unsigned long flAccel;
		unsigned long cGlyphsSupported;
		unsigned long cRanges;
		WCRANGE ranges[ 1 ];
	} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;

	//--------------------------------------------------------------------------------
	typedef struct _GLYPHMETRICS 
	{
		unsigned int gmBlackBoxX;
		unsigned int gmBlackBoxY;
		POINT   gmptGlyphOrigin;
		short   gmCellIncX;
		short   gmCellIncY;
	} GLYPHMETRICS, *LPGLYPHMETRICS;

	//--------------------------------------------------------------------------------
	typedef struct _FIXED 
	{
#ifndef _MAC
		unsigned short fract;
		short   value;
#else
		short   value;
		unsigned short fract;
#endif
	} FIXED;

	//--------------------------------------------------------------------------------
	typedef struct _MAT2 
	{
		FIXED  eM11;
		FIXED  eM12;
		FIXED  eM21;
		FIXED  eM22;
	} MAT2, *LPMAT2;

	//--------------------------------------------------------------------------------
	typedef struct tagKERNINGPAIR 
	{
	   unsigned short wFirst;
	   unsigned short wSecond;
	   int  iKernAmount;
	} KERNINGPAIR, *LPKERNINGPAIR;

	//--------------------------------------------------------------------------------
	typedef struct tagPANOSE
	{
		unsigned char bFamilyType;
		unsigned char bSerifStyle;
		unsigned char bWeight;
		unsigned char bProportion;
		unsigned char bContrast;
		unsigned char bStrokeVariation;
		unsigned char bArmStyle;
		unsigned char bLetterform;
		unsigned char bMidline;
		unsigned char bXHeight;
	} PANOSE, *LPPANOSE;

	//--------------------------------------------------------------------------------
	typedef struct _OUTLINETEXTMETRIC 
	{
		unsigned int otmSize;
		TEXTMETRIC otmTextMetrics;
		unsigned char otmFiller;
		PANOSE otmPanoseNumber;
		unsigned int otmfsSelection;
		unsigned int otmfsType;
		int otmsCharSlopeRise;
		int otmsCharSlopeRun;
		int otmItalicAngle;
		unsigned int otmEMSquare;
		int otmAscent;
		int otmDescent;
		unsigned int otmLineGap;
		unsigned int otmsCapEmHeight;
		unsigned int otmsXHeight;
		RECT otmrcFontBox;
		int otmMacAscent;
		int otmMacDescent;
		unsigned int otmMacLineGap;
		unsigned int otmusMinimumPPEM;
		POINT otmptSubscriptSize;
		POINT otmptSubscriptOffset;
		POINT otmptSuperscriptSize;
		POINT otmptSuperscriptOffset;
		unsigned int otmsStrikeoutSize;
		int otmsStrikeoutPosition;
		int otmsUnderscoreSize;
		int otmsUnderscorePosition;
		char* otmpFamilyName;
		char* otmpFaceName;
		char* otmpStyleName;
		char* otmpFullName;
	} OUTLINETEXTMETRIC, *POUTLINETEXTMETRIC, *NPOUTLINETEXTMETRIC, *LPOUTLINETEXTMETRIC;

	//--------------------------------------------------------------------------------
	typedef struct _DOCINFO
	{
		int cbSize;
		const TCHAR* lpszDocName;
		const TCHAR* lpszOutput;
#	if (WINVER >= 0x0400)
		const TCHAR* lpszDatatype;
		unsigned long fwType;
#	endif /* WINVER */
	} DOCINFO, *LPDOCINFO;

	typedef int ( __QCMP_STDCALLCONVENTION *FONTENUMPROC )( const nsWin32::LOGFONT*, const TEXTMETRIC*, unsigned long, Cmp_long_ptr );
	typedef int ( __QCMP_STDCALLCONVENTION *ABORTPROC )( void*, int );
	typedef void ( __QCMP_STDCALLCONVENTION *LINEDDAPROC )( int, int, Cmp_long_ptr );

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CPaintDC;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSelectedDIB : public CBitmap
	{
	public:

		CSelectedDIB();
		~CSelectedDIB();
		CDCInternal* SetContext( CDCInternal* pDC );
		unsigned int GetColourTable( unsigned int uStartIndex, unsigned int cEntries, nsWin32::RGBQUAD* pColors );
		unsigned int SetColourTable( unsigned int uStartIndex, unsigned int cEntries, const nsWin32::RGBQUAD* pColours );

	protected:

		CDCInternal* m_pDC;

	private:
			
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CXForm : public XFORM
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CXForm );
			
		CXForm();
		CXForm( const nsWin32::XFORM* lpxform1, const nsWin32::XFORM* lpxform2, int& bResult );
		virtual ~CXForm();

	protected:

		nsWinQAPI::CGDI32& m_GDI32Library;

		__QCS_DECLARE_NONASSIGNABLE( CXForm );
	};		

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CDeviceContext : public CDCInternal
	{

	public:

		//Background modes
		__QCMP_STATIC_CONSTANT( int, _TRANSPARENT         = 1 );
		__QCMP_STATIC_CONSTANT( int, _OPAQUE              = 2 );
		__QCMP_STATIC_CONSTANT( int, _BKMODE_LAST         = 2 );

		__QCMP_STATIC_CONSTANT( long, WINDOW           = 0x00000001 );
		__QCMP_STATIC_CONSTANT( long, CACHE            = 0x00000002 );
		__QCMP_STATIC_CONSTANT( long, NORESETATTRS     = 0x00000004 );
		__QCMP_STATIC_CONSTANT( long, CLIPCHILDREN     = 0x00000008 );
		__QCMP_STATIC_CONSTANT( long, CLIPSIBLINGS     = 0x00000010 );
		__QCMP_STATIC_CONSTANT( long, PARENTCLIP       = 0x00000020 );
		__QCMP_STATIC_CONSTANT( long, EXCLUDERGN       = 0x00000040 );
		__QCMP_STATIC_CONSTANT( long, INTERSECTRGN     = 0x00000080 );
		__QCMP_STATIC_CONSTANT( long, EXCLUDEUPDATE    = 0x00000100 );
		__QCMP_STATIC_CONSTANT( long, INTERSECTUPDATE  = 0x00000200 );
		__QCMP_STATIC_CONSTANT( long, LOCKWINDOWUPDATE = 0x00000400 );
		__QCMP_STATIC_CONSTANT( long, VALIDATE         = 0x00200000 );
		
		__QCMP_STATIC_CONSTANT( unsigned char, AC_Src_Over			= 0x00 );
		__QCMP_STATIC_CONSTANT( unsigned char, AC_Src_Alpha			= 0x01 );//alpha format flags


#			include	"DeviceContext/WinQLDCText.h"
#			include	"DeviceContext/WinQLDCSelectedFont.h"
#			include	"DeviceContext/WinQLDCFonts.h"
#			include "DeviceContext/WinQLDCSelectedBrush.h"
#			include "DeviceContext/WinQLDCWorldTransform.h"
#			include "DeviceContext/WinQLDCWindow.h"		
#			include "DeviceContext/WinQLDCViewport.h"
#			include "DeviceContext/WinQLDCProperties.h"
#			include "DeviceContext/WinQLDCDraw.h"
#			include "DeviceContext/WinQLDCPixelFormat.h"
#			include "DeviceContext/WinQLDCPath.h"
#			include "DeviceContext/WinQLDCPrintDoc.h"
#			include "DeviceContext/WinQLDCClipping.h"

		friend class CPaintDC;
		friend class CFonts;
		friend class CSelectedBrush;
		friend class CWorldTransform;
		friend class CWindow;
		friend class CViewport;
		friend class CMapMode;
		friend class CGraphicsMode;
		friend class CDraw;
		friend class CPixelFormat;
		friend class CPath;
		friend class CPrintDoc;
		friend class CClipping;

		CMapMode		MapMode;
		CGraphicsMode	GraphicsMode;
		CViewport		Viewport;
		CWindow			Window;
		CWorldTransform	WorldTransform;
		CDraw			Draw;
		CSelectedBrush	SelectedBrush;
		CFonts			Fonts;
		CSelectedFont	SelectedFont;
		CText			Text;
		CPixelFormat	PixelFormat;
		CPath			Path;
		CPrintDoc		PrintDoc;
		CClipping		Clipping;

        CDeviceContext();
		CDeviceContext( const CDeviceContext& src );
		CDeviceContext( CWindowHandle::refType hWnd );
		CDeviceContext( CWindowHandle::refType hWnd, CRegion::refType RgnClip, unsigned long flags );
		CDeviceContext( CDCHandle::refType hdc, int iMode );
		CDeviceContext( const TCHAR* lpszDriver, const TCHAR* lpszDevice, const TCHAR* lpszOutput, const nsWin32::DEVMODE* lpInitData );
		virtual ~CDeviceContext();

		int AlphaBlendTo( int xoriginDest, int yoriginDest, int wDest, int hDest, CDeviceContext& Src, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn );

	protected:

		CSelectedDIB m_SelectedDIB;

		CDeviceContext( CDCHandle::refType hdc );

		static CDCHandle::refType BeginPaint( CWindowHandle::refType hwnd, PAINTSTRUCT* lpPaint );
		static int EndPaint( CWindowHandle::refType hWnd, const PAINTSTRUCT* lpPaint );			

	private:

		nsWinQAPI::CGDI32& m_GDI32Library;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CPaintDC : public CDeviceContext
	{
	public:
			
		CPaintDC( CWindowHandle::refType hWnd );
		virtual ~CPaintDC();

		CRectangle PaintingRectangle( void );
		bool IsSessionErase( void );
		bool IsSessionRestore( void );
		bool IsSessionIncUpdate( void );

	protected:

		PAINTSTRUCT m_PS;
		CDCHandle::refType hdc;
		CWindowHandle::refType m_hWnd;
	
	};

}//nsWin32

#endif//WINQL_GRAPHICS_DEVICECONTEXT_H_3
