//WinQLClipboard.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Clipboard

#ifndef WINQL_OSSERV_CLIPBOARD_H_3
#define WINQL_OSSERV_CLIPBOARD_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/Definitions/Handles.h"
#include "CodeQOR/DataStructures/TRef.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

__QOR_DECLARE_REF(nsWin32, __WINQL, CClipboardViewerSession, CTRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	//Clipboard format helper class
	class __QOR_INTERFACE( __WINQL ) CClipboardFormatHelper
	{
	public:

		__QOR_DECLARE_REF_TYPE(CClipboardFormatHelper);
		__QOR_DECLARE_OCLASS_ID( CClipboardFormatHelper );

		CClipboardFormatHelper();
		virtual ~CClipboardFormatHelper();
		unsigned int Register( const TCHAR* lpszFormat );
		bool IsAvailable( unsigned int format );
		bool GetUpdated( unsigned int* lpuiFormats, unsigned int cFormats, unsigned int* pcFormatsOut );
		int GetPriority( unsigned int* paFormatPriorityList, int cFormats );
		int GetName( unsigned int format, TCHAR* lpszFormatName, int cchMaxCount );
		unsigned int Enum( unsigned int format );
		int Count( void );

		//--------------------------------------------------------------------------------
		//Clipboard format session class over a Window
		class __QOR_INTERFACE( __WINQL ) CListener
		{
		public:

			__QOR_DECLARE_REF_TYPE(CListener);
			__QOR_DECLARE_OCLASS_ID( CListener );

			CListener( COSWindow& Wnd, int* pbResult = 0 );
			virtual ~CListener();

		protected:

			COSWindow& m_Wnd;
			int* m_pResult;

		private:

			nsWinQAPI::CUser32& m_User32Library;

			CListener();
			CListener( const CListener& );
			CListener& operator = ( const CListener& ); //Not to be implemented

		};


	private:

		nsWinQAPI::CUser32& m_User32Library;

		__QCS_DECLARE_NONCOPYABLE( CClipboardFormatHelper );
	};

	//--------------------------------------------------------------------------------
	//Clipboard client helper class
	class __QOR_INTERFACE( __WINQL ) CClipboardHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CClipboardHelper );

		typedef CClipboardFormatHelper::CListener CFormatListener;

		CClipboardHelper();
		CClipboardHelper(const CClipboardHelper&);
		CClipboardHelper(CClipboardHelper&&);
		CClipboardHelper& operator = (const CClipboardHelper& src);
		CClipboardHelper& operator = (CClipboardHelper&& move);
		virtual ~CClipboardHelper();
		unsigned long GetSequenceNumber( void );									//Get a arbitrary value which increments when the clipboard contents changes
		COSWindow::refType GetViewer( void );
		COSWindow::refType GetOpenClipboardWindow( void );
		CClipboardFormatHelper::ref_type Format( void );

	protected:

		CClipboardFormatHelper m_FormatHelper;

	private:

		nsWinQAPI::CUser32& m_User32Library;

	};

	//--------------------------------------------------------------------------------
	//Clipboard client/server session class over a Window
	class __QOR_INTERFACE( __WINQL ) CClipboardSession
	{
	public:

		__QOR_DECLARE_REF_TYPE(CClipboardSession);
		__QOR_DECLARE_OCLASS_ID( CClipboardSession );

		CClipboardSession();
		CClipboardSession( COSWindow& Wnd, int* pbResult = 0 );
		virtual ~CClipboardSession();
		bool Empty( void );
		void* GetData( unsigned int uFormat );
		void* SetData( unsigned int uFormat, void* hMem );

	protected:

		int* m_pResult;
		COSWindow& m_Wnd;

	private:

		nsWinQAPI::CUser32& m_User32Library;

		//Not to be implemented
		CClipboardSession( const CClipboardSession& );
		CClipboardSession& operator = ( const CClipboardSession& ); 
	};

	//--------------------------------------------------------------------------------
	//Clipboard viewer session class
	class __QOR_INTERFACE( __WINQL ) CClipboardViewerSession
	{
	public:
			
		__QOR_DECLARE_REF_TYPE(CClipboardViewerSession);
		__QOR_DECLARE_OCLASS_ID( CClipboardViewerSession );
		
		CClipboardViewerSession( COSWindow& Wnd, int* pbResult = 0 );
		virtual ~CClipboardViewerSession();

	protected:
		
		int* m_pResult;
		COSWindow::refType m_Next;
		COSWindow& m_Wnd;

	private:

		nsWinQAPI::CUser32& m_User32Library;

		CClipboardViewerSession();
		CClipboardViewerSession( const CClipboardViewerSession& );
		CClipboardViewerSession& operator = ( const CClipboardViewerSession& ); //Not to be implemented
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CClipboard : public CClipboardHelper
	{
	public:

		__QCMP_STATIC_CONSTANT( unsigned int, CF_Text				= 1		 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_Bitmap          	= 2		 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_MetaFilePict    	= 3		 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_Sylk            	= 4		 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_Dif             	= 5		 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_Tiff            	= 6		 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_OEMText         	= 7		 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_Dib             	= 8		 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_Palette         	= 9		 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_PenData         	= 10	 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_Riff            	= 11	 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_Wave            	= 12	 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_UNICODEText     	= 13	 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_ENHMetaFile     	= 14	 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_HDrop           	= 15	 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_Locale          	= 16	 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_DibV5           	= 17	 );																 	
		__QCMP_STATIC_CONSTANT( unsigned int, CF_Max             	= 18	 );
																 	
		__QCMP_STATIC_CONSTANT( unsigned int, CF_OwnerDisplay    	= 0x0080 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_DSPText         	= 0x0081 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_DSPBitmap       	= 0x0082 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_DSPMetaFilePict 	= 0x0083 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_DSPENHMetaFile  	= 0x008E );
																 	
		__QCMP_STATIC_CONSTANT( unsigned int, CF_PrivateFirst    	= 0x0200 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_PrivateLast     	= 0x02FF );
																 	
		__QCMP_STATIC_CONSTANT( unsigned int, CF_GDIObjFirst     	= 0x0300 );
		__QCMP_STATIC_CONSTANT( unsigned int, CF_GDIObjLast      	= 0x03FF );
		
		__QOR_DECLARE_OCLASS_ID( CClipboard );

		CClipboard();
		~CClipboard();

		CClipboardViewerSession::ref_type ViewerSession( COSWindow::refType refWindow );
		CClipboardSession::ref_type Session( COSWindow::refType refWindow );
		CClipboard::CFormatListener::ref_type Listener( COSWindow::refType refWindow );

	private:

		CClipboard( const CClipboard& );
		CClipboard& operator = ( const CClipboard& );

	};

}//nsWin32

#endif//WINQL_OSSERV_CLIPBOARD_H_3

