//WinQLDeviceInstanceModel.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Device Instance Model

#ifndef WINQL_DEVICEINSTANCEMODEL_H_3
#define WINQL_DEVICEINSTANCEMODEL_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/IO.h"
#include "WinQL/System/Devices/WinQLDevice.h"
#include "WinQL/System/Devices/WinQLDeviceHandle.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "MammutQOR/Model.h"
#include "MammutQOR/Models/VectorModel.h"
#include "MammutQOR/Models/MapModel.h"
#include "MammutQOR/Model/MPropertySet.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterfaceInstanceModel.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE(__WINQL) CDeviceInstanceModel;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE(__WINQL) CDeviceStringProperty : public nsMammut::CFunctionalProperty< CTString, CDeviceStringProperty >
	{
	public:

		typedef nsMammut::CFunctionalProperty< CTString, CDeviceStringProperty > BaseName;

		CDeviceStringProperty(CDeviceInstanceModel* pModel, const CTString& strName, unsigned long ulPropertyIndex = 0);

		//--------------------------------------------------------------------------------
		~CDeviceStringProperty()
		{
			m_pModel = 0;
		}

		//--------------------------------------------------------------------------------
		void SetIndex(unsigned long ulPropertyIndex)
		{
			m_ulPropertyIndex = ulPropertyIndex;
		}

		//--------------------------------------------------------------------------------
		void SetSource(CDeviceInstanceModel* pModel)
		{
			m_pModel = pModel;
		}

		//--------------------------------------------------------------------------------
		CWString GetValue(void)
		{
			//TODO:
			CWString strTemp;
			return strTemp;
		}

		//--------------------------------------------------------------------------------
		void SetValue( const CWString& value)
		{
		}

	protected:

		CDeviceInstanceModel* m_pModel;
		unsigned long m_ulPropertyIndex;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CDeviceInstanceModel : public nsMammut::CMapModel< CTString, nsMammut::CModel >
	{
	public:

		typedef nsMammut::CMapModel< CTString, nsMammut::CModel > BaseName;

		__QOR_DECLARE_OCLASS_ID( CDeviceInstanceModel );

		CDeviceInstanceModel( nsMammut::CModel* pContainer = 0 );
		CDeviceInstanceModel( const CDeviceInstanceModel& src);
		CDeviceInstanceModel& operator = ( const CDeviceInstanceModel& );
		virtual ~CDeviceInstanceModel();

	private:

		nsMammut::CPropertySet m_Properties;
			nsMammut::CProperty< CTString > m_ID;
			nsMammut::CProperty< unsigned long > m_ulIndex;
			nsMammut::CProperty< SP_DevInfo_Data > m_Info;

			CDeviceStringProperty m_PDOName;
			CDeviceStringProperty m_Location;
			CDeviceStringProperty m_FriendlyName;
			CDeviceStringProperty m_Manufacturer;
			CDeviceStringProperty m_DisplayName;
			CDeviceStringProperty m_Description;
			CDeviceStringProperty m_Parent;
			CDeviceStringProperty m_Service;
			CDeviceStringProperty m_SetupClassName;
			CDeviceStringProperty m_Driver;
/*
		
		nsCodeQOR::CTArray< CWString > GetHardwareIDs( void );
		nsCodeQOR::CTArray< CWString > GetCompatibleIDs( void );
		
		nsCodeQOR::__mxGUID GetClassGUID( void );
		
		unsigned long GetConfigFlags( void );

*/
			//CDevicePowerModel m_PowerModel;
		nsMammut::CVectorModel< CWString > m_HardwareIDs;
		nsMammut::CVectorModel< CWString > m_CompatibleIDs;
		nsMammut::CVectorModel< CDeviceInterfaceInstanceModel > m_Interfaces;

		//PropertySet of m_strID, m_ulIndex, m_pContainer and m_Info
		//The rest are all functional properties, mostly inherently read only
		//DevicePowerModel

		void Initialize( void );
	};


}//nsWin32

#endif//WINQL_DEVICEINSTANCEMODEL_H_3
