//WinQLFileSource.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/IO/File/WinQLFileSource.h"
#include "WinQL/Application/IO/File/WinQLFileConnector.h"
#include "WinQL/Application/IO/WinQLIOSink.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	__QOR_IMPLEMENT_OCLASS_LUID( CFileSource );

	//--------------------------------------------------------------------------------
	CFileSource::CFileSource( CFileConnector* pFileConnector ) : CIOSource( pFileConnector ), m_bEOF( false )
	{
		_WINQ_FCONTEXT( "CFileSource::CFileSource" );
	}

	//--------------------------------------------------------------------------------
	CFileSource::~CFileSource()
	{
		_WINQ_FCONTEXT( "CFileSource::~CFileSource" );
	}

	//--------------------------------------------------------------------------------
	bool CFileSource::Read( unsigned long& ulNumberOfUnitsRead, unsigned long ulNumberOfUnitsToRead )
	{
		_WINQ_FCONTEXT( "CFileSource::Read" );
		bool bResult = false;
		CFileConnector* pFileConnector = dynamic_cast< CFileConnector* >( m_pIOSourceConnector );
		if( pFileConnector && pFileConnector->IsConnected() )
		{
			byte* pBuffer = GetBuffer()->WriteRequest( ulNumberOfUnitsToRead );

			if( pFileConnector->AsyncConnection() )
			{
				bResult = pFileConnector->File()->ReadEx( (void*)(pBuffer), ulNumberOfUnitsToRead * GetBuffer()->GetUnitSize(), 
					reinterpret_cast< OVERLAPPED* >( pFileConnector->GetSyncObject() ), (LPOVERLAPPED_COMPLETION_ROUTINE)(&COverlappedHandler::OnOverlappedReadCompleted) );
				ulNumberOfUnitsRead = 0;

				if( !bResult && pFileConnector->Protocol() )
				{
					pFileConnector->Protocol().As< nsBluefoot::CBFProtocol >()->OnReadError();
				}
			}
			else
			{				
				m_bEOF = false;
				if( pFileConnector->File()->Read( pBuffer, ulNumberOfUnitsToRead * GetBuffer()->GetUnitSize(), &ulNumberOfUnitsRead, 0 ) )
				{
					ulNumberOfUnitsRead /= GetBuffer()->GetUnitSize();
					GetBuffer()->WriteAcknowledge( ulNumberOfUnitsRead );
					bResult = true;
				}

				if( bResult && ulNumberOfUnitsRead == 0 )
				{
					m_bEOF = true;
					if( pFileConnector->Protocol() )
					{
						pFileConnector->Protocol().As< nsBluefoot::CBFProtocol >()->OnEndOfData();
					}
				}
				else if( pFileConnector->Protocol() )
				{
					if( bResult )
					{
						pFileConnector->Protocol().As< nsBluefoot::CBFProtocol >()->OnReadSuccess( ulNumberOfUnitsRead );
					}
					else
					{
						pFileConnector->Protocol().As< nsBluefoot::CBFProtocol >()->OnReadError();
					}
				}
			}
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileSource::IsAtEnd( void )
	{
		_WINQ_FCONTEXT( "CFileSource::IsAtEnd" );
		return m_bEOF;
	}

}//nsWin32


