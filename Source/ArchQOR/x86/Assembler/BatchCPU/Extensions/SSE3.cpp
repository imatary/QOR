//SSE3.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement SSE3 extensions

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/Assembler/BatchCPU/Extensions/SSE3.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		CSSE3::CSSE3( Cx86CPUCore& refCPU ) : CSSE2( refCPU )
		{
		}

		//------------------------------------------------------------------------------
		CSSE3::~CSSE3()
		{
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Add/Subtract (SSE3).
		void CSSE3::addsubpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_ADDSUBPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Add/Subtract (SSE3).
		void CSSE3::addsubpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_ADDSUBPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SP-FP Add/Subtract (SSE3).
		void CSSE3::addsubps( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_ADDSUBPS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SP-FP Add/Subtract (SSE3).
		void CSSE3::addsubps( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_ADDSUBPS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Store Integer with Truncation (SSE3).
		void CSSE3::fisttp( const CMem& dst )
		{
			m_PU._emitInstruction( INST_FISTTP, &dst );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Horizontal Add (SSE3).
		void CSSE3::haddpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_HADDPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Horizontal Add (SSE3).
		void CSSE3::haddpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_HADDPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SP-FP Horizontal Add (SSE3).
		void CSSE3::haddps( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_HADDPS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SP-FP Horizontal Add (SSE3).
		void CSSE3::haddps( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_HADDPS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Horizontal Subtract (SSE3).
		void CSSE3::hsubpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_HSUBPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Horizontal Subtract (SSE3).
		void CSSE3::hsubpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_HSUBPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SP-FP Horizontal Subtract (SSE3).
		void CSSE3::hsubps( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_HSUBPS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SP-FP Horizontal Subtract (SSE3).
		void CSSE3::hsubps( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_HSUBPS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Load Unaligned Integer 128 Bits (SSE3).
		void CSSE3::lddqu( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_LDDQU, &dst, &src );
		}

		//------------------------------------------------------------------------------	
		//Set Up Monitor Address (SSE3).
		void CSSE3::monitor()
		{
			m_PU._emitInstruction( INST_MONITOR );
		}

		//------------------------------------------------------------------------------
		//Move One DP-FP and Duplicate (SSE3).
		void CSSE3::movddup( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVDDUP, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move One DP-FP and Duplicate (SSE3).
		void CSSE3::movddup( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVDDUP, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Packed SP-FP High and Duplicate (SSE3).
		void CSSE3::movshdup( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVSHDUP, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Packed SP-FP High and Duplicate (SSE3).
		void CSSE3::movshdup( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVSHDUP, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Packed SP-FP Low and Duplicate (SSE3).
		void CSSE3::movsldup( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVSLDUP, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Packed SP-FP Low and Duplicate (SSE3).
		void CSSE3::movsldup( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVSLDUP, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Monitor Wait (SSE3).
		void CSSE3::mwait()
		{
			m_PU._emitInstruction( INST_MWAIT );
		}





		//------------------------------------------------------------------------------
		CSSSE3::CSSSE3( Cx86CPUCore& refCPU ) : CSSE3( refCPU )
		{
		}

		//------------------------------------------------------------------------------
		CSSSE3::~CSSSE3()
		{
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSIGNB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSIGNB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSIGNB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSIGNB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSIGNW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSIGNW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSIGNW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSIGNW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSIGND, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSIGND, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSIGND, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed SIGN (SSSE3).
		void CSSSE3::psignd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSIGND, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add (SSSE3).
		void CSSSE3::phaddw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PHADDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add (SSSE3).
		void CSSSE3::phaddw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHADDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add (SSSE3).
		void CSSSE3::phaddw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PHADDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add (SSSE3).
		void CSSSE3::phaddw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHADDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add (SSSE3).
		void CSSSE3::phaddd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PHADDD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add (SSSE3).
		void CSSSE3::phaddd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHADDD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add (SSSE3).
		void CSSSE3::phaddd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PHADDD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add (SSSE3).
		void CSSSE3::phaddd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHADDD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add and Saturate (SSSE3).
		void CSSSE3::phaddsw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PHADDSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add and Saturate (SSSE3).
		void CSSSE3::phaddsw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHADDSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add and Saturate (SSSE3).
		void CSSSE3::phaddsw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PHADDSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Add and Saturate (SSSE3).
		void CSSSE3::phaddsw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHADDSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract (SSSE3).
		void CSSSE3::phsubw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PHSUBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract (SSSE3).
		void CSSSE3::phsubw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHSUBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract (SSSE3).
		void CSSSE3::phsubw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PHSUBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract (SSSE3).
		void CSSSE3::phsubw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHSUBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract (SSSE3).
		void CSSSE3::phsubd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PHSUBD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract (SSSE3).
		void CSSSE3::phsubd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHSUBD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract (SSSE3).
		void CSSSE3::phsubd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PHSUBD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract (SSSE3).
		void CSSSE3::phsubd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHSUBD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract and Saturate (SSSE3).
		void CSSSE3::phsubsw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PHSUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract and Saturate (SSSE3).
		void CSSSE3::phsubsw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHSUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract and Saturate (SSSE3).
		void CSSSE3::phsubsw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PHSUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Horizontal Subtract and Saturate (SSSE3).
		void CSSSE3::phsubsw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PHSUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Multiply and Add Packed Signed and Unsigned Bytes (SSSE3).
		void CSSSE3::pmaddubsw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PMADDUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Multiply and Add Packed Signed and Unsigned Bytes (SSSE3).
		void CSSSE3::pmaddubsw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMADDUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Multiply and Add Packed Signed and Unsigned Bytes (SSSE3).
		void CSSSE3::pmaddubsw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMADDUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Multiply and Add Packed Signed and Unsigned Bytes (SSSE3).
		void CSSSE3::pmaddubsw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMADDUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PABSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PABSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PABSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PABSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PABSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PABSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PABSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PABSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PABSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PABSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PABSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Absolute Value (SSSE3).
		void CSSSE3::pabsd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PABSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply High with Round and Scale (SSSE3).
		void CSSSE3::pmulhrsw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PMULHRSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply High with Round and Scale (SSSE3).
		void CSSSE3::pmulhrsw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMULHRSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply High with Round and Scale (SSSE3).
		void CSSSE3::pmulhrsw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMULHRSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply High with Round and Scale (SSSE3).
		void CSSSE3::pmulhrsw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMULHRSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shuffle Bytes (SSSE3).
		void CSSSE3::pshufb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSHUFB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shuffle Bytes (SSSE3).
		void CSSSE3::pshufb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSHUFB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shuffle Bytes (SSSE3).
		void CSSSE3::pshufb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSHUFB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shuffle Bytes (SSSE3).
		void CSSSE3::pshufb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSHUFB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shuffle Bytes (SSSE3).
		void CSSSE3::palignr( const CMMReg& dst, const CMMReg& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PALIGNR, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Packed Shuffle Bytes (SSSE3).
		void CSSSE3::palignr( const CMMReg& dst, const CMem& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PALIGNR, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Packed Shuffle Bytes (SSSE3).
		void CSSSE3::palignr( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PALIGNR, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Packed Shuffle Bytes (SSSE3).
		void CSSSE3::palignr( const CXMMReg& dst, const CMem& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PALIGNR, &dst, &src, &imm8 );
		}

		// [Intel only]

		//------------------------------------------------------------------------------
		//Move Data After Swapping Bytes (SSE3 - Intel Atom).
		void CSSSE3::movbe( const CGPReg& dst, const CMem& src )
		{
			//assert(!dst.isGPB());
			m_PU._emitInstruction( INST_MOVBE, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Data After Swapping Bytes (SSE3 - Intel Atom).
		void CSSSE3::movbe( const CMem& dst, const CGPReg& src )
		{
			//assert(!src.isGPB());
			m_PU._emitInstruction( INST_MOVBE, &dst, &src );
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
