//PoolInstancer.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Pool instancer template

#ifndef CODEQOR_POOL_INSTANCER_H_2
#define CODEQOR_POOL_INSTANCER_H_2

#include "CodeQOR/instancing/sTOB.h"
#include "CodeQOR/DataStructures/TLinkedList.h"
#include "CodeQOR/DataStructures/TIndexedArray.h"

//------------------------------------------------------------------------------
//Declare a class to be pooled
#define __QOR_DECLARE_POOLED( _Class, _Policy, _CacheSize, _HardLimit )																					\
																																						\
friend class nsCodeQOR::CTPoolInstancer< _Class, _Policy, _CacheSize, _HardLimit >;

//------------------------------------------------------------------------------
//Macro to pool enable a class implementation
#define __QOR_IMPLEMENT_POOL( _Class, _Policy, _CacheSize, _HardLimit  )																				\
																																						\
template<> _Policy::TThreadSyncSinglePrimitive nsCodeQOR::CTPoolInstancer< _Class, _Policy, _CacheSize, _HardLimit >::m_Section;						\
template<> mem_traits< _Class >::CSource nsCodeQOR::CTPoolInstancer< _Class, _Policy, _CacheSize, _HardLimit >::m_Source;								\
template<> nsCodeQOR::CTLinkedList< _Class > nsCodeQOR::CTPoolInstancer< _Class, _Policy, _CacheSize, _HardLimit >::m_FreeList;							\
template<> nsCodeQOR::CTIndexedArray< _Class*, _Policy > nsCodeQOR::CTPoolInstancer< _Class, _Policy, _CacheSize, _HardLimit >::m_InUseList;			\
template<> unsigned int nsCodeQOR::CTPoolInstancer< _Class, _Policy, _CacheSize, _HardLimit >::m_uiCount;

//Add __QOR_DECLARE_POOLED( class-name, policy, cache_size, hard_limit ); to your class declaration
//Add __QOR_IMPLEMENT_POOL( class-name, policy, cache_size, hard_limit) to your class implementation

//Use nsCodeQOR::CTPoolInstancer< source_type, class-name, policy, cache_size, hard_limit >::Instance() to get an pointer to a pooled instance

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//------------------------------------------------------------------------------
	//Template for singleton instancing
	template< class T, class TPolicy, unsigned int t_uiCacheSize = 1, unsigned int t_uiHardLimit = 0 >
	class CTPoolInstancer
	{

	public:

		typedef typename TPolicy::TThreadSyncSinglePrimitive sectionType;
		typedef typename mem_traits< T >::CSource CTSource;

		//------------------------------------------------------------------------------
		CTPoolInstancer()
		{
		}

		//------------------------------------------------------------------------------
		CTPoolInstancer( const CTPoolInstancer& src )
		{
			*this = src;
		}

		//------------------------------------------------------------------------------
		CTPoolInstancer& operator = ( const CTPoolInstancer& src )
		{
			if( &src != this )
			{
				m_Source = src.Source();
			}
			return *this;
		}

		//------------------------------------------------------------------------------
		virtual ~CTPoolInstancer()
		{
		}

		//------------------------------------------------------------------------------
		//Get a pointer to an instance
		T* Instance()
		{
			T* pT = 0;
			TPolicy::TThreadSyncSingleLock Lock( m_Section );
			if( m_FreeList.GetCount() > 0 )
			{
				pT = m_FreeList.Dock();					
			}
			else
			{
				pT = Create();
			}

			if( pT )
			{
				Use( pT );
			}

			return pT;
		}

		//------------------------------------------------------------------------------
		//Release a pointer to an instance
		void Release( T* pT )	
		{
			if( pT )
			{
				TPolicy::TThreadSyncSingleLock Lock( m_Section );
				Unuse( pT );
				if( m_FreeList.GetCount() >= t_uiCacheSize )
				{
					Dispose( pT );
				}
				else
				{
					m_FreeList.Insert( 1, pT );
				}				
			}
		}

		//--------------------------------------------------------------------------------
		CTSource& Source( void )
		{
			return m_Source;
		}

	protected:

		//--------------------------------------------------------------------------------
		T* Create( void )
		{
			T* pInstance = 0;
			if( m_uiCount < t_uiHardLimit || t_uiHardLimit == 0 )
			{
				byte* pMemory = m_Source.Source( sizeof( T ) );
				pInstance = new( pMemory )( T );	//Create an instance
				m_uiCount++;
			}
			return pInstance;
		}

		//--------------------------------------------------------------------------------
		virtual void Dispose( T* pT )
		{
			pT->~T();						//The one instance is deleted
			m_Source.Free( reinterpret_cast< byte* >( pT ), sizeof( T ) );
			m_uiCount--;
		}

		//--------------------------------------------------------------------------------
		void Use( T* pT )
		{
			m_InUseList.Append( pT );
		}

		//--------------------------------------------------------------------------------
		void Unuse( T* pT )
		{
			unsigned long ulIndex = m_InUseList.Find( pT );
			m_InUseList.RemoveAt( ulIndex );
		}

	private:

		static sectionType m_Section;
		static CTSource m_Source;
		static CTLinkedList< T > m_FreeList;
		static CTIndexedArray< T*, TPolicy > m_InUseList;
		static unsigned int m_uiCount;
	};

}//nsCodeQOR

#endif//CODEQOR_POOL_INSTANCER_H_2
