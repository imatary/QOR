//WinQLBluetoothAuthenticateSession.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Comms/Bluetooth/WinQLBluetoothAuthenticationSession.h"
#include "WinQL/Application/SubSystems/WinQLBluetooth.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/BthProps.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CAuthenticateBluetoothSession );

	//--------------------------------------------------------------------------------
	CAuthenticateBluetoothSession::CAuthenticateBluetoothSession( CBluetooth* pHost ) : m_Library( CBthProps::Instance() ), m_pHost( pHost )
	{
		CBluetoothRemoteDevice::ref_type Proto = CBluetoothRemoteDevice::Prototype();
		Proto.As<CBluetoothRemoteDevice>()->GetInfo()->fConnected = 1;
		Proto.As<CBluetoothRemoteDevice>()->GetInfo()->fAuthenticated = 1;
		Proto.As<CBluetoothRemoteDevice>()->GetInfo()->fRemembered = 1;
		void* pHandle = 0;
		m_Library.BluetoothRegisterForAuthenticationEx( reinterpret_cast< ::BLUETOOTH_DEVICE_INFO* >( Proto.As<CBluetoothRemoteDevice>()->GetInfo() ), &pHandle, reinterpret_cast< ::PFN_AUTHENTICATION_CALLBACK_EX >( &CallbackEx ), this );
		m_Handle = pHandle;
		m_Handle.Attach( this );
	}

	//--------------------------------------------------------------------------------
	CAuthenticateBluetoothSession::CAuthenticateBluetoothSession( CBluetoothRemoteDevice::ref_type Device ): m_Library( CBthProps::Instance() ), m_pHost( 0 )
	{
		_WINQ_FCONTEXT( "CAuthenticateBluetoothSession::CAuthenticateBluetoothSession" );

		void* pHandle = 0;

		if( !Device.IsNull() )
		{
			m_Library.BluetoothRegisterForAuthentication( 
				reinterpret_cast< ::BLUETOOTH_DEVICE_INFO* >( Device.As<CBluetoothRemoteDevice>()->GetInfo() ),
				&pHandle,
				reinterpret_cast< ::PFN_AUTHENTICATION_CALLBACK >( &Callback ),
				this );
			m_Handle = pHandle;
			m_Handle.Attach( this );
		}
	}

	//--------------------------------------------------------------------------------
	CAuthenticateBluetoothSession::~CAuthenticateBluetoothSession()
	{
		_WINQ_FCONTEXT( "CAuthenticateBluetoothSession::~CAuthenticateBluetoothSession" );
		m_Library.BluetoothUnregisterAuthentication( m_Handle.Use() );
	}

	//--------------------------------------------------------------------------------
	bool CAuthenticateBluetoothSession::InstanceCallback( CBluetoothRemoteDevice::Info* pDevice )
	{
		_WINQ_FCONTEXT( "CAuthenticateBluetoothSession::InstanceCallback" );
		return false;
	}

	//--------------------------------------------------------------------------------
	void CAuthenticateBluetoothSession::SendResponse( CBluetoothRadio::ref_type Radio, CBluetoothRemoteDevice::Info* pDeviceInfo, CWString strPassKey )
	{
		_WINQ_FCONTEXT( "CAuthenticateBluetoothSession::SendResponse" );

		Radio.IsNull() ? m_Library.BluetoothSendAuthenticationResponse( 
			0,
			reinterpret_cast< ::BLUETOOTH_DEVICE_INFO* >( pDeviceInfo ),
			strPassKey.GetBuffer() ) : Radio.As<CBluetoothRadio>()->SendAuthenticationResponse( pDeviceInfo, strPassKey );
		strPassKey.ReleaseBuffer();
	}

	//--------------------------------------------------------------------------------
	bool CAuthenticateBluetoothSession::InstanceCallbackEx( CBluetoothRemoteDevice::Authentication_CallbackParams* pAuthCallbackParams )
	{
		_WINQ_FCONTEXT( "CAuthenticateBluetoothSession::InstanceCallbackEx" );

		if( m_pHost )
		{
			return m_pHost->OnAuthenticationRequest( pAuthCallbackParams );
		}
		return false;
	}

	//--------------------------------------------------------------------------------
	void CAuthenticateBluetoothSession::SendResponseEx( CBluetoothRadio::ref_type Radio, CAuthenticateBluetoothSession::Authentication_Response* pResponse )
	{
		_WINQ_FCONTEXT( "CAuthenticateBluetoothSession::SendResponseEx" );

		Radio.IsNull() ? m_Library.BluetoothSendAuthenticationResponseEx(
			0,
			reinterpret_cast< ::PBLUETOOTH_AUTHENTICATE_RESPONSE >( pResponse ) ) : Radio.As<CBluetoothRadio>()->SendAuthenticationResponseEx( pResponse );
	}

	//--------------------------------------------------------------------------------
	int CAuthenticateBluetoothSession::Callback( CAuthenticateBluetoothSession* pSession, CBluetoothRemoteDevice::Info* pDevice )
	{
		_WINQ_SFCONTEXT( "CAuthenticateBluetoothSession::Callback" );
		if( pSession )
		{
			return pSession->InstanceCallback( pDevice ) ? 1 : 0;
		}
		return 0;
	}

	//--------------------------------------------------------------------------------
	int CAuthenticateBluetoothSession::CallbackEx( CAuthenticateBluetoothSession* pSession, CBluetoothRemoteDevice::Authentication_CallbackParams* pAuthCallbackParams )
	{
		_WINQ_SFCONTEXT( "CAuthenticateBluetoothSession::CallbackEx" );
		if( pSession )
		{
			return pSession->InstanceCallbackEx( pAuthCallbackParams ) ? 1 : 0;
		}
		return 0;
	}

}//nsWin32
