//WinQLKeyboardInput.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Windows Keyboard

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "CompilerQOR.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/System/Devices/Keyboard/WinQLKeyboardInput.h"
__QCMP_WARNING_POP
#include "WinQL/Application/Threading/WinQLThread.h"
#include "WinQL/Application/Resources/WinQLResourceManager.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	

/*
	//--------------------------------------------------------------------------------
	CKeyboardLayout::ref_type CKeyboardLayout::FromHandle( CKeyboardLayoutHandle::refType hKL )
	{
		_WINQ_SFCONTEXT( "CKeyboardLayout::FromHandle" );
		CKeyboardLayout* pKL = 0;
		bool bOwningRef = false;
		__QOR_PROTECT
		{
			pKL = hKL->Object< CKeyboardLayout >();
			
			if( pKL == 0 )
			{
				pKL = CThread::GetCurrent()->ResourceManager().KeyboardLayoutHandleMap().FindHandle( hKL );
			}

			if( pKL == 0 )
			{
				pKL = new CKeyboardLayout( hKL );
				bOwningRef = true;
			}

		}__QOR_ENDPROTECT

		return ref(*pKL);
	}
*/
	//--Keyboard-Layouts--------------------------------------------------------------

	CKeyboardLayouts::CKeyboardLayouts()
	{
	}

	//------------------------------------------------------------------------------
	CKeyboardLayouts::~CKeyboardLayouts()
	{
	}
	/*
	//------------------------------------------------------------------------------
	unsigned int CKeyboardLayouts::count( void )
	{
		CKeyboardLayoutIterator it( 0 );
		return it.count();
	}

	//------------------------------------------------------------------------------
	CKeyboardLayouts::CKeyboardLayoutIterator CKeyboardLayouts::begin(void )
	{
		CKeyboardLayoutIterator it( 0 );
		return it;
	}

	//------------------------------------------------------------------------------
	CKeyboardLayouts::CKeyboardLayoutIterator CKeyboardLayouts::end( void )
	{
		CKeyboardLayoutIterator itfirst( 0 );
		CKeyboardLayoutIterator it( itfirst.count() + 1 );
		return it;
	}

	//------------------------------------------------------------------------------
	CKeyboardLayouts::CKeyboardLayoutIterator CKeyboardLayouts::CreateKeyboardLayout( unsigned int Flags, const CTString& strLayoutName )
	{
		CKeyboardLayout* pLayout = new CKeyboardLayout( strLayoutName, Flags, 0 );
		CKeyboardLayoutIterator it( pLayout->Handle() );
		return it;
	}

	//------------------------------------------------------------------------------
	CKeyboardLayouts::CKeyboardLayoutIterator CKeyboardLayouts::CreateKeyboardLayout( unsigned int Flags, unsigned short usPrimaryLanguage, unsigned short usSubLanguage, unsigned short usDeviceID )
	{
		CTString strKbdID;
		strKbdID.Reserve( KL_NAMELENGTH );
		unsigned long ulKbdID = MAKELANGID( usPrimaryLanguage, usSubLanguage ) | ( ( (unsigned long)(usDeviceID ) ) << 16 );
		CTString strFormat( _TXT( "%X" ) );
		strKbdID.ValidateBuffer( static_cast< unsigned short >( strKbdID.FormatV( strFormat, ulKbdID ) ) );
		CKeyboardLayout* pLayout = new CKeyboardLayout( strKbdID, Flags, 0 );
		CKeyboardLayoutIterator it( pLayout->Handle() );
		return it;
	}
	*/
	//--Keyboard-Layout-Iterator------------------------------------------------------
	/*
	unsigned int CKeyboardLayouts::CKeyboardLayoutIterator::count()
	{
		return _Thread().ResourceManager().KeyboardLayoutHandleMap().Size();
	}

	//--------------------------------------------------------------------------------
	CKeyboardLayouts::CKeyboardLayoutIterator::CKeyboardLayoutIterator()
	{
		m_pMap = &( _Thread().ResourceManager().KeyboardLayoutHandleMap() );
		m_pMap->AcquireAccess();
		m_ulIndex = 0;
	}

	//--------------------------------------------------------------------------------
	CKeyboardLayouts::CKeyboardLayoutIterator::CKeyboardLayoutIterator( unsigned long ulIndex )
	{
		m_pMap = &( _Thread().ResourceManager().KeyboardLayoutHandleMap() );
		m_pMap->AcquireAccess();
		m_ulIndex = ulIndex;
	}

	//--------------------------------------------------------------------------------
	CKeyboardLayouts::CKeyboardLayoutIterator::CKeyboardLayoutIterator( CKeyboardLayoutHandle::refType refHKL )
	{
		m_pMap = &( _Thread().ResourceManager().KeyboardLayoutHandleMap() );
		m_pMap->AcquireAccess();
		m_ulIndex = m_pMap->IndexOf( refHKL );
	}

	//--------------------------------------------------------------------------------
	CKeyboardLayouts::CKeyboardLayoutIterator::~CKeyboardLayoutIterator()
	{
		m_pMap->ReleaseAccess();
	}

	//--------------------------------------------------------------------------------
	CKeyboardLayouts::CKeyboardLayoutIterator& CKeyboardLayouts::CKeyboardLayoutIterator::operator ++()
	{
		m_ulIndex++;
		return *this;
	}

	//--------------------------------------------------------------------------------
	CKeyboardLayouts::CKeyboardLayoutIterator& CKeyboardLayouts::CKeyboardLayoutIterator::operator --()
	{
		m_ulIndex--;
		return *this;
	}

	//--------------------------------------------------------------------------------
	CKeyboardLayout& CKeyboardLayouts::CKeyboardLayoutIterator::operator *( void )
	{
		AcquireKL();
		return *m_pLayout;
	}

	//--------------------------------------------------------------------------------
	CKeyboardLayout* CKeyboardLayouts::CKeyboardLayoutIterator::operator ->( void )
	{
		m_pLayout = 0;
		AcquireKL();
		return m_pLayout;
	}

	//--------------------------------------------------------------------------------
	bool CKeyboardLayouts::CKeyboardLayoutIterator::operator == ( const CKeyboardLayouts::CKeyboardLayoutIterator& Cmp )
	{
		return m_ulIndex == Cmp.m_ulIndex;
	}

//protected:

	//--------------------------------------------------------------------------------
	void CKeyboardLayouts::CKeyboardLayoutIterator::AcquireKL( void )
	{
		m_pLayout = 0;
		if( m_ulIndex < m_pMap->Size() )
		{
			m_pLayout = m_pMap->operator[]( m_ulIndex ).Second();
		}
		if( m_pLayout == 0 )
		{
			m_pLayout = 0;
			//TODO: Raise error
		}
	}
	*/
	//--HotKeys-----------------------------------------------------------------------

	/*
	//--Keyboard----------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CKeyboard );

	//--------------------------------------------------------------------------------
	//Set up the process wide keyboard object
	//Get the current active keyboard layout by name and
	//create an object to represent it.
	CKeyboard::CKeyboard()
	{
		_WINQ_FCONTEXT( "CKeyboard::CKeyboard" );		
	}

	//--------------------------------------------------------------------------------
	CKeyboard::refType CKeyboard::Ref()
	{
		return refType( this );
	}

	//--------------------------------------------------------------------------------
	CKeyboard::~CKeyboard()
	{
		_WINQ_FCONTEXT( "CKeyboard::~CKeyboard" );
	}
*/


}//nsWin32
