//BfPlug.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_PLUG_H_3
#define BLUEFOOT_PLUG_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/DataStructures/TCRef.h"
#include "BfProtocol.h"

//--------------------------------------------------------------------------------
namespace nsBluefoot
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CBFConnectionPool;

	//--------------------------------------------------------------------------------
	//A generic connection point for IO
	//may be owned by a Connection Pool
	//handles connection and disconnection, actual reading and writing is dealt with by separate Sources and Sinks
	//May be driven by a Protocol which responds to connection/disconnection etc
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CBFPlug
	{
	public:

		typedef nsCodeQOR::CTCRef< CBFPlug > refPlugType;

		__QOR_DECLARE_OCLASS_ID( CBFPlug );

		friend class CBFConnectionPool;
		friend class refPlugType;
		
		CBFPlug( CBFConnectionPool* pPool = 0 );
		virtual ~CBFPlug();

		//Connection interface
		virtual bool Connect( void ) = 0;
		virtual void Disconnect( void );

		virtual bool HandlePendingConnectionResult( bool bConnected );			//Override for Asynchronous connections with custom pending connection states
		virtual void OnConnected( void );
		virtual void OnConnectionError( void );
		virtual void OnDisconnected( void );
		virtual void OnDisconnectionError( void );
		bool IsConnected( void );
		virtual const bool AsyncConnection( void ) const;
		void SetConnectionProtocol( CBFProtocol::ref_type refProtocol );
		CBFProtocol::ref_type Protocol( void );
		virtual void* GetSyncObject( void );
		virtual void SetSyncObject( void* pSyncObject );

		refPlugType Ref( void );

	protected:
		
		CBFProtocol::ref_type m_refProtocol;
		bool m_bConnected;

	private:

		void* m_pSyncObject;
		long m_lRefCount;
		CBFConnectionPool* m_pPool;

		void AddRef( void );
		void Release( void );
	};

}//nsBluefoot

#endif//BLUEFOOT_PLUG_H_3
