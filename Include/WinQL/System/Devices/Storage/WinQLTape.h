//WinQLTape.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Tape Device support

#ifndef WINQL_DEVICEIO_TAPE_H_3
#define WINQL_DEVICEIO_TAPE_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Handles.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
#include "WinQL/System/Devices/WinQLIODevice.h"

__QOR_DECLARE_REF(nsWin32, __WINQL, CTape, CTExtRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CDeviceHandle;

	//--------------------------------------------------------------------------------
	//A Tape device helper class
	class __QOR_INTERFACE( __WINQL ) CTape : public CDeviceInterface
	{
	public:

		__QOR_DECLARE_REF_TYPE(CTape);
		__QOR_DECLARE_OCLASS_ID(CTape);

		//--------------------------------------------------------------------------------
		enum E_PartitionMethod
		{
			E_TAPE_FIXED_PARTITIONS = 0,
			E_TAPE_SELECT_PARTITIONS,
			E_TAPE_INITIATOR_PARTITIONS
		} ;

		//--------------------------------------------------------------------------------
		enum E_EraseType
		{
			E_TAPE_ERASE_SHORT = 0,
			E_TAPE_ERASE_LONG
		};

		//--------------------------------------------------------------------------------
		enum E_ParameterOp
		{
			E_GET_TAPE_MEDIA_INFORMATION = 0,
			E_GET_TAPE_DRIVE_INFORMATION
		};

		//--------------------------------------------------------------------------------
		enum E_PositionType
		{
			E_TAPE_ABSOLUTE_POSITION = 0,
			E_TAPE_LOGICAL_POSITION
		};

		//--------------------------------------------------------------------------------
		enum E_PrepOperation
		{
			E_TAPE_LOAD = 0,
			E_TAPE_UNLOAD,
			E_TAPE_TENSION,
			E_TAPE_LOCK,
			E_TAPE_UNLOCK,
			E_TAPE_FORMAT
		};

		//--------------------------------------------------------------------------------
		enum E_PositionMethod
		{
			E_TAPE_REWIND = 0,
			E_TAPE_ABSOLUTE_BLOCK,
			E_TAPE_LOGICAL_BLOCK,
			E_TAPE_SPACE_END_OF_DATA = 4,
			E_TAPE_SPACE_RELATIVE_BLOCKS,
			E_TAPE_SPACE_FILEMARKS,
			E_TAPE_SPACE_SEQUENTIAL_FMKS,
			E_TAPE_SPACE_SETMARKS,
			E_TAPE_SPACE_SEQUENTIAL_SMKS
		};

		//--------------------------------------------------------------------------------
		enum E_TapeMarkType
		{
			E_TAPE_SETMARKS = 0,
			E_TAPE_FILEMARKS,
			E_TAPE_SHORT_FILEMARKS,
			E_TAPE_LONG_FILEMARKS
		};

		static nsCodeQOR::CTExternalRegEntry< CTape > RegEntry;

		CTape();
		CTape( CDeviceHandle& Handle );
		virtual ~CTape();
		unsigned long CreatePartition( E_PartitionMethod PartitionMethod, unsigned long dwCount, unsigned long dwSize );
		unsigned long Erase( E_EraseType EraseType, bool bImmediate );
		unsigned long GetParameters( E_ParameterOp Operation, unsigned long* lpdwSize, void* lpTapeInformation );
		unsigned long GetPosition( E_PositionType PositionType, unsigned long* lpdwPartition, unsigned long* lpdwOffsetLow, unsigned long* lpdwOffsetHigh );
		unsigned long GetStatus( void );
		unsigned long Prepare( E_PrepOperation Operation, bool bImmediate );
		unsigned long SetParameters( E_ParameterOp Operation, void* lpTapeInformation );
		unsigned long SetPosition( E_PositionMethod PositionMethod, unsigned long dwPartition, unsigned long dwOffsetLow, unsigned long dwOffsetHigh, bool bImmediate );
		unsigned long WriteTapemark( E_TapeMarkType TapemarkType, unsigned long dwTapemarkCount, bool bImmediate );

	protected:

		CDeviceHandle& m_Handle;

	private:

		CTape( const CTape& );
		CTape& operator = ( const CTape& );
	};

}//nsWin32

#endif//WINQL_DEVICEIO_TAPE_H_3
