//kVolumeManagement.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/Kernel32.h"
#include "ReturnCheck.h"

//------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	BOOL CKernel32::DefineDosDevice(DWORD dwFlags, LPCTSTR lpDeviceName, LPCTSTR lpTargetPath)
	{
		_WINQ_SFCONTEXT("CKernel32::DefineDosDevice");
		CCheckReturn< BOOL, CBoolCheck< nsCodeQOR::CError::ERR_LVL_CONTINUE, GENERAL_API_ERROR > >::TType bResult;
		bResult = ::DefineDosDevice(dwFlags, lpDeviceName, lpTargetPath);
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::DeleteVolumeMountPoint(LPCTSTR lpszVolumeMountPoint)
	{
		_WINQ_SFCONTEXT("CKernel32::DeleteVolumeMountPoint");
		CCheckReturn< BOOL, CBoolCheck< nsCodeQOR::CError::ERR_LVL_CONTINUE, GENERAL_API_ERROR > >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::DeleteVolumeMountPoint(lpszVolumeMountPoint);
#	else
		__QCMP_UNREF(lpszVolumeMountPoint);
		__WINQAPI_CONT_ERROR((API_REQUIRES_VERSION, _T("DeleteVolumeMountPoint"), _T("Windows 2000"), 0));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	HANDLE CKernel32::FindFirstVolume(LPTSTR lpszVolumeName, DWORD cchBufferLength)
	{
		_WINQ_SFCONTEXT("CKernel32::FindFirstVolume");
		CCheckReturn< HANDLE, CHandleCheck< nsCodeQOR::CError::ERR_LVL_CONTINUE, GENERAL_API_ERROR > >::TType h;
#	if ( _WIN32_WINNT >= 0x0500 )
		h = ::FindFirstVolume(lpszVolumeName, cchBufferLength);
#	else
		__QCMP_UNREF(cchBufferLength);
		__QCMP_UNREF(lpszVolumeName);
		__WINQAPI_CONT_ERROR((API_REQUIRES_VERSION, _T("FindFirstVolume"), _T("Windows 2000"), 0));
#	endif
		return h;
	}

	//--------------------------------------------------------------------------------
	HANDLE CKernel32::FindFirstVolumeMountPoint(LPTSTR lpszRootPathName, LPTSTR lpszVolumeMountPoint, DWORD cchBufferLength)
	{
		_WINQ_SFCONTEXT("CKernel32::FindFirstVolumeMountPoint");
		CCheckReturn< HANDLE, CHandleCheck< nsCodeQOR::CError::ERR_LVL_CONTINUE, GENERAL_API_ERROR > >::TType h;
#	if ( _WIN32_WINNT >= 0x0500 )
		h = ::FindFirstVolumeMountPoint(lpszRootPathName, lpszVolumeMountPoint, cchBufferLength);
		if (h == INVALID_HANDLE_VALUE)
		{
			DWORD dwError = CKernel32::GetLastError();
			if (dwError != ERROR_NO_MORE_FILES)//An error other than 'there are no more mount points'
			{
				//Could be ACCESS_DENIED = 5 if you aren't running as administrator or ERROR_INVALID_NAME = 123 if you try this on a soft drive
				//Either way the docs are poor and don't say why, when or what to do about it.
				//__WINQAPI_CONT_ERROR((GENERAL_API_ERROR, _T("FindFirstVolumeMountPoint"), 0));
			}
		}
#	else
		__QCMP_UNREF( cchBufferLength );
		__QCMP_UNREF( lpszVolumeMountPoint );
		__QCMP_UNREF( lpszRootPathName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FindFirstVolumeMountPoint" ), _T( "Windows 2000" ), 0 ));
#	endif
		return h;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FindNextVolume( HANDLE hFindVolume, LPTSTR lpszVolumeName, DWORD cchBufferLength )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindNextVolume" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::FindNextVolume( hFindVolume, lpszVolumeName, cchBufferLength );
		if( bResult == FALSE )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_NO_MORE_FILES )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "FindNextVolume" ), 0 ));
			}
		}
#	else
		__QCMP_UNREF( cchBufferLength );
		__QCMP_UNREF( lpszVolumeName );
		__QCMP_UNREF( hFindVolume );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FindNextVolume" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FindNextVolumeMountPoint( HANDLE hFindVolumeMountPoint, LPTSTR lpszVolumeMountPoint, DWORD cchBufferLength )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindNextVolumeMountPoint" );
		BOOL bResult = FALSE;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::FindNextVolumeMountPoint( hFindVolumeMountPoint, lpszVolumeMountPoint, cchBufferLength );
		if( bResult == FALSE )
		{
			DWORD dwError = CKernel32::GetLastError();
			if( dwError != ERROR_NO_MORE_FILES )
			{
				__WINQAPI_CONT_ERROR(( GENERAL_API_ERROR, _T( "FindNextVolumeMountPoint" ), 0 ));
			}
		}
#	else
		__QCMP_UNREF( cchBufferLength );
		__QCMP_UNREF( lpszVolumeMountPoint );
		__QCMP_UNREF( hFindVolumeMountPoint );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FindNextVolumeMountPoint" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FindVolumeClose( HANDLE hFindVolume )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindVolumeClose" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::FindVolumeClose( hFindVolume );
#	else
		__QCMP_UNREF( hFindVolume );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FindVolumeClose" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::FindVolumeMountPointClose( HANDLE hFindVolumeMountPoint )
	{
		_WINQ_SFCONTEXT( "CKernel32::FindVolumeMountPointClose" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::FindVolumeMountPointClose( hFindVolumeMountPoint );
#	else
		__QCMP_UNREF( hFindVolumeMountPoint );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FindVolumeMountPointClose" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//TODO: Check parameter for trialing slash
	UINT CKernel32::GetDriveType( LPCTSTR lpRootPathName )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetDriveType" );
		UINT uiResult = 0;
		uiResult = ::GetDriveType( lpRootPathName );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::GetLogicalDrives(void)
	{
		_WINQ_SFCONTEXT( "CKernel32::GetLogicalDrives" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		dwResult = ::GetLogicalDrives();
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	//TODO: Check Buffer for writable mem at length specified
	DWORD CKernel32::GetLogicalDriveStrings( DWORD nBufferLength, LPTSTR lpBuffer )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetLogicalDriveStrings" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		dwResult = ::GetLogicalDriveStrings( nBufferLength, lpBuffer );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetVolumeInformation( LPCTSTR lpRootPathName, LPTSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPTSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetVolumeInformation" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::GetVolumeInformation( lpRootPathName, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetVolumeInformationByHandleW( HANDLE hFile, LPWSTR lpVolumeNameBuffer, DWORD nVolumeNameSize, LPDWORD lpVolumeSerialNumber, LPDWORD lpMaximumComponentLength, LPDWORD lpFileSystemFlags, LPWSTR lpFileSystemNameBuffer, DWORD nFileSystemNameSize )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetVolumeInformationByHandleW" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0600 )
		bResult = ::GetVolumeInformationByHandleW( hFile, lpVolumeNameBuffer, nVolumeNameSize, lpVolumeSerialNumber, lpMaximumComponentLength, lpFileSystemFlags, lpFileSystemNameBuffer, nFileSystemNameSize );
#	else
		__QCMP_UNREF( nFileSystemNameSize );
		__QCMP_UNREF( lpFileSystemNameBuffer );
		__QCMP_UNREF( lpFileSystemFlags );
		__QCMP_UNREF( lpMaximumComponentLength );
		__QCMP_UNREF( lpVolumeSerialNumber );
		__QCMP_UNREF( nVolumeNameSize );
		__QCMP_UNREF( lpVolumeNameBuffer );
		__QCMP_UNREF( hFile );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetVolumeInformationByHandleW" ), _T( "Windows Vista" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetVolumeNameForVolumeMountPoint( LPCTSTR lpszVolumeMountPoint, LPTSTR lpszVolumeName, DWORD cchBufferLength )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetVolumeNameForVolumeMountPoint" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::GetVolumeNameForVolumeMountPoint( lpszVolumeMountPoint, lpszVolumeName, cchBufferLength );
#	else
		__QCMP_UNREF( cchBufferLength );
		__QCMP_UNREF( lpszVolumeName );
		__QCMP_UNREF( lpszVolumeMountPoint );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetVolumeNameForVolumeMountPoint" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetVolumePathName( LPCTSTR lpszFileName, LPTSTR lpszVolumePathName, DWORD cchBufferLength )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetVolumePathName" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::GetVolumePathName( lpszFileName, lpszVolumePathName, cchBufferLength );
#	else
		__QCMP_UNREF( cchBufferLength );
		__QCMP_UNREF( lpszVolumePathName );
		__QCMP_UNREF( lpszFileName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetVolumePathName" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::GetVolumePathNamesForVolumeName( LPCTSTR lpszVolumeName, LPTSTR lpszVolumePathNames, DWORD cchBufferLength, PDWORD lpcchReturnLength )
	{
		_WINQ_SFCONTEXT( "CKernel32::GetVolumePathNamesForVolumeName" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::GetVolumePathNamesForVolumeName( lpszVolumeName, lpszVolumePathNames, cchBufferLength, lpcchReturnLength );
#	else
		__QCMP_UNREF( lpcchReturnLength );
		__QCMP_UNREF( cchBufferLength );
		__QCMP_UNREF( lpszVolumePathNames );
		__QCMP_UNREF( lpszVolumeName );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetVolumePathName" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CKernel32::QueryDosDevice( LPCTSTR lpDeviceName, LPTSTR lpTargetPath, DWORD ucchMax )
	{
		_WINQ_SFCONTEXT( "CKernel32::QueryDosDevice" );
		CCheckReturn< DWORD, CCheckNonZero< DWORD > >::TType dwResult;
		dwResult = ::QueryDosDevice( lpDeviceName, lpTargetPath, ucchMax );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetVolumeLabel( LPCTSTR lpRootPathName, LPCTSTR lpVolumeName )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetVolumeLabel" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
		bResult = ::SetVolumeLabel( lpRootPathName, lpVolumeName );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CKernel32::SetVolumeMountPoint( LPCTSTR lpszVolumeMountPoint, LPCTSTR lpszVolumeName )
	{
		_WINQ_SFCONTEXT( "CKernel32::SetVolumeMountPoint" );
		CCheckReturn< BOOL, CBoolCheck<> >::TType bResult;
#	if ( _WIN32_WINNT >= 0x0500 )
		bResult = ::SetVolumeMountPoint( lpszVolumeMountPoint, lpszVolumeName );
#	else
		__QCMP_UNREF( lpszVolumeName );
		__QCMP_UNREF( lpszVolumeMountPoint );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetVolumeMountPoint" ), _T( "Windows 2000" ), 0 ));
#	endif
		return bResult;
	}

}//nsWinQAPI

