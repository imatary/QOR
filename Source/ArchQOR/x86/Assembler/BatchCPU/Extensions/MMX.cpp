//MMX.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement MMX extensions

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/Assembler/BatchCPU/Extensions/MMX.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		CMMX::CMMX( Cx86CPUCore& refCPU ) : Cx86ISetExtension( refCPU )
		{
		}

		//------------------------------------------------------------------------------
		CMMX::~CMMX()
		{
		}

		//------------------------------------------------------------------------------
		//Empty MMX state.
		void CMMX::emms()
		{
			m_PU._emitInstruction( INST_EMMS );
		}

		//------------------------------------------------------------------------------
		//Move DWord (MMX).
		void CMMX::movd( const CMem& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move DWord (MMX).
		void CMMX::movd( const CGPReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move DWord (MMX).
		void CMMX::movd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move DWord (MMX).
		void CMMX::movd( const CMMReg& dst, const CGPReg& src )
		{
			m_PU._emitInstruction( INST_MOVD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move QWord (MMX).
		void CMMX::movq( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move QWord (MMX).
		void CMMX::movq( const CMem& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVQ, &dst, &src );
		}

#	if ( QOR_ARCH_WORDSIZE == 64 )
		//------------------------------------------------------------------------------
		//Move QWord (MMX).
		void CMMX::movq( const CGPReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVQ, &dst, &src );
		}
#	endif

		//------------------------------------------------------------------------------
		//Move QWord (MMX).
		void CMMX::movq( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVQ, &dst, &src );
		}

#	if ( QOR_ARCH_WORDSIZE == 64 )
		//------------------------------------------------------------------------------
		//Move QWord (MMX).
		void CMMX::movq( const CMMReg& dst, const CGPReg& src )
		{
			m_PU._emitInstruction( INST_MOVQ, &dst, &src );
		}
#	endif
		//------------------------------------------------------------------------------
		//Pack with Signed Saturation (MMX).
		void CMMX::packsswb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PACKSSWB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Signed Saturation (MMX).
		void CMMX::packsswb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PACKSSWB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Signed Saturation (MMX).
		void CMMX::packssdw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PACKSSDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Signed Saturation (MMX).
		void CMMX::packssdw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PACKSSDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Unsigned Saturation (MMX).
		void CMMX::packuswb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PACKUSWB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Unsigned Saturation (MMX).
		void CMMX::packuswb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PACKUSWB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed BYTE Add (MMX).
		void CMMX::paddb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed BYTE Add (MMX).
		void CMMX::paddb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed WORD Add (MMX).
		void CMMX::paddw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed WORD Add (MMX).
		void CMMX::paddw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DWORD Add (MMX).
		void CMMX::paddd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DWORD Add (MMX).
		void CMMX::paddd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add with Saturation (MMX).
		void CMMX::paddsb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add with Saturation (MMX).
		void CMMX::paddsb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add with Saturation (MMX).
		void CMMX::paddsw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add with Saturation (MMX).
		void CMMX::paddsw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add Unsigned with Saturation (MMX).
		void CMMX::paddusb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDUSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add Unsigned with Saturation (MMX).
		void CMMX::paddusb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDUSB, &dst, &src );
		}
		//------------------------------------------------------------------------------
		//Packed Add Unsigned with Saturation (MMX).
		void CMMX::paddusw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDUSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add Unsigned with Saturation (MMX).
		void CMMX::paddusw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDUSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Logical AND (MMX).
		void CMMX::pand( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PAND, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Logical AND (MMX).
		void CMMX::pand( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PAND, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Logical AND Not (MMX).
		void CMMX::pandn( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PANDN, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Logical AND Not (MMX).
		void CMMX::pandn( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PANDN, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (BYTES) (MMX).
		void CMMX::pcmpeqb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPEQB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (BYTES) (MMX).
		void CMMX::pcmpeqb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPEQB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (WORDS) (MMX).
		void CMMX::pcmpeqw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPEQW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (WORDS) (MMX).
		void CMMX::pcmpeqw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPEQW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (DWORDS) (MMX).
		void CMMX::pcmpeqd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPEQD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (DWORDS) (MMX).
		void CMMX::pcmpeqd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPEQD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (BYTES) (MMX).
		void CMMX::pcmpgtb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPGTB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (BYTES) (MMX).
		void CMMX::pcmpgtb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPGTB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (WORDS) (MMX).
		void CMMX::pcmpgtw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPGTW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (WORDS) (MMX).
		void CMMX::pcmpgtw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPGTW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (DWORDS) (MMX).
		void CMMX::pcmpgtd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPGTD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (DWORDS) (MMX).
		void CMMX::pcmpgtd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPGTD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply High (MMX).
		void CMMX::pmulhw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PMULHW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply High (MMX).
		void CMMX::pmulhw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMULHW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply Low (MMX).
		void CMMX::pmullw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PMULLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply Low (MMX).
		void CMMX::pmullw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMULLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bitwise Logical OR (MMX).
		void CMMX::por( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_POR, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bitwise Logical OR (MMX).
		void CMMX::por( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_POR, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply and Add (MMX).
		void CMMX::pmaddwd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PMADDWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply and Add (MMX).
		void CMMX::pmaddwd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMADDWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (MMX).
		void CMMX::pslld( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSLLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (MMX).
		void CMMX::pslld( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSLLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (MMX).
		void CMMX::pslld( const CMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSLLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (MMX).
		void CMMX::psllq( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSLLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (MMX).
		void CMMX::psllq( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSLLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (MMX).
		void CMMX::psllq( const CMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSLLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (MMX).
		void CMMX::psllw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSLLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (MMX).
		void CMMX::psllw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSLLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (MMX).
		void CMMX::psllw( const CMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSLLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (MMX).
		void CMMX::psrad( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSRAD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (MMX).
		void CMMX::psrad( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSRAD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (MMX).
		void CMMX::psrad( const CMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRAD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (MMX).
		void CMMX::psraw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSRAW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (MMX).
		void CMMX::psraw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSRAW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (MMX).
		void CMMX::psraw( const CMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRAW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (MMX).
		void CMMX::psrld( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSRLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (MMX).
		void CMMX::psrld( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSRLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (MMX).
		void CMMX::psrld( const CMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (MMX).
		void CMMX::psrlq( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSRLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (MMX).
		void CMMX::psrlq( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSRLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (MMX).
		void CMMX::psrlq( const CMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (MMX).
		void CMMX::psrlw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSRLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (MMX).
		void CMMX::psrlw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSRLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (MMX).
		void CMMX::psrlw( const CMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (MMX).
		void CMMX::psubb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (MMX).
		void CMMX::psubb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (MMX).
		void CMMX::psubw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (MMX).
		void CMMX::psubw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (MMX).
		void CMMX::psubd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (MMX).
		void CMMX::psubd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Saturation (MMX).
		void CMMX::psubsb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Saturation (MMX).
		void CMMX::psubsb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Saturation (MMX).
		void CMMX::psubsw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Saturation (MMX).
		void CMMX::psubsw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Unsigned Saturation (MMX).
		void CMMX::psubusb( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBUSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Unsigned Saturation (MMX).
		void CMMX::psubusb( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBUSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Unsigned Saturation (MMX).
		void CMMX::psubusw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBUSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Unsigned Saturation (MMX).
		void CMMX::psubusw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBUSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpckhbw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpckhbw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpckhwd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpckhwd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpckhdq( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpckhdq( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpcklbw( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpcklbw( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpcklwd( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpcklwd( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpckldq( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Packed Data (MMX).
		void CMMX::punpckldq( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bitwise Exclusive OR (MMX).
		void CMMX::pxor( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PXOR, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bitwise Exclusive OR (MMX).
		void CMMX::pxor( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PXOR, &dst, &src );
		}



		//------------------------------------------------------------------------------
		CMMXExt::CMMXExt( Cx86CPUCore& refCPU ) : CMMX( refCPU )
		{
		}

		//------------------------------------------------------------------------------
		CMMXExt::~CMMXExt()
		{
		}


	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
