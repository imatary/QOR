//WinQLWindowClassModel.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Model for Window category data

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in members for later usage" )
#include "WinQL/GUI/VisualModels/WindowClassModel.h"
#include "WinQL/GUI/Window.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	
	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CWindowClassModel );
	
	//--------------------------------------------------------------------------------
	//default construct
	CWindowClassModel::CWindowClassModel( CModel* pContainer ) : CPropertySet( pContainer )
	,	m_Style( this, _TXT("Style" ).str(), nsMammut::CPropertyBitSet( this ) )
	,	m_VRedraw( m_Style.ValueRef(), _TXT( "VRedraw").str(), true )
	,	m_HRedraw( m_Style.ValueRef(), _TXT( "HRedraw").str(), true )
	,	m_DblClicks( m_Style.ValueRef(), _TXT( "DblClicks").str(), true )
	,	m_OwnDC( m_Style.ValueRef(), _TXT( "OwnDC").str(), false )
	,	m_ClassDC( m_Style.ValueRef(), _TXT( "ClassDC").str(), false )
	,	m_ParentDC( m_Style.ValueRef(), _TXT( "ParentDC").str(), false )
	,	m_NoClose( m_Style.ValueRef(), _TXT( "NoClose").str(), false )
	,	m_SaveBits( m_Style.ValueRef(), _TXT( "SaveBits").str(), false )
	,	m_ByteAlignClient( m_Style.ValueRef(), _TXT( "ByteAlignClient").str(), false )
	,	m_ByteAlignWindow( m_Style.ValueRef(), _TXT( "ByteAlignWindow").str(), false )
	,	m_GlobalClass( m_Style.ValueRef(), _TXT( "GlobalClass").str(), false )
	,	m_IME( m_Style.ValueRef(), _TXT( "IME").str(), false )
	,	m_DropShadow( m_Style.ValueRef(), _TXT( "DropShadow").str(), false )
	,	m_ClassExtra( this, _TXT( "ClassExtraBytes" ).str(), 0 )
	,	m_WindowExtra( this, _TXT( "WindowExtraBytes" ).str(), 0 )
	,	m_pIcon( this, _TXT( "Icon" ).str(), 0 )
	,	m_pSmallIcon( this, _TXT( "SmallIcon" ).str(), 0 )
	,	m_pCursor( this, _TXT( "Cursor" ).str(), 0 )
	,	m_pBackgroundBrush( this, _TXT( "BackgroundBrush" ).str(), 0 )
	,	m_MenuName( this, _TXT("MenuName").str(), 0 )
	,	m_ClassName( this, _TXT("ClassName").str(), 0 )
	,	m_pModule( this, _TXT( "Module" ).str(), 0 )
	,	m_WndClassID( this, _TXT( "WndClassID" ).str(), COSWindow::ClassID() )
	{
	}

	//--------------------------------------------------------------------------------
	CWindowClassModel::~CWindowClassModel()
	{
	}

	//--------------------------------------------------------------------------------
	//Copy construct
	CWindowClassModel::CWindowClassModel( const CWindowClassModel& src ) : CPropertySet( src )
	,	m_Style( this, src.m_Style )
	,	m_VRedraw( m_Style.ValueRef(), src.m_VRedraw )
	,	m_HRedraw( m_Style.ValueRef(), src.m_HRedraw )
	,	m_DblClicks( m_Style.ValueRef(), src.m_DblClicks )
	,	m_OwnDC( m_Style.ValueRef(), src.m_OwnDC )
	,	m_ClassDC( m_Style.ValueRef(), src.m_ClassDC )
	,	m_ParentDC( m_Style.ValueRef(), src.m_ParentDC )
	,	m_NoClose( m_Style.ValueRef(), src.m_NoClose )
	,	m_SaveBits( m_Style.ValueRef(), src.m_SaveBits )
	,	m_ByteAlignClient( m_Style.ValueRef(), src.m_ByteAlignClient )
	,	m_ByteAlignWindow( m_Style.ValueRef(), src.m_ByteAlignWindow )
	,	m_GlobalClass( m_Style.ValueRef(), src.m_GlobalClass )
	,	m_IME( m_Style.ValueRef(), src.m_IME )
	,	m_DropShadow( m_Style.ValueRef(), src.m_DropShadow )
	,	m_ClassExtra( this, src.m_ClassExtra )
	,	m_WindowExtra( this, src.m_WindowExtra )
	,	m_pIcon( this, src.m_pIcon )
	,	m_pSmallIcon( this, src.m_pSmallIcon )
	,	m_pCursor( this, src.m_pCursor )
	,	m_pBackgroundBrush( this, src.m_pBackgroundBrush )
	,	m_MenuName( this, src.m_MenuName )
	,	m_ClassName( this, src.m_ClassName )
	,	m_pModule( this, src.m_pModule )
	,	m_WndClassID( this, src.m_WndClassID )
	{
	}

	//--------------------------------------------------------------------------------
	//Construct from a generic PropertySet
	CWindowClassModel::CWindowClassModel( nsMammut::CPropertySet& src ) : CPropertySet( src )
	,	m_Style(			this, _TXT( "Style" ).str(),				src[ _TXT( "Style" ).str()			] )
	,	m_VRedraw(			m_Style.ValueRef(), _TXT( "VRedraw" ).str(),			src[ _TXT( "VRedraw" ).str()			]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_HRedraw(			m_Style.ValueRef(), _TXT( "HRedraw" ).str(),			src[ _TXT( "HRedraw" ).str()			]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_DblClicks(		m_Style.ValueRef(), _TXT( "DblClicks" ).str(),			src[ _TXT( "DblClicks" ).str()			]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_OwnDC(			m_Style.ValueRef(), _TXT( "OwnDC" ).str(),				src[ _TXT( "OwnDC" ).str()				]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_ClassDC(			m_Style.ValueRef(), _TXT( "ClassDC" ).str(),			src[ _TXT( "ClassDC" ).str()			]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_ParentDC(			m_Style.ValueRef(), _TXT( "ParentDC" ).str(),			src[ _TXT( "ParentDC" ).str()			]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_NoClose(			m_Style.ValueRef(), _TXT( "NoClose" ).str(),			src[ _TXT( "NoClose" ).str()			]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_SaveBits(			m_Style.ValueRef(), _TXT( "SaveBits" ).str(),			src[ _TXT( "SaveBits" ).str()			]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_ByteAlignClient(	m_Style.ValueRef(), _TXT( "ByteAlignClient" ).str(),	src[ _TXT( "ByteAlignClient" ).str()	]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_ByteAlignWindow(	m_Style.ValueRef(), _TXT( "ByteAlignWindow" ).str(),	src[ _TXT( "ByteAlignWindow" ).str()	]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_GlobalClass(		m_Style.ValueRef(), _TXT( "GlobalClass" ).str(),		src[ _TXT( "GlobalClass" ).str()		]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_IME(				m_Style.ValueRef(), _TXT( "IME" ).str(),				src[ _TXT( "IME" ).str()				]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_DropShadow(		m_Style.ValueRef(), _TXT( "DropShadow" ).str(),			src[ _TXT( "DropShadow" ).str()			]->As< nsMammut::CProperty< bool > >().Value() )
	,	m_ClassExtra(		this, _TXT( "ClassExtraBytes" ).str(),	src[ _TXT( "ClassExtraBytes" ).str()	]->As< nsMammut::CProperty< unsigned int > >().Value() )
	,	m_WindowExtra(		this, _TXT( "WindowExtraBytes" ).str(),	src[ _TXT( "WindowExtraBytes" ).str()	]->As< nsMammut::CProperty< unsigned int > >().Value() )
	,	m_pIcon(			this, _TXT( "Icon" ).str(),				src[ _TXT( "Icon" ).str()				]->As< nsMammut::CProperty< CIcon* > >().Value() )
	,	m_pSmallIcon(		this, _TXT( "SmallIcon" ).str(),		src[ _TXT( "SmallIcon" ).str()			]->As< nsMammut::CProperty< CIcon* > >().Value() )
	,	m_pCursor(			this, _TXT( "Cursor" ).str(),			src[ _TXT( "Cursor" ).str()				]->As< nsMammut::CProperty< CCursor* > >().Value() )
	,	m_pBackgroundBrush(	this, _TXT( "BackgroundBrush" ).str(),	src[ _TXT( "BackgroundBrush" ).str()	]->As< nsMammut::CProperty< CBrush* > >().Value() )
	,	m_MenuName(			this, _TXT( "MenuName" ).str(),			src[ _TXT( "MenuName" ).str()			]->As< nsMammut::CProperty< const TCHAR* > >().Value() )
	,	m_ClassName(		this, _TXT( "ClassName" ).str(),		src[ _TXT( "ClassName" ).str()			]->As< nsMammut::CProperty< const TCHAR* > >().Value() )
	,	m_pModule(			this, _TXT( "Module" ).str(),			src[ _TXT( "Module" ).str()				]->As< nsMammut::CProperty< CWinModule* > >().Value() )
	,	m_WndClassID(		this, _TXT( "WndClassID" ).str(),		src[ _TXT( "WndClassID" ).str()			]->As< nsMammut::CProperty< nsCodeQOR::mxGUID* > >().Value() )
	{
	}

	//--------------------------------------------------------------------------------
	//assign from another CWindowClassModel
	CWindowClassModel& CWindowClassModel::operator = ( const CWindowClassModel& src )
	{
		if( &src != this )
		{
			m_VRedraw = src.m_VRedraw;
			m_HRedraw = src.m_HRedraw;
			m_DblClicks = src.m_DblClicks;
			m_OwnDC = src.m_OwnDC;
			m_ClassDC = src.m_ClassDC;
			m_ParentDC = src.m_ParentDC;
			m_NoClose = src.m_NoClose;
			m_SaveBits = src.m_SaveBits;
			m_ByteAlignClient = src.m_ByteAlignClient;
			m_ByteAlignWindow = src.m_ByteAlignWindow;
			m_GlobalClass = src.m_GlobalClass;
			m_IME = src.m_IME;
			m_DropShadow = src.m_DropShadow;
			m_ClassExtra = src.m_ClassExtra;
			m_WindowExtra = src.m_WindowExtra;
			m_pIcon = src.m_pIcon;
			m_pSmallIcon = src.m_pSmallIcon;
			m_pCursor = src.m_pCursor;
			m_pBackgroundBrush = src.m_pBackgroundBrush;
			m_MenuName = src.m_MenuName;
			m_ClassName = src.m_ClassName;
			m_pModule = src.m_pModule;
			m_WndClassID = src.m_WndClassID;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	//assign from a generic property set
	CWindowClassModel& CWindowClassModel::operator = ( const nsMammut::CPropertySet& src )
	{
		if( &src != this )
		{
			m_Style					=	src[ _TXT( "Style" ).str()			];
			/*
			m_VRedraw 				=	src[ _TXT( "VRedraw" )			];
			m_HRedraw 				=	src[ _TXT( "HRedraw" )			];
			m_DblClicks 			=	src[ _TXT( "DblClicks" )		];
			m_OwnDC 				=	src[ _TXT( "OwnDC" )			];
			m_ClassDC 				=	src[ _TXT( "ClassDC" )			];
			m_ParentDC	 			=	src[ _TXT( "ParentDC" )			];
			m_NoClose 				=	src[ _TXT( "NoClose" )			];
			m_SaveBits				=	src[ _TXT( "SaveBits" )			];
			m_ByteAlignClient		=	src[ _TXT( "ByteAlignClient" )	];
			m_ByteAlignWindow 		=	src[ _TXT( "ByteAlignWindow" )	];
			m_GlobalClass 			=	src[ _TXT( "GlobalClass" )		];
			m_IME 					=	src[ _TXT( "IME" )				];
			m_DropShadow 			=	src[ _TXT( "DropShadow" )		];
			*/
			m_ClassExtra 			=	src[ _TXT( "ClassExtraBytes" ).str()	];
			m_WindowExtra 			=	src[ _TXT( "WindowExtraBytes" ).str() ];
			m_pIcon 				=	src[ _TXT( "Icon" ).str()				];
			m_pSmallIcon 			=	src[ _TXT( "SmallIcon" ).str()		];
			m_pCursor 				=	src[ _TXT( "Cursor" ).str()			];
			m_pBackgroundBrush 		=	src[ _TXT( "BackgroundBrush" ).str()	];
			m_MenuName				=	src[ _TXT( "MenuName" ).str()			];
			m_ClassName				=	src[ _TXT( "ClassName" ).str()		];
			m_pModule				=	src[ _TXT( "Module" ).str()			];
			m_WndClassID			=	src[ _TXT( "WndClass" ).str()			];
		}
		return *this;
	}

}//nsWin32
