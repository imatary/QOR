//BfSink.h

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_SINK_H_3
#define BLUEFOOT_SINK_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//Defines a Sink for a Bluefoot pipeline

#include "BfElement.h"
#include "AppocritaQOR/Event.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	class CSource;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CSink : public CElement
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CSink);

		//------------------------------------------------------------------------------
		class CWriteSuccess : public nsQOR::CEvent
		{
		public:

			//------------------------------------------------------------------------------
			CWriteSuccess() : CEvent()
			{
				m_ulUnitsWritten = 0;
			}

			unsigned long GetUnitsWritten(void) { return m_ulUnitsWritten; }


		protected:

			//------------------------------------------------------------------------------
			void SetUnitsWritten(unsigned long ulUnitsWritten)
			{
				m_ulUnitsWritten = ulUnitsWritten;
				Signal();
			}

			unsigned long m_ulUnitsWritten;
			friend class CSink;
		}WriteSuccess;

		//------------------------------------------------------------------------------
		class CWriteError : public nsQOR::CEvent
		{
		public:

			//------------------------------------------------------------------------------
			CWriteError() : CEvent()
			{
				m_ulUnitsWritten = 0;
				m_ulError = 0;
			}

			unsigned long GetUnitsWritten(void) { return m_ulUnitsWritten; }
			unsigned long GetError(void) { return m_ulError; }

		protected:

			//------------------------------------------------------------------------------
			void SetData(unsigned long ulUnitsWritten, unsigned long ulError)
			{
				m_ulUnitsWritten = ulUnitsWritten;
				m_ulError = ulError;
				Signal();
			}

			unsigned long m_ulUnitsWritten;
			unsigned long m_ulError;
			friend class CSink;
		}WriteError;

		CSink();
		virtual ~CSink();
		CSink(const CSink& src);
		CSink& operator = (const CSink& src);

		virtual void SetSource(CSource* pSource);
		virtual CSource* GetSource(void);

		virtual bool Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite = 1 ) = 0; 

		//------------------------------------------------------------------------------
		virtual void OnWriteSuccess( unsigned long ulUnitsWritten)
		{
			WriteSuccess.SetUnitsWritten(ulUnitsWritten);
		}

		//------------------------------------------------------------------------------
		virtual void OnWriteError(unsigned long ulError, unsigned long ulUnitsWritten)
		{
			WriteError.SetData(ulUnitsWritten, ulError);
		}

		//------------------------------------------------------------------------------
		virtual bool IsSink( void )
		{
			return true;
		}

		//------------------------------------------------------------------------------
		virtual eFlowMode GetMode(void)
		{
			return m_pParent ? m_pParent->GetMode() : ePull;
		}

	protected:

		CSource* m_pSource;

		virtual unsigned long GetData( nsCodeQOR::CTLRef< byte >& Data, unsigned long ulUnitsRequired );
	};

	//------------------------------------------------------------------------------
	template< class TSink >
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CSinkProxy : public CSink
	{
	public:

		//------------------------------------------------------------------------------
		CSinkProxy( TSink& Sink ) : CSink()
		, m_Sink( Sink )
		{
		}

		//------------------------------------------------------------------------------
		virtual ~CSinkProxy()
		{
		}

		//--------------------------------------------------------------------------------
		CSinkProxy( const CSinkProxy& src ) : CSink( src )
		, m_Sink( src.m_Sink )
		{
		}

		//--------------------------------------------------------------------------------
		CSinkProxy& operator = ( const CSinkProxy& src )
		{
			return *this;
		}

		//--------------------------------------------------------------------------------
		virtual void SetSource( CSource* pSource )
		{
			m_pSource = pSource;
		}

		//--------------------------------------------------------------------------------
		virtual CSource* GetSource(void)
		{
			return m_pSource;
		}

		//--------------------------------------------------------------------------------
		virtual bool Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite = 1 )
		{
			return m_Sink.Write( ulUnitsWritten, ulUnitsToWrite );
		}

	private:

		TSink& m_Sink;
	};

	class __QOR_INTERFACE( __BLUEFOOTQOR ) CPlug;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CNULLSink : public CSink
	{
	public:

		//--------------------------------------------------------------------------------
		CNULLSink( CPlug* ) : CSink()
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CNULLSink()
		{
		}

		//--------------------------------------------------------------------------------
		virtual bool Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite = 1 )
		{	
			nsCodeQOR::CTLRef< byte > Data;
			ulUnitsToWrite = GetData( Data, ulUnitsToWrite );
			ulUnitsWritten = ulUnitsToWrite;

			if( GetBuffer() )
			{
				GetBuffer()->ReadAcknowledge( ulUnitsWritten );
			}

			return ulUnitsWritten > 0 ? true : false;
		}

		//--------------------------------------------------------------------------------
		virtual bool Flush( void )
		{
			return true;
		}
		
	};

}//nsBluefoot

#endif//BLUEFOOT_SINK_H_3
