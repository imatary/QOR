//WinQLStandardIO.h

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//WinQL StandardIO Subsystem

#ifndef WINQL_SUBSYS_STANDARDIO_H_1
#define WINQL_SUBSYS_STANDARDIO_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "AppocritaQOR/Application.h"
#include "AppocritaQOR/SubSystem.h"
#include "WinQL/CodeServices/Handles/WinQLHandle.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/Threading/WinQLSynchronization.h"
#include "WinQL/Application/Console/WinQLConsoleHelper.h"
#include <deque>
#include <map>

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CWin32Application;
	class __QOR_INTERFACE( __WINQL ) CStream;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CStandardIO : public nsQOR::CSubSystem
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CStandardIO );

		__QOR_IMPL_REF( CStandardIO );

		static nsCodeQOR::CTExternalRegEntry< CStandardIO > RegEntry;

		__QCMP_STATIC_CONSTANT( int, STDIO_HANDLES_COUNT = 3 );
		__QCMP_STATIC_CONSTANT( unsigned long, STD_INPUT_HANDLE = ( (unsigned long)-10 ) );
		__QCMP_STATIC_CONSTANT( unsigned long, STD_OUTPUT_HANDLE = ( (unsigned long)-11 ) );
		__QCMP_STATIC_CONSTANT( unsigned long, STD_ERROR_HANDLE = ( (unsigned long)-12 ) );

		__QCMP_STATIC_CONSTANT( intptr_t, _NO_CONSOLE_FILENO = (intptr_t)-2 );
		__QCMP_STATIC_CONSTANT( unsigned char, FOPEN = 0x01 );// file open
		__QCMP_STATIC_CONSTANT( unsigned char, FEOFLAG = 0x02 );// end of file has been encountered
		__QCMP_STATIC_CONSTANT( unsigned char, FCRLF = 0x04 );// CR-LF across read buffer (in text mode)
		__QCMP_STATIC_CONSTANT( unsigned char, FPIPE = 0x08 );// file refers to a pipe
		__QCMP_STATIC_CONSTANT( unsigned char, FNOINHERIT = 0x10 );// file opened _O_NOINHERIT
		__QCMP_STATIC_CONSTANT( unsigned char, FAPPEND = 0x20 );// file opened O_APPEND
		__QCMP_STATIC_CONSTANT( unsigned char, FDEV = 0x40 );// file refers to device
		__QCMP_STATIC_CONSTANT( unsigned char, FTEXT = 0x80 );// file is in text mode

		//------------------------------------------------------------------------------
		enum eFlush
		{
			FlushNULL = 0,
			FlushAll = 1
		};

		CStandardIO();
		~CStandardIO();

		int _setmaxstdio( unsigned int uiMax );
		int _getmaxstdio( void );
		CStream* _getstream( void );

		errno_t _umask_s( int mode, int* poldmode );
		int _umask( int mode );
		int _umaskval( void );

		int flsall( int flushflag );

		void FreeHandle( int iFile );

		errno_t _set_fmode( int mode );
		errno_t _get_fmode( int* pMode );

		CStream* StreamFromID( int fd );

		inline int stdhndl( int fh )
		{
			return ( ( fh == 0 ) ? STD_INPUT_HANDLE : ( ( fh == 1 ) ? STD_OUTPUT_HANDLE : STD_ERROR_HANDLE ) );
		}

		virtual void Setup( nsQOR::IApplication& Application );
		virtual void Shutdown( nsQOR::IApplication& Application );

	private:

		CStandardIO( const CStandardIO& src );
		CStandardIO& operator = ( const CStandardIO& src );

		void Initialize( const STARTUPINFO& StartupInfo );
		void AllocateStreams( unsigned int uiCount );
		void AllocateStream( bool bLock = true );
		void FreeStreams();

		bool& _exitflag( void );
		int _flushall( void );
		int _fcloseall( void );
		int _rmtmp( void );

		CConsoleHelper m_ConsoleHelper;

		unsigned int m_uiNextStream;									//The maximum stream identifier allocated so far, always counts from 0 to m_uiMaxStreams
		unsigned int m_uiInitialStreams;								//Initial number of streams to set up including standard ones
		unsigned int m_uiMaxStreams;									//Maximum stream identifier to allow

		std::deque< int > m_VecFreeLRUList;								//Stream identifiers that are free
		std::map< const int, CStream* > m_DescriptorStreamMap;			//Map from stream identifiers to stream objects

		CCriticalSection m_MapSection;
		CCriticalSection m_FreeListSection;

		bool m_bExitFlag;

		int m_umaskval;
		long m_fmode;

		CInterlockedHelper m_InterlockedHelper;

	};

}//nsWin32

#endif//WINQL_SUBSYS_STANDARDIO_H_1
