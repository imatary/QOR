//TFlyerRegEntry.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A class registry entry for flyers classes

#ifndef CODEQOR_TFLYERREGENTRY_H_1
#define CODEQOR_TFLYERREGENTRY_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "ClassRegEntry.h"
#include "CodeQOR/Instancing/sTOB.h"
#include "AppocritaQOR/SubSystems/Thread.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	//Insert one of these into a class declaration to make it into a flyer
	#define __QOR_DECLARE_CLASS_FLYER( _CLASS, _BASE, _POLICY )						\
																					\
	private:																		\
		friend class CTFlyerRegEntry< _CLASS, _POLICY >;							\
																					\
	protected:																		\
		typedef _BASE _tBase;														\
		_BASE* m_pPrevious;															\
		static CTFlyerRegEntry< _CLASS, _POLICY > RegEntry;							\
	public:																			\
		__QOR_DECLARE_OCLASS_ID( _CLASS );											\
		_CLASS()																	\
		{																			\
			RegEntry.Configure(this);												\
		}																			\
		~_CLASS()																	\
		{																			\
			RegEntry.Unconfigure(this);												\
		}																			\

	//------------------------------------------------------------------------------
	//insert one of these into a flyer class implementation
	#define __QOR_IMPLEMENT_FLYER( _CLASS, _BASE, _POLICY )							\
	__QOR_IMPLEMENT_OCLASS_LUID( _CLASS );											\
	__QCS_IMPL_PSTATIC( CTFlyerRegEntry< _CLASS, _POLICY > ) _CLASS::RegEntry;		\
	__QCS_IMPL_PSTATIC( CLASS* ) CTFlyerRegEntry< _CLASS, _POLICY >::m_pInstance;	\
	(*CTFlyerRegEntry< _CLASS, _POLICY >::m_pInstance) = 0;

	//------------------------------------------------------------------------------
	//alternately insert one of these into a flyer class implementation
	#define __QOR_IMPLEMENT_CLASS_FLYER( _CLASS, _BASE, _POLICY )					\
	__QOR_IMPLEMENT_OCLASS_LUID( _CLASS );											\
	__QCS_IMPL_PSTATIC( CTFlyerRegEntry< _CLASS, _POLICY > ) CTFlyer< _CLASS, _BASE, _POLICY >::RegEntry;\
	__QCS_IMPL_PSTATIC( _CLASS* ) CTFlyerRegEntry< _CLASS, _POLICY >::m_pInstance;			\
	(*CTFlyerRegEntry< _CLASS, _POLICY >::m_pInstance) = 0;

	//--------------------------------------------------------------------------------
	//A Flyer class factory template
	template< class T >
	class CTFlyerRegEntry : public CTClassRegEntry< T >
	{

	public:

		//------------------------------------------------------------------------------
		CTFlyerRegEntry() : CTClassRegEntry< T >()
		{
		}

		//------------------------------------------------------------------------------
		explicit CTFlyerRegEntry( void* ) : CTClassRegEntry< T >()
		{	
		}
		
		//------------------------------------------------------------------------------
		//Configure the thread data with this instance
		static bool Configure( T* pInstance )
		{
			nsQOR::IThread::ref_type pThread = nsQOR::CThread::GetCurrent();
			
			if( pThread )
			{
				void* pCurrent = pThread->ClassThreadMap().Find( T::ClassID() );
				if( pInstance != 0 )
				{
					pInstance->m_pPrevious = reinterpret_cast< typename T::_tBase* >( pCurrent );
				}

				pThread->ClassThreadMap().Insert( T::ClassID(), pInstance );
				return true;
			}
			return false;
		}

		//------------------------------------------------------------------------------	
		//Return the thread data to its previous state
		static bool Unconfigure( T* pInstance )
		{
			if( pInstance != 0 )
			{
				nsQOR::IThread::ref_type pThread = nsQOR::CThread::GetCurrent();

				if( !pThread.IsNull() )
				{
					pThread->ClassThreadMap().Insert( T::ClassID(), pInstance->m_pPrevious );
					return true;
				}
			}
			return false;
		}

		//------------------------------------------------------------------------------	
		//Return a 'typeless' pointer to the existing instance of T
		virtual void* Instance()
		{
			void* pInstance = 0;
			
			nsQOR::IThread::ref_type pThread = nsQOR::CThread::GetCurrent();

			if( !pThread.IsNull() )
			{
				pInstance = pThread->ClassThreadMap().Find( T::ClassID() );
			}

			return pInstance;
		}

		//------------------------------------------------------------------------------	
		//Do nothing as the stack will clean up our instance
		virtual void Release( void* )
		{		
		}

		//------------------------------------------------------------------------------
		CTFlyerRegEntry( const CTFlyerRegEntry& src )
		{
		}

		//------------------------------------------------------------------------------
		CTFlyerRegEntry& operator = ( const CTFlyerRegEntry& src )
		{
			return *this;
		}
	};

}//nsCodeQOR

#endif//CODEQOR_TFLYERREGENTRY_H_1
