//What.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements the what-happened class.

#include "CompilerQOR.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/What.h"
#include "AppocritaQOR/Event.h"
//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CWhat::CWhat()
	{
		m_iLevel = CError::ERR_LVL_FATAL;
		m_uiCustomLevel = 0;
		m_uiErrorCode = 0;
		m_pParams = 0;
	}

	//------------------------------------------------------------------------------
	CWhat::CWhat( const CWhat& src )
	{
		m_pParams = 0;
		*this = src;
	}

	//------------------------------------------------------------------------------
	CWhat& CWhat::operator = ( const CWhat& src )
	{
		if( &src != this )
		{
			CErrorPropertyBase::operator=( src );
			m_iLevel = src.m_iLevel;
			m_uiCustomLevel = src.m_uiCustomLevel;
			m_uiErrorCode = src.m_uiErrorCode;
			m_strErrorDesc = src.m_strErrorDesc;
			delete m_pParams;
			m_pParams = new CError::CBaseErrorParams( *src.m_pParams );
		}

		return *this;
	}

	//------------------------------------------------------------------------------
	CWhat::~CWhat()
	{
		delete m_pParams;
	}

	//------------------------------------------------------------------------------
	CErrorPropertyBase* CWhat::Clone( void )
	{
		CErrorPropertyBase* pClone = new CWhat( *this );
		return pClone;
	}

	//------------------------------------------------------------------------------
	//Get the severity level of the incident and any custom clasification
	CError::Level CWhat::GetLevel( unsigned int* puiCustLevel )
	{
		if( puiCustLevel != 0 )
		{
			*puiCustLevel = m_uiCustomLevel;
		}
		return m_iLevel;
	}

	//------------------------------------------------------------------------------
	unsigned int CWhat::Code()
	{
		return m_uiErrorCode;
	}

	//------------------------------------------------------------------------------
	void CWhat::SetLevel( CError::Level l, unsigned int uiCustomLevel )
	{
		m_iLevel = l;
		m_uiCustomLevel = uiCustomLevel;
	}

	//------------------------------------------------------------------------------
	void CWhat::SetCode( unsigned int uiCode )
	{
		m_uiErrorCode = uiCode;
	}

	//------------------------------------------------------------------------------
	void CWhat::SetParams( CError::CBaseErrorParams& Params )
	{
		delete m_pParams;
		m_pParams = new CError::CBaseErrorParams( Params );
	}

	//------------------------------------------------------------------------------
	void* CWhat::Parameter( unsigned char ucParam )
	{
		return (*m_pParams)[ ucParam ];
	}

	//------------------------------------------------------------------------------
	CError::CBaseErrorParams** CWhat::Params()
	{
		return &m_pParams;
	}

}//nsCodeQOR
