//ParamRegister.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Register parameters and return values with the Call Context

#ifndef CODEQOR_PARAMREGISTER_H_1
#define CODEQOR_PARAMREGISTER_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Modules/ProcessBase.h"
#include "CodeQOR/Tracing/CallContextBase.h"

//--------------------------------------------------------------------------------
namespace nsParamChecking
{
	//--------------------------------------------------------------------------------
	//CFunctionContextLock is to prevent uncontrolled recursion within function context code which would blow the stack
	class __QOR_INTERFACE( __CODEQOR ) CFunctionContextLock
	{
	public:
		
		CFunctionContextLock();
		~CFunctionContextLock();
		
		nsCodeQOR::CCallContextBase* CallContextPtr( void );
		nsCodeQOR::CCallContextBase* ParentCallContextPtr( void );
		unsigned long Level( void );
		
	private:
		
		CFunctionContextLock( const CFunctionContextLock&);
		CFunctionContextLock& operator=(const CFunctionContextLock&);
		
		nsCodeQOR::CCallContextBase* m_pCallContext;
		nsCodeQOR::CCallContextBase* m_pParentCallContext;
		nsCodeQOR::CFunctionContextBase* m_pFunctionContext;
		unsigned long m_ulLevel;
	};
	
	//--------------------------------------------------------------------------------
	//Construct one of these to register a parameter with the current call context
	struct __QOR_INTERFACE( __CODEQOR ) CParamRegister
	{
	public:

		//--------------------------------------------------------------------------------
		template< typename T >CParamRegister( T* pParam )
		{
			CFunctionContextLock FCLock;
			if( FCLock.Level() == 1 )
			{
				FCLock.CallContextPtr()->Register( *pParam );
			}
		}

	};

	//--------------------------------------------------------------------------------
	//CReturnRegister registers a return value with the current call context
	struct __QOR_INTERFACE( __CODEQOR ) CReturnRegister
	{
	public:

		//--------------------------------------------------------------------------------
		template< typename T >CReturnRegister( T* pReturn )
		{
			CFunctionContextLock FCLock;
			if( FCLock.Level() == 1 )
			{
				FCLock.ParentCallContextPtr()->RegisterReturn( *pReturn );
			}
		}

		void OnAssignment( void );
		~CReturnRegister();
	};

}//nsParamChecking

#endif//CODEQOR_PARAMREGISTER_H_1
