//WinQLILockBytesOnHGlobal.cpp

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/COM/Client/ComPtr/WinQLILockBytesOnHGlobal.h"
#include "WinQAPI/OLE32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	__QOR_IMPLEMENT_OCLASS_LUID( CILockBytesOnHGlobal );

	//--------------------------------------------------------------------------------
	CILockBytesOnHGlobal::CILockBytesOnHGlobal( void* pGlobal )
	{
		_WINQ_FCONTEXT( "CILockBytesOnHGlobal::CILockBytesOnHGlobal" );
		m_lStatus = m_Library.CreateILockBytesOnHGlobal( pGlobal, ( ( pGlobal == 0 ) ? 1 : 0 ), reinterpret_cast< ::ILockBytes** >( &m_p ) );
	}

	//--------------------------------------------------------------------------------
	CILockBytesOnHGlobal::~CILockBytesOnHGlobal()
	{
		_WINQ_FCONTEXT( "CILockBytesOnHGlobal::~CILockBytesOnHGlobal" );
	}

	//--------------------------------------------------------------------------------
	long CILockBytesOnHGlobal::GetHGlobal( void** phglobal )
	{
		_WINQ_FCONTEXT( "CILockBytesOnHGlobal::GetHGlobal" );
		return m_Library.GetHGlobalFromILockBytes( reinterpret_cast< ::ILockBytes* >( m_p ), reinterpret_cast< HGLOBAL* >( phglobal ) );
	}

	//--------------------------------------------------------------------------------
	long CILockBytesOnHGlobal::StgIsStorageILockBytes()
	{
		_WINQ_FCONTEXT( "CILockBytesOnHGlobal::StgIsStorageILockBytes" );
		return m_Library.StgIsStorageILockBytes( reinterpret_cast< ::ILockBytes* >( m_p ) );
	}


	__QOR_IMPLEMENT_OCLASS_LUID( CFillWrapperOnLockBytes );

	//--------------------------------------------------------------------------------
	CFillWrapperOnLockBytes::CFillWrapperOnLockBytes( ILockBytes* pilb )
	{
		_WINQ_FCONTEXT( "CFillWrapperOnLockBytes::CFillWrapperOnLockBytes" );
		m_lStatus = m_Library.StgGetIFillLockBytesOnILockBytes( reinterpret_cast< ::ILockBytes* >( pilb ), reinterpret_cast< ::IFillLockBytes** >( &m_p ) );
	}

	//--------------------------------------------------------------------------------
	CFillWrapperOnLockBytes::CFillWrapperOnLockBytes( wchar_t* pwcsName )
	{
		_WINQ_FCONTEXT( "CFillWrapperOnLockBytes::CFillWrapperOnLockBytes" );
		m_lStatus = m_Library.StgGetIFillLockBytesOnFile( pwcsName, reinterpret_cast< ::IFillLockBytes** >( &m_p ) );
	}

	//--------------------------------------------------------------------------------
	CFillWrapperOnLockBytes::~CFillWrapperOnLockBytes()
	{
		_WINQ_FCONTEXT( "CFillWrapperOnLockBytes::~CFillWrapperOnLockBytes" );
	}

}//nsWin32
