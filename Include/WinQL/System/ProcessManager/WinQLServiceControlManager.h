//WinQLServiceControlManager.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_SYSTEM_SERVICECONTROLMANAGER_H_3
#define WINQL_SYSTEM_SERVICECONTROLMANAGER_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CompilerQOR.h"
#include "WinQL/WinQL.h"
#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/CodeServices/WinQLSharedRef.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/CodeServices/Text/WinString.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CAdvAPI32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CServiceControlManager;
	class __QOR_INTERFACE( __WINQL ) CServiceControlSession;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CServiceController
	{
	public:

		__QOR_DECLARE_REF_TYPE(CServiceController);
		__QOR_DECLARE_OCLASS_ID( CServiceController );

		typedef nsCodeQOR::CTLRef< CServiceController > refType;

		CServiceController( CServiceControlManager& Manager, ServiceControlHandle Handle );
		virtual ~CServiceController();

		bool ChangeConfig2( unsigned long ulInfoLevel, void* pInfo );
		bool ChangeConfig( unsigned long ulServiceType, unsigned long ulStartType, unsigned long ulErrorControl, CTString& strBinaryPathName, CTString& strLoadOrderGroup, unsigned long* lpdwTagId, CTString& strDependencies, CTString& strServiceStartName, CTString& strPassword, CTString& strDisplayName );	
		bool Control( unsigned long ulControl, LPSERVICE_STATUS lpServiceStatus );
		bool EnumDependencies( unsigned long ulServiceState, LPENUM_SERVICE_STATUS lpServices, unsigned long cbBufSize, unsigned long* pcbBytesNeeded, unsigned long* lpServicesReturned );		
		unsigned long NotifyStatusChange( unsigned long ulNotifyMask, PSERVICE_NOTIFY pNotifyBuffer );
		bool QueryConfig2( unsigned long ulInfoLevel, byte* lpBuffer, unsigned long cbBufSize, unsigned long* pcbBytesNeeded );		
		bool QueryConfig( LPQUERY_SERVICE_CONFIG lpServiceConfig, unsigned long cbBufSize, unsigned long* pcbBytesNeeded );
		bool QueryStatus( LPSERVICE_STATUS lpServiceStatus );		
		bool QueryStatusEx( SC_STATUS_TYPE InfoLevel, byte* lpBuffer, unsigned long cbBufSize, unsigned long* pcbBytesNeeded );
		bool Start( unsigned long ulNumServiceArgs, const TCHAR** pServiceArgVectors );
		bool Delete( void );

		//--------------------------------------------------------------------------------
		refType Ref( void )
		{
			return refType( this, false );
		}

	private:

		CServiceControlManager& m_Manager;
		ServiceControlHandle m_Handle;

		__QCS_DECLARE_NONCOPYABLE( CServiceController );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CServiceControlSession
	{
	public:

		__QOR_DECLARE_REF_TYPE(CServiceControlSession);
		__QOR_DECLARE_OCLASS_ID(CServiceControlSession);

		CServiceControlSession( CServiceControlManager& Manager, const TCHAR* szMachineName, const TCHAR* szDatabaseName, unsigned long ulDesiredAccess );
		~CServiceControlSession();

		CServiceController::refType Create( CTString& strServiceName, CTString& strDisplayName, unsigned long ulDesiredAccess, unsigned long ulServiceType, unsigned long dwStartType, unsigned long dwErrorControl, CTString& strBinaryPathName, CTString& strLoadOrderGroup, unsigned long* pulTagId, CTString& strDependencies, CTString& strServiceStartName, CTString& strPassword );		
		CServiceController::refType Open( CTString& strServiceName, unsigned long ulDesiredAccess );

		bool EnumServices( unsigned long ulServiceType, unsigned long ulServiceState, LPENUM_SERVICE_STATUS lpServices, unsigned long cbBufSize, unsigned long* pcbBytesNeeded, unsigned long* lpServicesReturned, unsigned long* lpResumeHandle );

		bool EnumServicesEx( SC_ENUM_TYPE InfoLevel, unsigned long ulServiceType, unsigned long ulServiceState, byte* lpServices, unsigned long cbBufSize, unsigned long* pcbBytesNeeded, unsigned long* lpServicesReturned, unsigned long* lpResumeHandle, CTString& strGroupName );
		bool GetDisplayName( CTString& strServiceName, CTString& DisplayName, unsigned long* lpcchBuffer );		
		bool GetKeyName( CTString& strDisplayName, CTString& strServiceName );
		bool QueryLockStatus( QUERY_SERVICE_LOCK_STATUS** ppLockStatus, unsigned long& ulBytesReturned );

	private:

		CServiceControlManager& m_Manager;
		ServiceControlHandle m_SessionHandle;
		void* m_Lock;

		CServiceControlSession( const CServiceControlSession& );
		CServiceControlSession& operator = ( const CServiceControlSession& );

	};


	//--------------------------------------------------------------------------------	
	class __QOR_INTERFACE( __WINQL ) CServiceControlManager
	{
		friend class CServiceControlSession;
		friend class CServiceController;

		QOR_PP_WINQL_SHARED;

	public:

		__QOR_DECLARE_OCLASS_ID( CServiceControlManager );

		CServiceControlManager();
		virtual ~CServiceControlManager();

		bool StartCtrlDispatcher( const SERVICE_TABLE_ENTRY* pServiceTable );
		ServiceStatusHandle RegisterCtrlHandler( CTString& strServiceName, LPHANDLER_FUNCTION lpHandlerProc );		
		ServiceStatusHandle RegisterCtrlHandler( CTString& strServiceName, LPHANDLER_FUNCTION_EX lpHandlerProc, void* lpContext = 0 );		
		bool SetBits( ServiceStatusHandle hServiceStatus, unsigned long ulServiceBits, bool bSetBitsOn, bool bUpdateImmediately );		
		bool SetStatus( ServiceStatusHandle hServiceStatus, LPSERVICE_STATUS lpServiceStatus );
		CServiceControlSession::ref_type OpenSession( CTString& strMachine, CTString& strDatabaseName, unsigned long ulDesiredAccess );

	private:

		ServiceControlHandle OpenSCManagerT( const TCHAR* lpMachineName, const TCHAR* lpDatabaseName, unsigned long dwDesiredAccess );
		bool CloseServiceHandle( ServiceControlHandle hSCObject );

		void* LockServiceDatabase( ServiceControlHandle hSCManager );
		bool UnlockServiceDatabase( void* ScLock );

		nsWinQAPI::CAdvAPI32& m_AdvAPI32Library;

		__QCS_DECLARE_NONCOPYABLE( CServiceControlManager );

	};

}//nsWin32

#endif//WINQL_SYSTEM_SERVICECONTROLMANAGER_H_3
