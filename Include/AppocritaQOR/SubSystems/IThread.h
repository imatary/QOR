//IThread.h

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//IThread interface definition

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef APPOCRITAQOR_SUBSYSTEMS_THREADING_ITHREAD_H_3
#define APPOCRITAQOR_SUBSYSTEMS_THREADING_ITHREAD_H_3

#include "CodeQOR/DataStructures/TArray.h"
#include "CodeQOR/DataStructures/TMap.h"
#include "CodeQOR/Instancing/STMember.h"

//------------------------------------------------------------------------------
namespace nsCodeQOR
{
	class __QOR_INTERFACE( __CODEQOR ) CFunctionContextBase;
	class __QOR_INTERFACE( __CODEQOR ) CExceptionContextBase;
	class __QOR_INTERFACE( __CODEQOR ) CCodePage;
	class __QOR_INTERFACE( __CODEQOR ) CBaseErrorDomain;
}//nsCodeQOR

//------------------------------------------------------------------------------
namespace nsQOR
{
	class __QOR_INTERFACE( __APPOCRITA ) CEventManager;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __APPOCRITA ) IThread
	{
		friend class nsCodeQOR::CFunctionContextBase;
	public:

		__QOR_DECLARE_OCLASS_ID( IThread );

		__QOR_IMPL_REF( IThread );

		IThread();
		IThread( const IThread& src );
		IThread& operator=( IThread const & src );
		virtual ~IThread();

		//Function Context
		virtual nsCodeQOR::CFunctionContextBase* RegisterFunctionContext( nsCodeQOR::CFunctionContextBase* pFContext ) = 0;
		virtual void UnregisterFunctionContext( nsCodeQOR::CFunctionContextBase* pFContext, nsCodeQOR::CFunctionContextBase* pParent ) = 0;
		virtual nsCodeQOR::CFunctionContextBase* FunctionContext( void ) = 0;
		virtual nsCodeQOR::CBaseErrorDomain*& ErrorDomain( void ) = 0;
		virtual nsCodeQOR::CExceptionContextBase* ExceptionContext( void ) = 0;
		virtual unsigned long IncrementRecursionCount( void ) = 0;                      //Stack depth tracking
		virtual unsigned long DecrementRecursionCount( void ) = 0;
		virtual unsigned long RecursionCount( void ) = 0;
		virtual bool InErrorSystem() = 0;
		virtual void LeaveErrorSystem( void ) = 0;                                      //Error system stack boundary
		virtual void EnterErrorSystem( void ) = 0;
		virtual unsigned int TlsAlloc( void ) = 0;                                      //Thread Local Storage
		virtual bool TlsFree( unsigned int uiTlsIndex ) = 0;
		virtual void* TlsGetValue( unsigned int uiTlsIndex ) = 0;
		virtual bool TlsSetValue( unsigned int uiTlsIndex, void* lpTlsValue ) = 0;
		virtual nsCodeQOR::CTMap< nsCodeQOR::mxGUID*, void*, CCodeQORPolicy >& ClassThreadMap( void ) = 0;    //Flyer type-instance map		
		virtual CEventManager& LocalEventManager() = 0;
		virtual void SetTraceEnabled( bool ) = 0;
		virtual bool GetTraceEnabled( void ) = 0;
		virtual void SetCodePage( nsCodeQOR::CCodePage* pCodePage ) = 0;
		virtual nsCodeQOR::CCodePage* GetCodePage( void ) = 0;
		virtual bool IsAFiber( void ) = 0;
		virtual bool IsGUIThread( bool bConvert ) = 0;
	};

}//nsQOR

#endif//APPOCRITAQOR_SUBSYSTEMS_THREADING_ITHREAD_H_3
