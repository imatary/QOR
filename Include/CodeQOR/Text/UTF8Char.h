//UTF8Char.h

// Copyright Querysoft Limited 2015 - . All rights reserved.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//UTF-8 Variable length character type

#ifndef CODEQOR_STRINGS_UTF8CHAR_H_3
#define CODEQOR_STRINGS_UTF8CHAR_H_3

#include "CodeQOR/Text/Char8.h"

//------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	//Provides a wrapper over a reference into an octet string
	//Always acts as a weak reference, never owns any character data
	//User must ensure the underlying string data remains accessible
	class CUTF8Char
	{
	public:

		CUTF8Char();										//Construct a null reference
		CUTF8Char( CChar8* pChar );							//Construct a reference to 1 to 4 CChar8
		CUTF8Char( const CUTF8Char& Src );					//Copy an existing reference
		CUTF8Char& operator = ( const CUTF8Char& Src );		//Assign from an existing reference
		bool operator == ( const CUTF8Char& Cmp ) const;	//Compare referenced UTF-8 characters
		bool operator >= ( const CUTF8Char& Cmp ) const;	//Compare referenced UTF-8 characters
		bool operator <= ( const CUTF8Char& Cmp ) const;	//Compare referenced UTF-8 characters
		bool operator < ( const CUTF8Char& Cmp ) const;	//Compare referenced UTF-8 characters
		CUTF8Char& operator++( void );						//Move the reference to the next UTF-8 character - not guaranteed to be valid
		CUTF8Char& operator--( void );						//Move the reference to the previous UTF-8 character - not guaranteed to be valid
		CUTF8Char& operator += ( unsigned short usOffset );	//Move the reference forward in the string by N UTF-8 characters
		CUTF8Char& operator -= ( unsigned short usOffset ); //Move the reference backward in the string by B UTF-8 characters
		operator CChar8*() const;							//Automatic conversion to a CChar8 pointer
		CChar8* operator -> () const;						//CUTF8Char acts like a pointer to CChar8
		inline CChar8* ptr( void ) const					//Explicit conversion to a CChar pointer
		{
			return m_pChar;
		}
		~CUTF8Char();										//Destructor
		void Dispose( void );								//Throw away reference returning this to a NULL reference
		void Attach( CChar8* p );							//Set the CChar8 reference 
        CChar8* Detach();									//Return and clear the CChar8 reference
		bool IsNull( void ) const;							//Is this a NULL reference or a reference to NULL. Either will return true.
		bool IsOwner( void );								//Will always return false. CUTF8Char is a weak reference type
		unsigned char Len( void ) const;					//Return the byte count of reference UTF-8 character 1 - 4
		bool IsInvalid( void );								//Returns true if the referenced UTF8-character is not valid

	
		unsigned int ToCodePoint( void ) const;
		static CChar8::eUnicodeVersion CurrentUnicodeVersion( void );

		CChar8::eCategory Category() const;
		CChar8::eDirection Direction() const;
		CChar8::eJoining Joining() const;

		bool HasMirrored() const;
		unsigned char CombiningClass() const;
		int DigitValue() const;
		CChar8::eUnicodeVersion UnicodeVersion() const;
		bool IsPrint() const;
		bool IsPunct() const;
		bool IsSpace() const;
		bool IsMark() const;
		bool IsLetter() const;
		bool IsNumber() const;
		bool IsLetterOrNumber() const;
		bool IsDigit() const;
		bool IsSymbol() const;
		inline bool IsLower() const;
		inline bool IsUpper() const;
		inline bool IsTitleCase() const;
		CChar8::eDecomposition DecompositionTag() const;

	private:

		CChar8* m_pChar;
	};

}//nsCodeQOR

#endif//CODEQOR_STRINGS_UTF8CHAR_H_3
