//ACodeString.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"
#include <stdlib.h>
#include <string.h>
#include <new>
#include "CodeQOR/Text/ACodeString.h"
#include "CodeQOR/DataStructures/TLRef.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/Text/Char8.h"
#include "AppocritaQOR/Event.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
    //--------------------------------------------------------------------------------
    CACodeString::CACodeString( const char* cpString ) : m_pOrg( cpString ), m_pTrans( 0 )
    {
		Translate();
    }
        
    //--------------------------------------------------------------------------------
    CACodeString::CACodeString( const CACodeString& Src ) : m_pOrg( Src.m_pOrg )
    {
		Translate();
    }

    //--------------------------------------------------------------------------------
    CACodeString& CACodeString::operator = ( const CACodeString& Src )
    {
        m_pOrg = Src.m_pOrg;
		Translate();
        return *this;
    }

    //--------------------------------------------------------------------------------
    CACodeString::operator const char*() const
    {
        return const_cast< const char* >( m_pTrans );
    }

    //--------------------------------------------------------------------------------
    const char* CACodeString::c_str() const
    {
        return const_cast< const char* >( m_pTrans );
    }

    //--------------------------------------------------------------------------------
    CTLRef< CChar8 > CACodeString::str() const
    {
        return CTLRef< CChar8 >( reinterpret_cast< CChar8* >( m_pTrans ), false );
    }

	//--------------------------------------------------------------------------------
	void CACodeString::Translate( void )
	{
		/*
		//Get the Locale from the ThreadContext
		const char* szLanguage = CThreadContextBase::GetCurrent()->GetLocale()->GetASCIILanguageID();
		//Get the Module Context
		CDictionary::refType refDictionary = ThisModule().GetDictionary( szLanguage );
		//Get the ASCII-xyz Dictionary from the Module
		//Lookup the translated string
		m_pTrans = refDictionary->Lookup( m_pOrg );
		*/
		//If it's not there fall back to the ASCII
		if( m_pTrans == 0 )
		{
			m_pTrans = const_cast< char* >( m_pOrg );
		}
	}

}//nsCodeQOR

