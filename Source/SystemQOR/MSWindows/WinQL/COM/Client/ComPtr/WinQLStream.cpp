//WinQLStream.cpp

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/COM/Client/ComPtr/WinQLStream.h"
#include "WinQAPI/OLE32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CStreamClient );

	//--------------------------------------------------------------------------------
	CStreamClient::CStreamClient()
	{
		_WINQ_FCONTEXT( "CStreamClient::CStreamClient" );
	}

	//--------------------------------------------------------------------------------
	CStreamClient::~CStreamClient()
	{
		_WINQ_FCONTEXT( "CStreamClient::~CStreamClient" );
	}

	//--------------------------------------------------------------------------------
	long CStreamClient::OleLoadFromStream( const GUID& iidInterface, void** ppvObj )
	{
		_WINQ_FCONTEXT( "CStreamClient::OleLoadFromStream" );
		long lResult = -1;
		__QOR_PROTECT
		{
			lResult = m_Library.OleLoadFromStream( reinterpret_cast< ::LPSTREAM >( m_p ), reinterpret_cast< REFIID >( iidInterface ), ppvObj );
		}__QOR_ENDPROTECT
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CStreamClient::SaveFromIPersist( IPersistStream* pPStm )
	{
		_WINQ_FCONTEXT( "CStreamClient::SaveFromIPersist" );
		long lResult = -1;
		__QOR_PROTECT
		{
			lResult = m_Library.OleSaveToStream( reinterpret_cast< ::LPPERSISTSTREAM >( pPStm ), reinterpret_cast< ::LPSTREAM >( m_p ) );
		}__QOR_ENDPROTECT
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CStreamClient::ReadClassStm( GUID* pclsid )
	{
		_WINQ_FCONTEXT( "CStreamClient::ReadClassStm" );
		long lResult = -1;
		__QOR_PROTECT
		{
			lResult = m_Library.ReadClassStm( reinterpret_cast< ::IStream* >( m_p ), reinterpret_cast< CLSID* >( pclsid ) );
		}__QOR_ENDPROTECT
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CStreamClient::WriteClassStm( const GUID& rclsid )
	{
		_WINQ_FCONTEXT( "CStreamClient::WriteClassStm" );
		long lResult = -1;
		__QOR_PROTECT
		{
			lResult = m_Library.WriteClassStm( reinterpret_cast< ::IStream* >( m_p ), reinterpret_cast< const IID& >( rclsid ) );
		}__QOR_ENDPROTECT
		return lResult;
	}

}//nsWin32

