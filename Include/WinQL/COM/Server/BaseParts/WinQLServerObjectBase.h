//WinQLServerObjectBase.h

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_COM_SERVEROBJECTBASE_H_3
#define WINQL_COM_SERVEROBJECTBASE_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/Definitions/Interfaces.h"
#include "WinQL/COM/Server/BaseParts/WinQLCOObjectBase.h"
#include "WinQL/COM/Server/BaseParts/WinQLUnknownImplBase.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	template< class TInterface = IUnknown >
	class CServerObjectBase : public CCOObjectBase, public CIUnknownImplBase< TInterface >
	{
	public:

		//--------------------------------------------------------------------------------
		CServerObjectBase()
		{
			_WINQ_SFCONTEXT( "CServerObjectBase::CServerObjectBase" );
		}

		//--------------------------------------------------------------------------------
		virtual ~CServerObjectBase()
		{
			_WINQ_SFCONTEXT( "CServerObjectBase::~CServerObjectBase" );
		}

		//--------------------------------------------------------------------------------
		TInterface* DefaultInterface( void )
		{
			_WINQ_SFCONTEXT( "CServerObjectBase::DefaultInterface" );
			TInterface* pDefaultInterface = 0;
			QueryInterface( &pDefaultInterface );
			return pDefaultInterface;
		}

		long QueryClientBlanket( unsigned long* pulAuthnSvc, unsigned long* pulAuthzSvc, wchar_t** pServerPrincName, unsigned long* pulAuthnLevel, unsigned long* pulImplLevel, void* pPrivs, unsigned long* pulCapabilities );
		long TestCancel( void );

	};

	//--------------------------------------------------------------------------------
	template< class TBaseImpl, class TExtInterface >
	class CExtendedImp : public TExtInterface, public TBaseImpl
	{
	public:

		//--------------------------------------------------------------------------------
		CExtendedImp( CIUnknownImplBase<>* pImpl ) : TBaseImpl( pImpl )
		{
			_WINQ_SFCONTEXT( "CExtendedImp::CExtendedImp" );
		}

		//--------------------------------------------------------------------------------
		virtual ~CExtendedImp()
		{
			_WINQ_SFCONTEXT( "CExtendedImp::~CExtendedImp" );
		}

	};

	//--------------------------------------------------------------------------------
	template< class TInterface >
	class CServerObjectComponent : public TInterface, public CIUnknownDeferBase, public CCOObjectBase
	{
	public:

		//--------------------------------------------------------------------------------
		CServerObjectComponent( CIUnknownImplBase<>* pImpl ) : CIUnknownDeferBase( pImpl )
		{
			_WINQ_SFCONTEXT( "CServerObjectComponent::CServerObjectComponent" );
		}

		//--------------------------------------------------------------------------------
		virtual ~CServerObjectComponent()
		{
			_WINQ_SFCONTEXT( "CServerObjectComponent::~CServerObjectComponent" );
		}

		//--------------------------------------------------------------------------------
		virtual long __QCMP_STDCALLCONVENTION QueryInterface( const GUID& riid, void **ppvObject )
		{
			_WINQ_SFCONTEXT( "CServerObjectComponent::QueryInterface" );
			return CIUnknownDeferBase::QueryInterface( riid, ppvObject );
		}

		//--------------------------------------------------------------------------------
		virtual unsigned long __QCMP_STDCALLCONVENTION AddRef( void )
		{
			_WINQ_SFCONTEXT( "CServerObjectComponent::AddRef" );
			return CIUnknownDeferBase::AddRef();
		}

		//--------------------------------------------------------------------------------
		virtual unsigned long __QCMP_STDCALLCONVENTION Release( void )
		{
			_WINQ_SFCONTEXT( "CServerObjectComponent::Release" );
			return CIUnknownDeferBase::Release();
		}

	};

}//nsWin32

#endif//WINQL_COM_SERVEROBJECTBASE_H_3

