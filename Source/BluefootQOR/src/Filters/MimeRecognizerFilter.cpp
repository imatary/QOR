//MimeRecognizerFilter.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "BluefootQOR/Filters/MimeRecognizerFilter.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	CMimeRecognizerFilter::CMimeRecognizerFilter() : CFilter()
	,	m_bRecognized( false )
	{
	}

	//------------------------------------------------------------------------------
	CMimeRecognizerFilter::~CMimeRecognizerFilter()
	{
	}

	//------------------------------------------------------------------------------
	CMimeRecognizerFilter::CMimeRecognizerFilter( const CMimeRecognizerFilter& src ) : CFilter( src )
	{
	}

	//------------------------------------------------------------------------------
	CMimeRecognizerFilter& CMimeRecognizerFilter::operator = ( const CMimeRecognizerFilter& src )
	{
		if( &src != this ){}
		return *this;
	}

	//------------------------------------------------------------------------------
	CBuffer* CMimeRecognizerFilter::GetSourceBuffer( void )
	{
		CBuffer* pBuffer = 0;
		if( GetSource() )
		{
			pBuffer = GetSource()->GetBuffer();
		}
		return pBuffer;
	}

	//------------------------------------------------------------------------------
	byte* CMimeRecognizerFilter::GetSequence( unsigned long& ulSequenceSize )
	{
		byte* pSequence = 0;
		CBuffer* pBuffer = GetSourceBuffer();
		if( pBuffer )
		{
			ulSequenceSize = sculMaxSequenceBytes;
			pSequence = pBuffer->ReadRequest( ulSequenceSize );
		}
		return pSequence;
	}

	//------------------------------------------------------------------------------
	bool CMimeRecognizerFilter::Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead )
	{
		bool bResult = false;

		//Switch on whether recognition has taken place
		//If not then recognize
		//else
		//provide the upstream buffer as our buffer
		return bResult;
	}
		
	//------------------------------------------------------------------------------
	bool CMimeRecognizerFilter::Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite )
	{
		return ulUnitsWritten > 0 ? true : false;
	}

}//nsBluefoot


