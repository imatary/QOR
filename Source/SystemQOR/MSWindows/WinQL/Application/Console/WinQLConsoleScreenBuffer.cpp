//WinQLConsoleScreenBuffer.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLErrDomain.h"
#include "WinQL/Application/Console/WinQLConsoleScreenBuffer.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CConsoleScreenBuffer );

	//--------------------------------------------------------------------------------
	CConsoleScreenBuffer::CConsoleScreenBuffer( const CStdHandle& InputHandle, const CStdHandle& OutputHandle ) : m_hInput( InputHandle )
	,	m_hOutput( OutputHandle )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::CConsoleScreenBuffer" );
		m_bDefault = true;
	}

	//--------------------------------------------------------------------------------
	CConsoleScreenBuffer::CConsoleScreenBuffer( unsigned long dwDesiredAccess, unsigned long dwShareMode, const SECURITY_ATTRIBUTES* lpSecurityAttributes ) : m_hInput(nullptr)
		, m_hOutput(nullptr)
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::CConsoleScreenBuffer" );
		m_bDefault = false;
		m_hOutput = m_hInput = CKernel32::CreateConsoleScreenBuffer( dwDesiredAccess, dwShareMode, reinterpret_cast< const ::SECURITY_ATTRIBUTES* >( lpSecurityAttributes ), CONSOLE_TEXTMODE_BUFFER, 0 );
	}

	//--------------------------------------------------------------------------------
	CConsoleScreenBuffer::~CConsoleScreenBuffer()
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::~CConsoleScreenBuffer" );
		__QOR_PROTECT
		{
			if( m_bDefault )
			{
				m_hInput.Drop();
				m_hOutput.Drop();
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------	
	void CConsoleScreenBuffer::SetInputHandle( const CStdHandle& InputHandle )
	{
		m_hInput = InputHandle;
	}

	//--------------------------------------------------------------------------------	
	void CConsoleScreenBuffer::SetOutputHandle( const CStdHandle& OutputHandle )
	{
		m_hOutput = OutputHandle;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::FillOutputAttribute( unsigned short wAttribute, unsigned long nLength, Coord dwWriteCoord, unsigned long* lpNumberOfAttrsWritten )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::FillOutputAttribute" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FillConsoleOutputAttribute( m_hOutput.Use(), wAttribute, nLength, *(reinterpret_cast< ::COORD* >( &dwWriteCoord )), lpNumberOfAttrsWritten ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::FillOutputCharacter( TCHAR cCharacter, unsigned long nLength, Coord dwWriteCoord, unsigned long* lpNumberOfCharsWritten )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::FillOutputCharacter" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FillConsoleOutputCharacter( m_hOutput.Use(), cCharacter, nLength, *(reinterpret_cast< ::COORD* >( &dwWriteCoord )), lpNumberOfCharsWritten ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::FlushInputBuffer()
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::FlushInputBuffer" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FlushConsoleInputBuffer( m_hInput.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::GetCursorInfo( ConsoleCursorInfo& ConsoleCursorInfo )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetCursorInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetConsoleCursorInfo( m_hOutput.Use(), reinterpret_cast< ::PCONSOLE_CURSOR_INFO >( &ConsoleCursorInfo ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	Coord CConsoleScreenBuffer::GetFontSize( unsigned long nFont )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetFontSize" );
		Coord Result;
		Result.X = 0;
		Result.Y = 0;
		__QOR_PROTECT
		{
			::COORD cResult = CKernel32::Instance().GetConsoleFontSize( m_hOutput.Use(), nFont );
			Result = *(reinterpret_cast< Coord* >( &cResult ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::GetScreenBufferInfo( ConsoleScreenBufferInfo& ConsoleScreenBufferInfo )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetScreenBufferInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetConsoleScreenBufferInfo( m_hOutput.Use(), reinterpret_cast< ::PCONSOLE_SCREEN_BUFFER_INFO >( &ConsoleScreenBufferInfo ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::GetOutputMode( unsigned long& Mode )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetOutputMode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetConsoleMode( m_hOutput.Use(), &Mode ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::GetInputMode( unsigned long& Mode )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetInputMode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetConsoleMode( m_hInput.Use(), &Mode ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConsoleScreenBuffer::GetInfoEx( ConsoleScreenBufferInfoEx& ConsoleScreenBufferInfoEx )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetInfoEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().GetConsoleScreenBufferInfoEx( m_hOutput.Use(), reinterpret_cast< ::PCONSOLE_SCREEN_BUFFER_INFOEX >( &ConsoleScreenBufferInfoEx ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::GetCurrentFont( bool bMaximumWindow, ConsoleFontInfo& ConsoleCurrentFont )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetCurrentFont" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().GetCurrentConsoleFont( m_hOutput.Use(), bMaximumWindow, reinterpret_cast< ::PCONSOLE_FONT_INFO >( &ConsoleCurrentFont ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConsoleScreenBuffer::GetCurrentFontEx( bool bMaximumWindow, ConsoleFontInfoEx& ConsoleCurrentFontEx )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetCurrentFontEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().GetCurrentConsoleFontEx( m_hOutput.Use(), bMaximumWindow, reinterpret_cast< ::PCONSOLE_FONT_INFOEX >( &ConsoleCurrentFontEx ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	Coord CConsoleScreenBuffer::GetLargestWindowSize()
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetLargestWindowSize" );
		Coord Result;
		Result.X = 0;
		Result.Y = 0;
		__QOR_PROTECT
		{
			::COORD cResult = CKernel32::GetLargestConsoleWindowSize( m_hOutput.Use() );
			Result = *(reinterpret_cast< Coord* >( &cResult ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::GetNumberOfInputEvents( unsigned long& cNumberOfEvents )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetNumberOfInputEvents" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetNumberOfConsoleInputEvents( m_hInput.Use(), &cNumberOfEvents ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::PeekInput( nsCodeQOR::CTArray< InputRecord, CWinQLPolicy >& InputRecordArray, unsigned long& NumberOfEventsRead )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetNumberOfInputEvents" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::PeekConsoleInput( m_hInput.Use(), reinterpret_cast< ::PINPUT_RECORD >( InputRecordArray.GetAddressOfData() ), InputRecordArray.Capacity(), &NumberOfEventsRead ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::Read( void* lpBuffer, unsigned long nNumberOfCharsToRead, unsigned long* lpNumberOfCharsRead, ReadConsoleControl* pReadcontrol )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::Read" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReadConsole( m_hInput.Use(), lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, reinterpret_cast< ::PCONSOLE_READCONSOLE_CONTROL >( pReadcontrol ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::ReadInput( nsCodeQOR::CTArray< InputRecord, CWinQLPolicy >& InputRecordArray, unsigned long& NumberOfEventsRead )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::ReadInput" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReadConsoleInput( m_hInput.Use(), reinterpret_cast< ::PINPUT_RECORD >( InputRecordArray.GetAddressOfData() ), InputRecordArray.Capacity(), &NumberOfEventsRead ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::ReadOutput( CharInfo* lpBuffer, Coord dwBufferSize, Coord dwBufferCoord, SmallRect& ReadRegion )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::ReadOutput" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReadConsoleOutput( m_hOutput.Use(), reinterpret_cast< ::PCHAR_INFO >( lpBuffer ), *(reinterpret_cast< ::COORD* >(&dwBufferSize) ), *(reinterpret_cast< ::COORD* >(&dwBufferCoord) ), reinterpret_cast< ::PSMALL_RECT >( &ReadRegion ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::ReadOutputAttribute( unsigned short* lpAttribute, unsigned long nLength, Coord dwReadCoord, unsigned long& NumberOfAttrsRead )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::ReadOutputAttribute" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReadConsoleOutputAttribute( m_hOutput.Use(), lpAttribute, nLength, *(reinterpret_cast< ::COORD* >(&dwReadCoord) ), &NumberOfAttrsRead ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::ReadOutputCharacter( TCHAR* lpCharacter, unsigned long nLength, Coord dwReadCoord, unsigned long& NumberOfCharsRead )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::ReadOutputCharacter" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ReadConsoleOutputCharacter( m_hOutput.Use(), lpCharacter, nLength, *(reinterpret_cast< ::COORD* >(&dwReadCoord) ), &NumberOfCharsRead ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::ScrollScreenBuffer( const SmallRect& ScrollRectangle, const SmallRect* lpClipRectangle, Coord dwDestinationOrigin, const CharInfo& Fill )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::ScrollScreenBuffer" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ScrollConsoleScreenBuffer( m_hOutput.Use(), reinterpret_cast< const ::SMALL_RECT* >( &ScrollRectangle ), reinterpret_cast< const ::SMALL_RECT* >( lpClipRectangle ), *(reinterpret_cast< ::COORD* >(&dwDestinationOrigin) ), reinterpret_cast< const ::CHAR_INFO* >( &Fill ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::SetActive()
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetActive" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleActiveScreenBuffer( m_hOutput.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::SetCursorInfo( const ConsoleCursorInfo& ConsoleCursorInfo )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetCursorInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleCursorInfo( m_hOutput.Use(), reinterpret_cast< const ::CONSOLE_CURSOR_INFO* >( &ConsoleCursorInfo ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::SetCursorPosition( Coord dwCursorPosition )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetCursorPosition" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleCursorPosition( m_hOutput.Use(), *(reinterpret_cast< ::COORD* >(&dwCursorPosition) ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::SetOutputMode( unsigned long dwMode )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetOutputMode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleMode( m_hOutput.Use(), dwMode ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::SetInputMode( unsigned long dwMode )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetInputMode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleMode( m_hInput.Use(), dwMode ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::SetDisplayMode( unsigned long dwFlags, Coord& NewScreenBufferDimensions )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetDisplayMode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleDisplayMode( m_hOutput.Use(), dwFlags, reinterpret_cast< ::PCOORD >( &NewScreenBufferDimensions ) ) ? true : false;			
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConsoleScreenBuffer::SetInfoEx( ConsoleScreenBufferInfoEx& ConsoleScreenBufferInfoEx )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetInfoEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().SetConsoleScreenBufferInfoEx( m_hOutput.Use(), reinterpret_cast< ::PCONSOLE_SCREEN_BUFFER_INFOEX >( &ConsoleScreenBufferInfoEx ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::SetSize( Coord dwSize )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetSize" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleScreenBufferSize( m_hOutput.Use(), *(reinterpret_cast< ::COORD* >(&dwSize) ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::SetTextAttribute( unsigned short wAttributes )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetTextAttribute" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleTextAttribute( m_hOutput.Use(), wAttributes ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::SetWindowInfo( bool bAbsolute, const SmallRect& ConsoleWindow )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetWindowInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleWindowInfo( m_hOutput.Use(), bAbsolute, reinterpret_cast< const ::SMALL_RECT* >( &ConsoleWindow ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConsoleScreenBuffer::SetCurrentFontEx( bool bMaximumWindow, ConsoleFontInfoEx& ConsoleCurrentFontEx )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::SetCurrentFontEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().SetCurrentConsoleFontEx( m_hOutput.Use(), bMaximumWindow, reinterpret_cast< ::PCONSOLE_FONT_INFOEX >( &ConsoleCurrentFontEx ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::Write( const void* lpBuffer, unsigned long nNumberOfCharsToWrite, unsigned long* lpNumberOfCharsWritten )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::Write" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WriteConsole( m_hOutput.Use(), lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, 0 ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::WriteInput( nsCodeQOR::CTArray< InputRecord, CWinQLPolicy >& InputRecordArray, unsigned long& NumberOfEventsWritten )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::WriteInput" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WriteConsoleInput( m_hOutput.Use(), reinterpret_cast< const ::INPUT_RECORD* >( InputRecordArray.GetAddressOfData() ) , InputRecordArray.Size(), &NumberOfEventsWritten ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::WriteOutput( nsCodeQOR::CTArray< CharInfo, CWinQLPolicy >& CharInfoArray, Coord dwBufferSize, Coord dwBufferCoord, SmallRect& WriteRegion )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::WriteOutput" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WriteConsoleOutput( m_hOutput.Use(), reinterpret_cast< const ::CHAR_INFO* >( CharInfoArray.GetAddressOfData() ), *(reinterpret_cast< ::COORD* >(&dwBufferSize) ), *(reinterpret_cast< ::COORD* >(&dwBufferCoord) ), reinterpret_cast< ::PSMALL_RECT >( &WriteRegion ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::WriteOutputAttribute( nsCodeQOR::CTArray< unsigned short, CWinQLPolicy >& AttributeArray, Coord dwWriteCoord, unsigned long& NumberOfAttrsWritten )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::WriteOutputAttribute" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WriteConsoleOutputAttribute( m_hOutput.Use(), AttributeArray.GetAddressOfData(), AttributeArray.Size(), *(reinterpret_cast< ::COORD* >(&dwWriteCoord) ), &NumberOfAttrsWritten ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleScreenBuffer::WriteOutputCharacter( const TCHAR* lpCharacter, unsigned long nLength, Coord dwWriteCoord, unsigned long& NumberOfCharsWritten )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::WriteOutputCharacter" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WriteConsoleOutputCharacter( m_hOutput.Use(), lpCharacter, nLength, *(reinterpret_cast< ::COORD* >(&dwWriteCoord) ), &NumberOfCharsWritten ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConsoleScreenBuffer::GetFontInfo( bool b, nsCodeQOR::CTArray< ConsoleFontInfo, CWinQLPolicy >& ConsoleFonts )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::GetFontInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetConsoleFontInfo( m_hOutput.Use(), b ? TRUE : FALSE, ConsoleFonts.Size(), ConsoleFonts.GetAddressOfData() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CConsoleScreenBuffer::refType CConsoleScreenBuffer::Ref( void )
	{
		_WINQ_FCONTEXT( "CConsoleScreenBuffer::Ref" );
		return refType( this, false );
	}

}//nsWin32
