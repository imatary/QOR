//WinQLDeviceInstanceCollection.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/Instances/WinQLDeviceInstanceCollection.h"
#include "WinQL/System/Devices/WinQLIODevice.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/SetupAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceInstanceCollection );

	//--------------------------------------------------------------------------------
	CDeviceInstanceCollection::CDeviceInstanceCollection() : m_Library( CSetupAPI::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceInstanceCollection::CDeviceInstanceCollection" );
	}

	//--------------------------------------------------------------------------------
	CDeviceInstanceCollection::CDeviceInstanceCollection( const CDeviceInstanceCollection& src ) : m_Library( CSetupAPI::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceInstanceCollection::CDeviceInstanceCollection" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CDeviceInstanceCollection& CDeviceInstanceCollection::operator = ( const CDeviceInstanceCollection& src )
	{
		_WINQ_FCONTEXT( "CDeviceInstanceCollection::operator =" );

		if( &src != this )
		{
			m_DeviceInstanceMap = src.m_DeviceInstanceMap;
		}

		return *this;
	}

	//--------------------------------------------------------------------------------
	CDeviceInstanceCollection::~CDeviceInstanceCollection()
	{
		_WINQ_FCONTEXT( "CDeviceInstanceCollection::~CDeviceInstanceCollection" );

		m_DeviceInstanceMap.erase(m_DeviceInstanceMap.begin(), m_DeviceInstanceMap.end());
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceInstanceCollection::Size( void )
	{
		_WINQ_FCONTEXT( "CDeviceInstanceCollection::Size" );
		return m_DeviceInstanceMap.size();
	}

	//--------------------------------------------------------------------------------
	CDeviceInstance::ref_type CDeviceInstanceCollection::operator[]( const CTString& strDeviceID )
	{
		_WINQ_FCONTEXT( "CDeviceInstanceCollection::operator[]" );
		return m_DeviceInstanceMap.find(strDeviceID)->second;
	}

	//--------------------------------------------------------------------------------
	void CDeviceInstanceCollection::AddDevice( CTString strDeviceID, CDeviceInstance::ref_type pDeviceInstance )
	{
		_WINQ_FCONTEXT( "CDeviceInstanceCollection::AddDevice" );
		m_DeviceInstanceMap.insert( std::make_pair( strDeviceID, pDeviceInstance ) );
	}

	//--------------------------------------------------------------------------------
	void CDeviceInstanceCollection::RemoveDevice( CTString strDeviceID )
	{
		_WINQ_FCONTEXT( "CDeviceInstanceCollection::RemoveDevice" );
		m_DeviceInstanceMap.erase( strDeviceID );
	}

}//nsWin32
