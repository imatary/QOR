//StringSource.h

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_SOURCES_STRING_H_3
#define BLUEFOOT_SOURCES_STRING_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//Defines a std::string based Source for a Bluefoot pipeline

#include "BluefootQOR/BfSource.h"
#include "CodeQOR/Text/TString.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
/*
	//------------------------------------------------------------------------------
	template< class TChar >
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CBFStringSource : public CBFSource
	{
	public:

		//------------------------------------------------------------------------------
		CBFStringSource() : m_it( m_strSource.begin() )
		{
		}

		//------------------------------------------------------------------------------
		CBFStringSource( std::basic_string< TChar >& strSource ) : m_strSource( strSource ), m_it( m_strSource.begin() )
		{
		}

		//------------------------------------------------------------------------------
		virtual ~CBFStringSource()
		{
		}

		//------------------------------------------------------------------------------
		CBFStringSource( const CBFStringSource& src )
		{
			*this = src;
		}

		//------------------------------------------------------------------------------
		CBFStringSource& operator = ( const CBFStringSource& src )
		{
			if( &src != this )
			{
			}
			return *this;
		}

		//------------------------------------------------------------------------------
		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead )
		{
			bool bResult = false;
			byte* pBuffer = GetBuffer()->WriteRequest( ulUnitsToRead );

			for( ulUnitsRead = 0; ulUnitsRead < ulUnitsToRead && m_it != m_strSource.end(); ulUnitsRead++, m_it++ )
			{
				TChar tmpChar = *m_it;
				memcpy( pBuffer[ ulUnitsRead * GetBuffer()->GetUnitSize() ], &tmpChar, GetBuffer()->GetUnitSize() );
			}

			GetBuffer()->WriteAcknowledge( ulUnitsRead );

			bResult = ulUnitsRead > 0 ? true : false;

			if( bResult && GetMode() == ePush )
			{
				unsigned long ulNumberOfUnitsWritten = 0;
				m_pSink->Write( ulNumberOfUnitsWritten, ulUnitsRead );
				bResult = ulNumberOfUnitsWritten > 0  ? true : false;
			}

			return bResult;
		}

		//------------------------------------------------------------------------------
		void SetData( std::basic_string< TChar >& strSource )
		{
			m_strSource = strSource;
			m_it = m_strSource.begin();
		}

		//------------------------------------------------------------------------------
		std::basic_string< TChar >& GetData( void )
		{
			return m_strSource;
		}

	protected:

		std::basic_string< TChar > m_strSource;
		typename std::basic_string< TChar >::iterator m_it;

	};

	typedef CBFStringSource< char > ANSIStringSource;
	typedef CBFStringSource< wchar_t > UTF16StringSource;
*/

	class __QOR_INTERFACE( __BLUEFOOTQOR ) CUCS2StringSource : public CSource
	{
	public:

		CUCS2StringSource();
		CUCS2StringSource( nsCodeQOR::CUCS2String& strSource );
		virtual ~CUCS2StringSource();
		CUCS2StringSource( const CUCS2StringSource& src );
		CUCS2StringSource& operator = ( const CUCS2StringSource& src );
		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead );
		void SetData( nsCodeQOR::CUCS2String& strSource );
		nsCodeQOR::CUCS2String& GetData( void );

	protected:

		nsCodeQOR::CUCS2String m_strSource;
		unsigned short m_usPos;

	};

}//nsBluefoot

#endif//BLUEFOOT_SOURCES_STRING_H_3
