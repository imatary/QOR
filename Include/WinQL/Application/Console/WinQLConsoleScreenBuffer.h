//WinQLConsoleScreenBuffer.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Console Screen Buffer

#ifndef WINQL_OSSERV_CONSOLESCREENBUFFER_H_3
#define WINQL_OSSERV_CONSOLESCREENBUFFER_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Security.h"
#include "CodeQOR/DataTypes/Property.h"
#include "CodeQOR/ErrorSystem/DefaultHandler.h"
#include "WinQL/System/FileSystem/WinQLFileManagement.h"
#include "CodeQOR/DataStructures/TArray.h"
#include "WinQL/System/FileSystem/WinQLFileHandle.h"
#include "WinQL/Application/Console/WinQLConsoleHelper.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	struct ConsoleCursorInfo 
	{
		unsigned long dwSize;
		int bVisible;
	};

	//--------------------------------------------------------------------------------
	struct ConsoleFontInfo 
	{
		unsigned long  nFont;
		Coord  dwFontSize;
	};

	//--------------------------------------------------------------------------------
	struct ConsoleScreenBufferInfo 
	{
		Coord dwSize;
		Coord dwCursorPosition;
		unsigned short  wAttributes;
		SmallRect srWindow;
		Coord dwMaximumWindowSize;
	};

	//--------------------------------------------------------------------------------
	struct ConsoleScreenBufferInfoEx 
	{
		unsigned long cbSize;
		Coord dwSize;
		Coord dwCursorPosition;
		unsigned short wAttributes;
		SmallRect srWindow;
		Coord dwMaximumWindowSize;
		unsigned short wPopupAttributes;
		int bFullscreenSupported;
		unsigned long ColorTable[16];
	};

	//--------------------------------------------------------------------------------
	struct ConsoleFontInfoEx 
	{
		unsigned long cbSize;
		unsigned long nFont;
		Coord dwFontSize;
		unsigned int FontFamily;
		unsigned int FontWeight;
		wchar_t FaceName[ LF_FaceSize ];
	};

	//--------------------------------------------------------------------------------
	struct KeyEventRecord 
	{
		int bKeyDown;
		unsigned short wRepeatCount;
		unsigned short wVirtualKeyCode;
		unsigned short wVirtualScanCode;
		union 
		{
			wchar_t UnicodeChar;
			char   AsciiChar;
		} uChar;
		unsigned long dwControlKeyState;
	};

	//--------------------------------------------------------------------------------
	struct MouseEventRecord 
	{
		Coord dwMousePosition;
		unsigned long dwButtonState;
		unsigned long dwControlKeyState;
		unsigned long dwEventFlags;
	};

	//--------------------------------------------------------------------------------
	struct WindowBufferSizeRecord 
	{
		Coord dwSize;
	};

	//--------------------------------------------------------------------------------
	struct MenuEventRecord 
	{
		unsigned int dwCommandId;
	};

	//--------------------------------------------------------------------------------
	struct FocusEventRecord 
	{
		int bSetFocus;
	};

	//--------------------------------------------------------------------------------
	struct InputRecord 
	{
		unsigned short EventType;
		union 
		{
			KeyEventRecord KeyEvent;
			MouseEventRecord MouseEvent;
			WindowBufferSizeRecord WindowBufferSizeEvent;
			MenuEventRecord MenuEvent;
			FocusEventRecord FocusEvent;
		} Event;
	};

	__QCMP_STATIC_CONSTANT( unsigned short,	Key_Event					= 0x0001 );	// Event contains key event record
	__QCMP_STATIC_CONSTANT( unsigned short,	Mouse_Event					= 0x0002 );	// Event contains mouse event record
	__QCMP_STATIC_CONSTANT( unsigned short,	Window_Buffer_Size_Event	= 0x0004 );	// Event contains window change event record
	__QCMP_STATIC_CONSTANT( unsigned short,	Menu_Event					= 0x0008 );	// Event contains menu event record
	__QCMP_STATIC_CONSTANT( unsigned short,	Focus_Event,				= 0x0010 );	// event contains focus change

	__QCMP_STATIC_CONSTANT( unsigned short,	Right_Alt_Pressed			= 0x0001 );	// the right alt key is pressed.
	__QCMP_STATIC_CONSTANT( unsigned short,	Left_Alt_Pressed			= 0x0002 );	// the left alt key is pressed.
	__QCMP_STATIC_CONSTANT( unsigned short,	Right_Ctrl_Pressed			= 0x0004 );	// the right ctrl key is pressed.
	__QCMP_STATIC_CONSTANT( unsigned short,	Left_Ctrl_Pressed			= 0x0008 );	// the left ctrl key is pressed.
	__QCMP_STATIC_CONSTANT( unsigned short,	Shift_Pressed				= 0x0010 );	// the shift key is pressed.
	__QCMP_STATIC_CONSTANT( unsigned short,	NumLock_On					= 0x0020 );	// the numlock light is on.
	__QCMP_STATIC_CONSTANT( unsigned short,	ScrollLock_On				= 0x0040 );	// the scrolllock light is on.
	__QCMP_STATIC_CONSTANT( unsigned short,	CapsLock_On					= 0x0080 );	// the capslock light is on.
	__QCMP_STATIC_CONSTANT( unsigned short,	Enhanced_Key				= 0x0100 );	// the key is enhanced.
/*
#define NLS_DBCSCHAR          0x00010000 // DBCS for JPN: SBCS/DBCS mode.
#define NLS_ALPHANUMERIC      0x00000000 // DBCS for JPN: Alphanumeric mode.
#define NLS_KATAKANA          0x00020000 // DBCS for JPN: Katakana mode.
#define NLS_HIRAGANA          0x00040000 // DBCS for JPN: Hiragana mode.
#define NLS_ROMAN             0x00400000 // DBCS for JPN: Roman/Noroman mode.
#define NLS_IME_CONVERSION    0x00800000 // DBCS for JPN: IME conversion.
#define NLS_IME_DISABLE       0x20000000 // DBCS for JPN: IME enable/disable.
*/
	//--------------------------------------------------------------------------------
	struct ReadConsoleControl
	{
		unsigned long nLength;
		unsigned long nInitialChars;
		unsigned long dwCtrlWakeupMask;
		unsigned long dwControlKeyState;
	};

	//--------------------------------------------------------------------------------
	struct CharInfo 
	{
		union 
		{
			wchar_t UnicodeChar;
			char   AsciiChar;
		} Char;
		unsigned short Attributes;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CConsoleScreenBuffer
	{
	public:

		typedef nsCodeQOR::CTLRef< CConsoleScreenBuffer > refType;

		__QOR_DECLARE_OCLASS_ID( CConsoleScreenBuffer );

		CConsoleScreenBuffer( const CStdHandle& InputHandle, const CStdHandle& OutputHandle );
		CConsoleScreenBuffer( unsigned long dwDesiredAccess, unsigned long dwShareMode, const SECURITY_ATTRIBUTES* lpSecurityAttributes );
		~CConsoleScreenBuffer();

		void SetInputHandle( const CStdHandle& InputHandle );
		void SetOutputHandle( const CStdHandle& OutputHandle );
		bool FillOutputAttribute( unsigned short wAttribute, unsigned long nLength, Coord dwWriteCoord, unsigned long* lpNumberOfAttrsWritten );
		bool FillOutputCharacter( TCHAR cCharacter, unsigned long nLength, Coord dwWriteCoord, unsigned long* lpNumberOfCharsWritten );
		bool FlushInputBuffer( void );
		bool GetCursorInfo( ConsoleCursorInfo& ConsoleCursorInfo );
		Coord GetFontSize( unsigned long nFont );
		bool GetScreenBufferInfo( ConsoleScreenBufferInfo& ConsoleScreenBufferInfo );
		bool GetInputMode( unsigned long& Mode );
		bool GetOutputMode( unsigned long& Mode );
		bool GetInfoEx( ConsoleScreenBufferInfoEx& ConsoleScreenBufferInfoEx );
		bool GetCurrentFont( bool bMaximumWindow, ConsoleFontInfo& ConsoleCurrentFont );
		bool GetCurrentFontEx( bool bMaximumWindow, ConsoleFontInfoEx& ConsoleCurrentFontEx );
		Coord GetLargestWindowSize( void );
		bool GetNumberOfInputEvents( unsigned long& cNumberOfEvents );
		bool PeekInput( nsCodeQOR::CTArray< InputRecord, CWinQLPolicy >& InputRecordArray, unsigned long& NumberOfEventsRead );
		bool Read( void* lpBuffer, unsigned long nNumberOfCharsToRead, unsigned long* lpNumberOfCharsRead, ReadConsoleControl* pReadcontrol );
		bool ReadInput( nsCodeQOR::CTArray< InputRecord, CWinQLPolicy >& InputRecordArray, unsigned long& NumberOfEventsRead );
		bool ReadOutput( CharInfo* lpBuffer, Coord dwBufferSize, Coord dwBufferCoord, SmallRect& ReadRegion );
		bool ReadOutputAttribute( unsigned short* lpAttribute, unsigned long nLength, Coord dwReadCoord, unsigned long& NumberOfAttrsRead );
		bool ReadOutputCharacter( TCHAR* lpCharacter, unsigned long nLength, Coord dwReadCoord, unsigned long& NumberOfCharsRead );
		bool ScrollScreenBuffer( const SmallRect& ScrollRectangle, const SmallRect* lpClipRectangle, Coord dwDestinationOrigin, const CharInfo& Fill );
		bool SetActive();
		bool SetCursorInfo( const ConsoleCursorInfo& ConsoleCursorInfo );
		bool SetCursorPosition( Coord dwCursorPosition );
		bool SetInputMode( unsigned long dwMode );
		bool SetOutputMode( unsigned long dwMode );
		bool SetDisplayMode( unsigned long dwFlags, Coord& NewScreenBufferDimensions );
		bool SetInfoEx( ConsoleScreenBufferInfoEx& ConsoleScreenBufferInfoEx );
		bool SetSize( Coord dwSize );
		bool SetTextAttribute( unsigned short wAttributes );
		bool SetWindowInfo( bool bAbsolute, const SmallRect& ConsoleWindow );
		bool SetCurrentFontEx( bool bMaximumWindow, ConsoleFontInfoEx& ConsoleCurrentFontEx );
		bool Write( const void* lpBuffer, unsigned long nNumberOfCharsToWrite, unsigned long* lpNumberOfCharsWritten );
		bool WriteInput( nsCodeQOR::CTArray< InputRecord, CWinQLPolicy >& InputRecordArray, unsigned long& NumberOfEventsWritten );
		bool WriteOutput( nsCodeQOR::CTArray< CharInfo, CWinQLPolicy >& CharInfoArray, Coord dwBufferSize, Coord dwBufferCoord, SmallRect& WriteRegion );
		bool WriteOutputAttribute( nsCodeQOR::CTArray< unsigned short, CWinQLPolicy >& AttributeArray, Coord dwWriteCoord, unsigned long& NumberOfAttrsWritten );
		bool WriteOutputCharacter( const TCHAR* lpCharacter, unsigned long nLength, Coord dwWriteCoord, unsigned long& NumberOfCharsWritten );
		bool GetFontInfo( bool b, nsCodeQOR::CTArray< ConsoleFontInfo, CWinQLPolicy >& ConsoleFonts );
		refType Ref( void );

	private:

		bool m_bDefault;
		CStdHandle m_hOutput;
		CStdHandle m_hInput;

		CConsoleScreenBuffer();
		CConsoleScreenBuffer( const CConsoleScreenBuffer& );
	};


}//nsWin32

#endif//WINQL_OSSERV_CONSOLESCREENBUFFER_H_3
