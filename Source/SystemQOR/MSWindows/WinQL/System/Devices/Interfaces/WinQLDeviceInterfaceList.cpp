//WinQLDeviceInterfaceList.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/Instances/WinQLDeviceInstance.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterfaceClass.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterfaceList.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/SetupAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceInterfaceList );

	//--------------------------------------------------------------------------------
	CDeviceInterfaceList::CDeviceInterfaceList( CDeviceInterfaceClass& InterfaceClass, const mxTCHAR* szMachineName ) : m_Handle( 0 )
	,	m_pInterfaceClass( &InterfaceClass )
	,	m_szMachine( szMachineName )
	,	m_Library( CSetupAPI::Instance() )	
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceList::CDeviceInterfaceList" );
		m_Handle = m_Library.SetupDiGetClassDevsEx( reinterpret_cast< const ::GUID* >( &( InterfaceClass.GUID() ) ), 0, 0, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE, 0, m_szMachine );

		if( !m_Handle.IsNull() )
		{
			m_Handle.Attach( this );

			bool bEnumerated = false;
			unsigned long ulIndex = 0;
			do
			{	
				unsigned long ulError = 0;
				m_DevInterfaceData.cbSize = sizeof( ::SP_DEVICE_INTERFACE_DATA );
				if( m_Library.SetupDiEnumDeviceInterfaces( 
					reinterpret_cast< ::HDEVINFO >( m_Handle.Use() ), 0, 
					reinterpret_cast< const ::GUID* >( &( InterfaceClass.GUID() ) ), ulIndex, 
					reinterpret_cast< ::PSP_DEVICE_INTERFACE_DATA >( &m_DevInterfaceData ) ) )
				{
					unsigned long ulDeviceInterfaceDetailRequiredSize = 0;
					m_DevInterfaceDetailData.cbSize = sizeof( ::SP_DEVICE_INTERFACE_DETAIL_DATA );
					m_DevInfo.cbSize = sizeof( ::SP_DEVINFO_DATA );

					m_Library.SetupDiGetDeviceInterfaceDetail( reinterpret_cast< ::HDEVINFO >( m_Handle.Use() ),
						reinterpret_cast< ::PSP_DEVICE_INTERFACE_DATA >( &m_DevInterfaceData ),
						0, 0, &ulDeviceInterfaceDetailRequiredSize, 
						reinterpret_cast< ::PSP_DEVINFO_DATA >( &m_DevInfo ) );

					if( ulDeviceInterfaceDetailRequiredSize > 0 )
					{
						m_Library.SetupDiGetDeviceInterfaceDetail( reinterpret_cast< ::HDEVINFO >( m_Handle.Use() ),
							reinterpret_cast< ::PSP_DEVICE_INTERFACE_DATA >( &m_DevInterfaceData ),
							reinterpret_cast< ::PSP_DEVICE_INTERFACE_DETAIL_DATA >( &m_DevInterfaceDetailData ),
							ulDeviceInterfaceDetailRequiredSize, &ulDeviceInterfaceDetailRequiredSize, 
							reinterpret_cast< ::PSP_DEVINFO_DATA >( &m_DevInfo ) );
					}
					else
					{
						ulError = ::GetLastError();
					}
					
					CTString strDeviceInstance;
					unsigned long ulInstanceSize = 0;
					m_Library.SetupDiGetDeviceInstanceId( reinterpret_cast< ::HDEVINFO >( m_Handle.Use() ), reinterpret_cast< ::PSP_DEVINFO_DATA >( &m_DevInfo ), 0, 0, &ulInstanceSize );
					if( ulInstanceSize > 0 )
					{							
						m_Library.SetupDiGetDeviceInstanceId( m_Handle.Use(), reinterpret_cast< ::PSP_DEVINFO_DATA >( &m_DevInfo ), 
							strDeviceInstance.GetBufferSetLength( static_cast< unsigned short >( ulInstanceSize + 1 ) ), ulInstanceSize, &ulInstanceSize );
						strDeviceInstance.ValidateBuffer( static_cast< unsigned short >( ulInstanceSize ) );

					}
					else
					{
						ulError = ::GetLastError();
					}

					CTString strDeviceID;
					if( m_Library.CM_Get_Device_ID_Ex( static_cast< ::DEVINST >( m_DevInfo.DevInst ), strDeviceID.GetBufferSetLength( MaxDeviceIDLen + 1), MaxDeviceIDLen, 0, 0 ) != CR_SUCCESS )
					{
						ulError = ::GetLastError();
					}
					else
					{
						nsCodeQOR::CTLRef< CDeviceInstance > RefDevInst( 0 ); //TODO:= System().Devices(QOR_PP_SHARED_OBJECT_ACCESS).DeviceFromID( strDeviceInstance );
						
						//Create the CDeviveInterface
						CDeviceInterface* pDeviceInterface = m_pInterfaceClass->CreateObject();//new CDeviceInterface;

						pDeviceInterface->SetActive( m_DevInterfaceData.Flags & SPINT_ACTIVE );
						pDeviceInterface->SetDefault( m_DevInterfaceData.Flags & SPINT_DEFAULT ? true : false );
						pDeviceInterface->SetRemoved( m_DevInterfaceData.Flags & SPINT_REMOVED ? true : false );
						pDeviceInterface->SetPath( m_DevInterfaceDetailData.DevicePath );
						pDeviceInterface->SetClass( m_pInterfaceClass, ulIndex );
						pDeviceInterface->SetInstance( RefDevInst );		//Add the device to the Interface
						m_ArrayDeviceInterfaces.Append( pDeviceInterface );	//Add it to the Interface class
						if( !RefDevInst.IsNull() )							//Add it to the DeviceInstance
						{
							RefDevInst->Interfaces().push_back( pDeviceInterface );
						}
					}

				}
				else
				{
					ulError = ::GetLastError();
					if( ulError == ERROR_NO_MORE_ITEMS )
					{
						bEnumerated = true;
					}
				}
				ulIndex++;
			}while( !bEnumerated );
		}
	}


	//--------------------------------------------------------------------------------
	CDeviceInterfaceList::CDeviceInterfaceList( const CDeviceInterfaceList& src ) : m_Handle( src.m_Handle )
	, m_Library( CSetupAPI::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceList::CDeviceInterfaceList" );
	}

	//--------------------------------------------------------------------------------
	CDeviceInterfaceList& CDeviceInterfaceList::operator = ( const CDeviceInterfaceList& src )
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceList::operator =" );
		m_Handle = src.m_Handle;
		return *this;
	}

	//--------------------------------------------------------------------------------
	CDeviceInterfaceList::~CDeviceInterfaceList()
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceList::~CDeviceInterfaceList" );
		m_Library.SetupDiDestroyDeviceInfoList( m_Handle.Use() );

		unsigned long ulIndex = 0;
		m_ArrayDeviceInterfaces.AcquireAccess();
		while( ulIndex < m_ArrayDeviceInterfaces.Size() )
		{
			CDeviceInterface* pDeviceInterface = m_ArrayDeviceInterfaces[ ulIndex++ ];
			delete pDeviceInterface;
		}
		m_ArrayDeviceInterfaces.ReleaseAccess();
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceInterfaceList::Size()
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceList::Size" );
		return m_ArrayDeviceInterfaces.Size();
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CDeviceInterface > CDeviceInterfaceList::operator[]( unsigned long ulIndex )
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceList::operator[]" );
		nsCodeQOR::CTLRef< CDeviceInterface > RefResult;

		if( ulIndex < m_ArrayDeviceInterfaces.Size() )
		{
			nsCodeQOR::CTLRef< CDeviceInterface > Result( m_ArrayDeviceInterfaces[ ulIndex ], false );
			RefResult = Result;
		}

		return RefResult;
	}

}//nsWin32
