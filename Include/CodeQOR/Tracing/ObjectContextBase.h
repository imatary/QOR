//ObjectContextBase.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Track object context for function and call context

#ifndef CODEQOR_OBJECTCONTEXTBASE_H_1
#define CODEQOR_OBJECTCONTEXTBASE_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR.h"
#include "CodeQOR/Tracing/ObjectPointer.h"
#include "CodeQOR/ClassReg/ClassRegEntry.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	typedef mxGUID*(*fpID)(void);

	//--------------------------------------------------------------------------------
	template< fpID >
	struct type_of
	{
		typedef void type;
	};

#	define __QCS_TYPE_OF( _CLASS ) template<> struct nsCodeQOR::type_of< &(_CLASS::ClassID) >{ typedef _CLASS type; }

	//--------------------------------------------------------------------------------
	//A class for tracking the objects that are making calls and being called
	class __QOR_INTERFACE( __CODEQOR ) CObjectContextBase
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CObjectContextBase );

		//--------------------------------------------------------------------------------
		template< typename T > CObjectContextBase( T* pt )
		{
			m_pPointer = new (m_Backing)CObjectPointer< T >( pt );
		}

		CObjectContextBase();
		CObjectContextBase( const CObjectContextBase& src );
		CObjectContextBase& operator = ( const CObjectContextBase& src );
		~CObjectContextBase();

		operator CObjectPointerBase&( void );
		bool IsNull( void );
		static CObjectContextBase& NullContext( void );

		static CObjectContextBase nullContext;

	protected:

		CObjectPointerBase* m_pPointer;

	private:

		typedef CObjectPointer< CObjectContextBase > ObjectContextBasePointer;
		byte m_Backing[ sizeof( ObjectContextBasePointer ) + sizeof( double ) ];

		byte* Local_memcpy( byte* s1, const byte* s2, size_t n );
	};

}//nsCodeQOR

#endif//CODEQOR_OBJECTCONTEXTBASE_H_1
