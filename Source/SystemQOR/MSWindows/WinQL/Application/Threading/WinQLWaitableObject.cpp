//WinQLWaitableObject.cpp

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/System/Info/WinQLSystemInfo.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLWaitableObject.h"
#include "WinQL/Application/Threading/WinQLWait.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CWaitableObject );

	//--------------------------------------------------------------------------------
	CWaitableObject::CWaitableObject()
	{
		_WINQ_FCONTEXT( "CWaitableObject::CWaitableObject" );
	}

	//--------------------------------------------------------------------------------
	CWaitableObject::CWaitableObject( void* handle ) : m_Handle( handle )
	{
		_WINQ_FCONTEXT( "CWaitableObject::CWaitableObject" );
		m_Handle.Attach( this );
	}

	//--------------------------------------------------------------------------------
	CWaitableObject::CWaitableObject( CSyncHandle::ref_type ExistingHandle ) : m_Handle( ExistingHandle )
	{
		_WINQ_FCONTEXT( "CWaitableObject::CWaitableObject" );
		m_Handle.Attach( this );
	}

	//--------------------------------------------------------------------------------
	CWaitableObject::~CWaitableObject()
	{
		_WINQ_FCONTEXT( "CWaitableObject::~CWaitableObject" );
	}

	//--------------------------------------------------------------------------------
	CWaitableObject::CWaitableObject( const CWaitableObject& src )
	{
		_WINQ_FCONTEXT( "CWaitableObject::CWaitableObject" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CWaitableObject& CWaitableObject::operator = ( const CWaitableObject& src )
	{
		_WINQ_FCONTEXT( "CWaitableObject::operator =" );
		if( &src != this )
		{
			m_Handle = src.m_Handle.ptr();
			m_Handle.Attach( src.m_Handle.Object() );
			m_Handle.SetCanBeSignaled( src.m_Handle.CanBeSignaled() );
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTCRef< CSyncHandle > CWaitableObject::Handle()
	{
		nsCodeQOR::CTCRef< CSyncHandle > refHandle( &m_Handle );
		return refHandle;
	}

	//--------------------------------------------------------------------------------
	void CWaitableObject::OnSignaled( void )
	{
		_WINQ_FCONTEXT( "CWaitableObject::OnSignaled" );
	}
	
	//--------------------------------------------------------------------------------
	unsigned long CWaitableObject::Wait( unsigned long dwMilliseconds, bool bAlertable )
	{
		_WINQ_FCONTEXT( "CWaitableObject::Wait" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			CSystemInfoHelper InfoHelper;
			static unsigned long dwMajorVersion = (unsigned long)( LoByte( LoWord( InfoHelper.GetVersion() ) ) );
			nsWin32::CWaitHelper WaitHelper;
			if( bAlertable == true && dwMajorVersion >= 5 )
			{
				dwResult = WaitHelper.WaitForSingleObjectEx( m_Handle, dwMilliseconds, bAlertable );
			}
			else
			{
				dwResult = WaitHelper.WaitForSingleObject( m_Handle, dwMilliseconds );
			}
		}__QOR_ENDPROTECT
		return dwResult;
	}

}//nsWin32
