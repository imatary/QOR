// DllMain.cpp : Defines the entry point for a shared library

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "BootStrap.h"
#include "SystemQOR/SharedBootStrap.h"
#include <stdlib.h>
#include "../Source/SystemQOR/MSWindows/WinCmpSupQORVC/include/Exceptions/SEH/excpt.h"

__QCMP_STARTLINKAGE_C

	int __stdcall QORWinShared( void* hDllHandle, unsigned long ulReason, void* pReserved );

	//------------------------------------------------------------------------------
	//The external initial entry point for this Windows DLL

    //------------------------------------------------------------------------------
	__QCMP_NOINLINE int __stdcall _DllMainCRTStartup( void* hDllHandle, unsigned long ulReason, void* pReserved )
	{

		if( ulReason == 1 )//On process attach the first thing that must be done is to init the stack cookie to keep Windows and MSVC compiler injected code ( ideally there should be none ) happy
		{
			nsWin32::CWinQORSharedBootStrap::InitializeSecurityCookie();
		}

		int iRetCode = -1;

		//This default global catch all SEH exception handler will cause a process exit with a return code of -2 if things go very badly wrong
		__QCMP_TRY
		{
			iRetCode = QORWinShared( hDllHandle, ulReason, pReserved );
		}
		__QCMP_EXCEPT( EXCEPTION_EXECUTE_HANDLER )
		{
			iRetCode = -2;
		}

		return iRetCode;
	}

	//------------------------------------------------------------------------------
	//The external initial entry point for this Windows DLL
    int __stdcall DllMainCRTStartup( void* hDllHandle, unsigned long dwReason, void* lpreserved )
    {
        return _DllMainCRTStartup( hDllHandle, dwReason, lpreserved );
    }

	//------------------------------------------------------------------------------
	int __stdcall QORWinShared( void* hDllHandle, unsigned long ulReason, void* pReserved )
	{
		switch( ulReason )
		{
		case nsWin32::CWinQORSharedBootStrap::eProcessAttach:	//Start-up code. A process has loaded this module
			{
				//Create Dll bootstrap object on process global heap and increment process attachment notification
				g_pBootStrap = new nsWin32::CWinQORSharedBootStrap( hDllHandle );
				break;
			}

		case nsWin32::CWinQORSharedBootStrap::eProcessDetach:	//Shutdown code. A process is unloading this module
			{
				// decrement process attach notification and free bootstrap object when count goes to 0
				if ( g_pBootStrap && (( nsWin32::CWinQORSharedBootStrap*)g_pBootStrap)->ProcessAttached() && ( ( ( nsWin32::CWinQORSharedBootStrap*)g_pBootStrap )->ProcessDetach() == 0 ) )
				{
					delete ( reinterpret_cast< nsWin32::CWinQORSharedBootStrap* >( g_pBootStrap ) );//cast ensures we call custom delete matching new above
					g_pBootStrap = 0;
				}
				else
				{
					return 0;	// no prior process attach, just return
				}
				break;
			}
		case nsWin32::CWinQORSharedBootStrap::eThreadAttach:
			{
				break;
			}

		case nsWin32::CWinQORSharedBootStrap::eThreadDetach:
			{
				break;
			}
		}
		return 1;
	}


#ifdef __MINGW32__

	typedef void (*func_ptr) (void);
	extern func_ptr __CTOR_LIST__[];
	extern func_ptr __DTOR_LIST__[];

	//------------------------------------------------------------------------------
	void __do_global_dtors( void )
	{
		static func_ptr *p = __DTOR_LIST__ + 1;

		//Call each destructor in the destructor list until a null pointer is encountered.
		while( *p )
		{
			( *(p) )();
			p++;
		}
	}

	//------------------------------------------------------------------------------
	void __do_global_ctors( void )
	{
		unsigned long nptrs = (unsigned long) __CTOR_LIST__[ 0 ];
		unsigned i;

		//If the first entry in the constructor list is -1 then the list is terminated with a null entry.
		//Otherwise the first entry was the number of pointers in the list.

		if( nptrs == -1 )
		{
			for( nptrs = 0; __CTOR_LIST__[ nptrs + 1 ] != 0; nptrs++ )
			{
			}
		}

		//Go through the list backwards calling constructors.

		for( i = nptrs; i >= 1; i-- )
		{
			__CTOR_LIST__[ i ] ();
		}

		//Register the destructors for processing on exit.

		atexit( __do_global_dtors );
	}

	static int initialized = 0;

	//------------------------------------------------------------------------------
	void __main (void)
	{
		if( !initialized )
		{
			initialized = 1;
			__do_global_ctors();
		}
	}
#endif//__MINGW32__

	//------------------------------------------------------------------------------
	int _cdecl QORStaticInit( void )
	{
		( ( nsWin32::CWinQORSharedBootStrap* )g_pBootStrap )->InitStatic();

#ifdef	__GNUC__
		__main();
#endif

		return 0;
	}
	
__QCMP_ENDLINKAGE_C






