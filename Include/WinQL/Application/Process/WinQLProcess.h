//WinQLProcess.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Code Services process class

#ifndef WINQL_CODESERV_PROCESS_H_3
#define WINQL_CODESERV_PROCESS_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "AppocritaQOR/SubSystems/Threading.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Definitions/IO.h"
#include "WinQL/Application/Process/WinQLProcessHelper.h"
#include "WinQL/Application/ErrorSystem/WinQLErrorSystem.h"
#include "WinQL/Application/Process/WinQLEnvironment.h"
#include "WinQL/Application/Process/WinQLAtExit.h"
#include "WinQL/Application/Threading/WinQLMutex.h"
#include "CodeQOR/Modules/ProcessBase.h"
#include "WinQL/Application/Process/Module/WinQLDll.h"
#include "WinQL/Application/Process/WinQLTerminate.h"
#include "WinQL/Application/Process/WinQLNewHandler.h"
#include "WinQL/Application/Memory/WinQLMemory.h"
#include "WinQL/Application/Process/WinQLRemoteProcess.h"
#include "WinQL/Application/ErrorSystem/WinQLDebugging.h"

//------------------------------------------------------------------------------
namespace nsWin32
{

	//------------------------------------------------------------------------------
	struct ImageDOSHeader
	{												// DOS .EXE header
		unsigned short e_magic;                     // Magic number
		unsigned short e_cblp;                      // Bytes on last page of file
		unsigned short e_cp;                        // Pages in file
		unsigned short e_crlc;                      // Relocations
		unsigned short e_cparhdr;                   // Size of header in paragraphs
		unsigned short e_minalloc;                  // Minimum extra paragraphs needed
		unsigned short e_maxalloc;                  // Maximum extra paragraphs needed
		unsigned short e_ss;                        // Initial (relative) SS value
		unsigned short e_sp;                        // Initial SP value
		unsigned short e_csum;                      // Checksum
		unsigned short e_ip;                        // Initial IP value
		unsigned short e_cs;                        // Initial (relative) CS value
		unsigned short e_lfarlc;                    // File address of relocation table
		unsigned short e_ovno;                      // Overlay number
		unsigned short e_res[4];                    // Reserved words
		unsigned short e_oemid;                     // OEM identifier (for e_oeminfo)
		unsigned short e_oeminfo;                   // OEM information; e_oemid specific
		unsigned short e_res2[10];                  // Reserved words
		long e_lfanew;								// File address of new exe header
	};

#ifdef __MINGW32__
#	define __ImageBase _image_base__
#endif

	__QCMP_LINKAGE_C const nsWin32::ImageDOSHeader __ImageBase;//This must be injected by the Compiler for Windows builds

	class __QOR_INTERFACE( __WINQL ) CJob;

	//------------------------------------------------------------------------------
	//class to represent the running windows process
	class __QOR_INTERFACE( __WINQL ) CProcess : public nsCodeQOR::CProcessBase, public CWinModule, public CRemoteProcess
	{

	public:

		__QOR_DECLARE_OCLASS_ID( CProcess );

		CProcess();
		virtual ~CProcess();

		virtual nsQOR::IThread::ref_type ThreadContext( void );
		
		//Exit this process with the supplied return code
		void Exit( unsigned int uExitCode );

		//------------------------------------------------------------------------------
		nsWin32::InstanceHandle Instance()
		{
			return m_hInstance;
		}

		//Get the process identifier for this process
		static unsigned long GetCurrentId( void );

		//Return the process wide error system
		//CErrorSystem& ErrorSystem( void );
		
		//Return the process name
		mxTCHAR* Name( void );		
		CTString GetFileName( void );

		//------------------------------------------------------------------------------
		TCHAR* GetCommandLine(void)
		{
			TCHAR* strResult = 0;
			strResult = m_Win32Helper.GetCommandLineT();
			return strResult;
		}

		//------------------------------------------------------------------------------
		nsWin32::STARTUPINFO StartupInfo()
		{
			return m_Win32Helper.StartupInfo();
		}

		//--------------------------------------------------------------------------------
		CTerminate& TerminateHandler() 
		{
			return m_TerminateHandler; 
		}

		//--------------------------------------------------------------------------------
		CNewHandler& OpNewHandler() 
		{ 
			return m_NewHandler; 
		}

		//--------------------------------------------------------------------------------
		CMutex& TypeInfoMutex() 
		{ 
			return m_TypeInfoMutex; 
		}

		//--------------------------------------------------------------------------------
		CHeap& Heap()
		{
			return m_Heap;
		}

		int ProcessCommandLine( int& argc, TCHAR**& argv );

		nsCodeQOR::CSTMember< CErrorSystem > ErrorSystem;	
		nsCodeQOR::CSTMember< CMemoryManager > MemoryManager;
		nsCodeQOR::CSTMember< CEnvironment > Environment;
		//nsCodeQOR::CSTMember< CLibraryLoader > LibraryLoader;
		nsCodeQOR::CSTMember< CDebuggingHelper > DebugHelper;

	private:

		//
		//CAtExit m_AtExitList;

	protected:
			
		CHeap m_Heap;		//The first non-stack or image thing the process must have is a heap

		mxTCHAR* m_Name;		
			
		void ParseCommandLine( TCHAR** argv,  TCHAR* args, int* piArgumentCount, int* piCharacterCount );
		bool ParseArgument( TCHAR** argv, TCHAR* args, int* piArgumentCount, int* piCharacterCount, TCHAR* p, bool& bInQuote, bool& bCopyChar, unsigned int& numslash );
		bool ParseOneArgument( TCHAR* args, int* piCharacterCount, bool& bInQuote, bool& bCopyChar, unsigned int& numslash, TCHAR* p );

	private:
					
		CProcessHelper m_Win32Helper;
		InstanceHandle m_hInstance;

		unsigned m_RefCount;			
		CTerminate m_TerminateHandler;
		CNewHandler m_NewHandler;
		nsWin32::CMutex m_TypeInfoMutex;

		// Not to be implemented
		CProcess( CProcess const& );
		CProcess& operator = ( CProcess const& );

	};

	//Return a pointer to the process object for this process
	__QOR_INTERFACE( __WINQL ) CProcess* ThisProcess( void );

	//Initialize the Windows Process Object in preallocated image memory
	void InitWindowsProcess( void );

}//nsWin32

#endif//WINQL_CODESERV_PROCESS_H_3
