//WinQLUSBHub.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR/System.h"
#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/USB/WinQLUSBHub.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterfaceClass.h"
#include "WinQL/System/WinQLSystem.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_GUID( CUSBHub, 0xF18A0E88, 0xC30C, 0x11D0, 0x88, 0x15, 0x00, 0xA0, 0xC9, 0x06, 0xBE, 0xD8 );
	
	nsCodeQOR::CTExternalRegEntry< CUSBHub > CUSBHub::RegEntry;

	//--------------------------------------------------------------------------------
	CUSBHub::CUSBHub() : CDeviceInterface()
	,	m_bNodeInformation( false )
	,	m_bHubInformation( false )
	,	m_bCapabilities( false )
	,	m_bCapabilitiesEx( false )
	{
		_WINQ_FCONTEXT( "CUSBHub::CUSBHub" );				
	}

	//--------------------------------------------------------------------------------
	CUSBHub::~CUSBHub()
	{
		_WINQ_FCONTEXT( "CUSBHub::~CUSBHub" );
	}

	//--------------------------------------------------------------------------------
	void CUSBHub::SetPath( const mxTCHAR* szPath )
	{
		_WINQ_FCONTEXT( "CUSBHub::SetPath" );
		nsCodeQOR::CTLRef< mxTCHAR > RefPath( szPath, false );
		m_strPath = CTString( RefPath );
		CTString strHubName(  m_strPath.GetBuffer() + 4, m_strPath.Len() - 4 ); 
		m_strHubName = strHubName.toUpper();
		
		TheSystem().As< nsWin32::CSystem >()->Devices( QOR_PP_SHARED_OBJECT_ACCESS )().RegisterUSBHub( m_strHubName, this );
	}

	//--------------------------------------------------------------------------------
	CTString CUSBHub::GetName()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetName" );
		return m_strHubName;				
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::IsHub()
	{
		_WINQ_FCONTEXT( "CUSBHub::IsHub" );
		return ( ValidateNodeInformation() && m_HubInfo.NodeType == UsbHub );
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::IsBusPowered()
	{
		_WINQ_FCONTEXT( "CUSBHub::IsBusPowered" );
		return ( IsHub() && ( m_HubInfo.u.HubInformation.HubIsBusPowered ? true : false ) );
	}

	//--------------------------------------------------------------------------------
	byte CUSBHub::NumberOfPorts()
	{
		_WINQ_FCONTEXT( "CUSBHub::NumberOfPorts" );
		byte result = 0;
		if( IsHub() )
		{
			result = m_HubInfo.u.HubInformation.HubDescriptor.bNumberOfPorts;
		}
		return result;
	}

	//--------------------------------------------------------------------------------
	unsigned short CUSBHub::MillisecondsToPowerUp()
	{
		_WINQ_FCONTEXT( "CUSBHub::MillisecondsToPowerUp" );
		unsigned short usResult = 0;
		if( IsHub() )
		{
			usResult = m_HubInfo.u.HubInformation.HubDescriptor.bPowerOnToPowerGood * 2;
		}
		return usResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short CUSBHub::MaximumControllerMilliAmps()
	{
		_WINQ_FCONTEXT( "CUSBHub::MaximumControllerMilliAmps" );
		unsigned short usResult = 0;
		if( IsHub() )
		{
			usResult = m_HubInfo.u.HubInformation.HubDescriptor.bHubControlCurrent;
		}
		return usResult;
	}

	//--------------------------------------------------------------------------------
	CUSBHub::LogicalPowerSwitchingMode CUSBHub::GetLogcalPowerSwitchingMode()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetLogicalPowerSwitchingMode" );
		CUSBHub::LogicalPowerSwitchingMode Result = eGanged;
		if( IsHub() )
		{
			Result = ( m_HubInfo.u.HubInformation.HubDescriptor.wHubCharacteristics & 0x0002 ) == 0x0001 ? eIndividual : eGanged;
		}
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::IsCompoundDevice()
	{
		_WINQ_FCONTEXT( "CUSBHub::IsCompoundDevice" );
		bool bResult = false;
		if( IsHub() )
		{
			bResult = ( m_HubInfo.u.HubInformation.HubDescriptor.wHubCharacteristics & 0x0004 ) == 0x0004 ? true : false;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CUSBHub::OverCurrentProtectionMode CUSBHub::GetOverCurrentProtectionMode()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetOverCurrentProtectionMode" );
		CUSBHub::OverCurrentProtectionMode Result = eNone;
		if( IsHub() )
		{
			byte OverCurrentMode = ( m_HubInfo.u.HubInformation.HubDescriptor.wHubCharacteristics & 0x0018 );
			switch( OverCurrentMode )
			{
			case 0x00:
				Result = eGlobal;
				break;
			case 0x01:
				Result = ePerPort;
				break;
			default:
				Result = eNone;
				break;			
			}
		}
		return Result;
	}


	//--------------------------------------------------------------------------------
	bool CUSBHub::ValidateNodeInformation()
	{
		_WINQ_FCONTEXT( "CUSBHub::ValidateNodeInformation" );
		if( !m_bNodeInformation )
		{
			m_bNodeInformation = GetNodeInformation();
		}
		return m_bNodeInformation;
	}	

	//--------------------------------------------------------------------------------
	bool CUSBHub::GetNodeInformation()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetNodeInformation" );
		auto Session = Open(Generic_Write, File_Share_Write, Open_Existing);
		unsigned long nBytes = 0;
		memset( &m_HubInfo, 0, sizeof( USB_NODE_INFORMATION ) );
		bool bSuccess = Session->Control( 
			__WINQL_DEVICE_CONTROL_CODE( File_Device_USB, USB_GET_NODE_INFORMATION, Method_Buffered, File_Any_Access ), &m_HubInfo, sizeof(USB_NODE_INFORMATION), &m_HubInfo, sizeof(USB_NODE_INFORMATION), &nBytes, NULL );

		if( bSuccess )
		{
			m_VecConnections.resize( m_HubInfo.u.HubInformation.HubDescriptor.bNumberOfPorts );

			for( unsigned int uiPort = 0; uiPort < m_HubInfo.u.HubInformation.HubDescriptor.bNumberOfPorts; uiPort++ )
			{
				m_VecConnections[ uiPort ].Setup( this, uiPort + 1 );
			}
		}

		return bSuccess;
	}

	//--------------------------------------------------------------------------------
	CUSBHub::USB_HUB_TYPE CUSBHub::GetType()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetType" );
		CUSBHub::USB_HUB_TYPE Result = UnknownHubType;
		if( ValidateHubInformation() )
		{
			Result = m_HubInfoEx.HubType;
		}
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned short CUSBHub::GetHighestPortNumber()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetHighestPortNumber" );
		unsigned short  usResult = 0;
		if( ValidateHubInformation() )
		{
			usResult = m_HubInfoEx.HighestPortNumber;
		}
		return usResult;
	}

	//--------------------------------------------------------------------------------
	byte CUSBHub::GetPacketHeaderDecodeLatency()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetPacketHeaderDecodeLatency" );
		byte result = 0;
		if( GetType() == Usb30Hub )
		{
			result = m_HubInfoEx.u.Usb30HubDescriptor.bHubHdrDecLat;
		}
		return result;
	}

	//--------------------------------------------------------------------------------
	unsigned short CUSBHub::GetAverageNanosecondHubDelay()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetAverageNanosecondHubDelay" );
		unsigned short result = 0;
		if( GetType() == Usb30Hub )
		{
			result = m_HubInfoEx.u.Usb30HubDescriptor.wHubDelay;
		}
		return result;
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::ValidateHubInformation( void )
	{
		_WINQ_FCONTEXT( "CUSBHub::ValidateHubInformation" );
		if( !m_bHubInformation )
		{
			m_bHubInformation = GetHubInformation();
		}
		return m_bHubInformation;
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::GetHubInformation()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetHubInformation" );
		auto Session = Open(Generic_Write, File_Share_Write, Open_Existing);
		unsigned long nBytes = 0;
		bool bSuccess = Session->Control( 
			__WINQL_DEVICE_CONTROL_CODE( File_Device_USB, USB_GET_HUB_INFORMATION_EX, Method_Buffered, File_Any_Access ), &m_HubInfoEx, sizeof(USB_HUB_INFORMATION_EX), &m_HubInfoEx, sizeof(USB_HUB_INFORMATION_EX), &nBytes, NULL );
		return bSuccess;
	}


/*
// USB 1.1: 9.4 Standard Device Requests, Table 9-5. Descriptor Types
//
#define USB_DEVICE_DESCRIPTOR_TYPE                          0x01
#define USB_CONFIGURATION_DESCRIPTOR_TYPE                   0x02
#define USB_STRING_DESCRIPTOR_TYPE                          0x03
#define USB_INTERFACE_DESCRIPTOR_TYPE                       0x04
#define USB_ENDPOINT_DESCRIPTOR_TYPE                        0x05
//
// USB 2.0: 9.4 Standard Device Requests, Table 9-5. Descriptor Types
//
#define USB_DEVICE_QUALIFIER_DESCRIPTOR_TYPE                0x06
#define USB_OTHER_SPEED_CONFIGURATION_DESCRIPTOR_TYPE       0x07
#define USB_INTERFACE_POWER_DESCRIPTOR_TYPE                 0x08
//
// USB 3.0: 9.4 Standard Device Requests, Table 9-5. Descriptor Types
//
#define USB_OTG_DESCRIPTOR_TYPE                             0x09
#define USB_DEBUG_DESCRIPTOR_TYPE                           0x0A
#define USB_INTERFACE_ASSOCIATION_DESCRIPTOR_TYPE           0x0B
#define USB_BOS_DESCRIPTOR_TYPE                             0x0F
#define USB_DEVICE_CAPABILITY_DESCRIPTOR_TYPE               0x10
#define USB_SUPERSPEED_ENDPOINT_COMPANION_DESCRIPTOR_TYPE   0x30
*/
	//--------------------------------------------------------------------------------
	bool CUSBHub::GetDescriptorFromNodeConnection()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetDescriptorFromNodeConnection" );
		auto Session = Open(Generic_Write, File_Share_Write, Open_Existing);
		USB_DESCRIPTOR_REQUEST ConfigDescReq;
		unsigned long nBytes = sizeof( USB_DESCRIPTOR_REQUEST ) + sizeof( USB_CONFIGURATION_DESCRIPTOR );
		unsigned long nBytesReturned = 0;

		bool bSuccess = Session->Control( 
			__WINQL_DEVICE_CONTROL_CODE( File_Device_USB, USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION, Method_Buffered, File_Any_Access ), &ConfigDescReq, nBytes, &ConfigDescReq, nBytes, &nBytesReturned, NULL );
		return bSuccess;
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::Is2xCapable( void )
	{
		_WINQ_FCONTEXT( "CUSBHub::Is2xCapable" );
		return ( ValidateCapabilities() && m_Capabilities.HubIs2xCapable );
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::ValidateCapabilities( void )
	{
		_WINQ_FCONTEXT( "CUSBHub::ValidateCapabilities" );
		if( !m_bCapabilities )
		{
			m_bCapabilities = GetCapabilities();
		}
		return m_bCapabilities;
	}

	//--------------------------------------------------------------------------------
    bool CUSBHub::GetCapabilities()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetCapabilities" );
		auto Session = Open(Generic_Write, File_Share_Write, Open_Existing);
		unsigned long nBytes = 0;
		bool bSuccess = Session->Control(
			__WINQL_DEVICE_CONTROL_CODE( File_Device_USB, USB_GET_HUB_CAPABILITIES, Method_Buffered, File_Any_Access ), &m_Capabilities, sizeof(USB_HUB_CAPABILITIES), &m_Capabilities, sizeof(USB_HUB_CAPABILITIES), &nBytes, NULL );
		return bSuccess;
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::IsHighSpeedCapable()
	{
		_WINQ_FCONTEXT( "CUSBHub::IsHighSpeedCapable" );
		return ( ValidateCapabilitiesEx() && m_CapabilitiesEx.CapabilityFlags.HubIsHighSpeedCapable );
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::IsHighSpeed()
	{
		_WINQ_FCONTEXT( "CUSBHub::IsHighSpeed" );
		return ( ValidateCapabilitiesEx() && m_CapabilitiesEx.CapabilityFlags.HubIsHighSpeed );
	}
				
	//--------------------------------------------------------------------------------
	bool CUSBHub::IsMultiTtCapable()
	{
		_WINQ_FCONTEXT( "CUSBHub::IsMultiTtCapable" );
		return ( ValidateCapabilitiesEx() && m_CapabilitiesEx.CapabilityFlags.HubIsMultiTtCapable );
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::IsMultiTt()
	{
		_WINQ_FCONTEXT( "CUSBHub::IsMultiTt" );
		return ( ValidateCapabilitiesEx() && m_CapabilitiesEx.CapabilityFlags.HubIsMultiTt );
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::IsRoot()
	{
		_WINQ_FCONTEXT( "CUSBHub::IsRoot" );
		return ( ValidateCapabilitiesEx() && m_CapabilitiesEx.CapabilityFlags.HubIsRoot );
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::IsArmedWakeOnConnect()
	{
		_WINQ_FCONTEXT( "CUSBHub::IsArmedWakeOnConnect" );
		return ( ValidateCapabilitiesEx() && m_CapabilitiesEx.CapabilityFlags.HubIsArmedWakeOnConnect );
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::IsBusPowerCapable()
	{
		_WINQ_FCONTEXT( "CUSBHub::IsBusPowerCapable" );
		return ( ValidateCapabilitiesEx() && m_CapabilitiesEx.CapabilityFlags.HubIsBusPowered );
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::ValidateCapabilitiesEx()
	{
		_WINQ_FCONTEXT( "CUSBHub::ValidateCapabilitiesEx" );
		if( !m_bCapabilitiesEx )
		{
			m_bCapabilitiesEx = GetCapabilitiesEx();
		}
		return m_bCapabilitiesEx;
	}

	//--------------------------------------------------------------------------------
    bool CUSBHub::GetCapabilitiesEx()
	{
		_WINQ_FCONTEXT( "CUSBHub::GetCapabilitiesEx" );
		auto Session = Open(Generic_Write, File_Share_Write, Open_Existing);
		unsigned long nBytes = 0;
		bool bSuccess = Session->Control(
			__WINQL_DEVICE_CONTROL_CODE( File_Device_USB, USB_GET_HUB_CAPABILITIES_EX, Method_Buffered, File_Any_Access ), &m_CapabilitiesEx, sizeof(USB_HUB_CAPABILITIES_EX), &m_CapabilitiesEx, sizeof(USB_HUB_CAPABILITIES_EX), &nBytes, NULL );
		return bSuccess;
	}


	//--------------------------------------------------------------------------------
	bool CUSBHub::CyclePort( unsigned long ulConnectionIndex )
	{
		_WINQ_FCONTEXT( "CUSBHub::CyclePort" );
		auto Session = Open(Generic_Write, File_Share_Write, Open_Existing);
		unsigned long nBytes = 0;
		unsigned long ulResult = 0;
		bool bSuccess = Session->Control(
			__WINQL_DEVICE_CONTROL_CODE( File_Device_USB, USB_HUB_CYCLE_PORT, Method_Buffered, File_Any_Access ), &ulConnectionIndex, sizeof( unsigned long ), &ulResult, sizeof( unsigned long ), &nBytes, NULL );
		return bSuccess;
	}

	//--------------------------------------------------------------------------------
	bool CUSBHub::Reset()
	{
		_WINQ_FCONTEXT( "CUSBHub::Reset" );
		auto Session = Open(Generic_Write, File_Share_Write, Open_Existing);
		bool bSuccess = Session->Control(
			__WINQL_DEVICE_CONTROL_CODE( File_Device_USB, USB_RESET_HUB, Method_Buffered, File_Any_Access ), 0, 0, 0, 0, 0, 0 );
		return bSuccess;
	}

	//--------------------------------------------------------------------------------
	CUSBHub::CPortConnection::ref_type CUSBHub::GetPort( byte Port )
	{
		_WINQ_FCONTEXT( "CUSBHub::GetPort" );
		CUSBHub::CPortConnection::ref_type Result;
		if( Port > 0 && Port <= m_VecConnections.size() )
		{
			Result.Attach( &m_VecConnections[ Port - 1 ], false );
		}
		return Result;
	}

}//nsWin32

