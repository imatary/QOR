//TExtString.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/Text/Char.h"
#include "CodeQOR/Text/TExtString.h"
#include "CodeQOR/Text/TString.h"
#include "AppocritaQOR/Event.h"
#include <stdlib.h>

//------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	void __QOR_INTERFACE( __CODEQOR ) ExtAssignFromAString( CUCS2String& String, const nsCodeQOR::CACodeString& aSrc )
	{
		nsCodeQOR::CChar8* pSrcChar = aSrc.str();
		unsigned short usSrcLen = ExtSysLen( pSrcChar );
		while( ( usSrcLen > 0 ) && ( pSrcChar != 0 ) && ( *pSrcChar != CChar8( (char)0 ) ) )
		{
			CChar16 tmpChar( pSrcChar->Unicode() );
			String.Append( tmpChar );
			usSrcLen--;
			pSrcChar++;
		}
	}

	//--------------------------------------------------------------------------------
	void __QOR_INTERFACE( __CODEQOR ) ExtAssignFromWString( CUCS2String& String, const nsCodeQOR::CWCodeString& aSrc )
	{
		unsigned short usSrcLen = ExtSysLen( aSrc.str().operator nsCodeQOR::CChar16 *() );
		String.Init( aSrc.str().operator nsCodeQOR::CChar16 *(), usSrcLen, usSrcLen | 128 );
	}

	//--------------------------------------------------------------------------------
	void __QOR_INTERFACE( __CODEQOR ) ExtAssignFromAString( CLocal8BitString& String, const nsCodeQOR::CACodeString& aSrc )
	{
		nsCodeQOR::CChar8* pSrcChar = aSrc.str();
		unsigned short usSrcLen = ExtSysLen( pSrcChar );
		while( ( usSrcLen > 0 ) && ( pSrcChar != 0 ) && ( *pSrcChar != CChar8( (char)0 ) ) )
		{
			CChar8 tmpChar( pSrcChar->ToAscii() );
			String.Append( tmpChar );
			usSrcLen--;
			pSrcChar++;
		}
	}

	//--------------------------------------------------------------------------------
	void __QOR_INTERFACE( __CODEQOR ) ExtAssignFromWString( CLocal8BitString& String, const nsCodeQOR::CWCodeString& aSrc )
	{
		nsCodeQOR::CChar16* pSrcChar = aSrc.str();
		unsigned short usSrcLen = ExtSysLen( pSrcChar );
		while( ( usSrcLen > 0 ) && ( pSrcChar != 0 ) && ( *pSrcChar != CChar16( (int)0 ) ) )
		{
			CChar8 tmpChar( pSrcChar->ToAscii() );
			String.Append( tmpChar );
			usSrcLen--;
			pSrcChar++;
		}
	}

	//--------------------------------------------------------------------------------
	void __QOR_INTERFACE( __CODEQOR ) ExtAssignFromAString( CUCS4String& String, const nsCodeQOR::CACodeString& aSrc )
	{
		nsCodeQOR::CChar8* pSrcChar = aSrc.str();
		unsigned short usSrcLen = ExtSysLen( pSrcChar );
		while( ( usSrcLen > 0 ) && ( pSrcChar != 0 ) && ( *pSrcChar != CChar8( (char)0 ) ) )
		{
			CChar32 tmpChar( pSrcChar->Unicode() );
			String.Append( tmpChar );
			usSrcLen--;
			pSrcChar++;
		}
	}

	//--------------------------------------------------------------------------------
	void __QOR_INTERFACE( __CODEQOR ) ExtAssignFromWString( CUCS4String& String, const nsCodeQOR::CWCodeString& aSrc )
	{
		nsCodeQOR::CChar16* pSrcChar = aSrc.str();
		unsigned short usSrcLen = ExtSysLen( pSrcChar );
		while( ( usSrcLen > 0 ) && ( pSrcChar != 0 ) && ( *pSrcChar != CChar16( (int)0 ) ) )
		{
			CChar32 tmpChar( pSrcChar->ToAscii() );
			String.Append( tmpChar );
			usSrcLen--;
			pSrcChar++;
		}
	}

	//--------------------------------------------------------------------------------
	void __QOR_INTERFACE( __CODEQOR ) ExtAssignFromAString( CASCIIString& String, const nsCodeQOR::CACodeString& aSrc )
	{
		nsCodeQOR::CChar8* pSrcChar = aSrc.str();
		unsigned short usSrcLen = ExtSysLen( pSrcChar );
		String.Init( aSrc.operator const char *(), usSrcLen, usSrcLen | 128 );
	}

	//--------------------------------------------------------------------------------
	void __QOR_INTERFACE( __CODEQOR ) ExtAssignFromWString( CASCIIString& String, const nsCodeQOR::CWCodeString& aSrc )
	{
		nsCodeQOR::CChar16* pSrcChar = aSrc.str();
		unsigned short usSrcLen = ExtSysLen( pSrcChar );
		while( ( usSrcLen > 0 ) && ( pSrcChar != 0 ) && ( *pSrcChar != CChar16( (int)0 ) ) )
		{
			char tmpChar( pSrcChar->ToAscii() );
			String.Append( tmpChar );
			usSrcLen--;
			pSrcChar++;
		}
	}

	//--------------------------------------------------------------------------------
	void __QOR_INTERFACE( __CODEQOR ) ExtAssignFromAString( CWideString& String, const nsCodeQOR::CACodeString& aSrc )
	{
		nsCodeQOR::CChar8* pSrcChar = aSrc.str();
		unsigned short usSrcLen = ExtSysLen( pSrcChar );
		while( ( usSrcLen > 0 ) && ( pSrcChar != 0 ) && ( *pSrcChar != CChar8( (char)0 ) ) )
		{
			wchar_t tmpChar( pSrcChar->Unicode() );
			String.Append( tmpChar );
			usSrcLen--;
			pSrcChar++;
		}
	}

	//--------------------------------------------------------------------------------
	void __QOR_INTERFACE( __CODEQOR ) ExtAssignFromWString( CWideString& String, const nsCodeQOR::CWCodeString& aSrc )
	{
		unsigned short usSrcLen = ExtSysLen( reinterpret_cast< wchar_t* >( aSrc.str().operator nsCodeQOR::CChar16 *() ) );
		String.Init( reinterpret_cast< wchar_t* >( aSrc.str().operator nsCodeQOR::CChar16 *() ), usSrcLen, usSrcLen | 128 );
	}

	//--------------------------------------------------------------------------------
	enum 
	{ 
		AsciiSpaceMask = (1 << (' ' - 1)) |
						(1 << ('\t' - 1)) |   // 9: HT - horizontal tab
						(1 << ('\n' - 1)) |   // 10: LF - line feed
						(1 << ('\v' - 1)) |   // 11: VT - vertical tab
						(1 << ('\f' - 1)) |   // 12: FF - form feed
						(1 << ('\r' - 1)) };  // 13: CR - carriage return

	//--------------------------------------------------------------------------------
	inline bool ascii_isspace( unsigned char c )
	{
		return c >= 1U && c <= 32U && ( unsigned int(AsciiSpaceMask) >> unsigned int( c - 1 ) ) & 1U;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_long __QOR_INTERFACE( __CODEQOR ) ExtByteArrayToLongLong( const char* num, int base )
	{
		char* endptr = 0;

		if( *num == '\0' ) 
		{
			return 0;
		}

		Cmp_long_long l = strtoll( num, &endptr, base );

		return l;
	}

	//--------------------------------------------------------------------------------
	Cmp_unsigned_long_long __QOR_INTERFACE( __CODEQOR ) ExtByteArrayToUnsignedLongLong( const char* num, int base )
	{
		char* endptr = 0;

		if( *num == '\0' ) 
		{
			return 0;
		}

		Cmp_unsigned_long_long ul = strtoull( num, &endptr, base );

		return ul;
	}

	//--------------------------------------------------------------------------------
	CLocal8BitString __QOR_INTERFACE( __CODEQOR ) ExtToLocal8Bit( const CLocal8BitString& String )
	{
		CLocal8BitString strResult;
		strResult = String;
		return strResult;
	}

	//--------------------------------------------------------------------------------
	CLocal8BitString __QOR_INTERFACE( __CODEQOR ) ExtToLocal8Bit( const CUCS2String& String )
	{
		CLocal8BitString strResult;
		for( unsigned short usIndex = 0; usIndex < String.Len(); usIndex++ )
		{
			CChar8 tmpChar = String.At( usIndex ).ToLocal8Bit();
			strResult.Append( tmpChar );
		}
		return strResult;
	}

	//--------------------------------------------------------------------------------
	CLocal8BitString __QOR_INTERFACE( __CODEQOR ) ExtToLocal8Bit( const CUCS4String& String )
	{
		CLocal8BitString strResult;
		for( unsigned short usIndex = 0; usIndex < String.Len(); usIndex++ )
		{
			CChar8 tmpChar = String.At( usIndex ).ToLocal8Bit();
			strResult.Append( tmpChar );
		}
		return strResult;
	}

	//--------------------------------------------------------------------------------
	CLocal8BitString __QOR_INTERFACE( __CODEQOR ) ExtToLocal8Bit( const CASCIIString& String )
	{
		CLocal8BitString strResult;
		for( unsigned short usIndex = 0; usIndex < String.Len(); usIndex++ )
		{
			CChar8 tmpChar = String.At( usIndex );
			strResult.Append( tmpChar );
		}
		return strResult;
	}

	//--------------------------------------------------------------------------------
	CLocal8BitString __QOR_INTERFACE( __CODEQOR ) ExtToLocal8Bit( const CWideString& String )
	{
		CLocal8BitString strResult;
		for( unsigned short usIndex = 0; usIndex < String.Len(); usIndex++ )
		{
			CChar8 tmpChar = CChar16( String.At( usIndex ) ).ToLocal8Bit();
			strResult.Append( tmpChar );
		}
		return strResult;
	}

}//nsCodeQOR
