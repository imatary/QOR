//BfSocketConnector.cpp

// Copyright Querysoft Limited 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements a Bluefoot Socket Connector class

#include "BluefootQOR/Socket/BfSocketConnector.h"
#include "BluefootQOR/BfSocket.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	__QOR_IMPLEMENT_OCLASS_LUID(CSocketConnector);

	//--------------------------------------------------------------------------------
	CSocketConnector::CSocketConnector(CConnectionPool* pPool) : CPlug(pPool)
		, m_Type(CSocket::Sock_Stream)
		, m_AddressFamily(CSocket::AF_INet)
		, m_iProtocol(CSocket::IPProto_TCP)
		, m_Socket(new_shared_ref< CSocket >().AsRef<ISocket>())
	{
		__QCS_MEMBER_FCONTEXT("CSocketConnector::CSocketConnector");
		memset(&m_Address, 0, sizeof(ISocket::Address));
	}

	//--------------------------------------------------------------------------------
	CSocketConnector::~CSocketConnector()
	{
		__QCS_MEMBER_FCONTEXT("CSocketConnector::~CSocketConnector");
		if (m_bConnected)
		{
			Disconnect();
		}
	}

	//--------------------------------------------------------------------------------
	void CSocketConnector::SetAddress(const ISocket::Address& Address)
	{
		m_AddressFamily = static_cast< CSocket::eAddressFamily >(Address.sa_family);
		m_Address = Address;
	}

	//--------------------------------------------------------------------------------
	void CSocketConnector::SetType(CSocket::eType Type)
	{
		m_Type = Type;
	}

	//--------------------------------------------------------------------------------
	CSocket::eType CSocketConnector::GetType(void)
	{
		return m_Type;
	}

	//--------------------------------------------------------------------------------
	void CSocketConnector::SetAddressFamily(CSocket::eAddressFamily AddressFamily)
	{
		m_AddressFamily = AddressFamily;
	}

	//--------------------------------------------------------------------------------
	CSocket::eAddressFamily CSocketConnector::GetAddressFamily(void)
	{
		return m_AddressFamily;
	}

	//--------------------------------------------------------------------------------
	void CSocketConnector::SetProtocol(ISocket::eProtocol Protocol)
	{
		m_iProtocol = Protocol;
	}

	//--------------------------------------------------------------------------------
	ISocket::eProtocol CSocketConnector::GetProtocol(void)
	{
		return m_iProtocol;
	}
	//--------------------------------------------------------------------------------
	bool CSocketConnector::Connect()
	{
		__QCS_MEMBER_FCONTEXT("CSocketConnector::Connect");

		m_Socket().Create(m_AddressFamily, m_Type, m_iProtocol);

		if (m_Socket().ID() != 0 && m_Socket().ID() != (Cmp_uint_ptr)(-1))
		{
			m_Address.sa_family = static_cast< unsigned short >(m_AddressFamily);
			m_bConnected = m_Socket().Connect(m_Address) == 0 ? true : false;

			if (!AsyncConnection())
			{
				m_bConnected ? OnConnected() : OnConnectionError();
			}
		}
		return m_bConnected;
	}

	//--------------------------------------------------------------------------------
	void CSocketConnector::Disconnect()
	{
		__QCS_MEMBER_FCONTEXT("CSocketConnector::Disconnect");

		m_Socket().Shutdown(0);

		m_bConnected = false;
		if (!AsyncConnection())
		{
			//bClosed ? OnDisconnected() : OnDisconnectionError();
		}
	}

	//--------------------------------------------------------------------------------
	bool CSocketConnector::HandlePendingConnectionResult(bool bConnected)
	{
		__QCS_MEMBER_FCONTEXT("CSocketConnector::HandlePendingConnectionResult");

		if (bConnected)
		{
			return true;
		}

		return false;
	}

}//nsBluefoot

