//Constants.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Constant values and defines for use with the Microsoft Windows Operating System

#ifndef WINQL_CONSTANTS_H_1
#define WINQL_CONSTANTS_H_1

#include "CompilerQOR.h"

#if	__QOR_UNICODE
#	ifndef UNICODE
#		define UNICODE
#	endif
#	ifndef _UNICODE
#		define _UNICODE
#	endif
#endif//__QOR_UNICODE

#ifdef _WIN64
#	define DEFAULT_SECURITY_COOKIE		0x00002B992DDFA232
#else
#	define DEFAULT_SECURITY_COOKIE		0xBB40E64E
#endif

//------------------------------------------------------------------------------
namespace nsWin32
{
	//------------------------------------------------------------------------------
	// WMI request codes
	typedef enum
	{
		WMI_Get_All_Data = 0,
		WMI_Get_Single_Instance = 1,
		WMI_Set_Single_Instance = 2,
		WMI_Set_Single_Item = 3,
		WMI_Enable_Events = 4,
		WMI_Disable_Events  = 5,
		WMI_Enable_Collection = 6,
		WMI_Disable_Collection = 7,
		WMI_RegInfo = 8,
		WMI_Execute_Method = 9,
		WMI_Capture_State = 10
	} WMIDPRequestCode;

	__QCMP_STATIC_CONSTANT( long, Ver_Platform_Win32s = 0 );
	__QCMP_STATIC_CONSTANT( long, Ver_Platform_Win32_Windows = 1 );
	__QCMP_STATIC_CONSTANT( long, Ver_Platform_Win32_NT = 2 );

	static const int Max_DefaultChar = 2;
	static const int Max_LeadBytes = 12;

	static const int Max_Path = 260;
	static const int Max_Module_Name32 = 255;

#ifndef _MAC
	static const int Max_ComputerName_Length = 15;
#else
	static const int Max_ComputerName_Length = 31;
#endif

	static const int CChildren_TitleBar = 5;
	static const int CChildren_ScrollBar = 5;

	static const int LF_FaceSize = 32;
	static const int LF_FullFaceSize = 64;
	
	__QCMP_STATIC_CONSTANT( int, MM_Max_NumAxes = 16 );

	static const int CW_UseDefault = (0x80000000);

#	define Invalid_Handle_Value ( (const void*)(0xFFFFFFFF) )
	//__QCMP_STATIC_CONSTANT( void*, Invalid_Handle_Value = (const void*)(0xFFFFFFFF) );
	__QCMP_STATIC_CONSTANT( unsigned long, Invalid_File_Size = ((unsigned long)0xFFFFFFFF) );
	__QCMP_STATIC_CONSTANT( unsigned long, Invalid_Set_File_Pointer = ((unsigned long)-1) );
	__QCMP_STATIC_CONSTANT( unsigned long, Invalid_File_Attributes = ( (unsigned long)-1) );

	__QCMP_STATIC_CONSTANT( unsigned long, Std_Input_Handle = ( (unsigned long) -10 ) );
	__QCMP_STATIC_CONSTANT( unsigned long, Std_Output_Handle = ( (unsigned long) -11 ) );
	__QCMP_STATIC_CONSTANT( unsigned long, Std_Error_Handle = ( (unsigned long) -12 ) );

	//File seek constants
	__QCMP_STATIC_CONSTANT( long, File_Begin = 0 );
	__QCMP_STATIC_CONSTANT( long, File_Current = 1 );
	__QCMP_STATIC_CONSTANT( long, File_End = 2);

	__QCMP_STATIC_CONSTANT( unsigned long, Duplicate_Same_Access = 0x00000002 );

	__QCMP_STATIC_CONSTANT( long, Status_Wait_0 = ( (long)0x00000000L ) );
	__QCMP_STATIC_CONSTANT( long, Status_Abandoned_Wait_0 = ( (long)0x00000080L ) );
	__QCMP_STATIC_CONSTANT( long, Wait_IO_Completion = ( (long)0x000000C0L ) );

	__QCMP_STATIC_CONSTANT( int, Ignore = 0 );				// Ignore signal
	__QCMP_STATIC_CONSTANT( unsigned long, Infinite = ( (unsigned long)0xFFFFFFFF ) );	// Infinite timeout
	__QCMP_STATIC_CONSTANT( unsigned long, Wait_Failed = ( (unsigned long)0xFFFFFFFF ) );
	__QCMP_STATIC_CONSTANT( int, Wait_Object_0 = ( ( Status_Wait_0 ) + 0 ) );
	__QCMP_STATIC_CONSTANT( int, Wait_Abandoned = ( ( Status_Abandoned_Wait_0 ) + 0 ) );
	__QCMP_STATIC_CONSTANT( int, Wait_Abandoned_0 = ( ( Status_Abandoned_Wait_0 ) + 0 ) );
	__QCMP_STATIC_CONSTANT( int, Wait_Timeout = 258 );

	__QCMP_STATIC_CONSTANT( int, Format_Message_Allocate_Buffer = 0x00000100 );
	__QCMP_STATIC_CONSTANT( int, Format_Message_Ignore_Inserts = 0x00000200 );
	__QCMP_STATIC_CONSTANT( int, Format_Message_From_String = 0x00000400 );
	__QCMP_STATIC_CONSTANT( int, Format_Message_From_HModule = 0x00000800 );
	__QCMP_STATIC_CONSTANT( int, Format_Message_From_System = 0x00001000 );
	__QCMP_STATIC_CONSTANT( int, Format_Message_Argument_Array = 0x00002000 );
	__QCMP_STATIC_CONSTANT( int, Format_Message_Max_Width_Mask = 0x000000FF );

	//  The following are masks for the predefined standard access types
	__QCMP_STATIC_CONSTANT( unsigned long, Delete						=	(0x00010000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Read_Control                  =   (0x00020000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Write_DAC                     =   (0x00040000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Write_Owner                   =   (0x00080000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Synchronize                   =   (0x00100000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Standard_Rights_Required		=   (0x000F0000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Standard_Rights_Read          =   (Read_Control) );
	__QCMP_STATIC_CONSTANT( unsigned long, Standard_Rights_Write         =   (Read_Control) );
	__QCMP_STATIC_CONSTANT( unsigned long, Standard_Rights_Execute       =   (Read_Control) );
	__QCMP_STATIC_CONSTANT( unsigned long, Standard_Rights_All			=   (0x001F0000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Specific_Rights_All			=   (0x0000FFFFL) );

// AccessSystemAcl access type
	__QCMP_STATIC_CONSTANT( unsigned long, Access_System_Security		=   (0x01000000L) );

// MaximumAllowed access type
	__QCMP_STATIC_CONSTANT( unsigned long, Maximum_Allowed				=  (0x02000000L) );

//  These are the generic rights.
	__QCMP_STATIC_CONSTANT( unsigned long, Generic_Read					=   (0x80000000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Generic_Write					=   (0x40000000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Generic_Execute				=   (0x20000000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Generic_All					=   (0x10000000L) );

	__QCMP_STATIC_CONSTANT( long, PolicyViewLocalInformation					= 0x00000001L );
	__QCMP_STATIC_CONSTANT( long, PolicyViewAuditInformation					= 0x00000002L );
	__QCMP_STATIC_CONSTANT( long, PolicyGetPrivateInformation				= 0x00000004L );
	__QCMP_STATIC_CONSTANT( long, PolicyTrustAdmin							= 0x00000008L );
	__QCMP_STATIC_CONSTANT( long, PolicyCreateAccount						= 0x00000010L );
	__QCMP_STATIC_CONSTANT( long, PolicyCreateSecret							= 0x00000020L );
	__QCMP_STATIC_CONSTANT( long, PolicyCreatePrivilege						= 0x00000040L );
	__QCMP_STATIC_CONSTANT( long, PolicySetDefaultQuotaLimits				= 0x00000080L );
	__QCMP_STATIC_CONSTANT( long, PolicySetAuditRequirements					= 0x00000100L );
	__QCMP_STATIC_CONSTANT( long, PolicyAuditLogAdmin						= 0x00000200L );
	__QCMP_STATIC_CONSTANT( long, PolicyServerAdmin							= 0x00000400L );
	__QCMP_STATIC_CONSTANT( long, PolicyLookupNames							= 0x00000800L );
	__QCMP_STATIC_CONSTANT( long, PolicyNotification							= 0x00001000L );

	__QCMP_STATIC_CONSTANT( long, PolicyAllAccess     						=
			( Standard_Rights_Required | PolicyViewLocalInformation | PolicyViewAuditInformation | PolicyGetPrivateInformation
					| PolicyTrustAdmin | PolicyCreateAccount        | PolicyCreateSecret         | PolicyCreatePrivilege
					| PolicySetDefaultQuotaLimits | PolicySetAuditRequirements    |  PolicyAuditLogAdmin | PolicyServerAdmin
					| PolicyLookupNames ) );


	__QCMP_STATIC_CONSTANT( long, PolicyRead           = (Standard_Rights_Read             |\
                               PolicyViewAuditInformation    |\
                               PolicyGetPrivateInformation ) );

	__QCMP_STATIC_CONSTANT( long, PolicyWrite          = (Standard_Rights_Write            |\
                               PolicyTrustAdmin               |\
                               PolicyCreateAccount            |\
                               PolicyCreateSecret             |\
                               PolicyCreatePrivilege          |\
                               PolicySetDefaultQuotaLimits  |\
                               PolicySetAuditRequirements    |\
                               PolicyAuditLogAdmin           |\
                               PolicyServerAdmin ) );

	__QCMP_STATIC_CONSTANT( long, PolicyExecute        = (Standard_Rights_Execute          |\
                               PolicyViewLocalInformation    |\
                               PolicyLookupNames ) );


	__QCMP_STATIC_CONSTANT( unsigned short, Section_Query					= 0x0001 );
	__QCMP_STATIC_CONSTANT( unsigned short, Section_Map_Write				= 0x0002 );
	__QCMP_STATIC_CONSTANT( unsigned short, Section_Map_Read				= 0x0004 );
	__QCMP_STATIC_CONSTANT( unsigned short, Section_Map_Execute				= 0x0008 );
	__QCMP_STATIC_CONSTANT( unsigned short, Section_Extend_Size				= 0x0010 );
	__QCMP_STATIC_CONSTANT( unsigned short, Section_Execute_Explicit		= 0x0020 );// not included in SECTION_ALL_ACCESS
	__QCMP_STATIC_CONSTANT( unsigned long, Section_All_Access				= ( Standard_Rights_Required | Section_Query | Section_Map_Write | Section_Map_Read | Section_Map_Execute | Section_Extend_Size ) );

	__QCMP_STATIC_CONSTANT( unsigned short, Event_Modify_State			= 0x0002 );
	__QCMP_STATIC_CONSTANT( unsigned long, Event_All_Access				= ( Standard_Rights_Required | Synchronize | 0x3 ) );

	__QCMP_STATIC_CONSTANT( unsigned short, Semaphore_Modify_State       = 0x0002 );
	__QCMP_STATIC_CONSTANT( unsigned long, Semaphore_All_Access			= ( Standard_Rights_Required | Synchronize | 0x3 ) );

#if		( NTDDI_VERSION >= NTDDI_VISTA )
	__QCMP_STATIC_CONSTANT( unsigned long, Thread_All_Access				= ( Standard_Rights_Required | Synchronize | 0xFFFF ) );
#else
	__QCMP_STATIC_CONSTANT( unsigned long, Thread_All_Access				= ( Standard_Rights_Required | Synchronize | 0x3FF ) );
#endif//( NTDDI_VERSION >= NTDDI_VISTA )

	__QCMP_STATIC_CONSTANT( unsigned long, Owner_Security_Information				= (0x00000001L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Group_Security_Information				= (0x00000002L) );
	__QCMP_STATIC_CONSTANT( unsigned long, DACL_Security_Information				= (0x00000004L) );
	__QCMP_STATIC_CONSTANT( unsigned long, SACL_Security_Information				= (0x00000008L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Label_Security_Information				= (0x00000010L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Protected_DACL_Security_Information		= (0x80000000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Protected_SACL_Security_Information		= (0x40000000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Unprotected_DACL_Security_Information	= (0x20000000L) );
	__QCMP_STATIC_CONSTANT( unsigned long, Unprotected_SACL_Security_Information	= (0x10000000L) );

	__QCMP_STATIC_CONSTANT( unsigned long, WT_ExecuteDefault				= 0x00000000 );
	__QCMP_STATIC_CONSTANT( unsigned long, WT_ExecuteInIOThread			= 0x00000001 );
	__QCMP_STATIC_CONSTANT( unsigned long, WT_ExecuteInUIThread			= 0x00000002 );
	__QCMP_STATIC_CONSTANT( unsigned long, WT_ExecuteInWaitThread		= 0x00000004 );
	__QCMP_STATIC_CONSTANT( unsigned long, WT_ExecuteOnlyOnce			= 0x00000008 );
	__QCMP_STATIC_CONSTANT( unsigned long, WT_ExecuteInTimerThread		= 0x00000020 );
	__QCMP_STATIC_CONSTANT( unsigned long, WT_ExecuteLongFunction		= 0x00000010 );
	__QCMP_STATIC_CONSTANT( unsigned long, WT_ExecuteInPersistentIOThread= 0x00000040 );
	__QCMP_STATIC_CONSTANT( unsigned long, WT_ExecuteInPersistentThread	= 0x00000080 );
	__QCMP_STATIC_CONSTANT( unsigned long, WT_Transfer_Impersonation		= 0x00000100 );

	__QCMP_STATIC_CONSTANT( unsigned long, Create_Waitable_Timer_Manual_Reset   = 0x00000001 );

	// These flags define the upper byte of the critical section SpinCount field
	__QCMP_STATIC_CONSTANT( unsigned long, RTL_Critical_Section_Flag_No_Debug_Info         = 0x01000000 );
	__QCMP_STATIC_CONSTANT( unsigned long, RTL_Critical_Section_Flag_Dynamic_Spin		  = 0x02000000 );
	__QCMP_STATIC_CONSTANT( unsigned long, RTL_Critical_Section_Flag_Static_Init           = 0x04000000 );
	__QCMP_STATIC_CONSTANT( unsigned long, RTL_Critical_Section_All_Flag_Bits              = 0xFF000000 );
	__QCMP_STATIC_CONSTANT( unsigned long, RTL_Critical_Section_Flag_Reserved              = ( RTL_Critical_Section_All_Flag_Bits & ( ~( RTL_Critical_Section_Flag_No_Debug_Info | RTL_Critical_Section_Flag_Dynamic_Spin | RTL_Critical_Section_Flag_Static_Init ) ) ) );

	// These flags define possible values stored in the Flags field of a critsec debuginfo.
	__QCMP_STATIC_CONSTANT( unsigned long, RTL_Critical_Section_Debug_Flag_Static_Init = 0x00000001 );

//#if (_WIN32_WINNT >= 0x0403)
	__QCMP_STATIC_CONSTANT( unsigned long, Critical_Section_No_Debug_Info = RTL_Critical_Section_Flag_No_Debug_Info );
//#endif

	// Run once flags
	__QCMP_STATIC_CONSTANT( unsigned long, RTL_Run_Once_Check_Only      = 0x00000001UL );
	__QCMP_STATIC_CONSTANT( unsigned long, RTL_Run_Once_Async           = 0x00000002UL );
	__QCMP_STATIC_CONSTANT( unsigned long, RTL_Run_Once_Init_Failed     = 0x00000004UL );
	// Run once flags
	__QCMP_STATIC_CONSTANT( unsigned long, Init_Once_Check_Only        = RTL_Run_Once_Check_Only );
	__QCMP_STATIC_CONSTANT( unsigned long, Init_Once_Async             = RTL_Run_Once_Async );
	__QCMP_STATIC_CONSTANT( unsigned long, Init_Once_Init_Failed       = RTL_Run_Once_Init_Failed );


	__QCMP_STATIC_CONSTANT( unsigned long, Debug_Process                     = 0x00000001 );
	__QCMP_STATIC_CONSTANT( unsigned long, Debug_Only_This_Process           = 0x00000002 );
	__QCMP_STATIC_CONSTANT( unsigned long, Create_Suspended                  = 0x00000004 );
	__QCMP_STATIC_CONSTANT( unsigned long, Detached_Process                  = 0x00000008 );

	__QCMP_STATIC_CONSTANT( unsigned long, Page_NoAccess						= 0x01     );
	__QCMP_STATIC_CONSTANT( unsigned long, Page_ReadOnly						= 0x02     );
	__QCMP_STATIC_CONSTANT( unsigned long, Page_ReadWrite					= 0x04     );
	__QCMP_STATIC_CONSTANT( unsigned long, Page_WriteCopy					= 0x08     );
	__QCMP_STATIC_CONSTANT( unsigned long, Page_Execute						= 0x10     );
	__QCMP_STATIC_CONSTANT( unsigned long, Page_Execute_Read					= 0x20     );
	__QCMP_STATIC_CONSTANT( unsigned long, Page_Execute_ReadWrite			= 0x40     );
	__QCMP_STATIC_CONSTANT( unsigned long, Page_Execute_WriteCopy			= 0x80     );
	__QCMP_STATIC_CONSTANT( unsigned long, Page_Guard						= 0x100     );
	__QCMP_STATIC_CONSTANT( unsigned long, Page_NoCache						= 0x200     );
	__QCMP_STATIC_CONSTANT( unsigned long, Page_WriteCombine					= 0x400     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Commit						= 0x1000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Reserve						= 0x2000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Decommit						= 0x4000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Release						= 0x8000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Free							= 0x10000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Private						= 0x20000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Mapped						= 0x40000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Reset							= 0x80000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Top_Down						= 0x100000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Write_Watch					= 0x200000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Physical						= 0x400000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Rotate						= 0x800000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Large_Pages					= 0x20000000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_4MB_Pages						= 0x80000000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Sec_File							= 0x800000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Sec_Image							= 0x1000000    );
	__QCMP_STATIC_CONSTANT( unsigned long, Sec_Protected_Image				= 0x2000000  );
	__QCMP_STATIC_CONSTANT( unsigned long, Sec_Reserve						= 0x4000000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Sec_Commit						= 0x8000000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Sec_NoCache						= 0x10000000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Sec_WriteCombine					= 0x40000000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Sec_Large_Pages					= 0x80000000     );
	__QCMP_STATIC_CONSTANT( unsigned long, Mem_Image							= Sec_Image     );
	__QCMP_STATIC_CONSTANT( unsigned long, Write_Watch_Flag_Reset			= 0x01      );

	__QCMP_STATIC_CONSTANT( unsigned long, Sort_StringSort				= 0x00001000 );// use string sort method
	__QCMP_STATIC_CONSTANT( unsigned long, Norm_IgnoreCase				= 0x00000001 ); // ignore case
	__QCMP_STATIC_CONSTANT( unsigned long, Norm_IgnoreNonSpace			= 0x00000002 );// ignore nonspacing chars
	__QCMP_STATIC_CONSTANT( unsigned long, Norm_IgnoreSymbols	        = 0x00000004 );// ignore symbols

	__QCMP_STATIC_CONSTANT( unsigned long, LCMap_LowerCase           = 0x00000100 );  // lower case letters
	__QCMP_STATIC_CONSTANT( unsigned long, LCMap_UpperCase           = 0x00000200 );  // UPPER CASE LETTERS
#if		( WINVER >= 0x0601 )
	__QCMP_STATIC_CONSTANT( unsigned long, LCMap_TitleCase           = 0x00000300 );  // Title Case Letters
#endif//( WINVER >= 0x0601 )
	__QCMP_STATIC_CONSTANT( unsigned long, LCMap_SortKey             = 0x00000400 );  // WC sort key (normalize)
	__QCMP_STATIC_CONSTANT( unsigned long, LCMap_ByteRev             = 0x00000800 );  // byte reversal

	__QCMP_STATIC_CONSTANT( unsigned long, LCMap_Hiragana            = 0x00100000 );  // map katakana to hiragana
	__QCMP_STATIC_CONSTANT( unsigned long, LCMap_Katakana            = 0x00200000 );  // map hiragana to katakana
	__QCMP_STATIC_CONSTANT( unsigned long, LCMap_Halfwidth           = 0x00400000 );  // map double byte to single byte
	__QCMP_STATIC_CONSTANT( unsigned long, LCMap_Fullwidth           = 0x00800000 );  // map single byte to double byte

	__QCMP_STATIC_CONSTANT( unsigned long, LCMap_Linguistic_Casing   = 0x01000000 );  // use linguistic rules for casing

	__QCMP_STATIC_CONSTANT( unsigned long, MB_Precomposed            = 0x00000001 ); // use precomposed chars
	__QCMP_STATIC_CONSTANT( unsigned long, MB_Composite              = 0x00000002 ); // use composite chars
	__QCMP_STATIC_CONSTANT( unsigned long, MB_UseGlyphChars          = 0x00000004 ); // use glyph chars, not ctrl chars
	__QCMP_STATIC_CONSTANT( unsigned long, MB_Err_Invalid_Chars      = 0x00000008 ); // error for invalid chars

	__QCMP_STATIC_CONSTANT( unsigned long, Locale_IDefaultLanguage       = 0x00000009 );  // default language id, deprecated
	__QCMP_STATIC_CONSTANT( unsigned long, Locale_IDefaultCountry        = 0x0000000A );  // default country code, deprecated
	//__QCMP_STATIC_CONSTANT( unsigned long, Locale_IDefaultCodePage       = 0x0000000B );  // default oem code page (use of Unicode is recommended instead)
//	__QCMP_STATIC_CONSTANT( unsigned long, Locale_IDefaultANSICodePage   = 0x00001004 );  // default ansi code page (use of Unicode is recommended instead)
	__QCMP_STATIC_CONSTANT( unsigned long, Locale_IDefaultMacCodePage    = 0x00001011 );  // default mac code page (use of Unicode is recommended instead)

	//  Character Type Flags.

	__QCMP_STATIC_CONSTANT( unsigned long, CT_CType1                  = 0x00000001  );// ctype 1 information
	__QCMP_STATIC_CONSTANT( unsigned long, CT_CType2                  = 0x00000002  );// ctype 2 information
	__QCMP_STATIC_CONSTANT( unsigned long, CT_CType3                  = 0x00000004  );// ctype 3 information

	//  CType 1 Flag Bits.

	__QCMP_STATIC_CONSTANT( unsigned short, C1_Upper                   = 0x0001		); // upper case
	__QCMP_STATIC_CONSTANT( unsigned short, C1_Lower                   = 0x0002      ); // lower case
	__QCMP_STATIC_CONSTANT( unsigned short, C1_Digit                   = 0x0004      ); // decimal digits
	__QCMP_STATIC_CONSTANT( unsigned short, C1_Space                   = 0x0008      ); // spacing characters
	__QCMP_STATIC_CONSTANT( unsigned short, C1_Punct                   = 0x0010      ); // punctuation characters
	__QCMP_STATIC_CONSTANT( unsigned short, C1_Cntrl                   = 0x0020      ); // control characters
	__QCMP_STATIC_CONSTANT( unsigned short, C1_Blank                   = 0x0040      ); // blank characters
	__QCMP_STATIC_CONSTANT( unsigned short, C1_XDigit                  = 0x0080      ); // other digits
	__QCMP_STATIC_CONSTANT( unsigned short, C1_Alpha                   = 0x0100      ); // any linguistic character
	__QCMP_STATIC_CONSTANT( unsigned short, C1_Defined                 = 0x0200      ); // defined character

	//  CType 2 Flag Bits.

	__QCMP_STATIC_CONSTANT( unsigned short, C2_LeftToRight             = 0x0001      ); // left to right
	__QCMP_STATIC_CONSTANT( unsigned short, C2_RightToLeft             = 0x0002      ); // right to left

	__QCMP_STATIC_CONSTANT( unsigned short, C2_EuropeNumber            = 0x0003      ); // European number, digit
	__QCMP_STATIC_CONSTANT( unsigned short, C2_EuropeSeparator         = 0x0004      ); // European numeric separator
	__QCMP_STATIC_CONSTANT( unsigned short, C2_EuropeTerminator        = 0x0005      ); // European numeric terminator
	__QCMP_STATIC_CONSTANT( unsigned short, C2_ArabicNumber            = 0x0006      ); // Arabic number
	__QCMP_STATIC_CONSTANT( unsigned short, C2_CommonSeparator         = 0x0007      ); // common numeric separator

	__QCMP_STATIC_CONSTANT( unsigned short, C2_BlockSeparator          = 0x0008      ); // block separator
	__QCMP_STATIC_CONSTANT( unsigned short, C2_SegmentSeparator        = 0x0009      ); // segment separator
	__QCMP_STATIC_CONSTANT( unsigned short, C2_WhiteSpace              = 0x000A      ); // white space
	__QCMP_STATIC_CONSTANT( unsigned short, C2_OtherNeutral            = 0x000B      ); // other neutrals

	__QCMP_STATIC_CONSTANT( unsigned short, C2_NotApplicable           = 0x0000      ); // no implicit directionality

	//  CType 3 Flag Bits.

	__QCMP_STATIC_CONSTANT( unsigned short, C3_NonSpacing              = 0x0001      ); // nonspacing character
	__QCMP_STATIC_CONSTANT( unsigned short, C3_Diacritic               = 0x0002      ); // diacritic mark
	__QCMP_STATIC_CONSTANT( unsigned short, C3_VowelMark               = 0x0004      ); // vowel mark
	__QCMP_STATIC_CONSTANT( unsigned short, C3_Symbol                  = 0x0008      ); // symbols

	__QCMP_STATIC_CONSTANT( unsigned short, C3_Katakana                = 0x0010      ); // katakana character
	__QCMP_STATIC_CONSTANT( unsigned short, C3_Hiragana                = 0x0020      ); // hiragana character
	__QCMP_STATIC_CONSTANT( unsigned short, C3_HalfWidth               = 0x0040      ); // half width character
	__QCMP_STATIC_CONSTANT( unsigned short, C3_FullWidth               = 0x0080      ); // full width character
	__QCMP_STATIC_CONSTANT( unsigned short, C3_Ideograph               = 0x0100      ); // ideographic character
	__QCMP_STATIC_CONSTANT( unsigned short, C3_Kashida                 = 0x0200      ); // Arabic kashida character
	__QCMP_STATIC_CONSTANT( unsigned short, C3_Lexical                 = 0x0400      ); // lexical character
	__QCMP_STATIC_CONSTANT( unsigned short, C3_HighSurrogate           = 0x0800      ); // high surrogate code unit
	__QCMP_STATIC_CONSTANT( unsigned short, C3_LowSurrogate            = 0x1000      ); // low surrogate code unit

	__QCMP_STATIC_CONSTANT( unsigned short, C3_Alpha                   = 0x8000      ); // any linguistic char (C1_ALPHA)

	__QCMP_STATIC_CONSTANT( unsigned short, C3_notApplicable           = 0x0000      ); // ctype 3 is not applicable


	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Neutral                      = 0x00	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Invariant                    = 0x7f	);

	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Afrikaans                    = 0x36	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Albanian                     = 0x1c	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Alsatian                     = 0x84	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Amharic                      = 0x5e	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Arabic                       = 0x01	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Armenian                     = 0x2b	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Assamese                     = 0x4d	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Azeri                        = 0x2c	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Bashkir                      = 0x6d	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Basque                       = 0x2d	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Belarusian                   = 0x23	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Bengali                      = 0x45	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Breton                       = 0x7e	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Bosnian                      = 0x1a	);   // Use with Sublang_BOSNIAN_* Sublanguage IDs
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Bosnian_Neutral				= 0x781a	);   // Use with the ConvertDefaultLocale function
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Bulgarian                    = 0x02	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Catalan                      = 0x03	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Chinese                      = 0x04	);   // Use with Sublang_CHINESE_* Sublanguage IDs
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Chinese_Simplified           = 0x04	);   // Use with the ConvertDefaultLocale function
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Chinese_Traditional			= 0x7c04	);   // Use with the ConvertDefaultLocale function
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Corsican                     = 0x83	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Croatian                     = 0x1a	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Czech                        = 0x05	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Danish                       = 0x06	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Dari                         = 0x8c	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Divehi                       = 0x65	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Dutch                        = 0x13	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_English                      = 0x09	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Estonian                     = 0x25	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Faeroese                     = 0x38	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Farsi                        = 0x29	);   // Deprecated: use LANG_PERSIAN instead
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Filipino                     = 0x64	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Finnish                      = 0x0b	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_French                       = 0x0c	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_FRISIAN                      = 0x62	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Galician                     = 0x56	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Georgian                     = 0x37	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_German                       = 0x07	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Greek                        = 0x08	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Greenlandic                  = 0x6f	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Gujurati                     = 0x47	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Hausa                        = 0x68	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Hebrew                       = 0x0d	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Hindi                        = 0x39	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Hungarian                    = 0x0e	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Icelandic                    = 0x0f	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Igbo                         = 0x70	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Indonesian                   = 0x21	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Inuktitut                    = 0x5d	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Irish                        = 0x3c	);   // Use with the Sublang_IRISH_IRELAND Sublanguage ID
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Italian                      = 0x10	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Japanese                     = 0x11	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Kannada                      = 0x4b	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Kashmiri                     = 0x60	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Kazak                        = 0x3f	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Khmer                        = 0x53	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Kiche                        = 0x86	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Kinyarwanda                  = 0x87	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Konkani                      = 0x57	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Korean                       = 0x12	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Kyrgyz                       = 0x40	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Lao                          = 0x54	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Latvian                      = 0x26	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Lithuanian                   = 0x27	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Lower_Sorbian                = 0x2e	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Luxembourgish                = 0x6e	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Macedonian                   = 0x2f	);   // the Former Yugoslav Republic of Macedonia
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Malay                        = 0x3e	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Malayalam                    = 0x4c	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Maltese                      = 0x3a	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Manipuri                     = 0x58	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Maori                        = 0x81	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Mapudungun                   = 0x7a	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Marathi                      = 0x4e	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Mohawk                       = 0x7c	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Mongolian                    = 0x50	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Nepali                       = 0x61	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Norwegian                    = 0x14	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Occitan                      = 0x82	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Oriya                        = 0x48	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Pashto                       = 0x63	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Persian                      = 0x29	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Polish                       = 0x15	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Portuguese                   = 0x16	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Punjabi                      = 0x46	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Quechua                      = 0x6b	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Romanian                     = 0x18	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Romansh                      = 0x17	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Russian                      = 0x19	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Sami                         = 0x3b	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Sanskrit                     = 0x4f	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Scottish_Gaelic              = 0x91	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Serbian                      = 0x1a	);   // Use with the Sublang_SERBIAN_* Sublanguage IDs
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Serbian_Neutral				= 0x7c1a	);   // Use with the ConvertDefaultLocale function
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Sindhi                       = 0x59	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Sinhalese                    = 0x5b	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Slovak                       = 0x1b	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Slovenian                    = 0x24	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Sotho                        = 0x6c	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Spanish                      = 0x0a	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Swahili                      = 0x41	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Swedish                      = 0x1d	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Syriac                       = 0x5a	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Tajik                        = 0x28	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Tamazight                    = 0x5f	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Tamil                        = 0x49	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Tatar                        = 0x44	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Telugu                       = 0x4a	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Thai                         = 0x1e	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Tibetan                      = 0x51	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Tigrigna                     = 0x73	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Tswana                       = 0x32	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Turkish                      = 0x1f	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Turkmen                      = 0x42	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Uighur                       = 0x80	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Ukranian                     = 0x22	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Upper_Sorbian                = 0x2e	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Urdu                         = 0x20	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Uzbek                        = 0x43	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Vietnamese                   = 0x2a	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Welsh                        = 0x52	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Wolof                        = 0x88	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Xhosa                        = 0x34	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Yakut                        = 0x85	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Yi                           = 0x78	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Yoruba                       = 0x6a	);
	__QCMP_STATIC_CONSTANT( unsigned short, Lang_Zulu                         = 0x35	);

	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_Neutral                              = 0x00 );    // language neutral
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_Default                              = 0x01 );    // user default
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_Sys_Default                          = 0x02 );    // system default
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_Custom_Default                       = 0x03 );    // default custom language/locale
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_Custom_Unspecified                   = 0x04 );    // custom language/locale
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_UI_Custom_Default                    = 0x05 );   // Default custom MUI language/locale

	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_AFRIKAANS_SOUTH_AFRICA              = 0x01 );   // Afrikaans (South Africa) 0x0436 af-ZA
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ALBANIAN_ALBANIA                    = 0x01 );   // Albanian (Albania) 0x041c sq-AL
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ALSATIAN_FRANCE                     = 0x01 );   // Alsatian (France) 0x0484
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_AMHARIC_ETHIOPIA                    = 0x01 );   // Amharic (Ethiopia) 0x045e
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_SAUDI_ARABIA                 = 0x01 );   // Arabic (Saudi Arabia)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_IRAQ                         = 0x02 );   // Arabic (Iraq)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_EGYPT                        = 0x03 );   // Arabic (Egypt)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_LIBYA                        = 0x04 );   // Arabic (Libya)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_ALGERIA                      = 0x05 );   // Arabic (Algeria)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_MOROCCO                      = 0x06 );   // Arabic (Morocco)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_TUNISIA                      = 0x07 );   // Arabic (Tunisia)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_OMAN                         = 0x08 );   // Arabic (Oman)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_YEMEN                        = 0x09 );   // Arabic (Yemen)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_SYRIA                        = 0x0a );   // Arabic (Syria)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_JORDAN                       = 0x0b );   // Arabic (Jordan)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_LEBANON                      = 0x0c );   // Arabic (Lebanon)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_KUWAIT                       = 0x0d );   // Arabic (Kuwait)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_UAE                          = 0x0e );   // Arabic (U.A.E)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_BAHRAIN                      = 0x0f );   // Arabic (Bahrain)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARABIC_QATAR                        = 0x10 );   // Arabic (Qatar)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ARMENIAN_ARMENIA                    = 0x01 );   // Armenian (Armenia) 0x042b hy-AM
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ASSAMESE_INDIA                      = 0x01 );   // Assamese (India) 0x044d
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_AZERI_LATIN                         = 0x01 );   // Azeri (Latin)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_AZERI_CYRILLIC                      = 0x02 );   // Azeri (Cyrillic)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_BASHKIR_RUSSIA                      = 0x01 );   // Bashkir (Russia) 0x046d ba-RU
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_BASQUE_BASQUE                       = 0x01 );   // Basque (Basque) 0x042d eu-ES
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_BELARUSIAN_BELARUS                  = 0x01 );   // Belarusian (Belarus) 0x0423 be-BY
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_BENGALI_INDIA                       = 0x01 );   // Bengali (India)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_BENGALI_BANGLADESH                  = 0x02 );   // Bengali (Bangladesh)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN    = 0x05 );   // Bosnian (Bosnia and Herzegovina - Latin) 0x141a bs-BA-Latn
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 0x08 );   // Bosnian (Bosnia and Herzegovina - Cyrillic) 0x201a bs-BA-Cyrl
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_BRETON_FRANCE                       = 0x01 );   // Breton (France) 0x047e
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_BULGARIAN_BULGARIA                  = 0x01 );   // Bulgarian (Bulgaria) 0x0402
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_CATALAN_CATALAN                     = 0x01 );   // Catalan (Catalan) 0x0403
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_CHINESE_TRADITIONAL                 = 0x01 );   // Chinese (Taiwan) 0x0404 zh-TW
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_CHINESE_SIMPLIFIED                  = 0x02 );   // Chinese (PR China) 0x0804 zh-CN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_CHINESE_HONGKONG                    = 0x03 );   // Chinese (Hong Kong S.A.R., P.R.C.) 0x0c04 zh-HK
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_CHINESE_SINGAPORE                   = 0x04 );   // Chinese (Singapore) 0x1004 zh-SG
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_CHINESE_MACAU                       = 0x05 );   // Chinese (Macau S.A.R.) 0x1404 zh-MO
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_CORSICAN_FRANCE                     = 0x01 );   // Corsican (France) 0x0483
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_CZECH_CZECH_REPUBLIC                = 0x01 );   // Czech (Czech Republic) 0x0405
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_CROATIAN_CROATIA                    = 0x01 );   // Croatian (Croatia)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_CROATIAN_BOSNIA_HERZEGOVINA_LATIN   = 0x04 );   // Croatian (Bosnia and Herzegovina - Latin) 0x101a hr-BA
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_DANISH_DENMARK                      = 0x01 );   // Danish (Denmark) 0x0406
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_DARI_AFGHANISTAN                    = 0x01 );   // Dari (Afghanistan)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_DIVEHI_MALDIVES                     = 0x01 );   // Divehi (Maldives) 0x0465 div-MV
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_DUTCH                               = 0x01 );   // Dutch
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_DUTCH_BELGIAN                       = 0x02 );   // Dutch (Belgian)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_US                          = 0x01 );   // English (USA)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_UK                          = 0x02 );   // English (UK)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_AUS                         = 0x03 );   // English (Australian)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_CAN                         = 0x04 );   // English (Canadian)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_NZ                          = 0x05 );   // English (New Zealand)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_EIRE                        = 0x06 );   // English (Irish)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_SOUTH_AFRICA                = 0x07 );   // English (South Africa)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_JAMAICA                     = 0x08 );   // English (Jamaica)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_CARIBBEAN                   = 0x09 );   // English (Caribbean)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_BELIZE                      = 0x0a );   // English (Belize)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_TRINIDAD                    = 0x0b );   // English (Trinidad)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_ZIMBABWE                    = 0x0c );   // English (Zimbabwe)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_PHILIPPINES                 = 0x0d );   // English (Philippines)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_INDIA                       = 0x10 );   // English (India)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_MALAYSIA                    = 0x11 );   // English (Malaysia)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ENGLISH_SINGAPORE                   = 0x12 );   // English (Singapore)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ESTONIAN_ESTONIA                    = 0x01 );   // Estonian (Estonia) 0x0425 et-EE
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_FAEROESE_FAROE_ISLANDS              = 0x01 );   // Faroese (Faroe Islands) 0x0438 fo-FO
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_FILIPINO_PHILIPPINES                = 0x01 );   // Filipino (Philippines) 0x0464 fil-PH
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_FINNISH_FINLAND                     = 0x01 );   // Finnish (Finland) 0x040b
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_FRENCH                              = 0x01 );   // French
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_FRENCH_BELGIAN                      = 0x02 );   // French (Belgian)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_FRENCH_CANADIAN                     = 0x03 );   // French (Canadian)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_FRENCH_SWISS                        = 0x04 );   // French (Swiss)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_FRENCH_LUXEMBOURG                   = 0x05 );   // French (Luxembourg)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_FRENCH_MONACO                       = 0x06 );   // French (Monaco)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_FRISIAN_NETHERLANDS                 = 0x01 );   // Frisian (Netherlands) 0x0462 fy-NL
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_GALICIAN_GALICIAN                   = 0x01 );   // Galician (Galician) 0x0456 gl-ES
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_GEORGIAN_GEORGIA                    = 0x01 );   // Georgian (Georgia) 0x0437 ka-GE
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_GERMAN                              = 0x01 );   // German
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_GERMAN_SWISS                        = 0x02 );   // German (Swiss)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_GERMAN_AUSTRIAN                     = 0x03 );   // German (Austrian)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_GERMAN_LUXEMBOURG                   = 0x04 );   // German (Luxembourg)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_GERMAN_LIECHTENSTEIN                = 0x05 );   // German (Liechtenstein)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_GREEK_GREECE                        = 0x01 );   // Greek (Greece)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_GREENLANDIC_GREENLAND               = 0x01 );   // Greenlandic (Greenland) 0x046f kl-GL
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_GUJARATI_INDIA                      = 0x01 );   // Gujarati (India (Gujarati Script)) 0x0447 gu-IN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_HAUSA_NIGERIA_LATIN                 = 0x01 );   // Hausa (Latin, Nigeria) 0x0468 ha-NG-Latn
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_HEBREW_ISRAEL                       = 0x01 );   // Hebrew (Israel) 0x040d
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_HINDI_INDIA                         = 0x01 );   // Hindi (India) 0x0439 hi-IN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_HUNGARIAN_HUNGARY                   = 0x01 );   // Hungarian (Hungary) 0x040e
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ICELANDIC_ICELAND                   = 0x01 );   // Icelandic (Iceland) 0x040f
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_IGBO_NIGERIA                        = 0x01 );   // Igbo (Nigeria) 0x0470 ig-NG
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_INDONESIAN_INDONESIA                = 0x01 );   // Indonesian (Indonesia) 0x0421 id-ID
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_INUKTITUT_CANADA                    = 0x01 );   // Inuktitut (Syllabics) (Canada) 0x045d iu-CA-Cans
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_INUKTITUT_CANADA_LATIN              = 0x02 );   // Inuktitut (Canada - Latin)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_IRISH_IRELAND                       = 0x02 );   // Irish (Ireland)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ITALIAN                             = 0x01 );   // Italian
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ITALIAN_SWISS                       = 0x02 );   // Italian (Swiss)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_JAPANESE_JAPAN                      = 0x01 );   // Japanese (Japan) 0x0411
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_KANNADA_INDIA                       = 0x01 );   // Kannada (India (Kannada Script)) 0x044b kn-IN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_KASHMIRI_SASIA                      = 0x02 );   // Kashmiri (South Asia)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_KASHMIRI_INDIA                      = 0x02 );   // For app compatibility only
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_KAZAK_KAZAKHSTAN                    = 0x01 );   // Kazakh (Kazakhstan) 0x043f kk-KZ
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_KHMER_CAMBODIA                      = 0x01 );   // Khmer (Cambodia) 0x0453 kh-KH
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_KICHE_GUATEMALA                     = 0x01 );   // K'iche (Guatemala)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_KINYARWANDA_RWANDA                  = 0x01 );   // Kinyarwanda (Rwanda) 0x0487 rw-RW
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_KONKANI_INDIA                       = 0x01 );   // Konkani (India) 0x0457 kok-IN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_KOREAN                              = 0x01 );   // Korean (Extended Wansung)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_KYRGYZ_KYRGYZSTAN                   = 0x01 );   // Kyrgyz (Kyrgyzstan) 0x0440 ky-KG
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_LAO_LAO                             = 0x01 );   // Lao (Lao PDR) 0x0454 lo-LA
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_LATVIAN_LATVIA                      = 0x01 );   // Latvian (Latvia) 0x0426 lv-LV
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_LITHUANIAN                          = 0x01 );   // Lithuanian
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_LOWER_SORBIAN_GERMANY               = 0x02 );   // Lower Sorbian (Germany) 0x082e wee-DE
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_LUXEMBOURGISH_LUXEMBOURG            = 0x01 );   // Luxembourgish (Luxembourg) 0x046e lb-LU
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MACEDONIAN_MACEDONIA                = 0x01 );   // Macedonian (Macedonia (FYROM)) 0x042f mk-MK
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MALAY_MALAYSIA                      = 0x01 );   // Malay (Malaysia)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MALAY_BRUNEI_DARUSSALAM             = 0x02 );   // Malay (Brunei Darussalam)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MALAYALAM_INDIA                     = 0x01 );   // Malayalam (India (Malayalam Script) ) 0x044c ml-IN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MALTESE_MALTA                       = 0x01 );   // Maltese (Malta) 0x043a mt-MT
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MAORI_NEW_ZEALAND                   = 0x01 );   // Maori (New Zealand) 0x0481 mi-NZ
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MAPUDUNGUN_CHILE                    = 0x01 );   // Mapudungun (Chile) 0x047a arn-CL
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MARATHI_INDIA                       = 0x01 );   // Marathi (India) 0x044e mr-IN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MOHAWK_MOHAWK                       = 0x01 );   // Mohawk (Mohawk) 0x047c moh-CA
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MONGOLIAN_CYRILLIC_MONGOLIA         = 0x01 );   // Mongolian (Cyrillic, Mongolia)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_MONGOLIAN_PRC                       = 0x02 );   // Mongolian (PRC)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_NEPALI_INDIA                        = 0x02 );   // Nepali (India)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_NEPALI_NEPAL                        = 0x01 );   // Nepali (Nepal) 0x0461 ne-NP
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_NORWEGIAN_BOKMAL                    = 0x01 );   // Norwegian (Bokmal)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_NORWEGIAN_NYNORSK                   = 0x02 );   // Norwegian (Nynorsk)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_OCCITAN_FRANCE                      = 0x01 );   // Occitan (France) 0x0482 oc-FR
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ORIYA_INDIA                         = 0x01 );   // Oriya (India (Oriya Script)) 0x0448 or-IN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_PASHTO_AFGHANISTAN                  = 0x01 );   // Pashto (Afghanistan)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_PERSIAN_IRAN                        = 0x01 );   // Persian (Iran) 0x0429 fa-IR
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_POLISH_POLAND                       = 0x01 );   // Polish (Poland) 0x0415
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_PORTUGUESE                          = 0x02 );   // Portuguese
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_PORTUGUESE_BRAZILIAN                = 0x01 );   // Portuguese (Brazilian)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_PUNJABI_INDIA                       = 0x01 );   // Punjabi (India (Gurmukhi Script)) 0x0446 pa-IN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_QUECHUA_BOLIVIA                     = 0x01 );   // Quechua (Bolivia)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_QUECHUA_ECUADOR                     = 0x02 );   // Quechua (Ecuador)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_QUECHUA_PERU                        = 0x03 );   // Quechua (Peru)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ROMANIAN_ROMANIA                    = 0x01 );   // Romanian (Romania) 0x0418
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ROMANSH_SWITZERLAND                 = 0x01 );   // Romansh (Switzerland) 0x0417 rm-CH
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_RUSSIAN_RUSSIA                      = 0x01 );   // Russian (Russia) 0x0419
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SAMI_NORTHERN_NORWAY                = 0x01 );   // Northern Sami (Norway)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SAMI_NORTHERN_SWEDEN                = 0x02 );   // Northern Sami (Sweden)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SAMI_NORTHERN_FINLAND               = 0x03 );   // Northern Sami (Finland)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SAMI_LULE_NORWAY                    = 0x04 );   // Lule Sami (Norway)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SAMI_LULE_SWEDEN                    = 0x05 );   // Lule Sami (Sweden)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SAMI_SOUTHERN_NORWAY                = 0x06 );   // Southern Sami (Norway)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SAMI_SOUTHERN_SWEDEN                = 0x07 );   // Southern Sami (Sweden)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SAMI_SKOLT_FINLAND                  = 0x08 );   // Skolt Sami (Finland)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SAMI_INARI_FINLAND                  = 0x09 );   // Inari Sami (Finland)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SANSKRIT_INDIA                      = 0x01 );   // Sanskrit (India) 0x044f sa-IN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SCOTTISH_GAELIC                     = 0x01 );   // Scottish Gaelic (United Kingdom) 0x0491 gd-GB
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SERBIAN_BOSNIA_HERZEGOVINA_LATIN    = 0x06 );   // Serbian (Bosnia and Herzegovina - Latin)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 0x07 );   // Serbian (Bosnia and Herzegovina - Cyrillic)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SERBIAN_MONTENEGRO_LATIN            = 0x0b );   // Serbian (Montenegro - Latn)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SERBIAN_MONTENEGRO_CYRILLIC         = 0x0c );   // Serbian (Montenegro - Cyrillic)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SERBIAN_SERBIA_LATIN                = 0x09 );   // Serbian (Serbia - Latin)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SERBIAN_SERBIA_CYRILLIC             = 0x0a );   // Serbian (Serbia - Cyrillic)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SERBIAN_CROATIA                     = 0x01 );   // Croatian (Croatia) 0x041a hr-HR
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SERBIAN_LATIN                       = 0x02 );   // Serbian (Latin)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SERBIAN_CYRILLIC                    = 0x03 );   // Serbian (Cyrillic)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SINDHI_INDIA                        = 0x01 );   // Sindhi (India) reserved 0x0459
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SINDHI_PAKISTAN                     = 0x02 );   // Sindhi (Pakistan) reserved 0x0859
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SINDHI_AFGHANISTAN                  = 0x02 );   // For app compatibility only
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SINHALESE_SRI_LANKA                 = 0x01 );   // Sinhalese (Sri Lanka)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SOTHO_NORTHERN_SOUTH_AFRICA         = 0x01 );   // Northern Sotho (South Africa)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SLOVAK_SLOVAKIA                     = 0x01 );   // Slovak (Slovakia) 0x041b sk-SK
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SLOVENIAN_SLOVENIA                  = 0x01 );   // Slovenian (Slovenia) 0x0424 sl-SI
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH                             = 0x01 );   // Spanish (Castilian)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_MEXICAN                     = 0x02 );   // Spanish (Mexican)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_MODERN                      = 0x03 );   // Spanish (Modern)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_GUATEMALA                   = 0x04 );   // Spanish (Guatemala)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_COSTA_RICA                  = 0x05 );   // Spanish (Costa Rica)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_PANAMA                      = 0x06 );   // Spanish (Panama)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_DOMINICAN_REPUBLIC          = 0x07 );   // Spanish (Dominican Republic)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_VENEZUELA                   = 0x08 );   // Spanish (Venezuela)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_COLOMBIA                    = 0x09 );   // Spanish (Colombia)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_PERU                        = 0x0a );   // Spanish (Peru)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_ARGENTINA                   = 0x0b );   // Spanish (Argentina)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_ECUADOR                     = 0x0c );   // Spanish (Ecuador)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_CHILE                       = 0x0d );   // Spanish (Chile)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_URUGUAY                     = 0x0e );   // Spanish (Uruguay)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_PARAGUAY                    = 0x0f );   // Spanish (Paraguay)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_BOLIVIA                     = 0x10 );   // Spanish (Bolivia)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_EL_SALVADOR                 = 0x11 );   // Spanish (El Salvador)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_HONDURAS                    = 0x12 );   // Spanish (Honduras)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_NICARAGUA                   = 0x13 );   // Spanish (Nicaragua)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_PUERTO_RICO                 = 0x14 );   // Spanish (Puerto Rico)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SPANISH_US                          = 0x15 );   // Spanish (United States)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SWAHILI_KENYA                       = 0x01 );   // Swahili (Kenya) 0x0441 sw-KE
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SWEDISH                             = 0x01 );   // Swedish
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SWEDISH_FINLAND                     = 0x02 );   // Swedish (Finland)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_SYRIAC_SYRIA                        = 0x01 );   // Syriac (Syria) 0x045a syr-SY
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_TAJIK_TAJIKISTAN                    = 0x01 );   // Tajik (Tajikistan) 0x0428 tg-TJ-Cyrl
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_TAMAZIGHT_ALGERIA_LATIN             = 0x02 );   // Tamazight (Latin, Algeria) 0x085f tmz-DZ-Latn
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_TAMIL_INDIA                         = 0x01 );   // Tamil (India)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_TATAR_RUSSIA                        = 0x01 );   // Tatar (Russia) 0x0444 tt-RU
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_TELUGU_INDIA                        = 0x01 );   // Telugu (India (Telugu Script)) 0x044a te-IN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_THAI_THAILAND                       = 0x01 );   // Thai (Thailand) 0x041e th-TH
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_TIBETAN_PRC                         = 0x01 );   // Tibetan (PRC)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_TIGRIGNA_ERITREA                    = 0x02 );   // Tigrigna (Eritrea)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_TSWANA_SOUTH_AFRICA                 = 0x01 );   // Setswana / Tswana (South Africa) 0x0432 tn-ZA
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_TURKISH_TURKEY                      = 0x01 );   // Turkish (Turkey) 0x041f tr-TR
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_TURKMEN_TURKMENISTAN                = 0x01 );   // Turkmen (Turkmenistan) 0x0442 tk-TM
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_UIGHUR_PRC                          = 0x01 );   // Uighur (PRC) 0x0480 ug-CN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_UKRAINIAN_UKRAINE                   = 0x01 );   // Ukrainian (Ukraine) 0x0422 uk-UA
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_UPPER_SORBIAN_GERMANY               = 0x01 );   // Upper Sorbian (Germany) 0x042e wen-DE
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_URDU_PAKISTAN                       = 0x01 );   // Urdu (Pakistan)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_URDU_INDIA                          = 0x02 );   // Urdu (India)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_UZBEK_LATIN                         = 0x01 );   // Uzbek (Latin)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_UZBEK_CYRILLIC                      = 0x02 );   // Uzbek (Cyrillic)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_VIETNAMESE_VIETNAM                  = 0x01 );   // Vietnamese (Vietnam) 0x042a vi-VN
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_WELSH_UNITED_KINGDOM                = 0x01 );   // Welsh (United Kingdom) 0x0452 cy-GB
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_WOLOF_SENEGAL                       = 0x01 );   // Wolof (Senegal)
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_XHOSA_SOUTH_AFRICA                  = 0x01 );   // isiXhosa / Xhosa (South Africa) 0x0434 xh-ZA
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_YAKUT_RUSSIA                        = 0x01 );   // Yakut (Russia) 0x0485 sah-RU
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_YI_PRC                              = 0x01 );   // Yi (PRC)) 0x0478
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_YORUBA_NIGERIA                      = 0x01 );   // Yoruba (Nigeria) 046a yo-NG
	__QCMP_STATIC_CONSTANT( unsigned short, Sublang_ZULU_SOUTH_AFRICA                   = 0x01 );   // isiZulu / Zulu (South Africa) 0x0435 zu-ZA

//Queue status flags for GetQueueStatus() and MsgWaitForMultipleObjects()

	__QCMP_STATIC_CONSTANT( unsigned short, QSKEY              = 0x0001 );
	__QCMP_STATIC_CONSTANT( unsigned short, QSMOUSEMOVE        = 0x0002 );
	__QCMP_STATIC_CONSTANT( unsigned short, QSMOUSEBUTTON      = 0x0004 );
	__QCMP_STATIC_CONSTANT( unsigned short, QSPOSTMESSAGE      = 0x0008 );
	__QCMP_STATIC_CONSTANT( unsigned short, QSTIMER            = 0x0010 );
	__QCMP_STATIC_CONSTANT( unsigned short, QSPAINT            = 0x0020 );
	__QCMP_STATIC_CONSTANT( unsigned short, QSSENDMESSAGE      = 0x0040 );
	__QCMP_STATIC_CONSTANT( unsigned short, QSHOTKEY           = 0x0080 );
	__QCMP_STATIC_CONSTANT( unsigned short, QSALLPOSTMESSAGE   = 0x0100 );
#if(_WIN32_WINNT >= 0x0501)
	__QCMP_STATIC_CONSTANT( unsigned short, QSRAWINPUT         = 0x0400 );
#endif /* _WIN32_WINNT >= 0x0501 */

	__QCMP_STATIC_CONSTANT( unsigned short, QSMOUSE            = (QSMOUSEMOVE     | \
                            QSMOUSEBUTTON) );

#if (_WIN32_WINNT >= 0x0501)
	__QCMP_STATIC_CONSTANT( unsigned short, QSINPUT            = (QSMOUSE         | \
                            QSKEY           | \
                            QSRAWINPUT) );
#else
	__QCMP_STATIC_CONSTANT( unsigned short, QSINPUT            = (QSMOUSE         | \
                            QSKEY) );
#endif // (_WIN32_WINNT >= 0x0501)

	__QCMP_STATIC_CONSTANT( unsigned short, QSALLEVENTS        = (QSINPUT         | \
                            QSPOSTMESSAGE   | \
                            QSTIMER         | \
                            QSPAINT         | \
                            QSHOTKEY) );

	__QCMP_STATIC_CONSTANT( unsigned short, QSALLINPUT        = ( QSINPUT         | \
                            QSPOSTMESSAGE   | \
                            QSTIMER         | \
                            QSPAINT         | \
                            QSHOTKEY        | \
                            QSSENDMESSAGE) );

	__QCMP_STATIC_CONSTANT( unsigned long, StartF_UseShowWindow    = 0x00000001 );
	__QCMP_STATIC_CONSTANT( unsigned long, StartF_UseSize          = 0x00000002 );
	__QCMP_STATIC_CONSTANT( unsigned long, StartF_UsePosition      = 0x00000004 );
	__QCMP_STATIC_CONSTANT( unsigned long, StartF_UseCountChars    = 0x00000008 );
	__QCMP_STATIC_CONSTANT( unsigned long, StartF_UseFillAttribute = 0x00000010 );
	__QCMP_STATIC_CONSTANT( unsigned long, StartF_RunFullScreen    = 0x00000020 );  // ignored for non-x86 platforms
	__QCMP_STATIC_CONSTANT( unsigned long, StartF_ForceOnFeedback  = 0x00000040 );
	__QCMP_STATIC_CONSTANT( unsigned long, StartF_ForceOffFeedback = 0x00000080 );
	__QCMP_STATIC_CONSTANT( unsigned long, StartF_UseStdHandles    = 0x00000100 );

	__QCMP_STATIC_CONSTANT( unsigned short, wvrAlignTop			= 0x0010 );
	__QCMP_STATIC_CONSTANT( unsigned short, wvrAlignLeft			= 0x0020 );
	__QCMP_STATIC_CONSTANT( unsigned short, wvrAlignBottom		= 0x0040 );
	__QCMP_STATIC_CONSTANT( unsigned short, wvrAlignRight		= 0x0080 );
	__QCMP_STATIC_CONSTANT( unsigned short, wvrHRedraw			= 0x0100 );
	__QCMP_STATIC_CONSTANT( unsigned short, wvrVRedraw			= 0x0200 );
	__QCMP_STATIC_CONSTANT( unsigned short, wvrRedraw			= (wvrHRedraw | wvrVRedraw) );
	__QCMP_STATIC_CONSTANT( unsigned short, wvrValidRects		= 0x0400 );

	__QCMP_STATIC_CONSTANT( unsigned long, lwaColorKey			= 0x00000001 );
	__QCMP_STATIC_CONSTANT( unsigned long, lwaAlpha				= 0x00000002 );
	__QCMP_STATIC_CONSTANT( unsigned long, ulwColorKey			= 0x00000001 );
	__QCMP_STATIC_CONSTANT( unsigned long, ulwAlpha				= 0x00000002 );
	__QCMP_STATIC_CONSTANT( unsigned long, ulwOpaque				= 0x00000004 );
	__QCMP_STATIC_CONSTANT( unsigned long, ulwExNoResize			= 0x00000008 );

	__QCMP_STATIC_CONSTANT( int, ColourScrolBar					= 0 );
	__QCMP_STATIC_CONSTANT( int, ColourBackground				= 1 );
	__QCMP_STATIC_CONSTANT( int, ColourActiveCaption				= 2 );
	__QCMP_STATIC_CONSTANT( int, ColourInactiveCaption			= 3 );
	__QCMP_STATIC_CONSTANT( int, ColourMenu						= 4 );
	__QCMP_STATIC_CONSTANT( int, ColourWindow					= 5 );
	__QCMP_STATIC_CONSTANT( int, ColourWindowFrame				= 6 );
	__QCMP_STATIC_CONSTANT( int, ColourMenuText					= 7 );
	__QCMP_STATIC_CONSTANT( int, ColourWindowText				= 8 );
	__QCMP_STATIC_CONSTANT( int, ColourCaptionText				= 9 );
	__QCMP_STATIC_CONSTANT( int, ColourActiveBorder				= 10 );
	__QCMP_STATIC_CONSTANT( int, ColourInactiveBorder			= 11 );
	__QCMP_STATIC_CONSTANT( int, ColourAppWorkspace				= 12 );
	__QCMP_STATIC_CONSTANT( int, ColourHighlight					= 13 );
	__QCMP_STATIC_CONSTANT( int, ColourHighlightText				= 14 );
	__QCMP_STATIC_CONSTANT( int, ColourBtnFace					= 15 );
	__QCMP_STATIC_CONSTANT( int, ColourBtnShadow					= 16 );
	__QCMP_STATIC_CONSTANT( int, ColourGrayText					= 17 );
	__QCMP_STATIC_CONSTANT( int, ColourBtnText					= 18 );
	__QCMP_STATIC_CONSTANT( int, ColourInactiveCaptionText		= 19 );
	__QCMP_STATIC_CONSTANT( int, ColourBtnHighlight				= 20 );

#if(WINVER >= 0x0400)
	__QCMP_STATIC_CONSTANT( int, Colour3DDkShadow				= 21 );
	__QCMP_STATIC_CONSTANT( int, Colour3DLight					= 22 );
	__QCMP_STATIC_CONSTANT( int, ColourInfoText					= 23 );
	__QCMP_STATIC_CONSTANT( int, ColourInfoBk					= 24 );
#endif /* WINVER >= 0x0400 */

#if(WINVER >= 0x0500)
	__QCMP_STATIC_CONSTANT( int, ColourHotLight					= 26 );
	__QCMP_STATIC_CONSTANT( int, ColourGradientActiveCaption		= 27 );
	__QCMP_STATIC_CONSTANT( int, ColourGradientInactiveCaption	= 28 );
#if(WINVER >= 0x0501)
	__QCMP_STATIC_CONSTANT( int, ColourMenuHighlight				= 29 );
	__QCMP_STATIC_CONSTANT( int, ColourMenuBar					= 30 );
#endif /* WINVER >= 0x0501 */
#endif /* WINVER >= 0x0500 */

#if(WINVER >= 0x0400)
	__QCMP_STATIC_CONSTANT( int, ColourDesktop					= ColourBackground );
	__QCMP_STATIC_CONSTANT( int, Colour3DFace					= ColourBtnFace );
	__QCMP_STATIC_CONSTANT( int, Colour3DShadow					= ColourBtnShadow );
	__QCMP_STATIC_CONSTANT( int, Colour3DHighlight				= ColourBtnHighlight );
	__QCMP_STATIC_CONSTANT( int, Colour3DHiLight					= ColourBtnHighlight );
	__QCMP_STATIC_CONSTANT( int, ColourBtnHiLight				= ColourBtnHighlight );
#endif /* WINVER >= 0x0400 */

// Ternary raster operations
	__QCMP_STATIC_CONSTANT( unsigned long, SrcCopy				= 0x00CC0020 );// dest = source
	__QCMP_STATIC_CONSTANT( unsigned long, SrcPaint				= 0x00EE0086 );// dest = source OR dest
	__QCMP_STATIC_CONSTANT( unsigned long, SrcAnd				= 0x008800C6 );// dest = source AND dest
	__QCMP_STATIC_CONSTANT( unsigned long, SrcInvert				= 0x00660046 );// dest = source XOR dest
	__QCMP_STATIC_CONSTANT( unsigned long, SrcErase				= 0x00440328 );// dest = source AND (NOT dest )
	__QCMP_STATIC_CONSTANT( unsigned long, NotSrcCopy			= 0x00330008 );// dest = (NOT source)
	__QCMP_STATIC_CONSTANT( unsigned long, NotSrcErase			= 0x001100A6 );// dest = (NOT src) AND (NOT dest)
	__QCMP_STATIC_CONSTANT( unsigned long, MergeCopy				= 0x00C000CA );// dest = (source AND pattern)
	__QCMP_STATIC_CONSTANT( unsigned long, MergePaint			= 0x00BB0226 );// dest = (NOT source) OR dest
	__QCMP_STATIC_CONSTANT( unsigned long, PatCopy				= 0x00F00021 );// dest = pattern
	__QCMP_STATIC_CONSTANT( unsigned long, PatPaint				= 0x00FB0A09 );// dest = DPSnoo
	__QCMP_STATIC_CONSTANT( unsigned long, PatInvert				= 0x005A0049 );// dest = pattern XOR dest
	__QCMP_STATIC_CONSTANT( unsigned long, DstInvert				= 0x00550009 );// dest = (NOT dest)
	__QCMP_STATIC_CONSTANT( unsigned long, Blackness				= 0x00000042 );// dest = BLACK
	__QCMP_STATIC_CONSTANT( unsigned long, Whiteness				= 0x00FF0062 );// dest = WHITE

#define se_Interactive_Logon_Name           _TXT("SeInteractiveLogonRight")
#define se_Network_Logon_Name               _TXT("SeNetworkLogonRight")
#define se_Batch_Logon_Name                 _TXT("SeBatchLogonRight")
#define se_Service_Logon_Name               _TXT("SeServiceLogonRight")
#define se_Deny_Interactive_Logon_Name      _TXT("SeDenyInteractiveLogonRight")
#define se_Deny_Network_Logon_Name          _TXT("SeDenyNetworkLogonRight")
#define se_Deny_Batch_Logon_Name            _TXT("SeDenyBatchLogonRight")
#define se_Deny_Service_Logon_Name          _TXT("SeDenyServiceLogonRight")
#if (_WIN32_WINNT >= 0x0501)
#define se_Remote_Interactive_Logon_Name    _TXT("SeRemoteInteractiveLogonRight")
#define se_Deny_Remote_Interactive_Logon_Name _TXT("SeDenyRemoteInteractiveLogonRight")
#endif


//GetSystemMetrics() codes

	__QCMP_STATIC_CONSTANT( int, SM_CXScreen			= 0 );
	__QCMP_STATIC_CONSTANT( int, SM_CYScreen            = 1	 );
	__QCMP_STATIC_CONSTANT( int, SM_CXVScroll           = 2	 );
	__QCMP_STATIC_CONSTANT( int, SM_CYHScroll           = 3	 );
	__QCMP_STATIC_CONSTANT( int, SM_CYCaption           = 4	 );
	__QCMP_STATIC_CONSTANT( int, SM_CXBorder            = 5	 );
	__QCMP_STATIC_CONSTANT( int, SM_CYBorder            = 6	 );
	__QCMP_STATIC_CONSTANT( int, SM_CXDLGFrame          = 7	 );
	__QCMP_STATIC_CONSTANT( int, SM_CYDLGFrame          = 8	 );
	__QCMP_STATIC_CONSTANT( int, SM_CYVThumb            = 9	 );
	__QCMP_STATIC_CONSTANT( int, SM_CXHThumb            = 10 );
	__QCMP_STATIC_CONSTANT( int, SM_CXIcon              = 11 );
	__QCMP_STATIC_CONSTANT( int, SM_CYIcon              = 12 );
	__QCMP_STATIC_CONSTANT( int, SM_CXCursor            = 13 );
	__QCMP_STATIC_CONSTANT( int, SM_CYCursor            = 14 );
	__QCMP_STATIC_CONSTANT( int, SM_CYMenu              = 15 );
	__QCMP_STATIC_CONSTANT( int, SM_CXFullscreen        = 16 );
	__QCMP_STATIC_CONSTANT( int, SM_CYFullscreen        = 17 );
	__QCMP_STATIC_CONSTANT( int, SM_CYKANJIWindow       = 18 );
	__QCMP_STATIC_CONSTANT( int, SM_MousePResent        = 19 );
	__QCMP_STATIC_CONSTANT( int, SM_CYVScroll           = 20 );
	__QCMP_STATIC_CONSTANT( int, SM_CXHScroll           = 21 );
	__QCMP_STATIC_CONSTANT( int, SM_Debug               = 22 );
	__QCMP_STATIC_CONSTANT( int, SM_SwapButton          = 23 );
	__QCMP_STATIC_CONSTANT( int, SM_Reserved1           = 24 );
	__QCMP_STATIC_CONSTANT( int, SM_Reserved2           = 25 );
	__QCMP_STATIC_CONSTANT( int, SM_Reserved3           = 26 );
	__QCMP_STATIC_CONSTANT( int, SM_Reserved4           = 27 );
	__QCMP_STATIC_CONSTANT( int, SM_CXMin               = 28 );
	__QCMP_STATIC_CONSTANT( int, SM_CYMin               = 29 );
	__QCMP_STATIC_CONSTANT( int, SM_CXSize              = 30 );
	__QCMP_STATIC_CONSTANT( int, SM_CYSize              = 31 );
	__QCMP_STATIC_CONSTANT( int, SM_CXFrame             = 32 );
	__QCMP_STATIC_CONSTANT( int, SM_CYFrame             = 33 );
	__QCMP_STATIC_CONSTANT( int, SM_CXMINTrack          = 34 );
	__QCMP_STATIC_CONSTANT( int, SM_CYMINTrack          = 35 );
	__QCMP_STATIC_CONSTANT( int, SM_CXDoubleClk         = 36 );
	__QCMP_STATIC_CONSTANT( int, SM_CYDoubleClk         = 37 );
	__QCMP_STATIC_CONSTANT( int, SM_CXIconSpacing       = 38 );
	__QCMP_STATIC_CONSTANT( int, SM_CYIconSpacing       = 39 );
	__QCMP_STATIC_CONSTANT( int, SM_MenuDropAlignment   = 40 );
	__QCMP_STATIC_CONSTANT( int, SM_PenWindows          = 41 );
	__QCMP_STATIC_CONSTANT( int, SM_DBCSEnabled         = 42 );
	__QCMP_STATIC_CONSTANT( int, SM_CMouseButtons       = 43 );

#if(WINVER >= 0x0400)
	__QCMP_STATIC_CONSTANT( int, SM_CXFixedFrame        =   SM_CXDLGFrame );
	__QCMP_STATIC_CONSTANT( int, SM_CYFixedFrame        =   SM_CYDLGFrame );
	__QCMP_STATIC_CONSTANT( int, SM_CXSizeFrame         =   SM_CXFrame    );
	__QCMP_STATIC_CONSTANT( int, SM_CYSizeFrame         =   SM_CYFrame    );

	__QCMP_STATIC_CONSTANT( int, SM_Secure              = 44 );
	__QCMP_STATIC_CONSTANT( int, SM_CXEdge              = 45 );
	__QCMP_STATIC_CONSTANT( int, SM_CYEdge              = 46 );
	__QCMP_STATIC_CONSTANT( int, SM_CXMinSpacing        = 47 );
	__QCMP_STATIC_CONSTANT( int, SM_CYMinSpacing        = 48 );
	__QCMP_STATIC_CONSTANT( int, SM_CXSMIcon            = 49 );
	__QCMP_STATIC_CONSTANT( int, SM_CYSMIcon            = 50 );
	__QCMP_STATIC_CONSTANT( int, SM_CYSMCaption         = 51 );
	__QCMP_STATIC_CONSTANT( int, SM_CXSMSize            = 52 );
	__QCMP_STATIC_CONSTANT( int, SM_CYSMSize            = 53 );
	__QCMP_STATIC_CONSTANT( int, SM_CXMenuSize          = 54 );
	__QCMP_STATIC_CONSTANT( int, SM_CYMenuSize          = 55 );
	__QCMP_STATIC_CONSTANT( int, SM_Arrange             = 56 );
	__QCMP_STATIC_CONSTANT( int, SM_CXMinimized         = 57 );
	__QCMP_STATIC_CONSTANT( int, SM_CYMinimized         = 58 );
	__QCMP_STATIC_CONSTANT( int, SM_CXMaxTrack          = 59 );
	__QCMP_STATIC_CONSTANT( int, SM_CYMaxTrack          = 60 );
	__QCMP_STATIC_CONSTANT( int, SM_CXMaximized         = 61 );
	__QCMP_STATIC_CONSTANT( int, SM_CYMaximized         = 62 );
	__QCMP_STATIC_CONSTANT( int, SM_Network             = 63 );
	__QCMP_STATIC_CONSTANT( int, SM_CleanBoot           = 67 );
	__QCMP_STATIC_CONSTANT( int, SM_CXDrag              = 68 );
	__QCMP_STATIC_CONSTANT( int, SM_CYDrag              = 69 );
#endif /* WINVER >= 0x0400 */

	__QCMP_STATIC_CONSTANT( int, SM_ShowSounds          = 70 );

#if(WINVER >= 0x0400)
	__QCMP_STATIC_CONSTANT( int, SM_CXMenuCheck         = 71 );  // Use instead of GetMenuCheckMarkDimensions()!
	__QCMP_STATIC_CONSTANT( int, SM_CYMenuCheck         = 72 );
	__QCMP_STATIC_CONSTANT( int, SM_SlowMachine         = 73 );
	__QCMP_STATIC_CONSTANT( int, SM_MidEastEnabled      = 74 );
#endif /* WINVER >= 0x0400 */

#if (WINVER >= 0x0500) || (_WIN32_WINNT >= 0x0400)
	__QCMP_STATIC_CONSTANT( int, SM_MouseWheelPresent    = 75 );
#endif
#if(WINVER >= 0x0500)
	__QCMP_STATIC_CONSTANT( int, SM_XVirtualScreen       = 76 );
	__QCMP_STATIC_CONSTANT( int, SM_YVirtualScreen       = 77 );
	__QCMP_STATIC_CONSTANT( int, SM_CXVirtualScreen      = 78 );
	__QCMP_STATIC_CONSTANT( int, SM_CYVirtualScreen      = 79 );
	__QCMP_STATIC_CONSTANT( int, SM_CMonitors            = 80 );
	__QCMP_STATIC_CONSTANT( int, SM_SameDisplayFormat    = 81 );
#endif /* WINVER >= 0x0500 */
#if(_WIN32_WINNT >= 0x0500)
	__QCMP_STATIC_CONSTANT( int, SM_IMMEnabled           = 82 );
#endif /* _WIN32_WINNT >= 0x0500 */
#if(_WIN32_WINNT >= 0x0501)
	__QCMP_STATIC_CONSTANT( int, SM_CXFocusBorder        = 83 );
	__QCMP_STATIC_CONSTANT( int, SM_CYFocusBorder        = 84 );
#endif /* _WIN32_WINNT >= 0x0501 */

#if(_WIN32_WINNT >= 0x0501)
	__QCMP_STATIC_CONSTANT( int, SM_TabletPC             = 86 );
	__QCMP_STATIC_CONSTANT( int, SM_MediaCenter          = 87 );
	__QCMP_STATIC_CONSTANT( int, SM_Starter              = 88 );
	__QCMP_STATIC_CONSTANT( int, SMServerR2             = 89 );
#endif /* _WIN32_WINNT >= 0x0501 */

#if(_WIN32_WINNT >= 0x0600)
	__QCMP_STATIC_CONSTANT( int, SM_MouseHorizontalWheelPresent = 91 );
	__QCMP_STATIC_CONSTANT( int, SM_CXPAddedBorder        = 92 );
#endif /* _WIN32_WINNT >= 0x0600 */

#if(WINVER >= 0x0601)
	__QCMP_STATIC_CONSTANT( int, SM_Digitizer            = 94 );
	__QCMP_STATIC_CONSTANT( int, SM_MaximumTouches       = 95 );
#endif /* WINVER >= 0x0601 */

#if (WINVER < 0x0500) && (!defined(_WIN32_WINNT) || (_WIN32_WINNT < 0x0400))
	__QCMP_STATIC_CONSTANT( int, SM_CMetrics              = 76 );
#elif WINVER == 0x500
	__QCMP_STATIC_CONSTANT( int, SM_CMetrics              = 83 );
#elif WINVER == 0x501
	__QCMP_STATIC_CONSTANT( int, SM_CMetrics              = 91 );
#elif WINVER == 0x600
	__QCMP_STATIC_CONSTANT( int, SM_CMetrics              = 93 );
#else
	__QCMP_STATIC_CONSTANT( int, SM_CMetrics              = 97 );
#endif

#if(WINVER >= 0x0500)
	__QCMP_STATIC_CONSTANT( int, SM_RemoteSession         = 0x1000 );
#	if(_WIN32_WINNT >= 0x0501)
	__QCMP_STATIC_CONSTANT( int, SM_ShuttingDown          = 0x2000 );
#	endif /* _WIN32_WINNT >= 0x0501 */
#	if(WINVER >= 0x0501)
	__QCMP_STATIC_CONSTANT( int, SM_RemoteControl         = 0x2001 );
#	endif /* WINVER >= 0x0501 */
#	if(WINVER >= 0x0501)
	__QCMP_STATIC_CONSTANT( int, SM_CaretBlinkingEnabled  = 0x2002 );
#	endif /* WINVER >= 0x0501 */
#endif /* WINVER >= 0x0500 */


	__QCMP_STATIC_CONSTANT( unsigned long, lrDefaultColour		= 0x00000000 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrMonochrome			= 0x00000001 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrColour				= 0x00000002 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrCopyReturnOrg		= 0x00000004 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrCopyDeleteOrg		= 0x00000008 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrLoadFromFile		= 0x00000010 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrLoadTransparent	= 0x00000020 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrDefaultSize		= 0x00000040 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrVGAColour			= 0x00000080 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrLoadMap3DColours	= 0x00001000 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrCreateDIBSection	= 0x00002000 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrCopyFromResource	= 0x00004000 );
	__QCMP_STATIC_CONSTANT( unsigned long, lrShared				= 0x00008000 );

	__QCMP_STATIC_CONSTANT( unsigned char, Ac_Src_Over			= 0x00 );
	__QCMP_STATIC_CONSTANT( unsigned char, Ac_Src_Alpha			= 0x01 );

	__QCMP_STATIC_CONSTANT( unsigned short, Process_Terminate                  = (0x0001)  );
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Create_Thread              = (0x0002)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Set_SessionId              = (0x0004)  );
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Vm_Operation               = (0x0008)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Vm_Read                    = (0x0010)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Vm_Write                   = (0x0020)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Dup_Handle                 = (0x0040)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Create_Process             = (0x0080)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Set_Quota                  = (0x0100)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Set_Information            = (0x0200)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Query_Information          = (0x0400)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Suspend_Resume             = (0x0800)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_Query_Limited_Information  = (0x1000)  );  
	__QCMP_STATIC_CONSTANT( unsigned short, Process_All						   = (0x1FFF)  );

	__QCMP_STATIC_CONSTANT( int, BluetoothMaxNameSize			= 248 );
	__QCMP_STATIC_CONSTANT( int, BluetoothMaxPINSize			= 16  );
	__QCMP_STATIC_CONSTANT( int, BluetoothMaxServiceNameSize	= 256 );
	__QCMP_STATIC_CONSTANT( int, BluetoothDeviceNameSize		= 256 );

	__QCMP_STATIC_CONSTANT( unsigned long, Service_Kernel_Driver				= 0x00000001 );//SERVICE_KERNEL_DRIVER          
	__QCMP_STATIC_CONSTANT( unsigned long, Service_File_System_Driver			= 0x00000002 );//SERVICE_FILE_SYSTEM_DRIVER     
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Adapter						= 0x00000004 );//SERVICE_ADAPTER
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Recognizer_Driver			= 0x00000008 );//SERVICE_RECOGNIZER_DRIVER

	__QCMP_STATIC_CONSTANT( unsigned long, Service_Driver						= ( Service_Kernel_Driver | Service_File_System_Driver | Service_Recognizer_Driver ) );//SERVICE_DRIVER                 

	__QCMP_STATIC_CONSTANT( unsigned long, Service_Own_Process					= 0x00000010 );//SERVICE_WIN32_OWN_PROCESS      
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Share_Process				= 0x00000020 );//SERVICE_WIN32_SHARE_PROCESS    
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Win32						= ( Service_Own_Process | Service_Share_Process ) );//SERVICE_WIN32
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Interactive_Process			= 0x00000100 );//SERVICE_INTERACTIVE_PROCESS    
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Type_All						= ( Service_Win32 | Service_Adapter | Service_Driver  | Service_Interactive_Process ) );

	enum eServiceStates
	{
		eStopped							= 0x00000001,
		eStartPending						= 0x00000002,
		eStopPending						= 0x00000003,
		eRunning							= 0x00000004,
		eContinuePending					= 0x00000005,
		ePausePending						= 0x00000006,
		ePaused								= 0x00000007
	};

	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_Stop					= 0x00000001 );//SERVICE_ACCEPT_STOP                    
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_Pause_Continue		= 0x00000002 );//SERVICE_ACCEPT_PAUSE_CONTINUE          
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_Shutdown				= 0x00000004 );//SERVICE_ACCEPT_SHUTDOWN                
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_ParamChange			= 0x00000008 );//SERVICE_ACCEPT_PARAMCHANGE             
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_NetBindChange			= 0x00000010 );//SERVICE_ACCEPT_NETBINDCHANGE           
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_HardwareProfileChange	= 0x00000020 );//SERVICE_ACCEPT_HARDWAREPROFILECHANGE   
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_PowerEvent			= 0x00000040 );//SERVICE_ACCEPT_POWEREVENT              
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_SessionChange			= 0x00000080 );//SERVICE_ACCEPT_SESSIONCHANGE           
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_PreShutdown			= 0x00000100 );//SERVICE_ACCEPT_PRESHUTDOWN             
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_TimeChange			= 0x00000200 );//SERVICE_ACCEPT_TIMECHANGE              
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Accept_TriggerEvent			= 0x00000400 );//SERVICE_ACCEPT_TRIGGEREVENT            

	enum eServiceStart
	{
		eServiceBootStart				= 0x00000000,
		eServiceSystemStart,
		eServiceAutoStart,
		eServiceDemandStart,
		eServiceDisabled,
	};

	enum eServiceControl
	{
		eServiceControlStop					= 0x00000001,
		eServiceControlPause				= 0x00000002,
		eServiceControlContinue				= 0x00000003,
		eServiceControlInterrogate			= 0x00000004,
		eServiceControlShutdown				= 0x00000005,
		eServiceControlParamChange			= 0x00000006,
		eServiceControlNetBindAdd			= 0x00000007,
		eServiceControlNetBindRemove		= 0x00000008,
		eServiceControlNetBindEnable		= 0x00000009,
		eServiceControlNetBindDisable		= 0x0000000A,
		eServiceControlDeviceEvent			= 0x0000000B,
		eServiceControlHardwareProfileChange = 0x0000000C,
		eServiceControlPowerEvent			= 0x0000000D,
		eServiceControlSessionChange		= 0x0000000E,
		eServiceControlPreShutdown			= 0x0000000F,
		eServiceControlTimeChange			= 0x00000010,
		eServiceControlTriggerEvent			= 0x00000020
	};

	//Service Error control type
	enum eServiceErrorControl
	{
		eServiceErrorIgnore					= 0x00000000,
		eServiceErrorNormal,
		eServiceErrorSevere,
		eServiceErrorCritical
	};

	// Service Control Manager object specific access types

	__QCMP_STATIC_CONSTANT( unsigned long, SCManagerConnect					= 0x00000001 );
	__QCMP_STATIC_CONSTANT( unsigned long, SCManagerCreate					= 0x00000002 );
	__QCMP_STATIC_CONSTANT( unsigned long, SCManagerEnumerate				= 0x00000004 );
	__QCMP_STATIC_CONSTANT( unsigned long, SCManagerLock					= 0x00000008 );
	__QCMP_STATIC_CONSTANT( unsigned long, SCManagerQueryLock				= 0x00000010 );
	__QCMP_STATIC_CONSTANT( unsigned long, SCManagerModifyBootConfig		= 0x00000020 );

	__QCMP_STATIC_CONSTANT( unsigned long, SCManagerAllAccess	= ( Standard_Rights_Required | SCManagerConnect | SCManagerCreate | SCManagerEnumerate | SCManagerLock | SCManagerQueryLock  | SCManagerModifyBootConfig ) );


	// Service object specific access type
//
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Query_Config				= 0x00000001 );
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Change_Config			= 0x00000002 );
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Query_Status				= 0x00000004 );
	__QCMP_STATIC_CONSTANT( unsigned long, Service_EnumerateDependents		= 0x00000008 );
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Start					= 0x00000010 );
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Stop						= 0x00000020 );
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Pause_Continue			= 0x00000040 );
	__QCMP_STATIC_CONSTANT( unsigned long, Service_Interrogate				= 0x00000080 );
	__QCMP_STATIC_CONSTANT( unsigned long, Service_User_Defined_Control		= 0x00000100 );
	__QCMP_STATIC_CONSTANT( unsigned long, Service_All_Access				= ( Standard_Rights_Required | Service_Query_Config | Service_Change_Config | Service_Query_Status | Service_EnumerateDependents | Service_Start | Service_Stop | Service_Pause_Continue | Service_Interrogate | Service_User_Defined_Control ) );

	// The types of events that can be logged.

	__QCMP_STATIC_CONSTANT( unsigned short, EventLog_Success				= 0x0000 );//EVENTLOG_SUCCESS                
	__QCMP_STATIC_CONSTANT( unsigned short, EventLog_Error_Type				= 0x0001 );//EVENTLOG_ERROR_TYPE             
	__QCMP_STATIC_CONSTANT( unsigned short, EventLog_Warning_Type			= 0x0002 );//EVENTLOG_WARNING_TYPE           
	__QCMP_STATIC_CONSTANT( unsigned short, EventLog_Information_Type		= 0x0004 );//EVENTLOG_INFORMATION_TYPE       
	__QCMP_STATIC_CONSTANT( unsigned short, EventLog_Audit_Success			= 0x0008 );//EVENTLOG_AUDIT_SUCCESS          
	__QCMP_STATIC_CONSTANT( unsigned short, EventLog_Audit_Failure			= 0x0010 );//EVENTLOG_AUDIT_FAILURE          

#if !defined(_68K_) && !defined(_MPPC_) && !defined(_X86_) && !defined(_IA64_) && !defined(_AMD64_) && defined(_M_IX86)
#define _X86_
#endif

#if !defined(_68K_) && !defined(_MPPC_) && !defined(_X86_) && !defined(_IA64_) && !defined(_AMD64_) && defined(_M_AMD64)
#define _AMD64_
#endif

#if !defined(_68K_) && !defined(_MPPC_) && !defined(_X86_) && !defined(_IA64_) && !defined(_AMD64_) && defined(_M_M68K)
#define _68K_
#endif

#if !defined(_68K_) && !defined(_MPPC_) && !defined(_X86_) && !defined(_IA64_) && !defined(_AMD64_) && defined(_M_MPPC)
#define _MPPC_
#endif

#if !defined(_68K_) && !defined(_MPPC_) && !defined(_X86_) && !defined(_M_IX86) && !defined(_AMD64_) && defined(_M_IA64)
#if !defined(_IA64_)
#define _IA64_
#endif /* !_IA64_ */
#endif

#ifndef _MAC
#if defined(_68K_) || defined(_MPPC_)
#define _MAC
#endif
#endif

#ifdef _AMD64_
#	define CONTEXT_AMD64		0x00100000
#	define ContextControl		( CONTEXT_AMD64 | 0x1L)
#endif

#ifdef _X86_
#	define _CONTEXT_i386			0x00010000     // this assumes that i386 and
#	define _CONTEXT_i486			0x00010000L    // i486 have identical context records
#	define ContextControl		( _CONTEXT_i386 | 0x00000001L) // SS:SP, CS:IP, FLAGS, BP
#endif

#ifdef _IA64_
#	define CONTEXT_IA64			0x00080000
#	define ContextControl		( CONTEXT_IA64 | 0x00000001L)
#endif

}//nsWin32

#endif//WINQL_CONSTANTS_H_1

