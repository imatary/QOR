//FastPage.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A 64K memory page for fast stack like heap

#ifndef CODEQOR_STACKPAGE_H_2
#define CODEQOR_STACKPAGE_H_2

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	template< typename T > class TBox;
	template< typename T > class TPointer;

	//--------------------------------------------------------------------------------
	class CStackPage
	{
	public:

		__QCMP_STATIC_CONSTANT( Cmp_uint_ptr, suiPageUnitSize = 1024 * 64 );

		//--------------------------------------------------------------------------------
		struct Info
		{
			long m_lSize;
			unsigned int m_uiLine;
			const char* m_szFile;
			unsigned long m_ulAllocIndex;
			CStackPage* m_pPage;
		};

		CStackPage( Cmp_uint_ptr uiPageUnits = 1 );
		CStackPage( CStackPage* pPrev, byte* pMemory, Cmp_uint_ptr uiPageUnits );
		~CStackPage();
		Cmp_uint_ptr TotalSize( void );
		Cmp_uint_ptr AllocatedSize( void );
		Cmp_uint_ptr AllocatedItems( void );
		void SetSize( Cmp_uint_ptr uiPageUnits );
		CStackPage* Next( void );
		CStackPage* Prev( void );
		void SetNext( CStackPage* pNext );
		void SetPrev( CStackPage* pPrev );
		void Initialise( void );
		void* Allocate( Cmp_uint_ptr uiByteCount, unsigned int uiLine, const char* pFile, Cmp_uint_ptr ulAllocIndex );
		bool Free( void* pMemory );
		void Analyse( void(*pTrace)(char*) );

	protected:

		//--------------------------------------------------------------------------------
		template< typename T >
		void Push( T& _t )
		{
			T* pt = reinterpret_cast< T* >( m_pToS );
			m_pToS += sizeof( T );
			*pt = _t;
		}

		void* Push( Cmp_uint_ptr uiBytes );

		//--------------------------------------------------------------------------------
		template< typename T >
		T* Pop( T* pdummy = 0 )
		{
			m_pToS -= sizeof( T );
			T* pt = reinterpret_cast< T* >( m_pToS );
			return pt;
		}

		void* Pop( Cmp_uint_ptr uiBytes );

	protected:

		byte* m_pMemoryBase;
		Cmp_uint_ptr m_uiPageUnits;
		byte* m_pToS;
		CStackPage* m_pNext;	
		CStackPage* m_pPrev;
		Cmp_uint_ptr m_uiItems;
	};

}//nsCodeQOR

#endif//CODEQOR_STACKPAGE_H_2
