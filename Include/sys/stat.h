//stat.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_SYS_STAT_H_3
#define QOR_SYS_STAT_H_3

#include "SystemQOR.h"
#include QOR_SYS_PLATFORMSYSTYPES(stat)
#include QOR_SYS_PLATFORMTYPES(stddef)

typedef nsPlatform::file_stat stat;
typedef nsPlatform::blkcnt_t blkcnt_t;
typedef nsPlatform::blksize_t blksize_t;
typedef nsPlatform::dev_t dev_t;
typedef nsPlatform::ino_t ino_t;
typedef nsPlatform::mode_t mode_t;
typedef nsPlatform::nlink_t nlink_t;
typedef nsPlatform::uid_t uid_t;
typedef nsPlatform::gid_t gid_t;
typedef nsPlatform::off_t off_t;
typedef nsPlatform::time_t time_t;
typedef nsPlatform::timespec timespec;
typedef nsPlatform::errno_t errno_t;
typedef nsPlatform::sstat sstat;
typedef nsPlatform::sstat _sstat;
typedef nsPlatform::sstat64 __sstat64;
typedef nsPlatform::sstati64 _sstati64;

//For compatibility with earlier versions
//#define st_atime	st_atim.tv_sec
//#define st_ctime	st_ctim.tv_sec
//#define st_mtime	st_mtim.tv_sec

//the following symbolic constants for the file types encoded in type mode_t

#define S_IFMT				( nsPlatform::S_IFmt )				//[XSI]  Type of file.
#define S_IFBLK				( nsPlatform::S_IFBlk )				//Block special.
#define S_IFCHR				( nsPlatform::S_IFChr )				//Character special.
#define S_IFIFO				( nsPlatform::S_IFifo )				//FIFO special.
#define S_IFREG				( nsPlatform::S_IFReg )				//Regular.
#define S_IFDIR				( nsPlatform::S_IFDir )				//Directory.
#define S_IFLNK				( nsPlatform::S_IFLnk )				//Symbolic link.
#define S_IFSOCK			( nsPlatform::S_IFSock )			//Socket

//the following symbolic constants for the file mode bits encoded in type mode_t, with the indicated numeric values. These macros shall expand to an expression which has a type that allows them to be used, either singly or OR'ed together, as the third argument to open() without the need for a mode_t cast. The values shall be suitable for use in #if preprocessing directives.

#define S_IRWXU				0700								// Read, write, execute/search by owner.
#define S_IRUSR				0400								// Read permission, owner.
#define S_IWUSR				0200								// Write permission, owner.
#define S_IXUSR				0100								// Execute/search permission, owner.
#define S_IRWXG				070									// Read, write, execute/search by group.
#define S_IRGRP				040									// Read permission, group.
#define S_IWGRP				020									// Write permission, group.
#define S_IXGRP				010									// Execute/search permission, group.
#define S_IRWXO				07									// Read, write, execute/search by others.
#define S_IROTH				04									// Read permission, others.
#define S_IWOTH				02									// Write permission, others.
#define S_IXOTH				01									// Execute/search permission, others.
#define S_ISUID				04000								// Set-user-ID on execution.
#define S_ISGID				02000								// Set-group-ID on execution.
#define S_ISVTX				01000								// On directories, restricted deletion flag.

#define S_IEXEC				( nsPlatform::S_IExec )				// execute/search permission, owner
#define S_IREAD				( nsPlatform::S_IRead )				// read permission, owner
#define S_IWRITE			( nsPlatform::S_IWrite )			// write permission, owner

//The following macros test whether a file is of the specified type. The value m supplied to the macros is the value of st_mode from a stat structure. The macro shall evaluate to a non-zero value if the test is true; 0 if the test is false.

#define S_ISBLK(m)			( nsPlatform::SIsBlk( m ) )			//Test for a block special file.
#define S_ISCHR(m)			( nsPlatform::SIsChr( m ) )			//Test for a character special file.
#define S_ISDIR(m)			( nsPlatform::SIsDir( m ) )			//Test for a directory.
#define S_ISFIFO(m)			( nsPlatform::SIsFifo( m ) )		//Test for a pipe or FIFO special file.
#define S_ISREG(m)			( nsPlatform::SIsReg( m ) )			//Test for a regular file.
#define S_ISLNK(m)			( nsPlatform::SIsLink( m ) )		//Test for a symbolic link.
#define S_ISSOCK(m)			( nsPlatform::SIsSock( m ) )		//Test for a socket.

//The implementation may implement message queues, semaphores, or shared memory objects as distinct file types. The following macros shall be provided to test whether a file is of the specified type. The value of the buf argument supplied to the macros is a pointer to a stat structure. The macro shall evaluate to a non-zero value if the specified object is implemented as a distinct file type and the specified file type is contained in the stat structure referenced by buf. Otherwise, the macro shall evaluate to zero.

#define S_TYPEISMQ(buf)		( nsPlatform::STypeIsMessageQueue( buf ) )	//Test for a message queue.
#define S_TYPEISSEM(buf)	( nsPlatform::STypeIsSemaphore( buf ) )		//Test for a semaphore.
#define S_TYPEISSHM(buf)	( nsPlatform::STypeIsSharedMem( buf ) )		//Test for a shared memory object.

//[TYM]  The implementation may implement typed memory objects as distinct file types, and the following macro shall test whether a file is of the specified type. The value of the buf argument supplied to the macros is a pointer to a stat structure. The macro shall evaluate to a non-zero value if the specified object is implemented as a distinct file type and the specified file type is contained in the stat structure referenced by buf. Otherwise, the macro shall evaluate to zero.

#define S_TYPEISTMO(buf)	( nsPlatform::STypeIsTypedMemObj( buf ) )	//Test macro for a typed memory object.

#define UTIME_NOW			( nsPlatform::UTimeNow )
#define UTIME_OMIT			( nsPlatform::UTimeOmit )


__QCMP_STARTLINKAGE_C

	__QOR_INTERFACE( __CQOR ) int chmod( const char*, ::mode_t );
	__QOR_INTERFACE( __CQOR ) int fchmod( int, ::mode_t );
	__QOR_INTERFACE( __CQOR ) int fchmodat( int, const char*, ::mode_t, int );
	__QOR_INTERFACE( __CQOR ) int fstat( int, ::stat* );
	__QOR_INTERFACE( __CQOR ) int fstatat( int, const char* __QCMP_RESTRICT, ::stat* __QCMP_RESTRICT, int );
	__QOR_INTERFACE( __CQOR ) int futimens( int, const ::timespec[ 2 ] );
	__QOR_INTERFACE( __CQOR ) int lstat( const char* __QCMP_RESTRICT, ::stat* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) int mkdir( const char*, ::mode_t );
	__QOR_INTERFACE( __CQOR ) int mkdirat( int, const char*, ::mode_t );
	__QOR_INTERFACE( __CQOR ) int mkfifo( const char*, ::mode_t );
	__QOR_INTERFACE( __CQOR ) int mkfifoat( int, const char*, ::mode_t );
	__QOR_INTERFACE( __CQOR ) int mknod( const char*, ::mode_t, ::dev_t );
	__QOR_INTERFACE( __CQOR ) int mknodat( int, const char*, ::mode_t, ::dev_t );
	//__QOR_INTERFACE( __CQOR ) int _stat( const char* __QCMP_RESTRICT, stat* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) ::mode_t umask( ::mode_t );
	__QOR_INTERFACE( __CQOR ) int utimensat( int, const char*, const ::timespec[ 2 ], int );

	__QOR_INTERFACE( __CQOR ) int _umask( int pmode );
	__QOR_INTERFACE( __CQOR ) ::errno_t _umask_s( int mode, int* pOldMode );
	__QOR_INTERFACE( __CQOR ) int _stat( const char* path, _sstat* buffer );
	__QOR_INTERFACE( __CQOR ) int _stat64( const char* path, __sstat64* buffer );
	__QOR_INTERFACE( __CQOR ) int _stati64( const char* path, _sstati64* buffer );

__QCMP_ENDLINKAGE_C

#endif//QOR_SYS_STAT_H_3
