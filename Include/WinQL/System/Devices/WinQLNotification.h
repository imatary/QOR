//WinQLNotification.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Device Notification

#ifndef WINQL_DEVICEIO_NOTIFICATION_H_3
#define WINQL_DEVICEIO_NOTIFICATION_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/DataStructures/TRef.h"
#include "WinQL/Application/Threading/WinQLThreadAffinity.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"
#include "WinQL/CodeServices/Handles/WinQLHandle.h"
#include "WinQL/System/Devices/WinQLNotificationFilter.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

__QOR_DECLARE_REF(nsWin32, __WINQL, CDeviceNotification, CTRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CDeviceNotification
	{

		QOR_PP_WINQL_THREAD_ATTACHED;

	public:

		__QOR_DECLARE_REF_TYPE(CDeviceNotification);
		__QOR_DECLARE_OCLASS_ID(CDeviceNotification);

		CDeviceNotification( CHandle& Handle, CNotificationFilter& Filter, unsigned long Flags );
		virtual ~CDeviceNotification();

		std::vector< CHandle >& Handles(void);

	private:

		std::vector< CHandle > m_VecNotifyHandles;		
		nsWinQAPI::CUser32& m_Library;

		CDeviceNotification() = delete;
		__QCS_DECLARE_NONCOPYABLE( CDeviceNotification );

		friend __QOR_INTERFACE( __WINQL ) CDeviceNotification::ref_type CreateWindowDeviceNotification( CHandle& Handle, CNotificationFilter& Filter );
		friend __QOR_INTERFACE( __WINQL ) CDeviceNotification::ref_type CreateServiceDeviceNotification( CHandle& Handle, CNotificationFilter& Filter );
	};

	__QOR_INTERFACE( __WINQL ) CDeviceNotification::ref_type CreateWindowDeviceNotification( CHandle& Handle, CNotificationFilter& Filter );
	__QOR_INTERFACE( __WINQL ) CDeviceNotification::ref_type CreateServiceDeviceNotification( CHandle& Handle, CNotificationFilter& Filter );

}//nsWin32

#endif//WINQL_DEVICEIO_NOTIFICATION_H_3
