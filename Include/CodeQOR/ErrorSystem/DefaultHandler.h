//DefaultHandler.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Base classes for error handlers

#ifndef CODEQOR_ERR_DEFAULTHANDLER_H_1
#define CODEQOR_ERR_DEFAULTHANDLER_H_1

#include "CodeQOR/ErrorSystem/Error.h"
#include "CodeQOR/ClassReg/TFlyer.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	//Base for all error handlers
	class __QOR_INTERFACE( __CODEQOR ) CDefaultHandler
	{
	public:

		CDefaultHandler();
		virtual ~CDefaultHandler();
		virtual bool Handle( CError& Error );//Implement Handle to return true if the Error is resolved and execution can continue
	};

	//--------------------------------------------------------------------------------
	//Template base for all actual handlers, See Flyer for how this base provides a
	//handler instance to everything above it on the stack
	template< unsigned int _tuiErrLevel >
	class __QOR_INTERFACE( __CODEQOR ) CDefaultHandlerImpl : public CTFlyer< CDefaultHandlerImpl< _tuiErrLevel >, CDefaultHandler >
	{
	public:

		static const mxGUID* ClassID(void);
		static const char* TypeName(void);

		//--------------------------------------------------------------------------------
		CDefaultHandlerImpl()
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CDefaultHandlerImpl()
		{
		}
	};

	typedef __QOR_INTERFACE( __CODEQOR ) CDefaultHandlerImpl< CError::ERR_LVL_FATAL > CDefaultFatalHandler;
	typedef __QOR_INTERFACE( __CODEQOR ) CDefaultHandlerImpl< CError::ERR_LVL_SERIOUS > CDefaultSeriousHandler;
	typedef __QOR_INTERFACE( __CODEQOR ) CDefaultHandlerImpl< CError::ERR_LVL_CONTINUE > CDefaultContinuableHandler;
	typedef __QOR_INTERFACE( __CODEQOR ) CDefaultHandlerImpl< CError::ERR_LVL_WARNING > CDefaultWarningHandler;
	typedef __QOR_INTERFACE( __CODEQOR ) CDefaultHandlerImpl< CError::ERR_LVL_NOTE > CDefaultNoteHandler;

	//Ensure the compiler makes code for all the types of Error handler declared

#   if( __QCMP_COMPILER == __QCMP_GCC || __QCMP_COMPILER == __QCMP_INTEL )
    template class CTFlyer< CDefaultFatalHandler, CDefaultHandler >;
    template class CTFlyerRegEntry< CDefaultHandlerImpl< CError::ERR_LVL_FATAL > >;
    template class CTFlyer< CDefaultSeriousHandler, CDefaultHandler >;
    template class CTFlyerRegEntry< CDefaultHandlerImpl< CError::ERR_LVL_SERIOUS > >;
    template class CTFlyer< CDefaultContinuableHandler, CDefaultHandler >;
    template class CTFlyerRegEntry< CDefaultHandlerImpl< CError::ERR_LVL_CONTINUE > >;
    template class CTFlyer< CDefaultWarningHandler, CDefaultHandler >;
    template class CTFlyerRegEntry< CDefaultHandlerImpl< CError::ERR_LVL_WARNING > >;
    template class CTFlyer< CDefaultNoteHandler, CDefaultHandler >;
    template class CTFlyerRegEntry< CDefaultHandlerImpl< CError::ERR_LVL_NOTE > >;
#   endif

    typedef sTOB< CTFlyerRegEntry< CDefaultFatalHandler > > CDefaultFatalHandlerRegEntry;
    typedef __QOR_INTERFACE( __CODEQOR ) CTFlyer< CDefaultFatalHandler, CDefaultHandler > CDefaultFatalHandlerBase;

    typedef sTOB< CTFlyerRegEntry< CDefaultSeriousHandler > > CDefaultSeriousHandlerRegEntry;
    typedef __QOR_INTERFACE( __CODEQOR ) CTFlyer< CDefaultSeriousHandler, CDefaultHandler > CDefaultSeriousHandlerBase;

    typedef sTOB< CTFlyerRegEntry< CDefaultContinuableHandler > > CDefaultContinuableHandlerRegEntry;
    typedef __QOR_INTERFACE( __CODEQOR ) CTFlyer< CDefaultContinuableHandler, CDefaultHandler > CDefaultContinuableHandlerBase;

    typedef sTOB< CTFlyerRegEntry< CDefaultWarningHandler > > CDefaultWarningHandlerRegEntry;
    typedef __QOR_INTERFACE( __CODEQOR ) CTFlyer< CDefaultWarningHandler, CDefaultHandler > CDefaultWarningHandlerBase;

    typedef sTOB< CTFlyerRegEntry< CDefaultNoteHandler > > CDefaultNoteHandlerRegEntry;
    typedef __QOR_INTERFACE( __CODEQOR ) CTFlyer< CDefaultNoteHandler, CDefaultHandler > CDefaultNoteHandlerBase;

}//nsCodeQOR
/*
#if     ( ( __QCMP_COMPILER == __QCMP_MSVC ) && ( !__QCMP_FEATURE_TEMPLATE_MEMBER_TEMPLATES_MSVC_BUGGED ) )
template<> nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CDefaultFatalHandler > >	nsCodeQOR::CTFlyer< nsCodeQOR::CDefaultFatalHandler, nsCodeQOR::CDefaultHandler >::RegEntry((void*)(0));
template<> nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CDefaultSeriousHandler > > nsCodeQOR::CTFlyer< nsCodeQOR::CDefaultSeriousHandler, nsCodeQOR::CDefaultHandler >::RegEntry((void*)(0));
template<> nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CDefaultContinuableHandler > > nsCodeQOR::CTFlyer< nsCodeQOR::CDefaultContinuableHandler, nsCodeQOR::CDefaultHandler >::RegEntry((void*)(0));
template<> nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CDefaultWarningHandler > > nsCodeQOR::CTFlyer< nsCodeQOR::CDefaultWarningHandler, nsCodeQOR::CDefaultHandler >::RegEntry((void*)(0));
template<> nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CDefaultNoteHandler > > nsCodeQOR::CTFlyer< nsCodeQOR::CDefaultNoteHandler, nsCodeQOR::CDefaultHandler >::RegEntry((void*)(0));
#endif//( __QCMP_COMPILER == __QCMP_MSVC && ( !__QCMP_FEATURE_TEMPLATE_MEMBER_TEMPLATES_MSVC_BUGGED ) )
*/
#endif//CODEQOR_ERR_DEFAULTHANDLER_H_1
