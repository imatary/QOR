//WinQLProcess.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements the CProcess class representing the executing Windows process

#include <limits.h>
#include "CodeQOR/ErrorSystem/Error.h"
#include "AppocritaQOR/Controller.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ErrorDomain.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/DynamicLibrary.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Process/WinQLProcess.h"
#include "WinQL/Application/Process/WinQLJob.h"
#include "WinQL/Application/Threading/WinQLThread.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/User32.h"
#include "WinQAPI/PSAPI.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	nsCodeQOR::sTOB< CProcess > theWindowsProcess;

	__QOR_IMPLEMENT_OCLASS_GUID( CProcess, 0x9c8a6e9, 0x7b0b, 0x428f, 0xae, 0x88, 0x99, 0xa9, 0xc8, 0x58, 0x14, 0x3e )	// {09C8A6E9-7B0B-428F-AE88-99A9C858143E}

	//--------------------------------------------------------------------------------
	void InitWindowsProcess( void )
	{
		theWindowsProcess->GetId();
	}

	//--------------------------------------------------------------------------------
	CProcess* ThisProcess()
	{
		_WINQ_SFCONTEXT( "ThisProcess" );
		return dynamic_cast< CProcess* >( nsCodeQOR::CProcessBase::ThisProcess() );
	}
		
	//--------------------------------------------------------------------------------
	nsQOR::IThread::ref_type CProcess::ThreadContext( void )
	{
		//NOTE: Can't have function context here because this is required by function context initialisation
		return t_pCurrentWin32Thread->Ref();
	}

	//--------------------------------------------------------------------------------
	CProcess::CProcess() : CWinModule( CKernel32::GetCurrentProcess() ), CRemoteProcess( CKernel32::GetCurrentProcess() )
	{
		_WINQ_FCONTEXT( "CProcess::CProcess" );
		m_hInstance = ( InstanceHandle )&__ImageBase;
		m_Name = 0;
	}


	//------------------------------------------------------------------------------
	CProcess::~CProcess()
	{
		_WINQ_FCONTEXT( "CProcess::~CProcess" );
	}

	//------------------------------------------------------------------------------
	void CProcess::Exit( unsigned int uExitCode )
	{
		_WINQ_SFCONTEXT( "CProcess::Exit" );
		__QOR_PROTECT
		{
			CKernel32::ExitProcess( uExitCode );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	unsigned long CProcess::GetCurrentId()
	{
		_WINQ_SFCONTEXT( "CProcess::GetCurrentId" );
		return CKernel32::GetCurrentProcessId();
	}

	/*
	//------------------------------------------------------------------------------
	CErrorSystem& CProcess::ErrorSystem( void )
	{
		_WINQ_FCONTEXT( "CProcess::ErrorSystem" );
		static CErrorSystem _ErrorSystem;	
		return _ErrorSystem;
	}
	*/

	//--------------------------------------------------------------------------------
	mxTCHAR* CProcess::Name( void )
	{
		if( m_Name != 0 )
		{
			return m_Name;
		}
		else
		{
			return _T( "unnamed" );
		}
	}

	//--------------------------------------------------------------------------------
	CTString CProcess::GetFileName( void )
	{
		_WINQ_SFCONTEXT( "CProcess::GetFileName" );
		return m_Win32Helper.GetFileName();
	}

}//nsWin32

