//WinQLLocalSecAuthority.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_SECURITY_LOCALSECAUTH_H_3
#define WINQL_SECURITY_LOCALSECAUTH_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "CodeQOR/DataStructures/TLRef.h"
#include "WinQL/CodeServices/Text/WinQLCharDecl.h"
#include "WinQL/System/Security/WinQLLSAPolicy.h"
#include "WinQL/System/Security/WinQLAuthorization.h"
#include "CodeQOR/DataStructures/TPair.h"
#include "CodeQOR/DataStructures/TArray.h"
#include "WinQL/CodeServices/Text/WinString.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{	
	//--------------------------------------------------------------------------------
	union uOMaskPolicy
	{
		//--------------------------------------------------------------------------------
		struct
		{
			unsigned short ViewLocalInformation : 1;
			unsigned short ViewAuditInformation : 1;
			unsigned short GetPrivateInformation : 1;
			unsigned short TrustAdmin : 1;
			unsigned short CreateAccount : 1;
			unsigned short CreateSecret : 1;
			unsigned short CreatePrivilege : 1;
			unsigned short SetDefaultQuotaLimits : 1;
			unsigned short SetAuditRequirements : 1;
			unsigned short AuditLogAdmin : 1;
			unsigned short ServerAdmin : 1;
			unsigned short LookupNames : 1;
			unsigned short Notification : 1;
		}PolicyRights;
		unsigned short usRights;
	};

	//--------------------------------------------------------------------------------
	union uStandardRights
	{
		struct
		{
			unsigned char Delete : 1;
			unsigned char Read_Control : 1;
			unsigned char Write_DAC : 1;
			unsigned char Write_Owner : 1;
			unsigned char Synchronize : 1;
			unsigned char Unknown : 3;
		}StandardRights;
		unsigned char ucRights;
	};

	//--------------------------------------------------------------------------------
	template< typename tOMask >
	union uAccessMask
	{
		struct
		{
			tOMask ObjectMask;
			uStandardRights StandardRights;
			unsigned char SystemSecurity : 1;
			unsigned char Reserved : 3;
			unsigned char All : 1;
			unsigned char Execute : 1;
			unsigned char Write : 1;
			unsigned char Read : 1;
		}Rights;

		unsigned int Mask;
	};

	typedef uAccessMask< uOMaskPolicy > sPolicyMask;
    typedef uAccessMask< unsigned short > sAccessMask;

	//--------------------------------------------------------------------------------	
	class __QOR_INTERFACE( __WINQL ) CAuthenticationInfo : public nsWin32::LSAAuthInformation
	{
	public:
		
		__QOR_DECLARE_OCLASS_ID( CAuthenticationInfo );

		CAuthenticationInfo( const nsWin32::LSAAuthInformation& Src );
		CAuthenticationInfo( const CAuthenticationInfo& Src );
		CAuthenticationInfo& operator=( const CAuthenticationInfo& Src );	
		CAuthenticationInfo& operator=( const nsWin32::LSAAuthInformation& Src );
		virtual ~CAuthenticationInfo();

		nsWin32::LARGE_INTEGER UpdateTime( void );
		unsigned long Type( void ){ return AuthType; }		

	protected:

		CAuthenticationInfo();
		void Free();

		bool m_bFree;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CNT4OWFAuthenticationInfo : public CAuthenticationInfo
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CNT4OWFAuthenticationInfo );
		CNT4OWFAuthenticationInfo();
		CNT4OWFAuthenticationInfo( const nsWin32::LSAAuthInformation& Src );
		unsigned char* NT4OWFPassword( unsigned long& ulLength );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CClearAuthenticationInfo : public CAuthenticationInfo
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CClearAuthenticationInfo );
		CClearAuthenticationInfo();
		CClearAuthenticationInfo( const nsWin32::LSAAuthInformation& Src );
		wchar_t* ClearTextPassword( unsigned long& ulLength );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CVersionAuthenticationInfo : public CAuthenticationInfo
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CVersionAuthenticationInfo );
		CVersionAuthenticationInfo();
		CVersionAuthenticationInfo( const nsWin32::LSAAuthInformation& Src );
		unsigned long Version( void );
	
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CTrustedDomainAuthenticationInfo
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CTrustedDomainAuthenticationInfo );
		CTrustedDomainAuthenticationInfo();
		~CTrustedDomainAuthenticationInfo();
		CTrustedDomainAuthenticationInfo( const CTrustedDomainAuthenticationInfo& Src );
		CTrustedDomainAuthenticationInfo( const nsWin32::TrustedDomainAuthInformation& Src );

		nsCodeQOR::CTArray< CAuthenticationInfo*, CWinQLPolicy > m_IncomingAuthenticationInformation;
		nsCodeQOR::CTArray< CAuthenticationInfo*, CWinQLPolicy > m_IncomingPreviousAuthenticationInformation;
		nsCodeQOR::CTArray< CAuthenticationInfo*, CWinQLPolicy > m_OutgoingAuthenticationInformation;
		nsCodeQOR::CTArray< CAuthenticationInfo*, CWinQLPolicy > m_OutgoingPreviousAuthenticationInformation;
	};

    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __WINQL ) CTranslatedName
    {
    public:

		__QOR_DECLARE_OCLASS_ID( CTranslatedName );
        ~CTranslatedName();
        CTranslatedName( const nsWin32::LSATranslatedName& Src );

    protected:

        nsWin32::SID_NAME_USE m_Usage;
        wchar_t* m_strName;
        long m_lDomainIndex;
    };

    //--------------------------------------------------------------------------------
    class __QOR_INTERFACE( __WINQL ) CTrustInformation
    {
    public:

		__QOR_DECLARE_OCLASS_ID( CTrustInformation );
        ~CTrustInformation();
        CTrustInformation( const nsWin32::LSATrustInformation& Src );

    protected:

        wchar_t* m_strName;
        CSID m_Sid;

    private:

        CTrustInformation(); //not to be implemented
    };

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CTrustedDomainInfoEx
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CTrustedDomainInfoEx );

		CTrustedDomainInfoEx();
		~CTrustedDomainInfoEx();
		CTrustedDomainInfoEx( const CTrustedDomainInfoEx& Src );
		CTrustedDomainInfoEx( const nsWin32::TrustedDomainInformationEx& Src );
		CTrustedDomainInfoEx( const nsWin32::TrustedDomainFullInformation& Src );

		CTrustedDomainInfoEx& operator=( const CTrustedDomainInfoEx& src );
		CTrustedDomainInfoEx& operator=( const nsWin32::TrustedDomainFullInformation& src );

		wchar_t* Name( void ) const;
		wchar_t* FlatName( void ) const;
		unsigned long PosixOffset( void ) const;
		void* SID( void ) const;
		unsigned long TrustDirection( void ) const;
		unsigned long TrustType( void ) const;
		unsigned long TrustAttributes( void ) const;
		nsCodeQOR::CTLRef< CTrustedDomainAuthenticationInfo > Authentication( void ) const;

		void Name( wchar_t* strName );
		void FlatName( wchar_t* strFlatName );
		void PosixOffset( unsigned long ulOffset );
		void SID( void* pSID );
		void TrustDirection( unsigned long ulDirection );
		void TrustType( unsigned long ulType );
		void TrustAttributes( unsigned long ulAttributes );
        void Authentication( nsCodeQOR::CTLRef< CTrustedDomainAuthenticationInfo > AuthInfo );		

	protected:

		wchar_t* m_StrName;
		wchar_t* m_StrFlatName;
		CSID m_Sid;
		unsigned long m_ulTrustDirection;
		unsigned long m_ulTrustType;
		unsigned long m_ulTrustAttributes;
		unsigned long m_ulPosixOffset;
		CTrustedDomainAuthenticationInfo* m_pAuthentication;
	};
	

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSecurityAuthority
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CSecurityAuthority );

		CSecurityAuthority();
		~CSecurityAuthority();

		bool Dummy( bool bIn ){ return bIn ? false : true; }

		class CSession;		
		class CTrustedDomain;

		//--------------------------------------------------------------------------------
		class CAccount
		{
			friend class CSecurityAuthority;
			friend class CSession;

		public:

			__QOR_DECLARE_OCLASS_ID( CAccount );

			~CAccount();
			nsWin32::LSATranslatedSID* LSASID( void );
			void* SID( void );
			bool EnumerateRights( nsCodeQOR::CTLinkedList< nsWin32::CWString::ref_type >& Rights );
			bool AddRights( wchar_t** paRights, unsigned long CountOfRights );
			bool RemoveRights( bool bAll, wchar_t** paUserRights, unsigned long CountOfRights );

		private:

			CAccount( wchar_t* srtAccountName, nsCodeQOR::CTLRef< CSession >& Session );
			CAccount( void* pSID, nsCodeQOR::CTLRef< CSession >& Session );

			nsCodeQOR::CTLRef< CSession > m_Session;
			nsWin32::LSATranslatedSID* m_pLsaSID;
			nsWin32::LSATranslatedSID2* m_pLsaSID2;
			CSID* m_pAccountSID;
			nsCodeQOR::CTLinkedList< nsCodeQOR::CTPair< wchar_t*, void* > > m_ReferencedDomainList;
			nsWin32::LSAReferencedDomainList* m_pReferencedDomains;
		};

		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE( __WINQL ) CSession
		{
			friend class CSecurityAuthority;

		public:

			__QOR_DECLARE_OCLASS_ID( CSession );

			//--------------------------------------------------------------------------------
			class __QOR_INTERFACE( __WINQL ) CTrustedDomainEnumeration
			{
				friend class CSession;

			public:

				__QOR_DECLARE_OCLASS_ID( CTrustedDomainEnumeration );

				~CTrustedDomainEnumeration();

				bool More( void );
				nsCodeQOR::CTLRef< nsCodeQOR::CTLinkedList< nsCodeQOR::CTPair< wchar_t*, void* > > > List( void );

				bool Query( unsigned int uiIndex, nsWin32::eTrustedInformationClass InformationClass, void** ppBuffer );
				bool Set( unsigned int uiIndex, nsWin32::eTrustedInformationClass InformationClass, void* pBuffer );

				nsCodeQOR::CTLRef< CSecurityAuthority::CTrustedDomain > Domain( unsigned int uiIndex, sPolicyMask PolicyMask );

			private:

				CTrustedDomainEnumeration( unsigned long ulPreferredMaximumLength, nsCodeQOR::CTLRef< CSession >& Session );

				unsigned long m_EnumerationContext;
				nsCodeQOR::CTLinkedList< nsCodeQOR::CTPair< wchar_t*, void* > > m_List;
				unsigned long m_ulPrefMax;
				nsCodeQOR::CTLRef< CSession > m_Session;				
			};

			//--------------------------------------------------------------------------------
			class __QOR_INTERFACE( __WINQL ) CTrustedDomainEnumerationEx
			{
				friend class CSession;

			public:
				
				__QOR_DECLARE_OCLASS_ID( CTrustedDomainEnumerationEx );

				~CTrustedDomainEnumerationEx();

				bool More( void );
				nsCodeQOR::CTLRef< nsCodeQOR::CTLinkedList< CTrustedDomainInfoEx > > List( void );

				nsCodeQOR::CTLRef< CSecurityAuthority::CTrustedDomain > Domain( unsigned int uiIndex, sPolicyMask PolicyMask );

			private:

				CTrustedDomainEnumerationEx( unsigned long ulPreferredMaximumLength, nsCodeQOR::CTLRef< CSession >& Session );
				unsigned long m_EnumerationContext;
				nsCodeQOR::CTLinkedList< CTrustedDomainInfoEx > m_List;
				unsigned long m_ulPrefMax;
				nsCodeQOR::CTLRef< CSession > m_Session;
			};


			//--------------------------------------------------------------------------------			
			class __QOR_INTERFACE( __WINQL ) CPrivateData
			{
				friend class CSession;

			public:

				__QOR_DECLARE_OCLASS_ID( CPrivateData );

				void Set( wchar_t* pStrPrivateData );
				wchar_t* Get( void );

			private:

				CPrivateData();//no default constructor
				CPrivateData( nsCodeQOR::CTLRef< CSession >& Session, wchar_t* StrKeyName );
				nsCodeQOR::CTLRef< CSession > m_Session;
				wchar_t* m_strKeyName;
				wchar_t* m_strData;
			};

			~CSession();
			
			bool LookupNames( unsigned long Count, wchar_t** paNames, nsWin32::LSAReferencedDomainList** ReferencedDomains, nsWin32::LSATranslatedSID** Sids );						
			bool LookupNames2( unsigned long Flags, unsigned long Count, wchar_t** paNames, nsWin32::LSAReferencedDomainList** ReferencedDomains, nsWin32::LSATranslatedSID2** Sids );
			bool LookupPrivilegeValue( wchar_t* StrName, nsWin32::LUID& Value );
			bool LookupSids( unsigned long Count, void** Sids, nsCodeQOR::CTLinkedList< CTrustInformation >& ReferencedDomains,
                nsCodeQOR::CTLinkedList< CTranslatedName >& Names );

			nsCodeQOR::CTLRef< nsCodeQOR::CTLinkedList< CSecurityAuthority::CAccount > > EnumerateAccountsWithUserRight( CWString& strRight );			
			nsCodeQOR::CTLRef< CTrustedDomainEnumeration > TrustedDomainEnumeration( unsigned long ulPreferedMaximumLength );
			nsCodeQOR::CTLRef< CPrivateData > PrivateData( wchar_t* StrPrivateData );

		private:

			CSession( wchar_t* strSystemName, unsigned long DesiredAccess );			
			
			CLSAPolicy m_Policy;
			CSession();//no default constructor
		};

		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE( __WINQL ) CTrustedDomain : public CTrustedDomainInfoEx
		{
			friend class CSecurityAuthority;

		public:			

			__QOR_DECLARE_OCLASS_ID( CTrustedDomain );

			CTrustedDomain& operator=( const CTrustedDomain& src );
			CTrustedDomain& operator=( const nsWin32::TrustedDomainFullInformation& src )
			{
				CTrustedDomainInfoEx::operator =( src );
				return *this;
			}

			bool Commit( void );

		private:

			CTrustedDomain( wchar_t* strDomainName, sPolicyMask PolicyMask, nsCodeQOR::CTLRef< CSession >& Session );
			CTrustedDomain( CTrustedDomainInfoEx& DomainInfo, sPolicyMask PolicyMask, nsCodeQOR::CTLRef< CSession >& Session );

			CLSATrustedDomain m_Policy;
			CTrustedDomain();//no default constructor

		};

		//--------------------------------------------------------------------------------
		nsCodeQOR::CTLRef< CSession > Session( wchar_t* strSystemName, unsigned long DesiredAccess )
		{
			nsCodeQOR::CTLRef< CSession > Result( new CSession( strSystemName, DesiredAccess ) );
			return Result;
		}
		
        CTrustedDomain* NewTrustedDomain( CTrustedDomainInfoEx& DomainInfo, sPolicyMask PolicyMask, nsCodeQOR::CTLRef< CSession >& Session );
		nsCodeQOR::CTLRef< CTrustedDomain > TrustedDomain( wchar_t* strDomainName, sPolicyMask PolicyMask, nsCodeQOR::CTLRef< CSession >& Session );
		nsCodeQOR::CTLRef< CAccount > Account( wchar_t* strAccountName, nsCodeQOR::CTLRef< CSession > Session );		

	private:		

		CSecurityAuthority( const CSecurityAuthority& src );//no copy constructor
	};

	typedef nsCodeQOR::CTLRef< CSecurityAuthority::CSession > RefSession;
	typedef nsCodeQOR::CTLRef< CSecurityAuthority::CAccount > RefAccount;	
	typedef nsCodeQOR::CTLinkedList< CSecurityAuthority::CAccount > CAccountList;
	typedef nsCodeQOR::CTLRef< CAccountList > RefAccountList;
	typedef nsCodeQOR::CTPair< wchar_t*, void* > DomainItem;
	typedef nsCodeQOR::CTLinkedList< DomainItem > CDomainList;
	typedef nsCodeQOR::CTLRef< CDomainList > RefDomainList;
	typedef nsCodeQOR::CTLinkedList< CTrustedDomainInfoEx > CDomainInfoExList;
	typedef nsCodeQOR::CTLRef< CDomainInfoExList > RefDomainInfoExList;
	
}//nsWin32

#endif//WINQL_SECURITY_LOCALSECAUTH_H_3
