//BfOutputProtocol.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_PROTOCOLS_OUTPUT_H_3
#define BLUEFOOT_PROTOCOLS_OUTPUT_H_3

//Defines a bare stream protocol for one way output to an external source
//An external source is a anything out of process or where we go via the OS to write it: a file, socket, pipe, network or shared memory

#include "BluefootQOR/BfProtocol.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CBFOutputProtocol : public CBFProtocol
	{
	public:

		typedef nsCodeQOR::CTLRef< CBFOutputProtocol > refType;

		__QOR_DECLARE_OCLASS_ID( CBFOutputProtocol );

		CBFOutputProtocol() = delete;
		CBFOutputProtocol( nsQOR::IApplication::ref_type Application );
		virtual ~CBFOutputProtocol();
		CBFOutputProtocol( const CBFOutputProtocol& src );
		CBFOutputProtocol& operator = ( const CBFOutputProtocol& src);

		virtual void GetNextWriteCount( void );

		virtual void OnConnectionError( void );
		virtual void OnConnected( void );
		virtual void OnDisconnectionError( void );
		virtual void OnDisconnected( void );
		virtual void OnWriteSuccess( void );
		virtual void OnWriteError( void );
		virtual bool Write( void );

		refType Ref( void )
		{
			return refType( this );
		}
	};

}//nsBluefoot

#endif//BLUEFOOT_PROTOCOLS_OUTPUT_H_3

