//WinQLDeviceDriverCollection.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/Drivers/WinQLDeviceDriverCollection.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/SetupAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceDriverCollection );

	//--------------------------------------------------------------------------------
	CDeviceDriverCollection::CDeviceDriverCollection( const mxTCHAR* szMachine )
	:	m_Library( CSetupAPI::Instance() )
	,	m_szMachineName( szMachine )
	{
		_WINQ_FCONTEXT( "CDeviceDriverCollection::CDeviceDriverCollection" );
		m_bRemote = ( m_szMachineName == 0 ) ? false : true;
	}

	//--------------------------------------------------------------------------------
	CDeviceDriverCollection::CDeviceDriverCollection( const CDeviceDriverCollection& src )
	:	m_Library( CSetupAPI::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceDriverCollection::CDeviceDriverCollection" );
		m_szMachineName = src.m_szMachineName;
		m_bRemote = src.m_bRemote;
	}

	//--------------------------------------------------------------------------------
	CDeviceDriverCollection& CDeviceDriverCollection::operator = ( const CDeviceDriverCollection& src )
	{
		_WINQ_FCONTEXT( "CDeviceDriverCollection::operator =" );
		if( &src != this )
		{
			m_szMachineName = src.m_szMachineName;
			m_bRemote = src.m_bRemote;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CDeviceDriverCollection::~CDeviceDriverCollection()
	{
		_WINQ_FCONTEXT( "CDeviceDriverCollection::CDeviceDriverCollection" );
	}

	//--------------------------------------------------------------------------------
	bool CDeviceDriverCollection::IsRemote( void )
	{
		_WINQ_FCONTEXT( "CDeviceDriverCollection::IsRemote" );
		return m_bRemote;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceDriverCollection::IsLocal( void )
	{
		_WINQ_FCONTEXT( "CDeviceDriverCollection::IsLocal" );
		return !m_bRemote;
	}
	
}//nsWin32
