//DeviceSetupClass.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Device Setup Class

#ifndef WINQL_DEVICESETUPCLASS_H_3
#define WINQL_DEVICESETUPCLASS_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/IO.h"
#include "WinQL/System/Devices/WinQLDevice.h"
#include "WinQL/System/Devices/WinQLDeviceHandle.h"
#include "WinQL/System/Devices/Instances/WinQLDeviceInstance.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "AppocritaQOR/Controller.h"

__QOR_DECLARE_REF(nsWin32, __WINQL, CDeviceSetupClass, CTRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CDeviceSetupClass
	{
	public:

		__QOR_DECLARE_REF_TYPE(CDeviceSetupClass);

		//--------------------------------------------------------------------------------
		enum eProperty
		{
			UpperFilters		= (0x00000011),  // UpperFilters (R/W)
			LowerFilters		= (0x00000012),  // LowerFilters (R/W)
			Security			= (0x00000017),  // Security (R/W, binary form)
			Security_SDS		= (0x00000018),  // Security (W, SDS form)
			DevType				= (0x00000019),  // Device Type (R/W)
			Exclusive			= (0x0000001A),  // Device is exclusive-access (R/W)
			Characteristics		= (0x0000001B),  // Device Characteristics (R/W)
			MaximumProperty		= (0x0000001C),  // Upper bound on ordinals
		};

		__QCMP_STATIC_CONSTANT( unsigned short, MaxNameLength = 4096 );

		__QOR_DECLARE_OCLASS_ID( CDeviceSetupClass );

		CDeviceSetupClass( nsCodeQOR::mxGUID GUID, const CTString& strMachineName );
		CDeviceSetupClass( const CDeviceSetupClass& src );
		~CDeviceSetupClass();

		CTString Name( void );
		bool IsLocal( void );
		bool IsRemote( void );

		CTString Description( void );

		CString< byte > GetProperty( eProperty );
		unsigned long GetCharacteristics( void );
		unsigned long GetDeviceType( void );
		bool GetExclusiveAccessAvailable( void );
		nsCodeQOR::CTLRef< nsCodeQOR::CTArray< CTString, CWinQLPolicy > > GetLowerFilters( void );
		SECURITY_DESCRIPTOR GetSecurity( void );
		CTString GetSecurity_SDS( void );
		nsCodeQOR::CTLRef< nsCodeQOR::CTArray< CTString, CWinQLPolicy > > GetUpperFilters( void );
		nsCodeQOR::CTLRef< nsCodeQOR::CTArray< nsCodeQOR::__mxGUID, CWinQLPolicy > > GetGUIDsFromName( void );

		std::vector< CDeviceInstance::ref_type >& CDeviceSetupClass::GetInstances( void );

	protected:

		nsCodeQOR::mxGUID m_GUID;
		CTString m_strMachine;		

	private:

		nsWinQAPI::CSetupAPI& m_Library;
		std::vector< CDeviceInstance::ref_type > m_Instances;
		bool m_bInstancesEnumerated;

		unsigned int EnumerateInstances( void );

		CDeviceSetupClass& CDeviceSetupClass::operator = ( const CDeviceSetupClass& src );

	};

}//nsWin32

#endif//WINQL_DEVICESETUPCLASS_H_3
