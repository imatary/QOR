//CodePointUTF8Filter.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "BluefootQOR/Filters/CodePointUTF8Filter.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	CCodePointUTF8Filter::CCodePointUTF8Filter() : CFilter()
	{
		m_SourceBuffer.SetCapacity( 4 );
	}

	//------------------------------------------------------------------------------
	CCodePointUTF8Filter::~CCodePointUTF8Filter()
	{
	}

	//------------------------------------------------------------------------------
	CCodePointUTF8Filter::CCodePointUTF8Filter( const CCodePointUTF8Filter& src ) : CFilter( src )
	{
	}

	//------------------------------------------------------------------------------
	CCodePointUTF8Filter& CCodePointUTF8Filter::operator = ( const CCodePointUTF8Filter& src )
	{
		if( &src != this ){}
		return *this;
	}

	//------------------------------------------------------------------------------
	CBuffer* CCodePointUTF8Filter::GetSourceBuffer( void )
	{
		return &m_SourceBuffer;
	}

	//------------------------------------------------------------------------------
	unsigned long CCodePointUTF8Filter::ProcessCodePointToUTF8Buffer( unsigned long ulUnit, unsigned int* pCodePointBuffer )
	{
		unsigned long ulUTF8Written = 0;
		byte utf8[ 4 ];
		if( pCodePointBuffer[ ulUnit ] < 0x80 )
		{
			utf8[ 0 ] = static_cast< byte >( pCodePointBuffer[ ulUnit ] );				
			ulUTF8Written = 1;
		}
		else if( pCodePointBuffer[ ulUnit ] < 0x7FF )
		{
			utf8[ 0 ] = static_cast< byte >( ( pCodePointBuffer[ ulUnit ] >> 6 ) + 0xC0 );
			utf8[ 1 ] = static_cast< byte >( ( pCodePointBuffer[ ulUnit ] & 0x3F ) + 0x80 );
			ulUTF8Written = 2;
		}
		else if( pCodePointBuffer[ ulUnit ] < 0xFFFF )
		{
			utf8[ 0 ] = static_cast< byte >( ( pCodePointBuffer[ ulUnit ] >> 12 ) + 0xE0 );
			utf8[ 1 ] = static_cast< byte >( ( ( pCodePointBuffer[ ulUnit ] >> 6 ) & 0x3F ) + 0x80 );
			utf8[ 2 ] = static_cast< byte >( ( pCodePointBuffer[ ulUnit ] & 0x3F ) + 0x80 );
			ulUTF8Written = 3;
		}
		else if( pCodePointBuffer[ ulUnit ] < 0x10FFFF )
		{
			utf8[ 0 ] = static_cast< byte >( ( pCodePointBuffer[ ulUnit ] >> 18 ) + 0xF0 );
			utf8[ 1 ] = static_cast< byte >( ( ( pCodePointBuffer[ ulUnit ] >> 12 ) & 0x3F ) + 0x80 );
			utf8[ 2 ] = static_cast< byte >( ( ( pCodePointBuffer[ ulUnit ] >> 6 ) & 0x3F ) + 0x80 );
			utf8[ 3 ] = static_cast< byte >( ( pCodePointBuffer[ ulUnit ] & 0x3F ) + 0x80 );
			ulUTF8Written = 4;
		}
		else
		{
			//Invalid code point
		}

		if( ulUTF8Written > 0 )
		{
			byte* pUTF8Buffer = m_SourceBuffer.WriteRequest( ulUTF8Written );
			memcpy( pUTF8Buffer, utf8, ulUTF8Written );
			m_SourceBuffer.WriteAcknowledge( ulUTF8Written );
		}
		return ulUTF8Written;
	}

	//------------------------------------------------------------------------------
	bool CCodePointUTF8Filter::Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead )
	{
		//Read up to the number of code points 1-to-1 for the number of UTF-8 chars requested
		if( m_SinkProxy.GetSource()->Read( ulUnitsRead, ulUnitsToRead ) )
		{
			unsigned int* pCodePointBuffer = reinterpret_cast< unsigned int* >( m_SinkProxy.GetSource()->GetBuffer()->ReadRequest( ulUnitsToRead ) );

			for( ulUnitsRead = 0; ulUnitsRead < ulUnitsToRead; ulUnitsRead++ )
			{
				ProcessCodePointToUTF8Buffer( ulUnitsRead, pCodePointBuffer );
			}

			m_SinkProxy.GetSource()->GetBuffer()->ReadAcknowledge( ulUnitsRead );
		}
		return ulUnitsRead > 0 ? true : false;
	}


	//------------------------------------------------------------------------------
	bool CCodePointUTF8Filter::Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite )
	{
		unsigned int* pCodePointBuffer = reinterpret_cast< unsigned int* >( m_SinkProxy.GetSource()->GetBuffer()->ReadRequest( ulUnitsToWrite ) );

		for( ulUnitsWritten = 0; ulUnitsWritten < ulUnitsToWrite; ulUnitsWritten++ )
		{
			unsigned long ulUTF8Written = ProcessCodePointToUTF8Buffer( ulUnitsWritten, pCodePointBuffer );
			unsigned long ulSinkUnits = 0;
			m_SourceProxy.GetSink()->Write( ulSinkUnits, ulUTF8Written );
		}

		m_SinkProxy.GetSource()->GetBuffer()->ReadAcknowledge( ulUnitsWritten );

		return ulUnitsWritten > 0 ? true : false;
	}
}
