//WinQLDeviceInstance.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR/System.h"
#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/Instances/WinQLDeviceInstance.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/SetupAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceInstance );

	//--------------------------------------------------------------------------------
	CDeviceInstance::CDeviceInstance( CTString& strID ) : m_Library( CSetupAPI::Instance() ), m_pContainer( 0 ), m_ulIndex( 0 ), m_strID( strID )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::CDeviceInstance" );
		memset( &m_Info, sizeof( SP_DevInfo_Data ), 0 );
		TheSystem().As< nsWin32::CSystem >()->Devices(QOR_PP_SHARED_OBJECT_ACCESS).RegisterInstance( m_strID, this );
	}

	//--------------------------------------------------------------------------------
	CDeviceInstance::CDeviceInstance( CTString& strID, SP_DevInfo_Data& Info ) : m_Library( CSetupAPI::Instance() )
	,	m_pContainer( 0 )
	,	m_Info( Info )
	,	m_ulIndex( 0 )
	,	m_strID( strID )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::CDeviceInstance" );
		TheSystem().As< nsWin32::CSystem >()->Devices(QOR_PP_SHARED_OBJECT_ACCESS).RegisterInstance( m_strID, this );

	}

	//--------------------------------------------------------------------------------
	CDeviceInstance::CDeviceInstance( CTString& strID, CDeviceInfoSet* pContainer, SP_DevInfo_Data& Info, unsigned long ulIndex  ) : m_Library( CSetupAPI::Instance() )
	,	m_pContainer( pContainer )
	/*,	m_pDetails( 0 )*/
	,	m_Info( Info )
	,	m_ulIndex( ulIndex )
	,	m_strID( strID )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::CDeviceInstance" );
		TheSystem().As< nsWin32::CSystem >()->Devices(QOR_PP_SHARED_OBJECT_ACCESS).RegisterInstance( m_strID, this );
	}

	//--------------------------------------------------------------------------------
	CDeviceInstance::CDeviceInstance( const CDeviceInstance& src ) : m_Library( CSetupAPI::Instance() )
	,	m_pContainer( src.m_pContainer )
	/*,	m_pDetails( src.m_pDetails )*/
	,	m_Info( src.m_Info )
	,	m_ulIndex( src.m_ulIndex )
	,	m_strID( src.m_strID )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::CDeviceInstance" );
		//System().Devices(QOR_PP_SHARED_OBJECT_ACCESS).AllLocalInstances().RemoveDevice( m_strID );
		//System().Devices(QOR_PP_SHARED_OBJECT_ACCESS).AllLocalInstances().AddDevice( m_strID, this );
		m_VecInterfaces = src.m_VecInterfaces;
	}

	//--------------------------------------------------------------------------------
	void CDeviceInstance::AttachInfoSet( CDeviceInfoSet* pContainer, unsigned long ulIndex )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::AttachInfoSet" );
		m_pContainer = pContainer;
		m_ulIndex = ulIndex;
	}

	//--------------------------------------------------------------------------------
	CDeviceInstance& CDeviceInstance::operator = ( const CDeviceInstance& src )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::operator =" );
		return *this;
	}

	//--------------------------------------------------------------------------------
	CDeviceInstance::~CDeviceInstance()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::~CDeviceInstance" );
	}
	
	//--------------------------------------------------------------------------------
	CTString CDeviceInstance::DeviceID()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::DeviceID" );
		return m_strID;
	}

	//--------------------------------------------------------------------------------
	SP_DevInfo_Data CDeviceInstance::Info()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::Info" );
		return m_Info;
	}

	//--------------------------------------------------------------------------------
	std::vector< CDeviceInterface::refType >& CDeviceInstance::Interfaces()
	{
		return m_VecInterfaces;
	}

	//--------------------------------------------------------------------------------
	void CDeviceInstance::SetupPropertyKeys()
	{
		if( !m_pContainer )
		{
		}

		if (Keys.IsNull())
		{

			nsCodeQOR::CTArray< DevicePropertyKey, CPolicy >* pArrayKeys = new nsCodeQOR::CTArray < DevicePropertyKey, CPolicy > ;
			unsigned long ulRequiredPropertyKeyCount = 0;

			m_Library.SetupDiGetDevicePropertyKeys(
				reinterpret_cast<::HDEVINFO>(m_pContainer->Handle().Use()),
				reinterpret_cast<::PSP_DEVINFO_DATA>(&m_Info), 0, 0, &ulRequiredPropertyKeyCount, 0);

			if (ulRequiredPropertyKeyCount > 0)
			{
				pArrayKeys->SetCapacity(ulRequiredPropertyKeyCount);
				m_Library.SetupDiGetDevicePropertyKeys(
					reinterpret_cast<::HDEVINFO>(m_pContainer->Handle().Use()),
					reinterpret_cast<::PSP_DEVINFO_DATA>(&m_Info),
					reinterpret_cast<::DEVPROPKEY*>(pArrayKeys->GetAddressOfData()), ulRequiredPropertyKeyCount, &ulRequiredPropertyKeyCount, 0);
				pArrayKeys->Validate(ulRequiredPropertyKeyCount);
			}

			Keys.Configure(pArrayKeys, true);
		}
	}

	//--------------------------------------------------------------------------------
	const DevicePropertyKey CDeviceInstance::DevPKey_Name					= { { 0xb725f130, 0x47ef, 0x101a, { 0xa5, 0xf1, 0x02, 0x60, 0x8c, 0x9e, 0xeb, 0xac } }, 10 };

	const DevicePropertyKey CDeviceInstance::DevPKey_DeviceDesc             = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 2 };     // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_HardwareIds            = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 3 };     // DEVPROP_TYPE_STRING_LIST
	const DevicePropertyKey CDeviceInstance::DevPKey_CompatibleIds          = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 4 };     // DEVPROP_TYPE_STRING_LIST
	const DevicePropertyKey CDeviceInstance::DevPKey_Service                = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 6 };     // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_Class                  = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 9 };     // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_ClassGuid              = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 10 };    // DEVPROP_TYPE_GUID
	const DevicePropertyKey CDeviceInstance::DevPKey_Driver                 = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 11 };    // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_ConfigFlags            = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 12 };    // DEVPROP_TYPE_UINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_Manufacturer           = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 13 };    // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_FriendlyName           = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 14 };    // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_LocationInfo           = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 15 };    // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_PDOName                = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 16 };    // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_Capabilities           = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 17 };    // DEVPROP_TYPE_UNINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_UINumber               = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 18 };    // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_UpperFilters           = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 19 };    // DEVPROP_TYPE_STRING_LIST
	const DevicePropertyKey CDeviceInstance::DevPKey_LowerFilters           = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 20 };    // DEVPROP_TYPE_STRING_LIST
	const DevicePropertyKey CDeviceInstance::DevPKey_BusTypeGuid            = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 21 };    // DEVPROP_TYPE_GUID
	const DevicePropertyKey CDeviceInstance::DevPKey_LegacyBusType          = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 22 };    // DEVPROP_TYPE_UINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_BusNumber              = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 23 };    // DEVPROP_TYPE_UINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_EnumeratorName         = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 24 };    // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_Security               = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 25 };    // DEVPROP_TYPE_SECURITY_DESCRIPTOR
	const DevicePropertyKey CDeviceInstance::DevPKey_SecuritySDS            = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 26 };    // DEVPROP_TYPE_SECURITY_DESCRIPTOR_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_DevType                = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 27 };    // DEVPROP_TYPE_UINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_Exclusive              = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 28 };    // DEVPROP_TYPE_BOOLEAN
	const DevicePropertyKey CDeviceInstance::DevPKey_Characteristics        = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 29 };    // DEVPROP_TYPE_UINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_Address                = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 30 };    // DEVPROP_TYPE_UINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_UINumberDescFormat     = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 31 };    // DEVPROP_TYPE_STRING
	const DevicePropertyKey CDeviceInstance::DevPKey_PowerData              = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 32 };    // DEVPROP_TYPE_BINARY
	const DevicePropertyKey CDeviceInstance::DevPKey_RemovalPolicy          = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 33 };    // DEVPROP_TYPE_UINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_RemovalPolicyDefault   = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 34 };    // DEVPROP_TYPE_UINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_RemovalPolicyOverride  = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 35 };    // DEVPROP_TYPE_UINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_InstallState           = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 36 };    // DEVPROP_TYPE_UINT32
	const DevicePropertyKey CDeviceInstance::DevPKey_LocationPaths          = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 37 };    // DEVPROP_TYPE_STRING_LIST
	const DevicePropertyKey CDeviceInstance::DevPKey_BaseContainerId        = { { 0xa45c254e, 0xdf1c, 0x4efd, { 0x80, 0x20, 0x67, 0xd1, 0x46, 0xa8, 0x50, 0xe0 } }, 38 };    // DEVPROP_TYPE_GUID

	const DevicePropertyKey CDeviceInstance::DevPKey_DeviceParent			= { { 0x4340a6c5, 0x93fa, 0x4706, { 0x97, 0x2c, 0x7b, 0x64, 0x80, 0x08, 0xa5, 0xa7 } }, 8 };     // DEVPROP_TYPE_STRING

	//--------------------------------------------------------------------------------
	CString< byte > CDeviceInstance::GetRegistryProperty( unsigned long ulPropertyIndex )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetRegistryProperty" );
		unsigned long ulPropType = 0;
		SP_DevInfo_Data DevInfo = m_Info;
		CString< byte > PropertyBuffer;
		unsigned long ulBytesRequired = 0;
		unsigned long ulError = 0;

		m_Library.SetupDiGetDeviceRegistryProperty( 
			reinterpret_cast< ::HDEVINFO >( m_pContainer->Handle().Use() ),
			reinterpret_cast< ::PSP_DEVINFO_DATA >( &DevInfo ),
			ulPropertyIndex, &ulPropType, 0, 0, &ulBytesRequired );

		if( ulBytesRequired > 0 )
		{
			m_Library.SetupDiGetDeviceRegistryProperty( 
				reinterpret_cast< ::HDEVINFO >( m_pContainer->Handle().Use() ),
				reinterpret_cast< ::PSP_DEVINFO_DATA >( &DevInfo ),
				ulPropertyIndex, &ulPropType,
				PropertyBuffer.GetBufferSetLength( static_cast< unsigned short >( ulBytesRequired ) ), 
				ulBytesRequired, &ulBytesRequired );
			PropertyBuffer.ValidateBuffer( static_cast< unsigned short >( ulBytesRequired ) );
		}
		else
		{
			ulError = ::GetLastError();
		}

		return PropertyBuffer;
	}

	//--------------------------------------------------------------------------------
	CString< byte > CDeviceInstance::GetProperty( unsigned long ulPropertyIndex )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetProperty" );
		unsigned long ulPropType = 0;
		
		SP_DevInfo_Data DevInfo = m_Info;
		CString< byte > PropertyBuffer;
		unsigned long ulBytesRequired = 0;

		SetupPropertyKeys();

		m_Library.SetupDiGetDeviceProperty( 
			reinterpret_cast< ::HDEVINFO >( m_pContainer->Handle().Use() ), 
			reinterpret_cast< ::PSP_DEVINFO_DATA >( &DevInfo ), 
			reinterpret_cast< const ::DEVPROPKEY* >( &( Keys()[ ulPropertyIndex ] ) ),
			&ulPropType, 0, 0, &ulBytesRequired, 0 );

		if( ulBytesRequired > 0 )
		{
			m_Library.SetupDiGetDeviceProperty( 
				reinterpret_cast< ::HDEVINFO >( m_pContainer->Handle().Use() ), 
				reinterpret_cast< ::PSP_DEVINFO_DATA >( &DevInfo ), 
				reinterpret_cast< const ::DEVPROPKEY* >( &( Keys()[ ulPropertyIndex ] ) ),
				&ulPropType, PropertyBuffer.GetBufferSetLength( static_cast< unsigned short >( ulBytesRequired ) ), 
				ulBytesRequired, &ulBytesRequired, 0 );
			PropertyBuffer.ValidateBuffer( static_cast< unsigned short >( ulBytesRequired ) );
		}

		return PropertyBuffer;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceInstance::FindIndex( const DevicePropertyKey* pDevKey )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::FindIndex" );

		SetupPropertyKeys();

		unsigned long ulIndex = Keys().Size();
		while( ulIndex > 0 )
		{
			ulIndex--;
			if( ( Keys()[ ulIndex ].pid == pDevKey->pid ) && nsCodeQOR::IsEqualmxGUID( Keys()[ ulIndex ].fmtid,  pDevKey->fmtid ) )
			{
				return ulIndex;
			}
		}
		return (unsigned long)(-1);
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceInstance::GetUInt32Property( unsigned long ulPropertyIndex )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetUInt32Property" );		
		if( ulPropertyIndex == (unsigned long)(-1) )
		{
			return ulPropertyIndex;
		}
		else
		{
			CString< byte > ByteBuffer = GetProperty( ulPropertyIndex );
			unsigned long ulResult( *( reinterpret_cast< unsigned long* >( ByteBuffer.GetBuffer() ) ) );
			ByteBuffer.ReleaseBuffer();
			return ulResult;
		}
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::__mxGUID CDeviceInstance::GetGUIDProperty( unsigned long ulPropertyIndex )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetGUIDProperty" );		
		if( ulPropertyIndex == (unsigned long)(-1) )
		{
			nsCodeQOR::__mxGUID Result;
			memset( &Result, 0, sizeof( nsCodeQOR::__mxGUID ) );
			return Result;
		}
		else
		{
			CString< byte > ByteBuffer = GetProperty( ulPropertyIndex );
			nsCodeQOR::__mxGUID Result( *( reinterpret_cast< nsCodeQOR::__mxGUID* >( ByteBuffer.GetBuffer() ) ) );
			ByteBuffer.ReleaseBuffer();
			return Result;
		}
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetStringProperty( unsigned long ulPropertyIndex )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetStringProperty" );		
		CString< byte > ByteBuffer = GetProperty( ulPropertyIndex );
		CWString strResult( reinterpret_cast< wchar_t* >( ByteBuffer.GetBuffer() ), ByteBuffer.Len() / ( sizeof( wchar_t ) ) );
		ByteBuffer.ReleaseBuffer();
		return strResult;
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetStringProperty( const DevicePropertyKey* pDevKey )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetStringProperty" );
		CWString strResult( _WTXT( "Property unavailable" ) );

		unsigned long ulIndex = FindIndex( pDevKey );
		if( ulIndex != (unsigned long)(-1) )
		{
			strResult = GetStringProperty( ulIndex );
		}
		return strResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTArray< CWString > CDeviceInstance::GetStringArrayProperty( const DevicePropertyKey* pDevKey )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetStringArrayProperty" );
		nsCodeQOR::CTArray< CWString > ResultArray;
		unsigned long ulIndex = FindIndex( pDevKey );
		if( ulIndex != (unsigned long)(-1) )
		{
			CString< byte > ByteBuffer = GetProperty( ulIndex );
			unsigned short usChar = 0;
			unsigned short usStartChar = 0;
			wchar_t* pChars = reinterpret_cast< wchar_t* >( ByteBuffer.GetBuffer() );
			wchar_t* pString = pChars;
			while( usChar < ( ByteBuffer.Len() / sizeof( wchar_t ) ) )
			{				
				if( pChars[ usChar ] == 0 )
				{
					unsigned short usWLen = ( usChar - usStartChar );
					if( usWLen > 0 )
					{
						CWString strItem( pString, usWLen );
						ResultArray.Append( strItem );
					}
					
					while( usStartChar < ( ByteBuffer.Len() / sizeof( wchar_t ) ) )
					{
						usStartChar = usChar + 1;
						if( pChars[ usStartChar ] != 0 )
						{
							pString = pChars + usStartChar;
							break;
						}
						else
						{
							usChar++;
						}
					}
				}
				usChar++;
			}
			ByteBuffer.ReleaseBuffer();
		}
		return ResultArray;
	}
		
	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetDisplayName()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetDisplayName" );
		return GetStringProperty( &DevPKey_Name );
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetDescription()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetDescription" );
		return GetStringProperty( &DevPKey_DeviceDesc );
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetParent()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetParent" );
		return GetStringProperty( &DevPKey_DeviceParent );
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTArray< CWString > CDeviceInstance::GetHardwareIDs()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetHardwareIDs" );
		return GetStringArrayProperty( &DevPKey_HardwareIds );
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTArray< CWString > CDeviceInstance::GetCompatibleIDs()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetCompatibleIDs" );
		return GetStringArrayProperty( &DevPKey_CompatibleIds );
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetService()
	{
		_WINQ_FCONTEXT( "CDeviceinstance::GetService" );
		return GetStringProperty( &DevPKey_Service );
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetClass()
	{
		_WINQ_FCONTEXT( "DeviceDetails::GetClass" );
		return GetStringProperty( &DevPKey_Class );
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::__mxGUID CDeviceInstance::GetClassGUID()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetClassGUID" );
		return GetGUIDProperty( FindIndex( &DevPKey_ClassGuid ) );
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetDriver()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetDriver" );
		return GetStringProperty( &DevPKey_Driver );
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceInstance::GetConfigFlags()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetConfigFlags" );
		return GetUInt32Property( FindIndex( &DevPKey_ConfigFlags ) );
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetManufacturer()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetManufacturer" );
		return GetStringProperty( &DevPKey_Manufacturer );
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetFriendlyName( CWStringRef strDefault )
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetManufacturer" );
		CWString strResult = GetStringProperty( &DevPKey_FriendlyName );
		if( strResult == CWString( _WTXT( "Property unavailable" ) ) && !strDefault.IsNull() )
		{
			strResult = (const CWString&)( *strDefault );
		}
		return strResult;
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetLocation()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetLocation" );
		return GetStringProperty( &DevPKey_LocationInfo );
	}

	//--------------------------------------------------------------------------------
	CWString CDeviceInstance::GetPDOName()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetPDOName" );
		return GetStringProperty( &DevPKey_PDOName );
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CM_Power_Data > CDeviceInstance::GetPowerData()
	{
		_WINQ_FCONTEXT( "CDeviceInstance::GetPowerData" );

		nsCodeQOR::CTLRef< CM_Power_Data > RefResult;
		CString< byte > ByteBuffer = GetRegistryProperty( SPDRP_DEVICE_POWER_DATA );

		if( ByteBuffer.Len() == sizeof( CM_POWER_DATA ) )
		{
			nsCodeQOR::CTLRef< CM_Power_Data > PowerData( reinterpret_cast< CM_Power_Data* >( ByteBuffer.DetachBuffer().Detach() ), true );
			RefResult = PowerData;
		}
		return RefResult;
	}


	/*
	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceInstanceModel );

	//--------------------------------------------------------------------------------
	CDeviceInstanceModel::CDeviceInstanceModel( nsMammut::CModel* pContainer ) : BaseName( pContainer )
	,	m_Properties( this )
	,	m_ID					(	&m_Properties, CTString( "ID"				) )
	,	m_ulIndex				(	&m_Properties, CTString( "Index"				) )
	,	m_Info					(	&m_Properties, CTString( "Info"				) )	
	,	m_PDOName				(	this, CTString( "PDOName"			) )
	,	m_Location				(	this, CTString( "Location"			) )
	,	m_FriendlyName			(	this, CTString( "Friendly Name"		) )
	,	m_Manufacturer			(	this, CTString( "Manufacturer"		) )
	,	m_DisplayName			(	this, CTString( "DisplayName"		) )
	,	m_Description			(	this, CTString( "Description"		) )
	,	m_Parent				(	this, CTString( "Parent"			) )
	,	m_Service				(	this, CTString( "Service"			) )
	,	m_SetupClassName		(	this, CTString( "SetupClassName"	) )
	,	m_Driver				(	this, CTString( "Driver"			) )
	{
		Initialize();
	}

	//--------------------------------------------------------------------------------
	CDeviceInstanceModel::CDeviceInstanceModel( const CDeviceInstanceModel& src) : BaseName( src.m_pContainer )
	,	m_Properties( this )
	,	m_ID					(	&m_Properties, CTString( "ID"				) )
	,	m_ulIndex				(	&m_Properties, CTString( "Index"				) )
	,	m_Info					(	&m_Properties, CTString( "Info"				) )	
	,	m_PDOName				(	this, CTString( "PDOName"			) )
	,	m_Location				(	this, CTString( "Location"			) )
	,	m_FriendlyName			(	this, CTString( "Friendly Name"		) )
	,	m_Manufacturer			(	this, CTString( "Manufacturer"		) )
	,	m_DisplayName			(	this, CTString( "DisplayName"		) )
	,	m_Description			(	this, CTString( "Description"		) )
	,	m_Parent				(	this, CTString( "Parent"			) )
	,	m_Service				(	this, CTString( "Service"			) )
	,	m_SetupClassName		(	this, CTString( "SetupClassName"	) )
	,	m_Driver				(	this, CTString( "Driver"			) )
	{		
		Initialize();
		*this = src;
	}

	//--------------------------------------------------------------------------------
	void CDeviceInstanceModel::Initialize()
	{		
		insert( CTString( _TXT( "Properties" ) ), m_Properties.Ref() );
		insert( CTString( _TXT( "Interfaces" ) ), m_Interfaces.Ref() );
	}

	//--------------------------------------------------------------------------------
	CDeviceInstanceModel& CDeviceInstanceModel::operator = ( const CDeviceInstanceModel& src )
	{
		if( &src != this )
		{
			nsMammut::CModel::operator=( src );
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CDeviceInstanceModel::~CDeviceInstanceModel()
	{
	}

	//--------------------------------------------------------------------------------
	CDeviceStringProperty::CDeviceStringProperty( CDeviceInstanceModel* pModel, const nsCodeQOR::CTString& strName, unsigned long ulPropertyIndex ) :
		BaseName(dynamic_cast< nsMammut::CModel* >(pModel), strName, this), m_pModel(pModel), m_ulPropertyIndex(ulPropertyIndex)
	{
	}
	*/
}//nsWin32
