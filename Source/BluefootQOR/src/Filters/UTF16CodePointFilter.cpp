//UTF16CodePointFilter.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "BluefootQOR/Filters/UTF16CodePointFilter.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	CUTF16CodePointFilter::CUTF16CodePointFilter() : CFilter()
	,	wcHigh( 0 )
	,	wcLow( 0 )
	,	m_bHigh( false )
	{
		m_SinkBuffer.SetCapacity( 1 );
	}

	//------------------------------------------------------------------------------
	CUTF16CodePointFilter::~CUTF16CodePointFilter()
	{
	}

	//------------------------------------------------------------------------------
	CUTF16CodePointFilter::CUTF16CodePointFilter( const CUTF16CodePointFilter& src ) : CFilter( src )
	{
		*this = src;
	}

	//------------------------------------------------------------------------------
	CUTF16CodePointFilter& CUTF16CodePointFilter::operator = ( const CUTF16CodePointFilter& src )
	{
		if( &src != this )
		{
			CFilter::operator = ( src );
			wcHigh = src.wcHigh;
			wcLow = src.wcLow;
			//m_uiUnicodePoint = src.m_uiUnicodePoint;
			m_SinkBuffer = src.m_SinkBuffer;
			m_bHigh = src.m_bHigh;
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	CBuffer* CUTF16CodePointFilter::GetSourceBuffer( void )
	{
		return &m_SinkBuffer;
	}

	//------------------------------------------------------------------------------
	bool CUTF16CodePointFilter::Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead )
	{
		unsigned long ulSourceUnitsToRead = ulUnitsToRead * 2;

		GetSource()->Read( ulUnitsRead, ulSourceUnitsToRead );
		
		wchar_t* pUTF16Buffer = reinterpret_cast< wchar_t* >( GetSource()->GetBuffer()->ReadRequest( ulSourceUnitsToRead ) );	

		ulUnitsRead = 0;

		do
		{
			if( m_bHigh )
			{
				wcHigh = pUTF16Buffer[ ulUnitsRead++ ];
				if( wcHigh >= 0xDC00 && wcHigh <= 0xDFFF)
				{
					unsigned long ulSingleItem = 1;
					unsigned int* puint = reinterpret_cast< unsigned int * >( m_SinkBuffer.WriteRequest( ulSingleItem ) );
					*puint = ( wcLow << 10 ) + wcHigh - 0x35FDC00;
					m_SinkBuffer.WriteAcknowledge( ulSingleItem );
					m_bHigh = false;
				}
				else
				{
					wcLow = wcHigh;
					ulUnitsRead--;
				}					
			}
			else
			{
				wcLow = pUTF16Buffer[ ulUnitsRead++ ];
				if( wcLow >= 0xD800 && wcLow <= 0xDBFF) 
				{				
					m_bHigh = true;
				}
				else
				{
					unsigned long ulSingleItem = 1;
					unsigned int* puint = reinterpret_cast< unsigned int * >( m_SinkBuffer.WriteRequest( ulSingleItem ) );
					*puint = wcLow;
					m_SinkBuffer.WriteAcknowledge( ulSingleItem );
				}
			}			
		}while( ulUnitsRead < ulUnitsToRead );

		GetSource()->GetBuffer()->ReadAcknowledge( ulUnitsRead );

		return ulUnitsRead > 0 ? true : false;
	}

	//------------------------------------------------------------------------------
	//Filter is being used as a sink
	//Write ulUnitsToWrite Code Points from the UTF16 source buffer
	bool CUTF16CodePointFilter::Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite )
	{
		wchar_t* pUTF16Buffer = reinterpret_cast< wchar_t* >( GetSource()->GetBuffer()->ReadRequest( ulUnitsToWrite ) );	

		ulUnitsWritten = 0;

		do
		{
			if( m_bHigh )
			{
				wcHigh = pUTF16Buffer[ ulUnitsWritten++ ];
				if( wcHigh >= 0xDC00 && wcHigh <= 0xDFFF)
				{
					unsigned long ulSingleItem = 1;
					unsigned int* puint = reinterpret_cast< unsigned int * >( m_SinkBuffer.WriteRequest( ulSingleItem ) );
					*puint = ( wcLow << 10 ) + wcHigh - 0x35FDC00;
					m_SinkBuffer.WriteAcknowledge( ulSingleItem );
					unsigned long ulCodePoints = 0;
					m_SourceProxy.GetSink()->Write( ulCodePoints, 1 );
					m_bHigh = false;
				}
				else
				{
					wcLow = wcHigh;
					ulUnitsWritten--;
				}					
			}
			else
			{
				wcLow = pUTF16Buffer[ ulUnitsWritten++ ];
				if( wcLow >= 0xD800 && wcLow <= 0xDBFF) 
				{				
					m_bHigh = true;
				}
				else
				{
					unsigned long ulSingleItem = 1;
					unsigned int* puint = reinterpret_cast< unsigned int * >( m_SinkBuffer.WriteRequest( ulSingleItem ) );
					*puint = wcLow;
					m_SinkBuffer.WriteAcknowledge( ulSingleItem );
					unsigned long ulCodePoints = 0;
					m_SourceProxy.GetSink()->Write( ulCodePoints, 1 );
				}
			}			
		}while( ulUnitsWritten < ulUnitsToWrite );

		GetSource()->GetBuffer()->ReadAcknowledge( ulUnitsWritten );

		return ulUnitsWritten > 0 ? true : false;
	}
}

