//BfConnectionPool.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_CONNECTIONPOOL_H_3
#define BLUEFOOT_CONNECTIONPOOL_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "BfConnection.h"
#include "CodeQOR/DataStructures/TLinkedList.h"
//--------------------------------------------------------------------------------
namespace nsBluefoot
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CConnectionPool
	{
	public:

		typedef nsCodeQOR::CTCRef< CConnectionPool > refType;

		friend class refType;

		//--------------------------------------------------------------------------------
		virtual void SetPoolTargetSize( unsigned int uiSize )
		{
			m_uiCacheSize = uiSize;
		}

		virtual CPlug::refPlugType Get( void ) = 0;
		virtual void Release( CPlug* pConnection ) = 0;

		//--------------------------------------------------------------------------------
		refType Ref( void )
		{
			refType ref( this );
			return ref;
		}

	protected:

		//--------------------------------------------------------------------------------
		CConnectionPool()
		{
			m_ulPoolRefCount = 0;
			m_uiCacheSize = 1;
		}

		//--------------------------------------------------------------------------------
		virtual ~CConnectionPool()
		{
		}

		//--------------------------------------------------------------------------------
		void AddRef( void )
		{
			m_ulPoolRefCount++;
		}

		//--------------------------------------------------------------------------------
		void Release( void )
		{
			if( --m_ulPoolRefCount <= 0 )
			{
				delete this;
			}
		}

		unsigned long m_ulPoolRefCount;
		unsigned int m_uiCacheSize;
	};

	//--------------------------------------------------------------------------------
	template< class TConnection >
	class CTConnectionPool : public CConnectionPool
	{

	public:

		//--------------------------------------------------------------------------------
		static refType CreatePool( unsigned int uiSize = 1 )
		{
			CTConnectionPool* pPool = new CTConnectionPool< TConnection >();
			pPool->SetPoolTargetSize( uiSize );
			refType ref( pPool );
			return ref;
		}

		//--------------------------------------------------------------------------------
		TConnection* Create( void )
		{
			m_ulPoolRefCount++;
			return new TConnection( this );
		}

		//--------------------------------------------------------------------------------
		virtual CPlug::refPlugType Get( void )
		{
			TConnection* pConnection = 0;
			if( m_FreeList.GetCount() > 0 )
			{
				pConnection = m_FreeList.Dock();
			}
			else if( m_uiInUse < m_uiCacheSize )
			{
				pConnection = Create();
			}

			m_uiInUse++;

			CPlug::refPlugType ref( pConnection );
			return ref;
		}

		//--------------------------------------------------------------------------------
		virtual void Release( CPlug* pConnector )
		{
			TConnection* pConnection = dynamic_cast< TConnection* >( pConnector );
			if( pConnection )
			{
				if( m_FreeList.GetCount() + m_uiInUse > m_uiCacheSize )
				{
					Dispose( pConnection );
				}
				else
				{
					m_FreeList.Insert( 1, pConnection );
				}
				m_uiInUse--;
			}
		}

		//--------------------------------------------------------------------------------
		virtual void Dispose( TConnection* pConnection )
		{
			m_ulPoolRefCount--;
			delete pConnection;
		}


	protected:

		nsCodeQOR::CTLinkedList< TConnection > m_FreeList;
		unsigned int m_uiInUse;

	private:

		friend class nsCodeQOR::CTCRef< CConnectionPool >;

		//--------------------------------------------------------------------------------
		CTConnectionPool() : CConnectionPool()
		{			
			m_uiInUse = 0;
		}

		//--------------------------------------------------------------------------------
		virtual ~CTConnectionPool()
		{
		}

	};

}//nsBluefoot

#endif//BLUEFOOT_CONNECTIONPOOL_H_3
