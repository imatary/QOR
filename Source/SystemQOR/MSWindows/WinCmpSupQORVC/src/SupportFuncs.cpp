//SupportFuncs.cpp

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"
#include "../Source/SystemQOR/MSWindows/WinCmpSupQORVC/include/SupportFuncs.h"
#include <stdlib.h>
#include <new>
#include "CodeQOR/Modules/LoadableModuleBase.h"

nsCodeQOR::CLibraryBase WindowsCompilerSupportLibrary( "Windows Compiler support library for Microsoft Visual C++", false );

//------------------------------------------------------------------------------
CSupportFuncs::CSupportFuncs()
{
}

//------------------------------------------------------------------------------
CSupportFuncs::~CSupportFuncs()
{
}

//------------------------------------------------------------------------------
void __QCMP_CALLCON operator delete (void* pVoid) __QCMP_THROW
{
	free( pVoid );
}
/*
//------------------------------------------------------------------------------
void* __cdecl operator new (size_t Size) __QCMP_THROW
{
	return malloc( Size );
}
*/

#if ( __QCMP_COMPILER == __QCMP_MSVC && _MSC_VER >= 1900 )
//------------------------------------------------------------------------------
//void __cdecl operator delete( void* ptr, unsigned int )
//{
//	::operator delete( ptr );
//}

//------------------------------------------------------------------------------
void __cdecl operator delete( void* ptr, unsigned __int64 )
{
	::operator delete( ptr );
}

//------------------------------------------------------------------------------
//void __cdecl operator delete[ ]( void* ptr, unsigned int )
//{
//	::operator delete[ ]( ptr );
//}

//------------------------------------------------------------------------------
void __cdecl operator delete[ ]( void* ptr, unsigned __int64 )
{
	::operator delete( ptr );
}

//------------------------------------------------------------------------------
void operator delete[ ]( void* ptr ) __QCMP_THROW
{
	::operator delete( ptr );
}
#endif

//------------------------------------------------------------------------------
void* __QCMP_CALLCON operator new( std::size_t size )
/*
#if !__has_feature(cxx_noexcept)
throw(std::bad_alloc)
#endif
*/
{
	if (size == 0)
	size = 1;
	void* p;
	while ((p = ::malloc(size)) == 0)
	{
		// If malloc fails and there is a new_handler,
		// call it to try free up memory.
		std::new_handler nh = std::get_new_handler();
		if (nh)
			nh();
		else
#ifndef _LIBCPP_NO_EXCEPTIONS
			throw std::bad_alloc();
#else
			break;
#endif
	}
	return p;
}

//--------------------------------------------------------------------------------
extern "C" int __cdecl _purecall()
{
#pragma TODO ( ": Report the purecall error here" )
	abort();
	return 0;
}

#if ( _MSC_VER >= 1900 )

//--------------------------------------------------------------------------------
void __cdecl _Init_thread_header( int *pOnce )
{
	pOnce;
}

//--------------------------------------------------------------------------------
void __cdecl _Init_thread_footer( int *pOnce )
{
	pOnce;
}

//--------------------------------------------------------------------------------
void __cdecl _Init_thread_abort( int *pOnce )
{
	pOnce;
}

#endif//( _MSC_VER >= 1900 )

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
int _cdecl _IsNonwritableInCurrentImage( unsigned char* pTarget )
{
	/*
	int v2; // eax@2
	int result = 0; // eax@3
	unsigned int v4; // [sp-10h] [bp-28h]@1
	unsigned int *v5; // [sp+0h] [bp-18h]@1
	int v6; // [sp+8h] [bp-10h]@1
	int(__cdecl *v7)(int, int, int, int); // [sp+Ch] [bp-Ch]@1
	unsigned int v8; // [sp+10h] [bp-8h]@1
	int v9; // [sp+14h] [bp-4h]@1
	int v10; // [sp+18h] [bp+0h]@1

	v7 = except_handler4;
	v6 = a1;
	v8 = _security_cookie ^ (unsigned int)&unk_FB2228;
	v4 = (unsigned int)&v10 ^ _security_cookie;
	v5 = &v4;
	v9 = 0;
	if (ValidateImageBase(16449536) && (v2 = FindPESection(16449536, a2 - 16449536)) != 0)
	{
	result = ~(unsigned __int8)(*(_DWORD *)(v2 + 36) >> 31) & 1;
	v9 = -2;
	}
	else
	{
	result = 0;
	}
	*/
	return 0;
}

__QCMP_ENDLINKAGE_C
