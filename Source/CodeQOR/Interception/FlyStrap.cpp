//FlyStrap.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/Interception/FlyStrap.h"
#include "CodeQOR/Traits/Policy.h"
#include "CodeQOR/Interception/CallInterceptor.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	__QOR_IMPLEMENT_OCLASS_GUID( CFlyStrap, 0xf1050840, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )

	//--------------------------------------------------------------------------------
	CFlyStrap::CFlyStrap() : CFlyStrapBase()
	{
	}

	//--------------------------------------------------------------------------------
	CFlyStrap::CFlyStrap( CFlyStrapBase* pJoinPoint ) : CFlyStrapBase()
	{
		if( pJoinPoint )
		{
			pJoinPoint->StrapOn( this );
		}
	}

	//--------------------------------------------------------------------------------
	CFlyStrap::~CFlyStrap()
	{
	}

	//--------------------------------------------------------------------------------
	bool CFlyStrap::CallPre( CCallContextBase* pCall, CFunctionContextBase* pFunction )
	{
		bool bResult = ( PreCondition( pCall, pFunction ) && Pre( pCall, pFunction ) );
		CFlyStrap* pNext = Next( (CFlyStrap*)(0) );
		if( pNext != 0 )
		{
			bResult = pNext->CallPre( pCall, pFunction );
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFlyStrap::CallOnReturnAssignment( CCallContextBase* pCall )
	{
		CFlyStrap* pNext = Next( (CFlyStrap*)(0) );
		if( pNext != 0 )
		{
			pNext->CallOnReturnAssignment( pCall );
		}
		return ( OnAssignmentCondition( pCall ) && OnReturnAssignment( pCall ) );
	}

	//--------------------------------------------------------------------------------
	bool CFlyStrap::CallPost( CCallContextBase* pCall )
	{
		CFlyStrap* pNext = Next( (CFlyStrap*)(0) );
		if( pNext != 0 )
		{
			pNext->CallPost( pCall );
		}
		return ( PostCondition( pCall ) && Post( pCall ) );
	}

	//--------------------------------------------------------------------------------
	bool CFlyStrap::Pre( CCallContextBase* pCall, CFunctionContextBase* pFunction )
	{
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CFlyStrap::Post( CCallContextBase* pCall )
	{
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CFlyStrap::OnReturnAssignment( CCallContextBase* pCall )
	{
		return true;
	}

	//--------------------------------------------------------------------------------
	bool CFlyStrap::PreCondition( CCallContextBase* pCall, CFunctionContextBase* pFunction )
	{
		return false;
	}

	//--------------------------------------------------------------------------------
	bool CFlyStrap::OnAssignmentCondition( CCallContextBase* pCall )
	{
		return false;
	}

	//--------------------------------------------------------------------------------
	bool CFlyStrap::PostCondition( CCallContextBase* pCall )
	{
		return false;
	}

}//nsCodeQOR
