//DComp.cpp

// Copyright Querysoft Limited 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Direct Composition API

#include "WinQAPI/WinQAPI.h"
#include "SystemQOR.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/DComp.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ReturnCheck.h"

#if (NTDDI_VERSION >= NTDDI_WIN8)

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{

	//--------------------------------------------------------------------------------
	long CDComp::AttachMouseDragToHwnd( IDCompositionVisual* visual, HWND hwnd, BOOL enable )
	{
		_WINQ_FCONTEXT("CDComp::AttachMouseDragToHwnd");
		long hResult = 0;
		_WINQ_USESAPI(DCompositionAttachMouseDragToHwnd);
		hResult = Call< long, IDCompositionVisual*, HWND, BOOL >( pFunc, visual, hwnd, enable );
		return hResult;
	}

	
	//--------------------------------------------------------------------------------
	HRESULT CDComp::AttachMouseWheelToHwnd(IDCompositionVisual* visual, HWND hwnd, BOOL enable)
	{
		_WINQ_FCONTEXT("CDComp::AttachMouseWheelToHwnd");
		long hResult = 0;
		_WINQ_USESAPI(DCompositionAttachMouseWheelToHwnd);
		hResult = Call< long, IDCompositionVisual*, HWND, BOOL >(pFunc, visual, hwnd, enable);
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CDComp::CreateDevice(IDXGIDevice* dxgiDevice, REFIID iid, void** dcompositionDevice)
	{
		_WINQ_FCONTEXT("CDComp::CreateDevice");
		long hResult = 0;
		_WINQ_USESAPI(DCompositionCreateDevice);
		hResult = Call< long, IDXGIDevice*, REFIID, void** >(pFunc, dxgiDevice, iid, dcompositionDevice);
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CDComp::CreateDevice2(IUnknown* renderingDevice, REFIID iid, void** dcompositionDevice)
	{
		_WINQ_FCONTEXT("CDComp::CreateDevice2");
		long hResult = 0;
		_WINQ_USESAPI(DCompositionCreateDevice2);
		hResult = Call< long, IUnknown*, REFIID, void** >(pFunc, renderingDevice, iid, dcompositionDevice);
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CDComp::CreateDevice3(IUnknown* renderingDevice, REFIID iid, void** dcompositionDevice)
	{
		_WINQ_FCONTEXT("CDComp::CreateDevice3");
		long hResult = 0;
		_WINQ_USESAPI(DCompositionCreateDevice3);
		hResult = Call< long, IUnknown*, REFIID, void** >( pFunc, renderingDevice, iid, dcompositionDevice );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CDComp::CreateSurfaceHandle(DWORD desiredAccess, SECURITY_ATTRIBUTES* securityAttributes, HANDLE* surfaceHandle)
	{
		_WINQ_FCONTEXT("CDComp::CreateSurfaceHandle");
		long hResult = 0;
		_WINQ_USESAPI(DCompositionCreateSurfaceHandle);
		hResult = Call< long, DWORD, SECURITY_ATTRIBUTES*, HANDLE* >( pFunc, desiredAccess, securityAttributes, surfaceHandle );
		return hResult;
	}

	//--------------------------------------------------------------------------------
	HRESULT CDComp::GetFrameStatistics(DCOMPOSITION_FRAME_STATISTICS* statistics, D3D_FEATURE_LEVEL* minSafeFeaturelLevel, D3D_FEATURE_LEVEL* maxHardwareFeaturelLevel)
	{
		_WINQ_FCONTEXT("CDComp::GetFrameStatistics");
		long hResult = 0;
		_WINQ_USESAPI(DCompositionGetFrameStatistics);
		hResult = Call< long, DCOMPOSITION_FRAME_STATISTICS*, D3D_FEATURE_LEVEL*, D3D_FEATURE_LEVEL* >(pFunc, statistics, minSafeFeaturelLevel, maxHardwareFeaturelLevel);
		return hResult;
	}

}//nsWinQAPI

#endif//(NTDDI_VERSION >= NTDDI_WIN8)
