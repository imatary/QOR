//WinQLBattery.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Battery Device

#ifndef WINQL_DEVICE_BATTERY_H_3
#define WINQL_DEVICE_BATTERY_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
#include "WinQL/System/Devices/WinQLIODevice.h"

__QOR_DECLARE_REF(nsWin32, __WINQL, CBattery, CTExtRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CBattery : public CDeviceInterface
	{
	public:

		__QOR_DECLARE_REF_TYPE(CBattery);
		__QOR_DECLARE_OCLASS_ID( CBattery );

		static nsCodeQOR::CTExternalRegEntry< CBattery > RegEntry;

		__QCMP_STATIC_CONSTANT( unsigned long, File_Device_Battery = 0x00000029 );

		//--------------------------------------------------------------------------------
		enum eCapabilities
		{
			System_Battery			 = 0x80000000,
			Capacity_Relative		 = 0x40000000,
			Is_Short_Tem			 = 0x20000000,
			Set_Charge_Supported	 = 0x00000001,
			Set_Discharge_Supported	 = 0x00000002,
		};

		//--------------------------------------------------------------------------------
		enum eBatteryFunctions
		{
			Query_Tag			 = 0x10,
			Query_Information	 = 0x11,
			Query_Status		 = 0x13,
		};

		//--------------------------------------------------------------------------------
		enum eBatteryPowerStatus
		{
			PowerStatus_On_Line				 = 0x00000001,
			PowerStatus_Discharging			 = 0x00000002,
			PowerStatus_Charging			 = 0x00000004,
			PowerStatus_Critical			 = 0x00000008,
		};

		//--------------------------------------------------------------------------------
		struct Battery_Information
		{
			unsigned long	Capabilities;
			unsigned char	Technology;
			unsigned char	Reserved[3];
			unsigned char	Chemistry[4];
			unsigned long	DesignedCapacity;
			unsigned long	FullChargedCapacity;
			unsigned long	DefaultAlert1;
			unsigned long	DefaultAlert2;
			unsigned long	CriticalBias;
			unsigned long	CycleCount;
		};

		//--------------------------------------------------------------------------------
		enum eBattery_Query_Information_Level
		{
			BatteryInformation,
			BatteryGranularityInformation,
			BatteryTemperature,
			BatteryEstimatedTime,
			BatteryDeviceName,
			BatteryManufactureDate,
			BatteryManufactureName,
			BatteryUniqueID,
			BatterySerialNumber
		};

		//--------------------------------------------------------------------------------
		struct Battery_Query_Information
		{
			unsigned long						BatteryTag;
			eBattery_Query_Information_Level	InformationLevel;
			long								AtRate;
		};

		//--------------------------------------------------------------------------------
		struct Battery_Wait_Status
		{
			unsigned long	BatteryTag;
			unsigned long	Timeout;
			unsigned long	PowerState;
			unsigned long	LowCapacity;
			unsigned long	HighCapacity;
		};

		//--------------------------------------------------------------------------------
		struct Battery_Status
		{
			unsigned long	PowerState;
			unsigned long	Capacity;
			unsigned long	Voltage;
			long			Rate;
		};

		//--------------------------------------------------------------------------------
		struct Battery_Reporting_Scale
		{
			unsigned long	Granularity;
    		unsigned long	Capacity;
		};

		//--------------------------------------------------------------------------------
		struct Battery_Manufacture_Date
		{
			unsigned char	Day;
			unsigned char	Month;
			unsigned short	Year;
		};

		CBattery();
		CBattery( unsigned long ulBatteryIndex );
		CBattery( const CBattery& src );
		CBattery& operator = ( const CBattery& src );
		virtual ~CBattery();

		bool IsPresent( void );
		unsigned long GetTag( void );
		bool IsSystemBattery( void );
		bool IsCapacityRelative( void );
		bool IsShortTerm( void );
		bool IsSetChargeSupported( void );
		bool IsSetDischargeSupported( void );
		unsigned long GetPowerState( void );
		unsigned long GetCapacity( void );
		unsigned long GetVoltage( void );
		long GetRate( void );
		bool IsOnLine( void );
		bool IsDischarging( void );
		bool IsCharging( void );
		bool IsCritical( void );
		double GetTemperatureDegreesC( void );
		CWString GetDeviceName( void );
		CTString GetManufactureDate( void );
		CWString GetManufacturerName( void );
		CWString GetSerialNumber( void );
		unsigned long EstimateTimeInSeconds( unsigned long ulRate );

		void OnTagChange( void );

	protected:

		bool m_bTagAcquired;
		void InternalGetTag( void );

		bool m_bAcquiredInfo;
		void InternalGetInfo( void );

		void InternalGetStatus( void );

		unsigned char m_ucGranularityCount;
		void InternalGetGranularity( void );

		void InternalGetTemperature( void );

		Battery_Query_Information m_BQI;
		Battery_Information m_BI;
		Battery_Status m_Status;
		Battery_Reporting_Scale m_Scales[ 4 ];
		//CIODeviceFile* m_pIODevice;
		unsigned long m_ulTemperature;

	private:
		CIODeviceFile::ref_type m_Session;
		bool m_bPresent;
	};

}//nsWin32

#endif//WINQL_DEVICE_BATTERY_H_3
