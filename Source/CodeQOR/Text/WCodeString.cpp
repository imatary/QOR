//WCodeString.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"
#include <stdlib.h>
#include <wchar.h>
#include <string.h>
#include <new>
#include "CodeQOR/Text/WCodeString.h"
#include "CodeQOR/DataStructures/TLRef.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/Text/Char16.h"
#include "AppocritaQOR/Event.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	//Construct from a wide string embedded in source code
    CWCodeString::CWCodeString( const wchar_t* cpString ) : m_pOrg( cpString )
    {
		Translate();
    }

    //--------------------------------------------------------------------------------
    CWCodeString& CWCodeString::operator = ( const CWCodeString& Src )
    {
        m_pOrg = Src.m_pOrg;
		Translate();
        return *this;
    }

    //--------------------------------------------------------------------------------
    CWCodeString::operator const wchar_t*() const
    {
        return const_cast< const wchar_t* >( m_pTrans );
    }

    //--------------------------------------------------------------------------------
    const wchar_t* CWCodeString::c_str() const
    {
        return const_cast< const wchar_t* >( m_pTrans );
    }

    //--------------------------------------------------------------------------------
    CTLRef< CChar16 > CWCodeString::str() const
    {
		return CTLRef< CChar16 >( reinterpret_cast< CChar16* >( m_pTrans ), false );
    }

	//--------------------------------------------------------------------------------
	void CWCodeString::Translate( void )
	{
		//TODO: m_pTrans will need to be allocated from String memory so that it can be safely cast to CChar16*
		m_pTrans = const_cast< wchar_t* >( m_pOrg );
	}

}//nsCodeQOR

