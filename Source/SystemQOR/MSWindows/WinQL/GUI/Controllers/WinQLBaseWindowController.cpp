//WinQLBaseWindowController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/BaseWindowController.h"
#include "WinQL/GUI/Views/WindowView.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP
#include "WinQL/GUI/MessageHandler.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CBaseWindowController );

	//--------------------------------------------------------------------------------
	CBaseWindowController::CBaseWindowController( nsMammut::CModel* pModel, nsQOR::CController::ref_type Parent ) : nsQOR::CController(), m_pNextHookController( 0 )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::CBaseWindowController" );
		SetParent( Parent );
		SetModel( pModel );
	}

	//--------------------------------------------------------------------------------
	CBaseWindowController::~CBaseWindowController()
	{
		_WINQ_FCONTEXT( "CBaseWindowController::~CBaseWindowController" );
	}

	//--------------------------------------------------------------------------------
	void CBaseWindowController::SetModel( nsMammut::CModel* pModelItem )
	{
		nsQOR::CController::SetModel( pModelItem );
		Style().SetModel( pModelItem );
		User().SetModel( pModelItem );
		BaseText().SetModel( pModelItem );
		Owner().SetModel( pModelItem );
		Timer().SetModel( pModelItem );
		DeviceChange().SetModel( pModelItem );
	}

	//--------------------------------------------------------------------------------
	CBaseWindowController* CBaseWindowController::HookController( CBaseWindowController* pController )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::HookController" );

		CBaseWindowController* pResult = 0;
		if( m_pNextHookController == 0 )
		{
			m_pNextHookController = pController;
		}
		else
		{
			pResult = m_pNextHookController->HookController( pController );
		}
		return pResult;
	}

	//--------------------------------------------------------------------------------
	bool CBaseWindowController::ProcessHook( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::ProcessHook" );
		bool bProcessed = false;
		if( m_pNextHookController != 0 )
		{
			bProcessed = m_pNextHookController->ProcessMessage( Window, lResult, uMsg, wParam, lParam );
		}
		return bProcessed;
	}

	//--------------------------------------------------------------------------------
	bool CBaseWindowController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::ProcessMessage" );
		bool bProcessed = ProcessHook( Window, lResult, uMsg, wParam, lParam );

		//Pass the message through filters until it's processed
		bProcessed = 
			Timer().ProcessMessage( Window, lResult, uMsg, wParam, lParam ) ||
			Owner().ProcessMessage( Window, lResult, uMsg, wParam, lParam ) ||
			Style().ProcessMessage( Window, lResult, uMsg, wParam, lParam ) ||
			BaseText().ProcessMessage( Window, lResult, uMsg, wParam, lParam ) ||
			User().ProcessMessage( Window, lResult, uMsg, wParam, lParam ) ||
			DeviceChange().ProcessMessage( Window, lResult, uMsg, wParam, lParam ) ||
			CBaseWindowController::HandleMessage( Window, lResult, uMsg, wParam, lParam );

		return bProcessed;
	}

	//--------------------------------------------------------------------------------
	bool CBaseWindowController::HandleMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::HandleMessage" );
		bool bHandled = false;

		switch ( uMsg )
		{
		case COSWindow::wmNull:
			//Deliberately ignore WM_NULL as per spec
			bHandled = true;
			break;

		case COSWindow::wmCreate:
			{
				CreateStruct* pCreateStruct = reinterpret_cast< CreateStruct* >( lParam );					
				lResult = OnCreate( pCreateStruct );
				bHandled = true;
			}
			break;

		case COSWindow::wmDestroy:
			{
				lResult = OnDestroy( Window, uMsg, wParam, lParam );					
				bHandled = true;
			}
			break;

		case COSWindow::wmActivate:
			{					
				lResult = OnActivate( Window, uMsg, wParam, lParam );					
				bHandled = true;
			}
			break;

		case COSWindow::wmMouseActivate:
			{
				lResult = OnMouseActivate( Window, uMsg, wParam, lParam );
				bHandled = true;
			}
			break;

		case COSWindow::wmEnable:
			{
				bool bEnable = wParam ? true : false;
				OnEnable( Window, bEnable );
				lResult = 0;
				bHandled = true;
			}
			break;

		case COSWindow::wmClose:
			{
				OnClose( Window );
				lResult = 0;
				bHandled = true;
			}
			break;

		case 0x0017/*WM_SYSTEMERROR*/:
			{
				OnSystemError( Window, lResult, uMsg, wParam, lParam );
				lResult = 0;
				bHandled = true;
			}
			break;

		case COSWindow::wmSysCommand:
			{
				OnSysCommand( Window, uMsg, wParam, lParam );
				lResult = 0;
				bHandled = true;
			}
			break;

		};

		return bHandled;
	}

	//--------------------------------------------------------------------------------
	long CBaseWindowController::OnCreate( CreateStruct* pCreateStruct )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::OnCreate" );
		return View().OnCreate( pCreateStruct );
	}

	//--------------------------------------------------------------------------------
	long CBaseWindowController::OnDestroy( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::OnDestroy" );
		return View().OnDestroy( Window, uMsg, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	long CBaseWindowController::OnActivate( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::OnActivate" );
		return View().OnActivate( Window, uMsg, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	long CBaseWindowController::OnMouseActivate( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::OnMouseActivate" );
		return View().OnMouseActivate( Window, uMsg, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CBaseWindowController::OnEnable( COSWindow& Window, bool bEnable )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::OnEnable" );
		View().Enable( bEnable ? true : false );
	}

	//--------------------------------------------------------------------------------
	void CBaseWindowController::OnClose( COSWindow& Window )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::OnClose" );
		View().OnClose( Window );
	}

	//--------------------------------------------------------------------------------
	void CBaseWindowController::OnSystemError( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::OnSystemError" );
		View().OnSystemError( Window, lResult, uMsg, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CBaseWindowController::OnSysCommand( COSWindow& Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CBaseWindowController::OnSysCommand" );
		View().OnSysCommand( Window, uMsg, wParam, lParam );			
	}

}//nsWin32
