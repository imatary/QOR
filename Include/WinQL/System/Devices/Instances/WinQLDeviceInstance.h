//WinQLDeviceInstance.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Device Instance

#ifndef WINQL_DEVICEINSTANCE_H_3
#define WINQL_DEVICEINSTANCE_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/DataStructures/TRef.h"
#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/IO.h"
#include "WinQL/System/Devices/WinQLDevice.h"
#include "WinQL/System/Devices/WinQLDeviceHandle.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "MammutQOR/Model.h"
#include "MammutQOR/Models/VectorModel.h"
#include "MammutQOR/Models/MapModel.h"
#include "MammutQOR/Model/MPropertySet.h"

__QOR_DECLARE_REF(nsWin32, __WINQL, CDeviceInstance, CTRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CDeviceInterface;
	class __QOR_INTERFACE( __WINQL ) CDeviceInfoSet;
	class __QOR_INTERFACE( __WINQL ) CDeviceList;
	//class __QOR_INTERFACE( __WINQL ) CDeviceDetails;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CDeviceInstance
	{
	public:

		__QOR_DECLARE_REF_TYPE(CDeviceInstance);

		static const DevicePropertyKey DevPKey_Name;
		static const DevicePropertyKey DevPKey_DeviceDesc;             
		static const DevicePropertyKey DevPKey_HardwareIds;            
		static const DevicePropertyKey DevPKey_CompatibleIds;          
		static const DevicePropertyKey DevPKey_Service;                
		static const DevicePropertyKey DevPKey_Class;                  
		static const DevicePropertyKey DevPKey_ClassGuid;              
		static const DevicePropertyKey DevPKey_Driver;                 
		static const DevicePropertyKey DevPKey_ConfigFlags;            
		static const DevicePropertyKey DevPKey_Manufacturer;           
		static const DevicePropertyKey DevPKey_FriendlyName;           
		static const DevicePropertyKey DevPKey_LocationInfo;           
		static const DevicePropertyKey DevPKey_PDOName;                
		static const DevicePropertyKey DevPKey_Capabilities;           
		static const DevicePropertyKey DevPKey_UINumber;               
		static const DevicePropertyKey DevPKey_UpperFilters;           
		static const DevicePropertyKey DevPKey_LowerFilters;           
		static const DevicePropertyKey DevPKey_BusTypeGuid;            
		static const DevicePropertyKey DevPKey_LegacyBusType;          
		static const DevicePropertyKey DevPKey_BusNumber;              
		static const DevicePropertyKey DevPKey_EnumeratorName;         
		static const DevicePropertyKey DevPKey_Security;               
		static const DevicePropertyKey DevPKey_SecuritySDS;            
		static const DevicePropertyKey DevPKey_DevType;                
		static const DevicePropertyKey DevPKey_Exclusive;              
		static const DevicePropertyKey DevPKey_Characteristics;        
		static const DevicePropertyKey DevPKey_Address;                
		static const DevicePropertyKey DevPKey_UINumberDescFormat;     
		static const DevicePropertyKey DevPKey_PowerData;              
		static const DevicePropertyKey DevPKey_RemovalPolicy;          
		static const DevicePropertyKey DevPKey_RemovalPolicyDefault;   
		static const DevicePropertyKey DevPKey_RemovalPolicyOverride;  
		static const DevicePropertyKey DevPKey_InstallState;           
		static const DevicePropertyKey DevPKey_LocationPaths;          
		static const DevicePropertyKey DevPKey_BaseContainerId;        
		static const DevicePropertyKey DevPKey_DeviceParent;

		__QOR_DECLARE_OCLASS_ID( CDeviceInstance );

		CDeviceInstance( CTString& strID );
		CDeviceInstance( CTString& strID, SP_DevInfo_Data& Info );
		CDeviceInstance( CTString& strID, CDeviceInfoSet* pContainer, SP_DevInfo_Data& Info, unsigned long ulIndex );
		CDeviceInstance( const CDeviceInstance& src );
		CDeviceInstance& operator = ( const CDeviceInstance& src );
		virtual ~CDeviceInstance();

		void AttachInfoSet( CDeviceInfoSet* pContainer, unsigned long ulIndex );

		CTString DeviceID( void );
		SP_DevInfo_Data Info( void );
		std::vector< CDeviceInterface::ref_type >& Interfaces( void );
		CWString GetDisplayName( void );
		CWString GetDescription( void );
		CWString GetParent( void );
		nsCodeQOR::CTArray< CWString > GetHardwareIDs( void );
		nsCodeQOR::CTArray< CWString > GetCompatibleIDs( void );
		CWString GetService( void );
		CWString GetClass( void );
		nsCodeQOR::__mxGUID GetClassGUID( void );
		CWString GetDriver( void );
		unsigned long GetConfigFlags( void );
		CWString GetManufacturer( void );
		CWString GetFriendlyName( CWStringRef strDefault = CWStringRef( 0 ) );
		CWString GetLocation( void );
		CWString GetPDOName( void );
		nsCodeQOR::CTLRef< CM_Power_Data > GetPowerData( void );
		CString< byte > GetRegistryProperty( unsigned long ulPropertyIndex );
		CString< byte > GetProperty( unsigned long ulPropertyIndex );
		unsigned long FindIndex( const DevicePropertyKey* pDevKey );

		nsCodeQOR::CSTMember< nsCodeQOR::CTArray< DevicePropertyKey, CWinQLPolicy > > Keys;

	protected:

		unsigned long GetUInt32Property( unsigned long ulPropertyIndex );
		nsCodeQOR::__mxGUID GetGUIDProperty( unsigned long ulPropertyIndex );
		CWString GetStringProperty( unsigned long ulPropertyIndex );
		CWString GetStringProperty( const DevicePropertyKey* pDevKey );
		nsCodeQOR::CTArray< CWString > GetStringArrayProperty( const DevicePropertyKey* pDevKey );

		SP_DevInfo_Data m_Info;
		CDeviceInfoSet* m_pContainer;
		//CDeviceDetails* m_pDetails;
		unsigned long m_ulIndex;
		CTString m_strID;
		
		std::vector< CDeviceInterface::ref_type > m_VecInterfaces;
		//nsCodeQOR::CTArray< CDeviceInterface*, CWinQLPolicy > m_ArrayInterfaces;

	private:

		void SetupPropertyKeys(void);

		CDeviceInstance();					//not to be implemented
		nsWinQAPI::CSetupAPI& m_Library;
	};

}//nsWin32

#endif//WINQL_DEVICEINSTANCE_H_3
