//STMember.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A configurable member pointer template

#ifndef CODEQOR_INST_STMEMBER_H_1
#define CODEQOR_INST_STMEMBER_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Traits/MemoryTraits.h"
#include "CodeQOR/MemoryManagement/DefaultAllocator.h"
#include "CodeQOR/DataStructures/TLRef.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
    //--------------------------------------------------------------------------------
    //A configurable member pointer wrapper template
    //Gives a class 'construct on first use' members that can be configured at runtime
    //to use derived class instances owned elsewhere. Enables runtime member replacement
    //with a more specialized type.
    //All allocation and deletion is deferred from this class.
    template< class Tbase >
    class CSTMember
    {
    public:

        //--------------------------------------------------------------------------------
        CSTMember() : m_pMember( 0 ), m_bOwnsPtr( true )
        {
        }

        //--------------------------------------------------------------------------------
        virtual ~CSTMember()
        {
            Free();
        }

        //--------------------------------------------------------------------------------
        template< typename T > T& operator()()
#if		__QCMP_SUPPORTS( __QCMP_FEATURE_TEMPLATE_TEMPLATE_TEMPLATES ) 
			;
#else
		{
            if( m_pMember == 0 )
            {
                m_pMember = Allocate();
            }

            return (*( dynamic_cast< T* >( m_pMember ) ) );
        }
#endif

        Tbase& operator()();

		//--------------------------------------------------------------------------------
		Tbase* Base( void ) const
		{
			return m_pMember;
		}

		//--------------------------------------------------------------------------------
		template< class TDerived >
		TDerived* As(void)
		{
			return dynamic_cast<TDerived*>(m_pMember);
		}

        //--------------------------------------------------------------------------------
        bool Configure( Tbase* pConf, bool bConferOwnership = false )
        {
            bool bResult = false;
            if( m_pMember == 0 && pConf != 0 )
            {
                m_pMember = pConf;
                bResult = true;
                m_bOwnsPtr = bConferOwnership;
            }
            else if( m_pMember != 0 && pConf == 0 && m_bOwnsPtr == false )
            {
                m_pMember = 0;
                bResult = true;
            }
            return bResult;
        }

        //--------------------------------------------------------------------------------
        bool Configure( CTLRef< Tbase > Conf )
        {
            bool bResult = false;
			if( m_pMember == 0 && !Conf.IsNull() )
            {
				m_bOwnsPtr = Conf.IsOwner();
				m_pMember = Conf.Detach();
                bResult = true;                
            }
			else if( m_pMember != 0 && Conf.IsNull() && m_bOwnsPtr == false )
            {
                m_pMember = 0;
                bResult = true;
            }
            return bResult;
        }

		//--------------------------------------------------------------------------------
		bool IsNull()
		{
			return m_pMember == 0 ? true : false;
		}

    protected:

        //--------------------------------------------------------------------------------
        virtual Tbase* Allocate()
        {
            m_bOwnsPtr = true;
            Tbase* pNew = mem_traits< Tbase >::CTAllocator::Allocate();
            return pNew;
        }

        //--------------------------------------------------------------------------------
        virtual void Free()
        {
            if( m_bOwnsPtr )
            {
                mem_traits< Tbase >::CTAllocator::Free( m_pMember );
            }
            m_pMember = 0;
        }

        Tbase* m_pMember;
        bool m_bOwnsPtr;
	};

#if		__QCMP_SUPPORTS( __QCMP_FEATURE_TEMPLATE_TEMPLATE_TEMPLATES )

    //--------------------------------------------------------------------------------
	template<typename Tbase> template < typename T > T& CSTMember<Tbase >::__QCMP_TEMPLATE_OPERATOR_SPECIFIER operator()()
    {
        if( m_pMember == 0 )
        {
            m_pMember = Allocate();
        }

        return (*( dynamic_cast< T* >( m_pMember ) ) );
    }
#endif//__QCMP_SUPPORTS( __QCMP_FEATURE_TEMPLATE_TEMPLATE_TEMPLATES )

	//--------------------------------------------------------------------------------
	template<typename Tbase> Tbase& CSTMember<Tbase >::__QCMP_TEMPLATE_OPERATOR_SPECIFIER operator()()
	{
		if( m_pMember == 0 )
		{
			m_pMember = Allocate();
		}

		return (*m_pMember);
	}

}//nsCodeQOR

#endif//CODEQOR_INST_STMEMBER_H_1
