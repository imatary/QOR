//Model.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef MAMMUTQOR_MODEL_H_3
#define MAMMUTQOR_MODEL_H_3

#include "MammutQOR.h"
#include "SystemQOR.h"
#include "CodeQOR/Macros/ClassIdentityMacros.h"
#include "CodeQOR/DataTypes/OTypes.h"
#include "CodeQOR/Observer/Observer.h"
#include "CodeQOR/DataStructures/TLRef.h"
#include "MammutQOR/Model/ModelIterator.h"

namespace nsQOR
{
	class __QOR_INTERFACE( __APPOCRITA ) CController;
}//nsAppocrita

//------------------------------------------------------------------------------
namespace nsMammut
{

    //must have an accessible distinct single type
    //must be serializable
    //can have locking
    //provide list of actions available
    //provide list of properties

    //------------------------------------------------------------------------------
    //Base class for Models
    class __QOR_INTERFACE( __MAMMUT ) CModel : public CModelItem
    {

    public:

		__QOR_DECLARE_OCLASS_ID( CModel );

		typedef unsigned long indexType;

		friend class CModelIterator< CModel >;
		typedef CModelIterator< CModel > iterator;

        CModel();
		CModel( const CModel& src );
		CModel( CModel* pContainer );
        virtual ~CModel();
		CModel& CModel::operator = ( const CModel& src );
		virtual refType Clone( void );
                    
		void SetController( nsQOR::CController* pController );
		nsQOR::CController* GetController( void ) const;

		//Provide iteration over items
        iterator begin( void ) const;
        iterator end( void ) const;
		
        //Provide potential for insertion and deletion of items
		iterator insert( refType Item );

        //Provide factories for items that can be inserted

		nsCodeQOR::CObservable< CModel > m_Observable;

		void OnChanged( refType Item );

    protected:

		nsQOR::CController* m_pController;
        //provide containment for items

	private:

		refType operator[]( unsigned long );
    };

}//nsMammut

#endif//MAMMUTQOR_MODEL_H_3
