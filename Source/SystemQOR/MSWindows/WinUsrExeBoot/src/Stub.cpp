//Stub.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Stub for starting a Windows executable
//Build with _WINDOWS defined for GUI applications, without _WINDOWS defined for Console applications
#include "../Source/SystemQOR/MSWindows/WinUsrExeBoot/include/BootStrap.h"
#include <stdlib.h>
#include <stdio.h>

//------------------------------------------------------------------------------
//NOTE: This is the entry point for all QOR Windows processes
__QCMP_LINKAGE_C int __cdecl _tMainCRTStartup( void )
{
	CBootStrap BootStrap;							//Create the Windows Bootstrap object to perform Windows process startup operations and model the lifetime of a Windows Process
	return BootStrap.Execute();						//Execute the bootstrap and hence the entire whatever
}


//------------------------------------------------------------------------------
//Hack to get Intel and GCC Compilers to insert Error handler Registration into executables
//This forces the compiler to instantiate the static registration objects for the error handler types
//MSVC does this without being provoked in this way
//This must be here rather than in Compiler QOR or elsewhere because it must be in code that is in every executable and not in any shared library. 
//This is all there is other than the application itself.

#if     ( ( __QCMP_COMPILER == __QCMP_INTEL ) || ( __QCMP_COMPILER == __QCMP_GCC ) )
#if			( __QCMP_COMPILER == __QCMP_GCC )
#				define INIT_PARAMS	((void*)(0))	//GCC additionally requires at least 1 parameter or it refuses to call the constructor, a bug in my opinion.
#else
#				define INIT_PARAMS
#endif
template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CDefaultFatalHandler > >			nsCodeQOR::CTFlyer< nsCodeQOR::CDefaultFatalHandler, nsCodeQOR::CDefaultHandler >::RegEntry INIT_PARAMS;
template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CDefaultSeriousHandler > >			nsCodeQOR::CTFlyer< nsCodeQOR::CDefaultSeriousHandler, nsCodeQOR::CDefaultHandler >::RegEntry INIT_PARAMS;
template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CDefaultContinuableHandler > >		nsCodeQOR::CTFlyer< nsCodeQOR::CDefaultContinuableHandler, nsCodeQOR::CDefaultHandler >::RegEntry INIT_PARAMS;
template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CDefaultWarningHandler > >			nsCodeQOR::CTFlyer< nsCodeQOR::CDefaultWarningHandler, nsCodeQOR::CDefaultHandler >::RegEntry INIT_PARAMS;
template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CDefaultNoteHandler > >				nsCodeQOR::CTFlyer< nsCodeQOR::CDefaultNoteHandler, nsCodeQOR::CDefaultHandler >::RegEntry INIT_PARAMS;
#				undef INIT_PARAMS
#endif//( ( __QCMP_COMPILER == __QCMP_INTEL ) || ( __QCMP_COMPILER == __QCMP_GCC ) )


//------------------------------------------------------------------------------
//The remainder is MinGW specific

#ifdef __MINGW32__

extern "C"
{

	typedef void (*func_ptr) (void);
	extern func_ptr __CTOR_LIST__[];
	extern func_ptr __DTOR_LIST__[];

	//------------------------------------------------------------------------------
	void __do_global_dtors( void )
	{
		static func_ptr *p = __DTOR_LIST__ + 1;

		//Call each destructor in the destructor list until a null pointer is encountered.
		while( *p )
		{
			( *(p) )();
			p++;
		}
	}

	//------------------------------------------------------------------------------
	void __do_global_ctors( void )
	{
		unsigned long nptrs = (unsigned long) __CTOR_LIST__[ 0 ];
		unsigned i;

		//If the first entry in the constructor list is -1 then the list is terminated with a null entry.
		//Otherwise the first entry was the number of pointers in the list.

		if( nptrs == -1 )
		{
			for( nptrs = 0; __CTOR_LIST__[ nptrs + 1 ] != 0; nptrs++ )
			{
			}
		}

		//Go through the list backwards calling constructors.

		for( i = nptrs; i >= 1; i-- )
		{
			__CTOR_LIST__[ i ] ();
		}

		//Register the destructor(s) for processing on exit.

		atexit( __do_global_dtors );
	}

	static int initialized = 0;

	//------------------------------------------------------------------------------
	void __main (void)
	{
		if( !initialized )
		{
			initialized = 1;
			__do_global_ctors();
		}
	}

}

#endif//__MINGW32__


