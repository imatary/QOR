//WinQLSafeArray.cpp

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/COM/Runtime/DataStructures/WinQLSafeArray.h"
#include "WinQL/Application/ErrorSystem/WinQLFunctionContext.h"
#include "WinQAPI/OLEAut32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CSafeArray );

	//--------------------------------------------------------------------------------
	CSafeArray::CSafeArray( unsigned short usVarType, unsigned int uiCountDims, SafeArrayBound* pBounds ) : m_Library( nsWinQAPI::COLEAut32::Instance() )
	{
		_WINQ_FCONTEXT( "CSafeArray::CSafeArray" );
		m_pArray = reinterpret_cast< SafeArray* >( m_Library.SafeArrayCreate( usVarType, uiCountDims, reinterpret_cast< ::SAFEARRAYBOUND* >( pBounds ) ) );
	}

	//--------------------------------------------------------------------------------
	CSafeArray::CSafeArray( const CSafeArray& src ) : m_Library( nsWinQAPI::COLEAut32::Instance() )
	{
		_WINQ_FCONTEXT( "CSafeArray::CSafeArray" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CSafeArray& CSafeArray::operator = ( const CSafeArray& src )
	{
		_WINQ_FCONTEXT( "CSafeArray&::operator =" );
		if( &src != this )
		{
			m_Library.SafeArrayDestroy( reinterpret_cast< ::SAFEARRAY* >( m_pArray ) );
			src.CopyTo( this );
		}

		return *this;
	}

	//--------------------------------------------------------------------------------
	CSafeArray::CSafeArray( unsigned short usVarType, unsigned int uiCountDims, SafeArrayBound* pBounds, void* pvExtra ) : m_Library( nsWinQAPI::COLEAut32::Instance() )
	{
		_WINQ_FCONTEXT( "CSafeArray::CSafeArray" );
		m_pArray = reinterpret_cast< SafeArray* >( m_Library.SafeArrayCreateEx( usVarType, uiCountDims, reinterpret_cast< ::SAFEARRAYBOUND* >( pBounds ), pvExtra ) );
	}

	//--------------------------------------------------------------------------------
	CSafeArray::CSafeArray( unsigned short usVarType, long lLBound, unsigned long ulCountElements ) : m_Library( nsWinQAPI::COLEAut32::Instance() )
	{
		_WINQ_FCONTEXT( "CSafeArray::CSafeArray" );
		m_pArray = reinterpret_cast< SafeArray* >( m_Library.SafeArrayCreateVector( usVarType, lLBound, ulCountElements ) );
	}

	//--------------------------------------------------------------------------------
	CSafeArray::CSafeArray( unsigned short usVarType, long lLBound, unsigned long ulCountElements, void* pvExtra ) : m_Library( nsWinQAPI::COLEAut32::Instance() )
	{
		_WINQ_FCONTEXT( "CSafeArray::CSafeArray" );
		m_pArray = reinterpret_cast< SafeArray* >( m_Library.SafeArrayCreateVectorEx( usVarType, lLBound, ulCountElements, pvExtra ) );
	}

	//--------------------------------------------------------------------------------
	CSafeArray::~CSafeArray()
	{
		_WINQ_FCONTEXT( "CSafeArray::~CSafeArray" );
		m_Library.SafeArrayDestroy( reinterpret_cast< ::SAFEARRAY* >( m_pArray ) );
	}

	//--------------------------------------------------------------------------------
	unsigned int CSafeArray::GetDim( void )
	{
		_WINQ_FCONTEXT( "CSafeArray::GetDim" );
		unsigned int uiResult = m_Library.SafeArrayGetDim( reinterpret_cast< ::SAFEARRAY* >( m_pArray ) );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CSafeArray::GetElemSize( void )
	{
		_WINQ_FCONTEXT( "CSafeArray::GetElemSize" );
		unsigned int uiResult = m_Library.SafeArrayGetElemsize( reinterpret_cast< ::SAFEARRAY* >( m_pArray ) );
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::GetUBound( unsigned int nDim, long* plUbound )
	{
		_WINQ_FCONTEXT( "CSafeArray::GetUBound" );
		long lResult = m_Library.SafeArrayGetUBound( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), nDim, plUbound );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::GetLBound( unsigned int nDim, long* plLbound )
	{
		_WINQ_FCONTEXT( "CSafeArray::GetLBound" );
		long lResult = m_Library.SafeArrayGetLBound( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), nDim, plLbound );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::Lock( void )
	{
		_WINQ_FCONTEXT( "CSafeArray::Lock" );
		long lResult = m_Library.SafeArrayLock( reinterpret_cast< ::SAFEARRAY* >( m_pArray ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::Unlock( void )
	{
		_WINQ_FCONTEXT( "CSafeArray::Unlock" );
		long lResult = m_Library.SafeArrayUnlock( reinterpret_cast< ::SAFEARRAY* >( m_pArray ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::AccessData( void** ppvData )
	{
		_WINQ_FCONTEXT( "CSafeArray::AccessData" );
		long lResult = m_Library.SafeArrayAccessData( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), ppvData );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::UnaccessData( void )
	{
		_WINQ_FCONTEXT( "CSafeArray::UnaccessData" );
		long lResult = m_Library.SafeArrayUnaccessData( reinterpret_cast< ::SAFEARRAY* >( m_pArray ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::GetElement( long* pIndices, void* pv )
	{
		_WINQ_FCONTEXT( "CSafeArray::GetElement" );
		long lResult = m_Library.SafeArrayGetElement( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), pIndices, pv );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::PutElement( long* pIndices, void* pv )
	{
		_WINQ_FCONTEXT( "CSafeArray::PutElement" );
		long lResult = m_Library.SafeArrayPutElement( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), pIndices, pv );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::CopyTo( CSafeArray* ppsaOut ) const
	{
		_WINQ_FCONTEXT( "CSafeArray::CopyTo" );
		long lResult = m_Library.SafeArrayCopy( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), reinterpret_cast< ::SAFEARRAY** >( &(ppsaOut->m_pArray) ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::AllocDescriptor( unsigned int uiCountDims, CSafeArray* ppsaOut )
	{
		_WINQ_FCONTEXT( "CSafeArray::AllocDescriptor" );
		long lResult = m_Library.SafeArrayAllocDescriptor( uiCountDims, reinterpret_cast< ::SAFEARRAY** >( &(ppsaOut->m_pArray) ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::AllocData( void )
	{
		_WINQ_FCONTEXT( "CSafeArray::AllocData" );
		long lResult = m_Library.SafeArrayAllocData( reinterpret_cast< ::SAFEARRAY* >( m_pArray ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::DestroyDescriptor( void )
	{
		_WINQ_FCONTEXT( "CSafeArray::DestroyDescriptor" );
		long lResult = m_Library.SafeArrayDestroyDescriptor( reinterpret_cast< ::SAFEARRAY* >( m_pArray ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::DestroyData( void )
	{
		_WINQ_FCONTEXT( "CSafeArray::DestroyData" );
		long lResult = m_Library.SafeArrayDestroyData( reinterpret_cast< ::SAFEARRAY* >( m_pArray ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::Redim( SafeArrayBound* psaBoundNew )
	{
		_WINQ_FCONTEXT( "CSafeArray::Redim" );
		long lResult = m_Library.SafeArrayRedim( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), reinterpret_cast< ::SAFEARRAYBOUND* >( psaBoundNew ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::AllocDescriptorEx( unsigned short uiVarType, unsigned int uiCountDims, CSafeArray* ppsaOut )
	{
		_WINQ_FCONTEXT( "CSafeArray::AllocDescriptorEx" );
		long lResult = m_Library.SafeArrayAllocDescriptorEx( uiVarType, uiCountDims, reinterpret_cast< ::SAFEARRAY** >( &(ppsaOut->m_pArray ) ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::GetVarType( unsigned short* puiVarType )
	{
		_WINQ_FCONTEXT( "CSafeArray::GetVarType" );
		long lResult = m_Library.SafeArrayGetVartype( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), puiVarType );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::PtrOfIndex( long* pIndices, void** ppvData )
	{
		_WINQ_FCONTEXT( "CSafeArray::PtrOfIndex" );
		long lResult = m_Library.SafeArrayPtrOfIndex( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), pIndices, ppvData );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::SetRecordInfo( IRecordInfo* prinfo )
	{
		_WINQ_FCONTEXT( "CSafeArray::SetRecordInfo" );
		long lResult = m_Library.SafeArraySetRecordInfo( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), reinterpret_cast< ::IRecordInfo* >( prinfo ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::GetRecordInfo( IRecordInfo** prinfo )
	{
		_WINQ_FCONTEXT( "CSafeArray::GetRecordInfo" );
		long lResult = m_Library.SafeArrayGetRecordInfo( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), reinterpret_cast< ::IRecordInfo** >( prinfo ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::SetIID( const GUID& guid )
	{
		_WINQ_FCONTEXT( "CSafeArray::SetIID" );
		long lResult = m_Library.SafeArraySetIID( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), reinterpret_cast< const ::GUID& >( guid ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::GetIID( nsCodeQOR::__mxGUID* pGUID )
	{
		_WINQ_FCONTEXT( "CSafeArray::GetIID" );
		long lResult = m_Library.SafeArrayGetIID( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), reinterpret_cast< ::GUID* >( pGUID ) );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CSafeArray::CopyDataTo( CSafeArray* psaTarget )
	{
		_WINQ_FCONTEXT( "CSafeArray::CopyDataTo" );
		long lResult = m_Library.SafeArrayCopyData( reinterpret_cast< ::SAFEARRAY* >( m_pArray ), reinterpret_cast< ::SAFEARRAY* >( psaTarget ) );
		return lResult;
	}

}//nsWin32
