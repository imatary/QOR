//WinQLEventLog.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/EventLogging/WinQLEventLog.h"
#include "WinQAPI/AdvAPI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CEventLogAccess );

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage:" )
	//--------------------------------------------------------------------------------
	CEventLogAccess::CEventLogAccess() : m_AdvAPI32Library( CAdvAPI32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CEventLogAccess::CEventLogAccess" );
	}
	__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CEventLogAccess::~CEventLogAccess()
	{
		_WINQ_FCONTEXT( "CEventLogAccess::~CEventLogAccess" );
		m_AdvAPI32Library.CloseEventLog( reinterpret_cast< HANDLE >( m_Handle.Use() ) );
	}

	//--------------------------------------------------------------------------------
	bool CEventLogAccess::Backup( const TCHAR* lpBackupFileName )
	{
		_WINQ_FCONTEXT( "CEventLogAccess::Backup" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.BackupEventLog( reinterpret_cast< HANDLE >( m_Handle.Use() ), lpBackupFileName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CEventLogAccess::Clear( const TCHAR* lpBackupFileName )
	{
		_WINQ_FCONTEXT( "CEventLogAccess::Clear" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.ClearEventLog( reinterpret_cast< HANDLE >( m_Handle.Use() ), lpBackupFileName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CEventLogAccess::GetInformation( unsigned long ulInfoLevel, void* lpBuffer, unsigned long cbBufSize, unsigned long* pcbBytesNeeded )
	{
		_WINQ_FCONTEXT( "CEventLogAccess::GetInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.GetEventLogInformation( reinterpret_cast< HANDLE >( m_Handle.Use() ), ulInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CEventLogAccess::GetNumberOfRecords( unsigned long* pNumberOfRecords )
	{
		_WINQ_FCONTEXT( "CEventLogAccess::GetNumberOfRecords" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.GetNumberOfEventLogRecords( reinterpret_cast< HANDLE >( m_Handle.Use() ), pNumberOfRecords ) ? true : false; 
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CEventLogAccess::GetOldestRecord( unsigned long* pOldestRecord )
	{
		_WINQ_FCONTEXT( "CEventLogAccess::GetOldestRecord" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.GetOldestEventLogRecord( reinterpret_cast< HANDLE >( m_Handle.Use() ), pOldestRecord ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CEventLogAccess::NotifyChange( void* hEvent )
	{
		_WINQ_FCONTEXT( "CEventLogAccess::NotifyChange" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.NotifyChangeEventLog( reinterpret_cast< HANDLE >( m_Handle.Use() ), reinterpret_cast< HANDLE >( hEvent ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CEventLogAccess::Read( unsigned long ulReadFlags, unsigned long ulRecordOffset, void* pBuffer, unsigned long nNumberOfBytesToRead, unsigned long* pnBytesRead, unsigned long* pnMinNumberOfBytesNeeded )
	{
		_WINQ_FCONTEXT( "CEventLogAccess::Read" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.ReadEventLog( reinterpret_cast< HANDLE >( m_Handle.Use() ), ulReadFlags, ulRecordOffset, pBuffer, nNumberOfBytesToRead, pnBytesRead, pnMinNumberOfBytesNeeded ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}


	
	
	
	__QOR_IMPLEMENT_OCLASS_LUID( CEventLogClient );

	//--------------------------------------------------------------------------------
	CEventLogClient::CEventLogClient( const TCHAR* UNCServerName, const TCHAR* SourceName ) : CEventLogAccess()
	{
		_WINQ_FCONTEXT( "CEventLogClient::CEventLogClient" );
		m_Handle = reinterpret_cast< void* >( m_AdvAPI32Library.OpenEventLog( UNCServerName, SourceName ) );
	}

	//--------------------------------------------------------------------------------
	CEventLogClient::~CEventLogClient()
	{
		_WINQ_FCONTEXT( "CEventLogClient::~CEventLogClient" );
	}




	__QOR_IMPLEMENT_OCLASS_LUID( CBackupEventLog );

	//--------------------------------------------------------------------------------
	CBackupEventLog::CBackupEventLog( const TCHAR* UNCServerName, const TCHAR* FileName ) : CEventLogAccess()
	{
		_WINQ_FCONTEXT( "CBackupEventLog::CBackupEventLog" );
		m_Handle = reinterpret_cast< void* >( m_AdvAPI32Library.OpenBackupEventLog( UNCServerName, FileName ) );
	}

	//--------------------------------------------------------------------------------
	CBackupEventLog::~CBackupEventLog()
	{
		_WINQ_FCONTEXT( "CBackupEventLog::~CBackupEventLog" );
	}




	__QOR_IMPLEMENT_OCLASS_LUID( CEventLogServer );

	//--------------------------------------------------------------------------------
	CEventLogServer::CEventLogServer( const TCHAR* UNCServerName, const TCHAR* lpSourceName ) : CEventLogAccess()
	{
		_WINQ_FCONTEXT( "CEventLogServer::CEventLogServer" );
		m_Handle = reinterpret_cast< void* >( m_AdvAPI32Library.RegisterEventSource( UNCServerName, lpSourceName ) );
	}

	//--------------------------------------------------------------------------------
	CEventLogServer::~CEventLogServer()
	{
		_WINQ_FCONTEXT( "CEventLogServer::~CEventLogServer" );
		m_AdvAPI32Library.DeregisterEventSource( reinterpret_cast< HANDLE >( m_Handle.Use() ) );
	}

	//--------------------------------------------------------------------------------
	bool CEventLogServer::Report( unsigned short wType, unsigned short wCategory, unsigned long dwEventID, void* lpUserSid, unsigned short wNumStrings, unsigned long dwDataSize, const TCHAR** lpStrings, void* lpRawData )
	{
		_WINQ_FCONTEXT( "CEventLogServer::Report" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_AdvAPI32Library.ReportEvent( reinterpret_cast< HANDLE >( m_Handle.Use() ), wType, wCategory, dwEventID, lpUserSid, wNumStrings, dwDataSize, lpStrings, lpRawData ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CEventLog );

	//--------------------------------------------------------------------------------
	CEventLog::CEventLog( const CTString& strUNCServerName ) : m_strUNCServerName( strUNCServerName )
	{
		_WINQ_FCONTEXT( "CEventLog::CEventLog" );
	}

	//--------------------------------------------------------------------------------
	CEventLog::~CEventLog()
	{
		_WINQ_FCONTEXT( "CEventLog::~CEventLog" );
	}

	//--------------------------------------------------------------------------------
	CEventLogServer::ref_type CEventLog::Server( const CTString& strLogName )
	{
		_WINQ_FCONTEXT( "CEventLog::Server" );

		return new_shared_ref<CEventLogServer>( m_strUNCServerName.IsEmpty() ? 0 : m_strUNCServerName, strLogName );
	}

	//--------------------------------------------------------------------------------
	CBackupEventLog::ref_type CEventLog::Backup( const CTString& strFullFilePath )
	{
		_WINQ_FCONTEXT( "CEventLog::Backup" );

		return new_shared_ref<CBackupEventLog>( m_strUNCServerName.IsEmpty() ? 0 : m_strUNCServerName, strFullFilePath );
	}

	//--------------------------------------------------------------------------------
	CEventLogClient::ref_type CEventLog::Client( const CTString& strLogName )
	{
		_WINQ_FCONTEXT( "CEventLog::Client" );

		return new_shared_ref<CEventLogClient>( m_strUNCServerName.IsEmpty() ? 0 : m_strUNCServerName, strLogName );
	}

}//nsWin32

