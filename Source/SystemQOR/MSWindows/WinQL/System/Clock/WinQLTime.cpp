//WinQLTime.cpp

// Copyright Querysoft Limited 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinQLCodePage.h"
#include "WinQL/System/Clock/WinQLTime.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CTimeHelper );
	__QOR_IMPLEMENT_OCLASS_LUID( CTime );
	__QOR_IMPLEMENT_OCLASS_LUID( CTime::CClockTime );
	__QOR_IMPLEMENT_OCLASS_LUID( CTime::CUTCClock );
	__QOR_IMPLEMENT_OCLASS_LUID( CTime::CUTCClock::CAdjustment );
	__QOR_IMPLEMENT_OCLASS_LUID( CTime::CLocalClock );
	__QOR_IMPLEMENT_OCLASS_LUID( CTime::CLocalClock::CTimeZone );

	//--------------------------------------------------------------------------------
	CTimeHelper::CTimeHelper()
	{
		_WINQ_FCONTEXT( "CTimeHelper::CTimeHelper" );
	}

	//--------------------------------------------------------------------------------
	CTimeHelper::CTimeHelper(const CTimeHelper& src)
	{
		_WINQ_FCONTEXT("CTimeHelper::CTimeHelper");
	}

	//--------------------------------------------------------------------------------
	CTimeHelper::CTimeHelper( CTimeHelper&& move)
	{
		_WINQ_FCONTEXT("CTimeHelper::CTimeHelper");
	}

	//--------------------------------------------------------------------------------
	CTimeHelper& CTimeHelper::operator = (const CTimeHelper& src)
	{
		_WINQ_FCONTEXT("CTimeHelper::operator =");
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTimeHelper& CTimeHelper::operator = (CTimeHelper&& move)
	{
		_WINQ_FCONTEXT("CTimeHelper::operator =");
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTimeHelper::~CTimeHelper()
	{
		_WINQ_FCONTEXT( "CTimeHelper::~CTimeHelper" );
	}

	//--------------------------------------------------------------------------------
	long CTimeHelper::CompareFileTime( const nsWin32::FILETIME* lpFileTime1, const nsWin32::FILETIME* lpFileTime2 ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::CompareFileTime" );
		LONG lResult = 0;
		__QOR_PROTECT
		{
			lResult = CKernel32::CompareFileTime( reinterpret_cast< const ::FILETIME* >( lpFileTime1 ), reinterpret_cast< const ::FILETIME* >( lpFileTime2 ) );
		}__QOR_ENDPROTECT
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::DosDateTimeToFileTime( unsigned short wFatDate, unsigned short wFatTime, nsWin32::LPFILETIME lpFileTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::DosDateTimeToFileTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DosDateTimeToFileTime( wFatDate, wFatTime, reinterpret_cast< ::LPFILETIME >( lpFileTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::FileTimeToDosDateTime( const nsWin32::FILETIME* lpFileTime, unsigned short* lpFatDate, unsigned short* lpFatTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::FileTimeToDosDateTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FileTimeToDosDateTime( reinterpret_cast< const ::FILETIME* >( lpFileTime ), lpFatDate, lpFatTime ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::FileTimeToLocalFileTime( const nsWin32::FILETIME* lpFileTime, nsWin32::LPFILETIME lpLocalFileTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::FileTimeToLocalFileTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FileTimeToLocalFileTime( reinterpret_cast< const ::FILETIME* >( lpFileTime ), reinterpret_cast< ::LPFILETIME >( lpLocalFileTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::FileTimeToSystemTime( const nsWin32::FILETIME* lpFileTime, nsWin32::SystemTime* lpSystemTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::FileTimeToSystemTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FileTimeToSystemTime( reinterpret_cast< const ::FILETIME* >( lpFileTime ), reinterpret_cast< ::LPSYSTEMTIME >( lpSystemTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTimeHelper::GetDynamicTimeZoneInformation( nsWin32::DynamicTimeZoneInformation* pTimeZoneInformation ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::GetDynamicTimeZoneInformation" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetDynamicTimeZoneInformation( reinterpret_cast< ::PDYNAMIC_TIME_ZONE_INFORMATION >( pTimeZoneInformation ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::GetFileTime( void* hFile, nsWin32::LPFILETIME lpCreationTime, nsWin32::LPFILETIME lpLastAccessTime, nsWin32::LPFILETIME lpLastWriteTime ) const
	{			
		_WINQ_FCONTEXT( "CTimeHelper::GetFileTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetFileTime( hFile, reinterpret_cast< ::LPFILETIME >( lpCreationTime ), reinterpret_cast< ::LPFILETIME >( lpLastAccessTime ), reinterpret_cast< ::LPFILETIME >( lpLastWriteTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTimeHelper::GetLocalTime( nsWin32::SystemTime* lpSystemTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::GetLocalTime" );
		__QOR_PROTECT
		{
			CKernel32::GetLocalTime( reinterpret_cast< ::LPSYSTEMTIME >( lpSystemTime ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	void CTimeHelper::GetSystemTime( nsWin32::SystemTime* lpSystemTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::GetSystemTime" );
		__QOR_PROTECT
		{
			CKernel32::GetSystemTime( reinterpret_cast< ::LPSYSTEMTIME >( lpSystemTime ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::GetSystemTimeAdjustment( unsigned long* lpTimeAdjustment, unsigned long* lpTimeIncrement, int* lpTimeAdjustmentDisabled ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::GetSystemTimeAdjustment" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetSystemTimeAdjustment( lpTimeAdjustment, lpTimeIncrement, lpTimeAdjustmentDisabled ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTimeHelper::GetSystemTimeAsFileTime( nsWin32::LPFILETIME lpSystemTimeAsFileTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::GetSystemTimeAsFileTime" );
		CKernel32::GetSystemTimeAsFileTime( reinterpret_cast< ::LPFILETIME >( lpSystemTimeAsFileTime ) );
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::GetSystemTimes( nsWin32::LPFILETIME lpIdleTime, nsWin32::LPFILETIME lpKernelTime, nsWin32::LPFILETIME lpUserTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::GetSystemTimes" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetSystemTimes( reinterpret_cast< ::LPFILETIME >( lpIdleTime ), reinterpret_cast< ::LPFILETIME >( lpKernelTime ), reinterpret_cast< ::LPFILETIME >( lpUserTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTimeHelper::GetTickCount() const
	{
		_WINQ_FCONTEXT( "CTimeHelper::GetTickCount" );
		return CKernel32::GetTickCount();
	}

	//--------------------------------------------------------------------------------
	Cmp_unsigned_long_long CTimeHelper::GetTickCount64() const
	{			
		_WINQ_FCONTEXT( "CTimeHelper::GetTickCount64" );
		ULONGLONG ullResult = 0;
		__QOR_PROTECT
		{
			ullResult = CKernel32::GetTickCount64();
		}__QOR_ENDPROTECT
		return ullResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTimeHelper::GetTimeZoneInformation( nsWin32::TimeZoneInformation* lpTimeZoneInformation ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::GetTimeZoneInformation" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetTimeZoneInformation( reinterpret_cast< ::LPTIME_ZONE_INFORMATION >( lpTimeZoneInformation ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::GetTimeZoneInformationForYear( unsigned short wYear, nsWin32::DynamicTimeZoneInformation* pdtzi, nsWin32::TimeZoneInformation* ptzi ) const
	{			
		_WINQ_FCONTEXT( "CTimeHelper::GetTimeZoneInformationForYear" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetTimeZoneInformationForYear( wYear, reinterpret_cast< ::PDYNAMIC_TIME_ZONE_INFORMATION >( pdtzi ), reinterpret_cast< ::LPTIME_ZONE_INFORMATION >( ptzi ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::LocalFileTimeToFileTime( const nsWin32::FILETIME* lpLocalFileTime, nsWin32::LPFILETIME lpFileTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::LocalFileTimeToFileTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::LocalFileTimeToFileTime( reinterpret_cast< const ::FILETIME* >( lpLocalFileTime ), reinterpret_cast< ::LPFILETIME >( lpFileTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::SetDynamicTimeZoneInformation( const nsWin32::DynamicTimeZoneInformation* lpTimeZoneInformation ) const
	{			
		_WINQ_FCONTEXT( "CTimeHelper::SetDynamicTimeZoneInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetDynamicTimeZoneInformation( reinterpret_cast< const ::DYNAMIC_TIME_ZONE_INFORMATION* >( lpTimeZoneInformation ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::SetFileTime( void* hFile, const nsWin32::FILETIME* lpCreationTime, const nsWin32::FILETIME* lpLastAccessTime, const nsWin32::FILETIME* lpLastWriteTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::SetFileTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetFileTime( hFile, reinterpret_cast< const ::FILETIME* >( lpCreationTime ), reinterpret_cast< const ::FILETIME* >( lpLastAccessTime ), reinterpret_cast< const ::FILETIME* >( lpLastWriteTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::SetLocalTime( const nsWin32::SystemTime* lpSystemTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::SetLocalTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetLocalTime( reinterpret_cast< const ::SYSTEMTIME* >( lpSystemTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::SetSystemTime( const nsWin32::SystemTime* lpSystemTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::SetSystemTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetSystemTime( reinterpret_cast< const ::SYSTEMTIME* >( lpSystemTime ) ) ? true: false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::SetSystemTimeAdjustment( unsigned long dwTimeAdjustment, bool bTimeAdjustmentDisabled ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::SetSystemTimeAdjustment" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetSystemTimeAdjustment( dwTimeAdjustment, bTimeAdjustmentDisabled ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::SetTimeZoneInformation( const nsWin32::TimeZoneInformation* lpTimeZoneInformation ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::SetTimeZoneInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetTimeZoneInformation( reinterpret_cast< const ::TIME_ZONE_INFORMATION* >( lpTimeZoneInformation ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::SystemTimeToFileTime( const nsWin32::SystemTime* lpSystemTime, nsWin32::LPFILETIME lpFileTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::SystemTimeToFileTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SystemTimeToFileTime( reinterpret_cast< const ::SYSTEMTIME* >( lpSystemTime ), reinterpret_cast< ::LPFILETIME >( lpFileTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::SystemTimeToTzSpecificLocalTime( nsWin32::TimeZoneInformation* lpTimeZone, nsWin32::SystemTime* lpUniversalTime, nsWin32::SystemTime* lpLocalTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::SystemTimeToTzSpecificLocalTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SystemTimeToTzSpecificLocalTime( reinterpret_cast< ::LPTIME_ZONE_INFORMATION >( lpTimeZone ), reinterpret_cast< ::LPSYSTEMTIME >( lpUniversalTime ), reinterpret_cast< ::LPSYSTEMTIME >( lpLocalTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTimeHelper::TzSpecificLocalTimeToSystemTime( nsWin32::TimeZoneInformation* lpTimeZoneInformation, nsWin32::SystemTime* lpLocalTime, nsWin32::SystemTime* lpUniversalTime ) const
	{
		_WINQ_FCONTEXT( "CTimeHelper::TzSpecificLocalTimeToSystemTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::TzSpecificLocalTimeToSystemTime( reinterpret_cast< ::LPTIME_ZONE_INFORMATION >( lpTimeZoneInformation ), reinterpret_cast< ::LPSYSTEMTIME >( lpLocalTime ), reinterpret_cast< ::LPSYSTEMTIME >( lpUniversalTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime::CClockTime(const CClockTime& Src) : CClockTime( Src.wYear, Src.wMonth, Src.wDayOfWeek, Src.wDay, Src.wHour, Src.wMinute, Src.wSecond, Src.wMilliseconds)
	{
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime::CClockTime( CClockTime&& move) : CClockTime(move.wYear, move.wMonth, move.wDayOfWeek, move.wDay, move.wHour, move.wMinute, move.wSecond, move.wMilliseconds)
	{
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime::CClockTime( const SystemTime& Src )
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::CClockTime" );
		( *( dynamic_cast< SystemTime* >( this ) ) ) = Src;
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime::CClockTime( const CFileTime* pFileTime )
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::CClockTime" );
		m_Win32TimeHelper.FileTimeToSystemTime( pFileTime, this );					
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime::CClockTime( unsigned short aYear, unsigned short aMonth, unsigned short aDayOfWeek, unsigned short aDay, unsigned short aHour, unsigned short aMinute, unsigned short aSecond, unsigned short aMilliseconds )
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::CClockTime" );
		wYear = aYear;
		wMonth = aMonth;
		wDayOfWeek = aDayOfWeek;
		wDay = aDay;
		wHour = aHour;
		wMinute = aMinute;
		wSecond = aSecond;
		wMilliseconds = aMilliseconds;
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime& CTime::CClockTime::operator = (const CTime::CClockTime& src)
	{
		_WINQ_FCONTEXT("CTime::CClockTime::operator =");
		wYear = src.wYear;
		wMonth = src.wMonth;
		wDayOfWeek = src.wDayOfWeek;
		wDay = src.wDay;
		wHour = src.wHour;
		wMinute = src.wMinute;
		wSecond = src.wSecond;
		wMilliseconds = src.wMilliseconds;

		return *this;
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime& CTime::CClockTime::operator = (CTime::CClockTime&& move)
	{
		_WINQ_FCONTEXT("CTime::CClockTime::operator =");
		wYear = move.wYear;
		wMonth = move.wMonth;
		wDayOfWeek = move.wDayOfWeek;
		wDay = move.wDay;
		wHour = move.wHour;
		wMinute = move.wMinute;
		wSecond = move.wSecond;
		wMilliseconds = move.wMilliseconds;
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime::~CClockTime()
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::~CClockTime" );
	}

	//--------------------------------------------------------------------------------
	unsigned short CTime::CClockTime::Year() const
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::Year" );
		return wYear;
	}

	//--------------------------------------------------------------------------------
	unsigned short CTime::CClockTime::Month() const
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::Month" );
		return wMonth;
	}

	//--------------------------------------------------------------------------------
	unsigned short CTime::CClockTime::DayOfWeek() const
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::DayOfWeek" );
		return wDayOfWeek;
	}

	//--------------------------------------------------------------------------------
	unsigned short CTime::CClockTime::Day() const
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::Day" );
		return wDay;
	}

	//--------------------------------------------------------------------------------
	unsigned short CTime::CClockTime::Hour() const
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::Hour" );
		return wHour;
	}

	//--------------------------------------------------------------------------------
	unsigned short CTime::CClockTime::Minute() const
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::Minute" );
		return wMinute;
	}

	//--------------------------------------------------------------------------------
	unsigned short CTime::CClockTime::Second() const
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::Second" );
		return wSecond;
	}

	//--------------------------------------------------------------------------------
	unsigned short CTime::CClockTime::MilliSeconds() const
	{
		_WINQ_FCONTEXT( "CTime::CClockTime::MilliSeconds" );
		return wMilliseconds;
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock::CAdjustment::CAdjustment()
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::CAdjustment::CAdjustment" );
		GetSystemTimeAdjustment();
	}
	
	//--------------------------------------------------------------------------------
	CTime::CUTCClock::CAdjustment::CAdjustment( const CTime::CUTCClock::CAdjustment& src )
	{
		_WINQ_FCONTEXT("CTime::CUTCClock::CAdjustment::CAdjustment");
		GetSystemTimeAdjustment();
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock::CAdjustment::CAdjustment( CTime::CUTCClock::CAdjustment&& move)
	{
		_WINQ_FCONTEXT("CTime::CUTCClock::CAdjustment::CAdjustment");
		GetSystemTimeAdjustment();
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock::CAdjustment& CTime::CUTCClock::CAdjustment::operator = (const CTime::CUTCClock::CAdjustment& src)
	{
		_WINQ_FCONTEXT("CTime::CUTCClock::CAdjustment::operator =");
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock::CAdjustment& CTime::CUTCClock::CAdjustment::operator = ( CTime::CUTCClock::CAdjustment&& move)
	{
		_WINQ_FCONTEXT("CTime::CUTCClock::CAdjustment::operator =");
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock::CAdjustment::~CAdjustment()
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::CAdjustment::~CAdjustment" );
	}

	//--------------------------------------------------------------------------------
	bool CTime::CUTCClock::CAdjustment::Enabled()
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::CAdjustment::Enabled" );
		GetSystemTimeAdjustment();
		return ( m_bTimeAdjustDisabled ? false : true );
	}

	//--------------------------------------------------------------------------------
	void CTime::CUTCClock::CAdjustment::Enable( bool bEnable )
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::CAdjustment::Enable" );
		SetSystemTimeAdjustment( bEnable ? false : true );
		GetSystemTimeAdjustment();
	}

	//--------------------------------------------------------------------------------
	void CTime::CUTCClock::CAdjustment::Set( unsigned long dwAdjust )
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::CAdjustment::Set" );
		GetSystemTimeAdjustment();
		m_dwTimeAdjust = dwAdjust;
		SetSystemTimeAdjustment( m_bTimeAdjustDisabled ? true : false );
	}

	//--------------------------------------------------------------------------------
	unsigned long CTime::CUTCClock::CAdjustment::Get( unsigned long* pdwIncrement )
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::CAdjustment::Get" );
		GetSystemTimeAdjustment();						
		if( pdwIncrement != 0 )
		{
			*pdwIncrement = m_dwTimeIncrement;
		}
		return m_dwTimeAdjust;
	}

	//--------------------------------------------------------------------------------
	bool CTime::CUTCClock::CAdjustment::GetSystemTimeAdjustment()
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::CAdjustment::GetSystemTimeAdjustment" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.GetSystemTimeAdjustment( &m_dwTimeAdjust, &m_dwTimeIncrement, &m_bTimeAdjustDisabled );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTime::CUTCClock::CAdjustment::SetSystemTimeAdjustment( bool bTimeAdjustmentDisabled )
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::CAdjustment::SetSystemTimeAdjustment" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.SetSystemTimeAdjustment( m_dwTimeAdjust, bTimeAdjustmentDisabled );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock::CUTCClock()
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::CUTCClock" );
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock::CUTCClock( const CTime::CUTCClock& src )
	{
		_WINQ_FCONTEXT("CTime::CUTCClock::CUTCClock");
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock::CUTCClock( CTime::CUTCClock&& move)
	{
		_WINQ_FCONTEXT("CTime::CUTCClock::CUTCClock");
		*this = std::move(move);
		Adjustment = std::move(move.Adjustment);
		m_ClockTime = std::move(move.m_ClockTime);
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock& CTime::CUTCClock::operator = (const CTime::CUTCClock& src)
	{
		_WINQ_FCONTEXT("CTime::CUTCClock::operator =");
		if (&src != this)
		{
			Adjustment = src.Adjustment;
			m_ClockTime = src.m_ClockTime;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock& CTime::CUTCClock::operator = (CTime::CUTCClock&& move)
	{
		_WINQ_FCONTEXT("CTime::CUTCClock::operator =");
		if (&move != this)
		{
			Adjustment = move.Adjustment;
			m_ClockTime = move.m_ClockTime;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTime::CUTCClock::~CUTCClock()
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::~CUTCClock" );
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime CTime::CUTCClock::Time()
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::Time" );
		GetSystemTime();					
		return m_ClockTime;
	}

	//--------------------------------------------------------------------------------
	bool CTime::CUTCClock::SetTime( CClockTime& NewTime )
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::SetTime" );
		bool bResult = false;
		bResult = SetSystemTime( &NewTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTime::CFileTime CTime::CUTCClock::FileTime()
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::FileTime" );
		CFileTime FileTime;
		GetSystemTimeAsFileTime( &FileTime );
		return FileTime;
	}

	//--------------------------------------------------------------------------------
	void CTime::CUTCClock::GetLocalTime()
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::GetLocalTime" );
		m_Win32TimeHelper.GetLocalTime( &m_ClockTime );
	}

	//--------------------------------------------------------------------------------
	void CTime::CUTCClock::GetSystemTime()
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::GetSystemTime" );
		m_Win32TimeHelper.GetSystemTime( &m_ClockTime );
	}

	//--------------------------------------------------------------------------------
	bool CTime::CUTCClock::SetLocalTime( const CTime::CClockTime* pLocalTime )
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::SetLocalTime" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.SetLocalTime( pLocalTime );					
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTime::CUTCClock::SetSystemTime( const CTime::CClockTime* pSystemTime )
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::SetSystemTime" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.SetSystemTime( pSystemTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTime::CUTCClock::GetSystemTimeAsFileTime( LPFILETIME lpSystemTimeAsFileTime )
	{
		_WINQ_FCONTEXT( "CTime::CUTCClock::GetSystemTimeAsFileTime" );
		m_Win32TimeHelper.GetSystemTimeAsFileTime( lpSystemTimeAsFileTime );
	}

	//--------------------------------------------------------------------------------
	CTime::CLocalClock::CTimeZone::CTimeZone()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::CTimeZone" );
		GetTimeZoneInformation();
#if ( _WIN32_WINNT >= 0x0600 )

        GetDynamicTimeZoneInformation();
#endif
	}

	//--------------------------------------------------------------------------------
	CTime::CLocalClock::CTimeZone::~CTimeZone()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::~CTimeZone" );
	}

	//--------------------------------------------------------------------------------
	long CTime::CLocalClock::CTimeZone::GetBias()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetBias" );
		GetTimeZoneInformation();
		return m_TimeZoneInfo.Bias;
	}

	//--------------------------------------------------------------------------------
	void CTime::CLocalClock::CTimeZone::SetBias( long lBias )
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetBias" );
		GetTimeZoneInformation();
		m_TimeZoneInfo.Bias = lBias;
		SetTimeZoneInformation();
#if ( _WIN32_WINNT >= 0x0600 )
		GetDynamicTimeZoneInformation();
#endif
	}

	//--------------------------------------------------------------------------------
	long CTime::CLocalClock::CTimeZone::GetStandardBias()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetStandardBias" );
		GetTimeZoneInformation();
		return m_TimeZoneInfo.StandardBias;
	}

	//--------------------------------------------------------------------------------
	void CTime::CLocalClock::CTimeZone::SetStandardBias( long lStandardBias )
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetStandardBias" );
		GetTimeZoneInformation();
		m_TimeZoneInfo.StandardBias = lStandardBias;
		SetTimeZoneInformation();
#if ( _WIN32_WINNT >= 0x0600 )
		GetDynamicTimeZoneInformation();
#endif
	}

	//--------------------------------------------------------------------------------
	long CTime::CLocalClock::CTimeZone::GetDaylightBias()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetDaylightBias" );
		GetTimeZoneInformation();
		return m_TimeZoneInfo.DaylightBias;
	}

	//--------------------------------------------------------------------------------
	void CTime::CLocalClock::CTimeZone::SetDaylightBias( long lDaylightBias )
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetDaylightBias" );
		GetTimeZoneInformation();
		m_TimeZoneInfo.DaylightBias = lDaylightBias;
		SetTimeZoneInformation();
#if ( _WIN32_WINNT >= 0x0600 )
		GetDynamicTimeZoneInformation();
#endif
	}

	//--------------------------------------------------------------------------------
	CWString CTime::CLocalClock::CTimeZone::GetStandardName()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetStandardName" );
		GetTimeZoneInformation();
		CWString strResult( m_TimeZoneInfo.StandardName, 32 );
		return strResult;
	}

	//--------------------------------------------------------------------------------
	void CTime::CLocalClock::CTimeZone::SetStandardName( wchar_t* wszStandardName )
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetStandardName" );
		GetTimeZoneInformation();
		wchar_t* pwszStandardName = wszStandardName;
		unsigned int uiCount = 0;
		while( pwszStandardName != 0 && *pwszStandardName != 0 && uiCount < 31 )
		{
			m_TimeZoneInfo.StandardName[ uiCount++ ] = *pwszStandardName;
			pwszStandardName++;
		}
		m_TimeZoneInfo.StandardName[ uiCount++ ] = 0;
		SetTimeZoneInformation();
		GetDynamicTimeZoneInformation();
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime CTime::CLocalClock::CTimeZone::GetStandardDate()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetStandardDate" );
		GetTimeZoneInformation();
		return CClockTime( m_TimeZoneInfo.StandardDate );
	}

	//--------------------------------------------------------------------------------
	void CTime::CLocalClock::CTimeZone::SetStandardDate( CClockTime StandardDate )
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetStandardDate" );
		GetTimeZoneInformation();
		m_TimeZoneInfo.StandardDate = StandardDate;
		SetTimeZoneInformation();
		GetDynamicTimeZoneInformation();
	}

	//--------------------------------------------------------------------------------
	CWString CTime::CLocalClock::CTimeZone::GetDaylightName()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetDaylightName" );
		GetTimeZoneInformation();
		CWString strResult( m_TimeZoneInfo.DaylightName, 32 );
		return strResult;
	}

	//--------------------------------------------------------------------------------
	void CTime::CLocalClock::CTimeZone::SetDaylightName( wchar_t* wszDaylightName )
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetDaylightName" );
		GetTimeZoneInformation();

		wchar_t* pwszDaylightName = wszDaylightName;
		unsigned int uiCount = 0;
		while( pwszDaylightName != 0 && *pwszDaylightName != 0 && uiCount < 31 )
		{
			m_TimeZoneInfo.DaylightName[ uiCount++ ] = *pwszDaylightName;
			pwszDaylightName++;
		}
		m_TimeZoneInfo.DaylightName[ uiCount++ ] = 0;						
		SetTimeZoneInformation();
		GetDynamicTimeZoneInformation();
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime CTime::CLocalClock::CTimeZone::GetDaylightDate()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetDaylightDate" );
		GetTimeZoneInformation();
		return CClockTime( m_TimeZoneInfo.DaylightDate );
	}

	//--------------------------------------------------------------------------------
	void CTime::CLocalClock::CTimeZone::SetDaylightDate( CClockTime DaylightDate )
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetDaylightDate" );
		GetTimeZoneInformation();
		m_TimeZoneInfo.DaylightDate = DaylightDate;
		SetTimeZoneInformation();
		GetDynamicTimeZoneInformation();
	}

	//--------------------------------------------------------------------------------
	CWString CTime::CLocalClock::CTimeZone::GetTimeZoneKeyName()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetTimeZoneKeyName" );
		GetDynamicTimeZoneInformation();
		return CWString( m_DynamicTimeZoneInfo.TimeZoneKeyName, 128 );
	}

	//--------------------------------------------------------------------------------
	void CTime::CLocalClock::CTimeZone::SetTimeZoneKeyName( wchar_t* wszKeyName )
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetTimeZoneKeyName" );
		GetDynamicTimeZoneInformation();

		wchar_t* pwszKeyName = wszKeyName;
		unsigned int uiCount = 0;
		while( pwszKeyName != 0 && *pwszKeyName != 0 && uiCount < 127 )
		{
			m_DynamicTimeZoneInfo.TimeZoneKeyName[ uiCount++ ] = *pwszKeyName;
			pwszKeyName++;
		}
		m_DynamicTimeZoneInfo.TimeZoneKeyName[ uiCount++ ] = 0;
	}

	//--------------------------------------------------------------------------------
	unsigned char CTime::CLocalClock::CTimeZone::GetDynamicDaylightTimeDisabled()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetDynamicDaylightTimeDisabled" );
		GetDynamicTimeZoneInformation();
		return m_DynamicTimeZoneInfo.DynamicDaylightTimeDisabled;
	}

	//--------------------------------------------------------------------------------
	void CTime::CLocalClock::CTimeZone::SetDynamicDaylightTimeDisabled( unsigned char bDisabled )
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetDynamicDaylightTimeDisabled" );
		GetDynamicTimeZoneInformation();
		m_DynamicTimeZoneInfo.DynamicDaylightTimeDisabled = bDisabled;
	}

	//--------------------------------------------------------------------------------
	bool CTime::CLocalClock::CTimeZone::SetTimeZoneInformation()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetTimeZoneInformation" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.SetTimeZoneInformation( &m_TimeZoneInfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTime::CLocalClock::CTimeZone::GetDynamicTimeZoneInformation()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetDynamicTimeZoneInformation" );
		unsigned long dwResult = m_Win32TimeHelper.GetDynamicTimeZoneInformation( &m_DynamicTimeZoneInfo );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTime::CLocalClock::CTimeZone::GetTimeZoneInformation()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::GetTimeZoneInformation" );
		unsigned long dwResult = m_Win32TimeHelper.GetTimeZoneInformation( &m_TimeZoneInfo );
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	bool CTime::CLocalClock::CTimeZone::SetDynamicTimeZoneInformation()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::CTimeZone::SetDynamicTimeZoneInformation" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.SetDynamicTimeZoneInformation( &m_DynamicTimeZoneInfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTime::CClockTime CTime::CLocalClock::Time()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::Time" );
		GetLocalTime();					
		return m_ClockTime;
	}

	//--------------------------------------------------------------------------------
	bool CTime::CLocalClock::SetTime( CClockTime& NewTime )
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::SetTime" );
		bool bResult = false;
		bResult = SetLocalTime( &NewTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTime::CFileTime CTime::CLocalClock::FileTime()
	{
		_WINQ_FCONTEXT( "CTime::CLocalClock::FileTime" );
		CFileTime SystemFileTime;
		GetSystemTimeAsFileTime( &SystemFileTime );
		CFileTime LocalFileTime;
		m_Win32TimeHelper.FileTimeToLocalFileTime( &SystemFileTime, &LocalFileTime );
		return LocalFileTime;
	}

	//--------------------------------------------------------------------------------
	CTime::CTime()
	{
		_WINQ_FCONTEXT( "CTime::CTime" );
	}

	//--------------------------------------------------------------------------------
	CTime::~CTime()
	{
		_WINQ_FCONTEXT( "CTime::~CTime" );
	}

	//--------------------------------------------------------------------------------
	bool CTime::GetSystemTimes( CTime::CFileTime* pIdleTime, CTime::CFileTime* pKernelTime, CTime::CFileTime* pUserTime ) const
	{
		_WINQ_FCONTEXT( "CTime::GetSystemTimes" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.GetSystemTimes( pIdleTime, pKernelTime, pUserTime );
		return bResult;
	}			

	//--------------------------------------------------------------------------------
	unsigned long CTime::GetTickCount() const
	{
		_WINQ_FCONTEXT( "CTime::GetTickCount" );
		unsigned long dwResult = 0;
		dwResult = m_Win32TimeHelper.GetTickCount();
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_unsigned_long_long CTime::GetTickCount64() const
	{
		_WINQ_FCONTEXT( "CTime::GetTickCount64" );
		Cmp_unsigned_long_long Result = 0;
		Result = m_Win32TimeHelper.GetTickCount64();
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CTime::GetTimeZoneInformationForYear( unsigned short wYear, DynamicTimeZoneInformation* pdtzi, TimeZoneInformation* ptzi ) const
	{
		_WINQ_FCONTEXT( "CTime::GetTimeZoneInformationForYear" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.GetTimeZoneInformationForYear( wYear, pdtzi, ptzi );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTime::LocalFileTimeToFileTime( const CTime::CFileTime* pLocalFileTime, CTime::CFileTime* pFileTime ) const
	{
		_WINQ_FCONTEXT( "CTime::LocalFileTimeToFileTime" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.LocalFileTimeToFileTime( pLocalFileTime, pFileTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTime::SystemTimeToFileTime( const CTime::CClockTime* pSystemTime, CTime::CFileTime* pFileTime ) const
	{
		_WINQ_FCONTEXT( "CTime::SystemTimeToFileTime" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.SystemTimeToFileTime( pSystemTime, pFileTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTime::SystemTimeToTzSpecificLocalTime( TimeZoneInformation* pTimeZone, CTime::CClockTime* pUniversalTime, CTime::CClockTime* pLocalTime ) const
	{
		_WINQ_FCONTEXT( "CTime::SystemTimeToTzSpecificLocalTime" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.SystemTimeToTzSpecificLocalTime( pTimeZone, pUniversalTime, pLocalTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTime::TzSpecificLocalTimeToSystemTime( TimeZoneInformation* pTimeZoneInformation, CTime::CClockTime* pLocalTime, CTime::CClockTime* pUniversalTime ) const
	{
		_WINQ_FCONTEXT( "CTime::TzSpecificLocalTimeToSystemTime" );
		bool bResult = false;
		bResult = m_Win32TimeHelper.TzSpecificLocalTimeToSystemTime( pTimeZoneInformation, pLocalTime, pUniversalTime );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	const CTimeHelper& CTime::Helper( void ) const
	{
		_WINQ_FCONTEXT( "CTime::Helper" );
		return m_Win32TimeHelper;
	}

}//nsWin32
