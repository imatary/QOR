//WinQLKeyboardLayout.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Keyboard Input

#ifndef WINQL_SYSTEM_DEVICE_KEYBOARD_LAYOUT_H_3
#define WINQL_SYSTEM_DEVICE_KEYBOARD_LAYOUT_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "CodeQOR/DataStructures/TRef.h"
#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/Application/Threading/WinQLThreadAffinity.h"
#include "WinQL/CodeServices/WinQLSharedRef.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE(__WINQAPI) CUser32;
}

__QOR_DECLARE_REF(nsWin32, __WINQL, CKeyboardLayout, CTRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	typedef CRAIISessionHandle CKeyboardLayoutHandle;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE(__WINQL) CKeyboardLayout
	{

	public:

		__QOR_DECLARE_REF_TYPE(CKeyboardLayout);

		__QCMP_STATIC_CONSTANT(unsigned long, KLF_Activate = 0x00000001);				//Flags for CKeyboardLayout construction
		__QCMP_STATIC_CONSTANT(unsigned long, KLF_NoTellShell = 0x00000080);
		__QCMP_STATIC_CONSTANT(unsigned long, KLF_Reorder = 0x00000008);
		__QCMP_STATIC_CONSTANT(unsigned long, KLF_ReplaceLang = 0x00000010);
		__QCMP_STATIC_CONSTANT(unsigned long, KLF_Substitute = 0x00000002);
		__QCMP_STATIC_CONSTANT(unsigned long, KLF_SetForProcess = 0x00000100);

		__QOR_DECLARE_OCLASS_ID(CKeyboardLayout);												//CKeyboardLayout is an Object-Class

		CKeyboardLayout(const TCHAR* pwszKLID, unsigned int Flags, int* pbResult = 0);		//Construct a Keyboard Layout from an ID string and flags																								
		virtual ~CKeyboardLayout();																//Destruct a Keyboard Layout
		void Activate(unsigned int uiFlags);													//Activate a Keyboard Layout
		virtual void OnDeactivate(CKeyboardLayout::ref_type New);								//Called when a Keyboard Layout is Deactivated by Activating another

	protected:

		CKeyboardLayout(CKeyboardLayoutHandle::refType hKL);									//Construct a Keyboard Layout around an OS handle
		CKeyboardLayoutHandle::refType Handle(void);											//Get a reference to the OS handle underlying a Keyboard Layout
																								//static ref_type FromHandle( CKeyboardLayoutHandle::refType hKL );						//Get a Keyboard Layout Reference from an OS Handle reference

		int* m_pbResult;																		//Optional Pointer to an an external integer to be set if destruction of a Keyboard Layout fails to clean up

		CKeyboardLayoutHandle m_Handle;															//Internal Windows handle to keyboard layout

	private:

		nsWinQAPI::CUser32& m_Library;															//Reference to User32 library

		__QCS_DECLARE_NONCOPYABLE(CKeyboardLayout);											//A Keyboard layout is not a copyable or assignable object
	};

}//nsWin32

#endif//WINQL_SYSTEM_DEVICE_KEYBOARD_LAYOUT_H_3
