//WinQLNotificationFilter.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Device Notification Filter

#ifndef WINQL_DEVICEIO_NOTIFICATIONFILTER_H_3
#define WINQL_DEVICEIO_NOTIFICATIONFILTER_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include <vector>

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	struct sDeviceBroadcastHeader
	{
		sDeviceBroadcastHeader()
		{
			ulSize = sizeof( sDeviceBroadcastHeader );
			ulDeviceType = 0;
			ulReserved = 0;
		}

		unsigned long ulSize;
		unsigned long ulDeviceType;
		unsigned long ulReserved;
	};

	//--------------------------------------------------------------------------------
	struct sDeviceBroadcastDeviceInterace : public sDeviceBroadcastHeader
	{
		sDeviceBroadcastDeviceInterace() : sDeviceBroadcastHeader()
		{
			Name[ 0 ] = 0;
		}

		nsCodeQOR::__mxGUID guid;
		TCHAR Name[ 1 ];
	};

	//--------------------------------------------------------------------------------
	struct sDeviceBroadcastHandle : public sDeviceBroadcastHeader
	{
		sDeviceBroadcastHandle() : sDeviceBroadcastHeader()
		{
		}

		void* DeviceHandle;
		void* NotificationHandle;
		nsCodeQOR::__mxGUID EventGUID;
		long NameOffset;
		byte data[1];
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CNotificationFilter
	{

	public:

		//--------------------------------------------------------------------------------
		enum eNotificationType
		{
			eNotifyInterface = 0x5,
			eNotifyHandle = 0x6
		};

		CNotificationFilter( eNotificationType NotifyType = eNotifyInterface );
		~CNotificationFilter();

		bool GetAllClasses( void );
		void SetAllClasses( bool );

		void AddInterfaceFilter( nsCodeQOR::mxGUID* pGUID );
		void AddHandleFilter( void* DeviceHandle, nsCodeQOR::mxGUID* pEventGUID );

		std::vector< sDeviceBroadcastDeviceInterace >& InterfaceFilters( void );
		std::vector< sDeviceBroadcastHandle >& HandleFilters( void );

		eNotificationType NotifyType( void );

	private:

		eNotificationType m_NotifyType;
		bool m_bAllClasses;
		std::vector< sDeviceBroadcastDeviceInterace > m_VecInterfaceFilters;
		std::vector< sDeviceBroadcastHandle > m_VecHandleFilters;
	};

}//nsWin32

#endif//WINQL_DEVICEIO_NOTIFICATIONFILTER_H_3
