//Bluetooth.cpp

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Bluetooth SubSystem

#include "CodeQOR/Instancing/TInstancePtr.h"
#include "CodeQOR/Tracing/TraceFlyer.h"
#include "AppocritaQOR/AppocritaQOR.h"
#include "AppocritaQOR/SubSystems/Bluetooth.h"

//------------------------------------------------------------------------------
namespace nsQOR
{	
	__QOR_IMPLEMENT_OCLASS_GUID( IBluetooth, 0x38f0f25a, 0xcf5, 0x4103, 0x8f, 0x80, 0xc6, 0xd0, 0x2a, 0x16, 0x23, 0x8a );	// {38F0F25A-0CF5-4103-8F80-C6D02A16238A}

	//------------------------------------------------------------------------------
	const nsCodeQOR::mxGUID* CBluetooth::ClassID()
	{
		return IBluetooth::ClassID();
	}

	//------------------------------------------------------------------------------
	const char* CBluetooth::TypeName()
	{
		return "CBluetooth";
	}

	//------------------------------------------------------------------------------
	CBluetooth::CBluetooth()
	{
		nsCodeQOR::CClassInstanceFactory* pFactory = ThisModule().ExternalClassReg().GetFactory( IBluetooth::ClassID() );
		if( pFactory )
		{
			m_Impl.Attach( reinterpret_cast<IBluetooth*>( pFactory->Instance() ), true );
		}
	}

	//------------------------------------------------------------------------------
	void CBluetooth::ScanForDevices(void)
	{
		m_Impl.As< IBluetooth >()->ScanForDevices();
	}

	//------------------------------------------------------------------------------
	void CBluetooth::RegisterServiceClient(nsCodeQOR::mxGUID& ServiceUUID, IBluetoothServiceClient::ref_type Client)
	{
		m_Impl.As< IBluetooth >()->RegisterServiceClient(ServiceUUID, Client);
	}

	//------------------------------------------------------------------------------
	void CBluetooth::UnregisterServiceClient(nsCodeQOR::mxGUID& ServiceUUID, IBluetoothServiceClient::ref_type Client)
	{
		m_Impl.As< IBluetooth >()->UnregisterServiceClient(ServiceUUID, Client);
	}



	//------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID(CBluetoothServiceClient);

	//------------------------------------------------------------------------------
	CBluetoothServiceClient::CBluetoothServiceClient(nsCodeQOR::mxGUID* pServiceID) : IBluetoothServiceClient()
	,	m_pServiceID( pServiceID )
	{

	}

	//------------------------------------------------------------------------------
	CBluetoothServiceClient::~CBluetoothServiceClient()
	{

	}

	//------------------------------------------------------------------------------
	void CBluetoothServiceClient::Register()
	{
		TheApplication()->GetRole()->GetSubSystem(IBluetooth::ClassID()).As<CBluetooth>()->RegisterServiceClient(*m_pServiceID, ref(*this).AsRef<IBluetoothServiceClient>());
	}

	//------------------------------------------------------------------------------
	void CBluetoothServiceClient::UnRegister()
	{
		TheApplication()->GetRole()->GetSubSystem(IBluetooth::ClassID()).As<CBluetooth>()->UnregisterServiceClient(*m_pServiceID, ref(*this).AsRef<IBluetoothServiceClient>());
	}

	//------------------------------------------------------------------------------
	void CBluetoothServiceClient::AttachDevice(IBluetoothRemoteDevice::ref_type Device)
	{

	}

}//nsQOR
