//State.cpp

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/Instancing/TInstancePtr.h"
#include "AppocritaQOR/AppocritaQOR.h"
#include "AppocritaQOR/State.h"
#include "AppocritaQOR/Workflow.h"

//------------------------------------------------------------------------------
namespace nsQOR
{
	//------------------------------------------------------------------------------
	CState::CState( IWorkflow::ref_type pWorkflow ) : m_pWorkflow( pWorkflow )
	{
		__QCS_FCONTEXT( "CState::CState" );
	}

	//------------------------------------------------------------------------------
	void CState::OnEnter( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CState::OnEnter" );
	}

	//------------------------------------------------------------------------------
	void CState::OnLeave( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CState::OnLeave" );
	}

	//------------------------------------------------------------------------------
	void CState::OnSuspend( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CState::OnSuspend" );
	}

	//------------------------------------------------------------------------------
	void CState::OnResume( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CState::OnResume" );
	}

	//------------------------------------------------------------------------------
	bool CState::HandleEvent( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CState::HandleEvent" );
		bool bHandled = false;
		if( pEvent && m_pWorkflow )
		{
			bHandled = m_pWorkflow->DefaultHandleEvent( pEvent );
		}
		return bHandled;
	}



	//------------------------------------------------------------------------------
	CCompoundState::CCompoundState( IWorkflow::ref_type pWorkflow ) : CState( pWorkflow )
	{
		__QCS_FCONTEXT( "CCompoundState::CCompoundState" );
	}

	//------------------------------------------------------------------------------
	bool CCompoundState::HandleEvent( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CCompoundState::HandleEvent" );
		bool bHandled = false;
		if( pEvent && m_pInternalWorkflow )
		{
			bHandled = m_pInternalWorkflow->CurrentState()->HandleEvent( pEvent );
		}
		return bHandled;
	}

}//nsQOR
