//WinQLFileSink.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/IO/File/WinQLFileSink.h"
#include "WinQL/Application/IO/File/WinQLFileConnector.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	__QOR_IMPLEMENT_OCLASS_LUID( CFileSink );

	//--------------------------------------------------------------------------------
	CFileSink::CFileSink( CFileConnector* pFileConnector ) : CIOSink( pFileConnector )
	{
		_WINQ_FCONTEXT( "CFileSink::CFileSink" );
	}

	//--------------------------------------------------------------------------------
	CFileSink::~CFileSink()
	{
		_WINQ_FCONTEXT( "CFileSink::~CFileSink" );
	}

	//--------------------------------------------------------------------------------
	bool CFileSink::Write( unsigned long& ulNumberOfUnitsWritten, unsigned long ulNumberOfUnitsToWrite )
	{
		_WINQ_FCONTEXT( "CFileSink::Write" );

		if( GetMode() == ePull )
		{
			unsigned long ulUnitsRead = 0;
			GetSource()->Read( ulUnitsRead, ulNumberOfUnitsToWrite );
		}

		bool bResult = false;
		CFileConnector* pFileConnector = dynamic_cast< CFileConnector* >( m_pIOSinkConnector );
		if( pFileConnector && pFileConnector->IsConnected() )
		{			
			byte* pBuffer = GetSource()->GetBuffer()->ReadRequest(ulNumberOfUnitsToWrite);
			unsigned long ulUnitSize = GetSource()->GetBuffer()->GetUnitSize();
			if( pFileConnector->AsyncConnection() )
			{
				if( pBuffer )
				{
					
					bResult = pFileConnector->File()->WriteEx( (const void*)(pBuffer), ulNumberOfUnitsToWrite * ulUnitSize, 
					reinterpret_cast< OVERLAPPED* >( pFileConnector->GetSyncObject() ), (LPOVERLAPPED_COMPLETION_ROUTINE)(&COverlappedHandler::OnOverlappedWriteCompleted) );
				}
				ulNumberOfUnitsWritten = 0;

				if( !bResult )
				{
					WriteError.Signal();
				}

			}
			else
			{				
				if( pBuffer && ulNumberOfUnitsToWrite > 0 )
				{
					ulNumberOfUnitsWritten = 0;
					bResult = pFileConnector->File()->Write( (const void*)(pBuffer), ulNumberOfUnitsToWrite * ulUnitSize, &ulNumberOfUnitsWritten, 0 );
					if( bResult && ( ulNumberOfUnitsWritten > 0 ) )
					{
						ulNumberOfUnitsWritten  /= ulUnitSize;
					}
					GetSource()->GetBuffer()->ReadAcknowledge( ulNumberOfUnitsWritten );
				}
				
				if( bResult )
				{
					WriteSuccess.Signal();
				}
				else
				{
					WriteError.Signal();
				}
			}
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CFileSink::Flush( void )
	{
		_WINQ_FCONTEXT( "CFileSink::Flush" );
		bool bResult = true;
		CFileConnector* pFileConnector = dynamic_cast< CFileConnector* >( m_pIOSinkConnector );
		if( pFileConnector && pFileConnector->IsConnected() )
		{
			bResult = pFileConnector->File()->FlushBuffers();
		}
		return bResult;
	}

}//nsWin32


