//WinQLConsoleAliases.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLErrDomain.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Console/WinQLConsole.h"
__QCMP_WARNING_POP
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	CConsole::CAliases::CAliases( CConsole& Console ) : m_Console( Console )
	{
	}

	//--------------------------------------------------------------------------------
	CConsole::CAliases::~CAliases()
	{
	}

	//--------------------------------------------------------------------------------
	bool CConsole::CAliases::Add( const TCHAR* szSource, const TCHAR* szTarget, const TCHAR* szExeName )
	{
		return m_Console.m_Helper.AddAlias( szSource, szTarget, szExeName );
	}

	//--------------------------------------------------------------------------------
	unsigned long CConsole::CAliases::Get( const TCHAR* szSource, CTStringRef strTargetBuffer, const TCHAR* szExeName )
	{
		return m_Console.m_Helper.GetAlias( szSource, strTargetBuffer, szExeName );
	}

	//--------------------------------------------------------------------------------
	unsigned long CConsole::CAliases::GetAll( CTStringRef strAliases, const TCHAR* szExeName )
	{
		return m_Console.m_Helper.GetAliases( strAliases, szExeName );
	}

	//--------------------------------------------------------------------------------
	unsigned long CConsole::CAliases::GetLength( const TCHAR* szExeName )
	{
		return m_Console.m_Helper.GetAliasesLength( szExeName );
	}			

	//--------------------------------------------------------------------------------
	unsigned long CConsole::CAliases::GetExes( CTString& ExeNameBuffer )
	{
		unsigned long ulExesLen = GetExesLength();
		if (ulExesLen > USHRT_MAX)
		{
			//TODO: Raise a data loss error!
		}
		ExeNameBuffer.GetBufferSetLength( static_cast< unsigned short >( ulExesLen ) );
		unsigned long ulResult = m_Console.m_Helper.GetAliasExes( ExeNameBuffer() );
		ExeNameBuffer.ValidateBuffer( static_cast< unsigned short >( ulResult ) );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CConsole::CAliases::GetExesLength()
	{
		return m_Console.m_Helper.GetAliasExesLength();
	}					
}//nsWin32
