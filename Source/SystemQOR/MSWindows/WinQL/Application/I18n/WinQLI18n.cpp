//WinQLI18n.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/I18n/WinQLI18n.h"
#include "WinQL/CodeServices/Text/WinQLCodePage.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CCalendarHelper );

	//--------------------------------------------------------------------------------
	CCalendarHelper::CCalendarHelper()
	{
		_WINQ_FCONTEXT( "CCalendarHelper::CCalendarHelper" );
	}

	//--------------------------------------------------------------------------------
	CCalendarHelper::~CCalendarHelper()
	{
		_WINQ_FCONTEXT( "CCalendarHelper::~CCalendarHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::AdjustCalendarDate( CalDateTime& CalDateTime, int calUnit, int amount )
	{				
		_WINQ_FCONTEXT( "CCalendarHelper::AdjustCalendarDate" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::AdjustCalendarDate( &CalDateTime, calUnit, amount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::ConvertCalDateTimeToSystemTime( const CalDateTime& CalDateTime, SystemTime& SysTime )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::ConvertCalDateTimeToSystemTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ConvertCalDateTimeToSystemTime( &CalDateTime, reinterpret_cast< ::SYSTEMTIME* >( &SysTime ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::ConvertSystemTimeToCalDateTime( const SystemTime& SysTime, unsigned long calId, CalDateTime& CalDateTime )
	{	
		_WINQ_FCONTEXT( "CCalendarHelper::ConvertSystemTimeToCalDateTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ConvertSystemTimeToCalDateTime( reinterpret_cast< const ::SYSTEMTIME* >( &SysTime ), calId, &CalDateTime ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::EnumCalendarInfoT( CalInfoEnumCallback pCalInfoEnumProc, unsigned long Locale, unsigned long Calendar, unsigned long CalType )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::EnumCalendarInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumCalendarInfo( pCalInfoEnumProc, Locale, Calendar, CalType ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::EnumCalendarInfoExT( CalInfoEnumCallbackEx pCalInfoEnumProcEx, unsigned long Locale, unsigned long Calendar, unsigned long CalType )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::EnumCalendarInfoEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumCalendarInfoEx( pCalInfoEnumProcEx, Locale, Calendar, CalType ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::EnumCalendarInfoExEx( CalInfoEnumCallbackExEx pCalInfoEnumProcExEx, const wchar_t* lpLocaleName, unsigned long Calendar, const wchar_t* lpReserved, unsigned long CalType, Cmp_long_ptr lParam )
	{	
		_WINQ_FCONTEXT( "CCalendarHelper::EnumCalendarInfoExEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumCalendarInfoExEx( pCalInfoEnumProcExEx, lpLocaleName, Calendar, lpReserved, CalType, lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::EnumDateFormatsT( DateFormatEnumCallback lpDateFmtEnumProc, unsigned long Locale, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::EnumDateFormats" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumDateFormats( lpDateFmtEnumProc, Locale, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::EnumDateFormatsExT( DateFormatEnumCalbackEx lpDateFmtEnumProcEx, unsigned long Locale, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::EnumDateFormatsEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumDateFormatsEx ( lpDateFmtEnumProcEx, Locale, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::EnumDateFormatsExEx ( DateFormatEnumCallbackExEx lpDateFmtEnumProcExEx, const wchar_t* lpLocaleName, unsigned long dwFlags, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::EnumDateFormatsExEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumDateFormatsExEx ( lpDateFmtEnumProcExEx, lpLocaleName, dwFlags, lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::EnumTimeFormatsT( TimeFmtEnumCallback lpTimeFmtEnumProc, unsigned long Locale, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::EnumTimeFormats" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumTimeFormats( lpTimeFmtEnumProc, Locale, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::EnumTimeFormatsEx( TimeFmtEnumCallbackEx lpTimeFmtEnumProcEx, const wchar_t* lpLocaleName, unsigned long dwFlags, Cmp_long_ptr lParam )
	{	
		_WINQ_FCONTEXT( "CCalendarHelper::EnumTimeFormatsEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumTimeFormatsEx( lpTimeFmtEnumProcEx, lpLocaleName, dwFlags, lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::GetCalendarDateFormatEx( const wchar_t* lpszLocale, unsigned long dwFlags, const CalDateTime* lpCalDateTime, const wchar_t* lpFormat, CWStringRef strDate )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::GetCalendarDateFormatEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetCalendarDateFormatEx( lpszLocale, dwFlags, lpCalDateTime, lpFormat, strDate->GetBuffer(), strDate->Allocation() ) ? true : false;
			strDate->ReleaseBuffer();
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CCalendarHelper::GetCalendarInfoT( unsigned long Locale, unsigned long Calendar, unsigned long CalType, CTStringRef strCalData, unsigned long& Value )
	{	
		_WINQ_FCONTEXT( "CCalendarHelper::GetCalendarInfo" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetCalendarInfo( Locale, Calendar, CalType, strCalData->GetBuffer(), strCalData->Allocation(), &Value );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CCalendarHelper::GetCalendarInfoExT( const wchar_t* lpLocaleName, unsigned long Calendar, unsigned long CalType, CWStringRef strCalData, unsigned long& Value )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::GetCalendarInfoEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetCalendarInfoEx( lpLocaleName, Calendar, 0, CalType, strCalData->GetBuffer(), strCalData->Allocation(), &Value );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::GetCalendarSupportedDateRange( unsigned long Calendar, CalDateTime& CalMinDateTime, CalDateTime& CalMaxDateTime )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::GetCalendarSupportedDateRange" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetCalendarSupportedDateRange( Calendar, &CalMinDateTime, &CalMaxDateTime ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CCalendarHelper::GetDateFormatT( unsigned long Locale, unsigned long dwFlags, const SystemTime* lpDate, const TCHAR* lpFormat, CTStringRef strDate )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::GetDateFormat" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetDateFormat( Locale, dwFlags, reinterpret_cast< const ::SYSTEMTIME* >( lpDate ), lpFormat, strDate->GetBuffer(), strDate->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CCalendarHelper::GetDateFormatEx( const wchar_t* lpLocaleName, unsigned long dwFlags, const SystemTime& Date, const wchar_t* lpFormat, CWStringRef strDate, const wchar_t* lpCalendar )
	{	
		_WINQ_FCONTEXT( "CCalendarHelper::GetDateFormatEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetDateFormatEx( lpLocaleName, dwFlags, reinterpret_cast< const ::SYSTEMTIME* >( &Date ), lpFormat, strDate->GetBuffer(), strDate->Allocation(), lpCalendar );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CCalendarHelper::GetDurationFormat( unsigned long Locale, unsigned long dwFlags, const SystemTime& Duration, Cmp_unsigned__int64 ullDuration, const wchar_t* lpFormat, CWStringRef strDuration )
	{	
		_WINQ_FCONTEXT( "CCalendarHelper::GetDurationFormat" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetDurationFormat( Locale, dwFlags, reinterpret_cast< const ::SYSTEMTIME* >( &Duration ), ullDuration, lpFormat, strDuration->GetBuffer(), strDuration->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CCalendarHelper::GetDurationFormatEx( const wchar_t* lpLocaleName, unsigned long dwFlags, const SystemTime& Duration, Cmp_unsigned__int64 ullDuration, const wchar_t* lpFormat, CWStringRef strDuration )
	{	
		_WINQ_FCONTEXT( "CCalendarHelper::GetDurationFormatEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetDurationFormatEx( lpLocaleName, dwFlags, reinterpret_cast< const ::SYSTEMTIME* >( &Duration ), ullDuration, lpFormat, strDuration->GetBuffer(), strDuration->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CCalendarHelper::GetTimeFormatT( unsigned long Locale, unsigned long dwFlags, const SystemTime& Time, const TCHAR* lpFormat, CTStringRef strTime )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::GetTimeFormat" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetTimeFormat( Locale, dwFlags, reinterpret_cast< const ::SYSTEMTIME* >( &Time ), lpFormat, strTime->GetBuffer(), strTime->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CCalendarHelper::GetTimeFormatEx( const wchar_t* lpLocaleName, unsigned long dwFlags, const SystemTime& Time, const wchar_t* lpFormat, CWStringRef strTime )
	{	
		_WINQ_FCONTEXT( "CCalendarHelper::GetTimeFormatEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetTimeFormatEx( lpLocaleName, dwFlags, reinterpret_cast< const ::SYSTEMTIME* >( &Time ), lpFormat, strTime->GetBuffer(), strTime->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::IsCalendarLeapYear( unsigned long calId, unsigned int year, unsigned int era )
	{	
		_WINQ_FCONTEXT( "CCalendarHelper::IsCalendarLeapYear" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsCalendarLeapYear( calId, year, era ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CCalendarHelper::SetCalendarInfoT( unsigned long Locale, unsigned long Calendar, unsigned long CalType, const TCHAR* lpCalData )
	{	
		_WINQ_FCONTEXT( "CCalendarHelper::SetCalendarInfo" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::SetCalendarInfo( Locale, Calendar, CalType, lpCalData );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CCalendarHelper::UpdateCalendarDayOfWeek( CalDateTime& CalDateTime )
	{
		_WINQ_FCONTEXT( "CCalendarHelper::UpdateCalendarDayOfWeek" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::UpdateCalendarDayOfWeek( &CalDateTime ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}


	//--Locale Helper-----------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CLocaleHelper );

	//--------------------------------------------------------------------------------
	CLocaleHelper::CLocaleHelper()
	{
		_WINQ_FCONTEXT( "CLocaleHelper::CLocaleHelper" );
	}

	//--------------------------------------------------------------------------------
	CLocaleHelper::~CLocaleHelper()
	{
		_WINQ_FCONTEXT( "CLocaleHelper::~CLocaleHelper" );
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::CompareStringOrdinal ( const wchar_t* lpString1, int cchCount1, const wchar_t* lpString2, int cchCount2, bool bIgnoreCase ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::CompareStringOrdinal" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::CompareStringOrdinal( lpString1, cchCount1, lpString2, cchCount2, bIgnoreCase ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CLocaleHelper::ConvertDefaultLocale( unsigned long Locale ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::ConvertDefaultLocale" );
		unsigned long Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::ConvertDefaultLocale( Locale );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::EnumLanguageGroupLocalesT( LangGroupLocaleEnumCallback pLangGroupLocaleEnumProc, CLocaleHelper::eLanguageGroup LanguageGroup, Cmp_long_ptr lParam ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::EnumLanguageGroupLocalesT" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumLanguageGroupLocales( pLangGroupLocaleEnumProc, static_cast< LGRPID >( LanguageGroup ), 0, lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::EnumSystemCodePagesT( CodePageEnumCallback lpCodePageEnumProc, unsigned long dwFlags ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::EnumSystemCodePages" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumSystemCodePages( lpCodePageEnumProc, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::EnumSystemGeoID( unsigned long GeoClass, long ParentGeoId, GeoEnumCallback lpGeoEnumProc ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::EnumSystemGeoID" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumSystemGeoID( GeoClass, ParentGeoId, lpGeoEnumProc ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::EnumSystemLanguageGroupsT( LanguageGroupEnumCallback pLangGroupEnumProc, unsigned long dwFlags, Cmp_long_ptr lParam ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::EnumSystemLanguageGroups" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumSystemLanguageGroups( pLangGroupEnumProc, dwFlags, lParam ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::EnumSystemLocalesA( LocaleEnumCallbackA lpLocaleEnumProc, unsigned long dwFlags ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::EnumSystemLocalesA" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumSystemLocalesA( lpLocaleEnumProc, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::EnumSystemLocalesT( LocaleEnumCallback lpLocaleEnumProc, unsigned long dwFlags ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::EnumSystemLocalesT" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumSystemLocales( lpLocaleEnumProc, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::EnumSystemLocalesW( LocaleEnumCallbackW lpLocaleEnumProc, unsigned long dwFlags ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::EnumSystemLocalesW" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumSystemLocalesW( lpLocaleEnumProc, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::EnumSystemLocalesEx( LocaleEnumCallbackEx lpLocaleEnumProcEx, unsigned long dwFlags, Cmp_long_ptr lParam ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::EnumSystemLocalesEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EnumSystemLocalesEx( lpLocaleEnumProcEx, dwFlags, lParam, 0 ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::FindNLSString( unsigned long Locale, unsigned long dwFindNLSStringFlags, const wchar_t* lpStringSource, int cchSource, const wchar_t* lpStringValue, int cchValue, int* pcchFound ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::FindNLSString" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::FindNLSString( Locale, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::FindNLSStringEx( const wchar_t* lpLocaleName, unsigned long dwFindNLSStringFlags, const wchar_t* lpStringSource, int cchSource, const wchar_t* lpStringValue, int cchValue, int* pcchFound, NLSVersionInfo* lpVersionInformation, void* lpReserved, Cmp_long_ptr lParam ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::FindNLSStringEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::FindNLSStringEx ( lpLocaleName, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound, reinterpret_cast< ::LPNLSVERSIONINFO >( lpVersionInformation ), lpReserved, lParam );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CLocaleHelper::GetACP() const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetACP" );
		unsigned int uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::GetACP();
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CPInfo > CLocaleHelper::GetCPInfo( CCodePage& CodePage ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::GetCPInfo" );
		nsCodeQOR::CTLRef< CPInfo > Result;
		__QOR_PROTECT
		{
			bool bResult = false;
			CPInfo* pInfo = new CPInfo;
			bResult = CKernel32::GetCPInfo( CodePage.ID(), reinterpret_cast< ::LPCPINFO >( pInfo ) ) ? true : false;
			Result = nsCodeQOR::CTLRef< CPInfo >( pInfo, true );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CPInfoEx > CLocaleHelper::GetCPInfoExT( CCodePage& CodePage ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetCPInfoEx" );
		nsCodeQOR::CTLRef< CPInfoEx > Result;	
		__QOR_PROTECT
		{
			bool bResult = false;
			CPInfoEx* pInfo = new CPInfoEx;
			bResult = CKernel32::GetCPInfoEx ( CodePage, 0, reinterpret_cast< ::LPCPINFOEX >( pInfo ) ) ? true : false;
			Result = nsCodeQOR::CTLRef< CPInfoEx >( pInfo, true );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::GetCurrencyFormatT( unsigned long Locale, unsigned long dwFlags, const TCHAR* lpValue, const CURRENCYFMT& Format, CTStringRef strCurrency ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetCurrencyFormat" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetCurrencyFormat( Locale, dwFlags, lpValue, reinterpret_cast< const ::CURRENCYFMT* >( &Format ), strCurrency->GetBuffer(), strCurrency->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::GetCurrencyFormatEx( const wchar_t* lpLocaleName, unsigned long dwFlags, const wchar_t* lpValue, const CURRENCYFMTW& Format, CWStringRef strCurrency ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::GetCurrencyFormatEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetCurrencyFormatEx ( lpLocaleName, dwFlags, lpValue, reinterpret_cast< const ::CURRENCYFMTW* >( &Format ), strCurrency->GetBuffer(), strCurrency->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	CTString CLocaleHelper::GetGeoInfoT( long GeoId, unsigned long GeoType, unsigned short language ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetGeoInfo" );
		CTString strGeoInfo;
		__QOR_PROTECT
		{
			int iResult = 0;
			iResult = CKernel32::GetGeoInfo( GeoId, GeoType, 0, 0, 0 );
			if( iResult > 0 )
			{
				iResult = CKernel32::GetGeoInfo( GeoId, GeoType, strGeoInfo.GetBufferSetLength( static_cast< unsigned short >( iResult ) ), iResult, language );
				strGeoInfo.ValidateBuffer( static_cast< unsigned short >( iResult ) );
			}
		}__QOR_ENDPROTECT
		return strGeoInfo;
	}

	//------------------------------------------------------------------------------
	int CLocaleHelper::GetLocaleInfoT( unsigned long Locale, unsigned long LCType, CTStringRef strLCData ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::GetLocaleInfo" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetLocaleInfo( Locale, LCType, strLCData->GetBuffer(), strLCData->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//------------------------------------------------------------------------------
	int CLocaleHelper::GetLocaleInfoA( unsigned long Locale, unsigned long LCType, CAStringRef strLCData ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::GetLocaleInfo" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetLocaleInfoA( Locale, LCType, strLCData->GetBuffer(), strLCData->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//------------------------------------------------------------------------------
	int CLocaleHelper::GetLocaleInfoW( unsigned long Locale, unsigned long LCType, CWStringRef strLCData ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::GetLocaleInfo" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetLocaleInfoW( Locale, LCType, strLCData->GetBuffer(), strLCData->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::GetLocaleInfoEx( const wchar_t* lpLocaleName, unsigned long LCType, CWStringRef strLCData ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::GetLocaleInfoEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetLocaleInfoEx ( lpLocaleName, LCType, strLCData->GetBuffer(), strLCData->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::GetNLSVersion( unsigned long Function, unsigned long Locale, NLSVersionInfo& VersionInformation ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetNLSVersion" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetNLSVersion( Function, Locale, reinterpret_cast< ::LPNLSVERSIONINFO >( &VersionInformation ) ) ? true : false; 
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::GetNLSVersionEx( unsigned long function, const wchar_t* lpLocaleName, NLSVersionInfoEx& VersionInformation ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::GetNLSVersionEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetNLSVersionEx( function, lpLocaleName, reinterpret_cast< ::LPNLSVERSIONINFOEX >( &VersionInformation ) ) ? true : false; 
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::GetNumberFormatT( unsigned long Locale, unsigned long dwFlags, const TCHAR* lpValue, const NUMBERFMT& Format, CTStringRef strNumber ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetNumberFormat" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetNumberFormat( Locale, dwFlags, lpValue, reinterpret_cast< const ::NUMBERFMT* >( &Format ), strNumber->GetBuffer(), strNumber->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::GetNumberFormatEx( const wchar_t* lpLocaleName, unsigned long dwFlags, const wchar_t* lpValue, const nsWin32::NUMBERFMTW& Format, CWStringRef strNumber ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::GetNumberFormatEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetNumberFormatEx( lpLocaleName, dwFlags, lpValue, reinterpret_cast< const ::NUMBERFMTW* >( &Format ), strNumber->GetBuffer(), strNumber->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CLocaleHelper::GetOEMCP() const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetOEMCP" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::GetOEMCP();
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::GetStringScripts( unsigned long dwFlags, const wchar_t* lpString, int cchString, CWStringRef strScripts ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetStringScripts" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetStringScripts( dwFlags, lpString, cchString, strScripts->GetBuffer(), strScripts->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short CLocaleHelper::GetSystemDefaultLangID() const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetSystemDefaultLangID" );
		LANGID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::GetSystemDefaultLangID();
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned long CLocaleHelper::GetSystemDefaultLCID(void) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetSystemDefaultLCID" );
		LCID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::GetSystemDefaultLCID();
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::GetSystemDefaultLocaleName( CWStringRef strLocaleName ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::GetSystemDefaultLocaleName" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::GetSystemDefaultLocaleName( strLocaleName->GetBuffer(), strLocaleName->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CLocaleHelper::GetThreadLocale() const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetThreadLocale" );
		LCID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::GetThreadLocale();
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned short CLocaleHelper::GetUserDefaultLangID() const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetUserDefaultLangID" );
		LANGID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::GetUserDefaultLangID();
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned long CLocaleHelper::GetUserDefaultLCID() const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetUserDefaultLCID" );
		LCID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::GetUserDefaultLCID();
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	CWString CLocaleHelper::GetUserDefaultLocaleName() const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::GetUserDefaultLocaleName" );
		CWString strUserDefaultLocaleName;
		__QOR_PROTECT
		{			
			int iResult = 0;
			iResult = CKernel32::GetUserDefaultLocaleName( strUserDefaultLocaleName.GetBufferSetLength( LOCALE_NAME_MAX_LENGTH ), LOCALE_NAME_MAX_LENGTH );
			strUserDefaultLocaleName.ValidateBuffer( static_cast< unsigned short >( iResult ) );
		}__QOR_ENDPROTECT
		return strUserDefaultLocaleName;
	}

	//--------------------------------------------------------------------------------
	long CLocaleHelper::GetUserGeoID( unsigned long GeoClass ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::GetUserGeoID" );
		GEOID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::GetUserGeoID( GeoClass );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::IdnToAscii( unsigned long dwFlags, const wchar_t* lpUnicodeCharStr, int cchUnicodeChar, CWStringRef strASCIIChar ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::IdnToAscii" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::IdnToAscii( dwFlags, lpUnicodeCharStr, cchUnicodeChar, strASCIIChar->GetBuffer(), strASCIIChar->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::IdnToNameprepUnicode( unsigned long dwFlags, const wchar_t* lpUnicodeCharStr, int cchUnicodeChar, CWStringRef strNameprepChar ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::IdnToNameprepUnicode" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::IdnToNameprepUnicode( dwFlags, lpUnicodeCharStr, cchUnicodeChar, strNameprepChar->GetBuffer(), strNameprepChar->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::IdnToUnicode( unsigned long dwFlags, const wchar_t* lpASCIICharStr, int cchASCIIChar, CWStringRef strUnicodeChar ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::IdnToUnicode" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::IdnToUnicode( dwFlags, lpASCIICharStr, cchASCIIChar, strUnicodeChar->GetBuffer(), strUnicodeChar->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::IsNLSDefinedString( unsigned long Function, unsigned long dwFlags, NLSVersionInfo& VersionInfo, const wchar_t* lpString, int cchStr ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::IsNLSDefinedString" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsNLSDefinedString( Function, dwFlags, reinterpret_cast< ::LPNLSVERSIONINFO >( &VersionInfo ), lpString, cchStr ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::IsNormalizedString( NORM_FORM NormForm, const wchar_t* lpString, int cwLength ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::IsNormalizedString" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsNormalizedString( static_cast< ::NORM_FORM >( NormForm ), lpString, cwLength ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::IsValidCodePage( unsigned int CodePageID ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::IsValidCodePage" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsValidCodePage( CodePageID ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::IsValidLanguageGroup( unsigned long LanguageGroup, unsigned long dwFlags ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::IsValidLanguageGroup" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsValidLanguageGroup( LanguageGroup, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::IsValidLocale( unsigned long Locale, unsigned long dwFlags ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::IsValidLocale" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsValidLocale( Locale, dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::IsValidLocaleName( const wchar_t* lpLocaleName ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::IsValidLocaleName" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsValidLocaleName( lpLocaleName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::LCIDToLocaleName( unsigned long Locale, CWStringRef strName, unsigned long dwFlags ) const
	{			
		_WINQ_FCONTEXT( "CLocaleHelper::LCIDToLocaleName" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::LCIDToLocaleName( Locale, strName->GetBuffer(), strName->Allocation(), dwFlags );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::LCMapStringT( unsigned long Locale, unsigned long dwMapFlags, const TCHAR* lpSrcStr, int cchSrc, CTStringRef strDestStr ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::LCMapString" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::LCMapString( Locale, dwMapFlags, lpSrcStr, cchSrc, strDestStr->GetBuffer(), strDestStr->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::LCMapStringA( unsigned long Locale, unsigned long dwMapFlags, const char* lpSrcStr, int cchSrc, CAStringRef strDestStr ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::LCMapStringA" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::LCMapStringA( Locale, dwMapFlags, lpSrcStr, cchSrc, strDestStr->GetBuffer(), strDestStr->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::LCMapStringW( unsigned long Locale, unsigned long dwMapFlags, const wchar_t* lpSrcStr, int cchSrc, CWStringRef strDestStr ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::LCMapStringW" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::LCMapStringW( Locale, dwMapFlags, lpSrcStr, cchSrc, strDestStr->GetBuffer(), strDestStr->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::LCMapStringEx( const wchar_t* lpLocaleName, unsigned long dwMapFlags, const wchar_t* lpSrcStr, int cchSrc, wchar_t* lpDestStr, int cchDest, NLSVersionInfo* lpVersionInformation, void* lpReserved, Cmp_long_ptr lParam ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::LCMapStringEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::LCMapStringEx( lpLocaleName, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest, reinterpret_cast< ::LPNLSVERSIONINFO >( lpVersionInformation ), lpReserved, lParam );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CLocaleHelper::LocaleNameToLCID( wchar_t* lpName, unsigned long dwFlags ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::LocaleNameToLCID" );
		LCID Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::LocaleNameToLCID( lpName, dwFlags );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CLocaleHelper::NormalizeString( NORM_FORM NormForm, const wchar_t* lpSrcString, int cwSrcLength, CWStringRef strDst ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::NormalizeString" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = CKernel32::NormalizeString( static_cast< ::NORM_FORM >( NormForm ), lpSrcString, cwSrcLength, strDst->GetBuffer(), strDst->Allocation() );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::SetLocaleInfoT( unsigned long Locale, unsigned long LCType, const TCHAR* lpLCData ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::SetLocaleInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetLocaleInfo( Locale, LCType, lpLCData ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::SetThreadLocale( unsigned long Locale ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::SetThreadLocale" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetThreadLocale ( Locale ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::SetUserGeoID( long GeoID ) const
	{
		_WINQ_FCONTEXT( "CLocaleHelper::SetUserGeoID" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetUserGeoID( GeoID ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CLocaleHelper::VerifyScripts( unsigned long dwFlags, const wchar_t* lpLocaleScripts, int cchLocaleScripts, const wchar_t* lpTestScripts, int cchTestScripts ) const
	{	
		_WINQ_FCONTEXT( "CLocaleHelper::VerifyScripts" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::VerifyScripts( dwFlags, lpLocaleScripts, cchLocaleScripts, lpTestScripts, cchTestScripts ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
