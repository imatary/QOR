//WinQLUser.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/WinQL.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/User/WinQLUser.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/GUI/Theme/ThemeData.h"
__QCMP_WARNING_POP
#include "WinQL/System/WinQLSystem.h"
#include "SystemQOR/System.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CUser );

	//--------------------------------------------------------------------------------
	CUser::CUser()
	{
	}

	//--------------------------------------------------------------------------------
	CUser::~CUser()
	{
	}

	//--------------------------------------------------------------------------------
	bool CUser::EnableTheming( bool bEnable )
	{
		_WINQ_FCONTEXT( "CUser::EnableTheming" );
		bool bResult = false;
		CThemeAPI ThemeAPI;
		long lResult = ThemeAPI.Enable( bEnable ? 1 : 0 );
		if( lResult == 0 )
		{
			bResult = true;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	GEOID CUser::GetNation()
	{
		_WINQ_FCONTEXT( "CUser::GetNation" );
		return m_GeoLocationHelper.GetUserNation();
	}

	//--------------------------------------------------------------------------------
	GEOID CUser::GetRegion()
	{
		_WINQ_FCONTEXT( "CUser::GetRegion" );
		return m_GeoLocationHelper.GetUserRegion();
	}

	//--------------------------------------------------------------------------------
	bool CUser::SetGeoID( GEOID GeoID )
	{
		_WINQ_FCONTEXT( "CUser::SetGeoID" );
		bool bResult = m_GeoLocationHelper.SetUserGeoID( GeoID ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned short CUser::GetDefaultLangID( void )
	{
		_WINQ_FCONTEXT( "CUser::GetDefaultLangID" );
		return m_LocaleHelper.GetUserDefaultLangID();
	}

	//--------------------------------------------------------------------------------
	unsigned long CUser::GetDefaultLCID( void )
	{
		_WINQ_FCONTEXT( "CUser::GetDefaultLCID" );
		return m_LocaleHelper.GetUserDefaultLCID();
	}

	//--------------------------------------------------------------------------------
	CWString CUser::GetDefaultLocaleName( void )
	{
		_WINQ_FCONTEXT( "CUser::GetDefaultLocaleName" );
		return m_LocaleHelper.GetUserDefaultLocaleName();
	}

	//--------------------------------------------------------------------------------
	bool CUser::CanIWriteAPowerScheme( void )
	{
		_WINQ_FCONTEXT( "CUser::CanIWriteAPowerScheme" );
		return TheSystem().As< nsWin32::CSystem >()->Power(QOR_PP_SHARED_OBJECT_ACCESS).CanUserWriteAPowerScheme();
	}

}//nsWin32
