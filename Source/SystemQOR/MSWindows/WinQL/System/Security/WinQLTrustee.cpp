//WinQLTrustee.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/Security/WinQLTrustee.h"
#include "SystemQOR/MSWindows/MSW_tchar.h"
#include "WinQAPI/AdvAPI32.h"

using namespace nsWinQAPI;

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CTrustee );

	//--------------------------------------------------------------------------------
	bool operator == ( const Trustee& T1, const Trustee& T2 )
	{
		return ( 
			( T1.MultipleTrusteeOperation == T2.MultipleTrusteeOperation ) &&
			( T1.Form == T2.Form ) &&
			( T1.Type == T2.Type) && 
			( _tcscmp( T1.ptstrName, T2.ptstrName ) == 0 ) &&
			( T1.pMultipleTrustee == T2.pMultipleTrustee ) );
	}

	//--------------------------------------------------------------------------------
	CTrustee::CTrustee( nsCodeQOR::CString strName ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
		_WINQ_FCONTEXT( "CTrustee::CTrustee" );
		m_AdvAPI32Library.BuildTrusteeWithName( reinterpret_cast< ::PTRUSTEE >( this ), reinterpret_cast< LPWSTR >( strName.GetBuffer() ) );
		strName.ReleaseBuffer();
	}

	//--------------------------------------------------------------------------------
	CTrustee::CTrustee( void* pSid ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
		_WINQ_FCONTEXT( "CTrustee::CTrustee" );
		m_AdvAPI32Library.BuildTrusteeWithSid( reinterpret_cast< ::PTRUSTEE >( this ), pSid );
	}

	//--------------------------------------------------------------------------------
	CTrustee::CTrustee( nsWin32::ObjectsAndName* pObjName, nsWin32::SeObjectType ObjectType, TCHAR* ObjectTypeName, 
		TCHAR* InheritedObjectTypeName, TCHAR* Name ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
		_WINQ_FCONTEXT( "CTrustee::CTrustee" );
		m_AdvAPI32Library.BuildTrusteeWithObjectsAndName( reinterpret_cast< ::PTRUSTEE >( this ), reinterpret_cast< ::POBJECTS_AND_NAME_ >( pObjName ), static_cast< ::SE_OBJECT_TYPE >( ObjectType ), ObjectTypeName, 
			InheritedObjectTypeName, Name );
	}

	//--------------------------------------------------------------------------------
	CTrustee::CTrustee( nsWin32::ObjectsAndSID* pObjSid, nsWin32::GUID* pObjectGuid, nsWin32::GUID* pInheritedObjectGuid, void* pSid ) : m_AdvAPI32Library( CAdvAPI32::Instance() )
	{
		_WINQ_FCONTEXT( "CTrustee::CTrustee" );
		m_AdvAPI32Library.BuildTrusteeWithObjectsAndSid( reinterpret_cast< ::PTRUSTEE >( this ), reinterpret_cast< ::POBJECTS_AND_SID >( pObjSid ), reinterpret_cast< ::GUID* >( pObjectGuid ), reinterpret_cast< ::GUID* >( pInheritedObjectGuid ), pSid );
	}

	//--------------------------------------------------------------------------------
	CTrustee::~CTrustee()
	{
		_WINQ_FCONTEXT( "CTrustee::~CTrustee" );
	}

	//--------------------------------------------------------------------------------
	nsWin32::TrusteeForm CTrustee::Form()
	{
		_WINQ_FCONTEXT( "CTrustee::Form" );
		TrusteeForm Result = TRUSTEE_BAD_FORM;
        __QOR_PROTECT
        {
			Result = static_cast< nsWin32::TrusteeForm >( m_AdvAPI32Library.GetTrusteeForm( reinterpret_cast< ::PTRUSTEE >( this ) ) );
        }__QOR_ENDPROTECT
		return Result;
	}
								
	//--------------------------------------------------------------------------------
	bool CTrustee::GetData( void** ppData )
	{
		_WINQ_FCONTEXT( "CTrustee::GetData" );
		void* pData = 0;
		bool bResult = false;
        __QOR_PROTECT
        {
			pData = reinterpret_cast< void* >( m_AdvAPI32Library.GetTrusteeName( reinterpret_cast< ::PTRUSTEE >( this ) ) );
			bResult = true;
			*ppData = pData;
        }__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTrustee::GetData( nsWin32::ObjectsAndName** ppObjectsAndName )
	{
		_WINQ_FCONTEXT( "CTrustee::GetData" );
		ObjectsAndName* pData = 0;
		bool bResult = false;
        __QOR_PROTECT
        {
			if( Form() == TRUSTEE_IS_OBJECTS_AND_NAME )
			{
				pData = reinterpret_cast< ObjectsAndName* >( m_AdvAPI32Library.GetTrusteeName( reinterpret_cast< ::PTRUSTEE >( this ) ) );
				bResult = true;
			}
			*ppObjectsAndName = pData;
        }__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTrustee::GetSid( void** ppSid )
	{
		_WINQ_FCONTEXT( "CTrustee::GetData" );
		SID* pSid = 0;
		bool bResult = false;
        __QOR_PROTECT
        {
			if( Form() == TRUSTEE_IS_SID )
			{
				pSid = reinterpret_cast< SID* >( m_AdvAPI32Library.GetTrusteeName( reinterpret_cast< ::PTRUSTEE >( this ) ) );
				bResult = true;
			}
			*ppSid = pSid;
        }__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTrustee::GetData( nsWin32::ObjectsAndSID** ppObjectsAndSid )
	{
		_WINQ_FCONTEXT( "CTrustee::GetData" );
		ObjectsAndSID* pData = 0;
		bool bResult = false;
        __QOR_PROTECT
        {
			if( Form() == TRUSTEE_IS_OBJECTS_AND_SID )
			{
				pData = reinterpret_cast< ObjectsAndSID* >( m_AdvAPI32Library.GetTrusteeName( reinterpret_cast< ::PTRUSTEE >( this ) ) );
				bResult = true;
			}
			*ppObjectsAndSid = pData;
        }__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CString CTrustee::Name()
	{
		_WINQ_FCONTEXT( "CTrustee::Name" );
		nsCodeQOR::CString strResult;
        __QOR_PROTECT
        {
			strResult = nsCodeQOR::CString(m_AdvAPI32Library.GetTrusteeName( reinterpret_cast< ::PTRUSTEE >( this ) ) );
        }__QOR_ENDPROTECT
		return strResult;
	}

	//--------------------------------------------------------------------------------
	nsWin32::TrusteeType CTrustee::Type()
	{
		_WINQ_FCONTEXT( "CTrustee::Type" );
		TrusteeType Result = TRUSTEE_IS_UNKNOWN;
        __QOR_PROTECT
        {
			Result = static_cast< nsWin32::TrusteeType >( m_AdvAPI32Library.GetTrusteeType( reinterpret_cast< ::PTRUSTEE >( this ) ) );
        }__QOR_ENDPROTECT
		return Result;
	}

}//nsWin32

