//BOMRecognizerFilter.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_FILTERS_BOMRECOGNIZER_H_3
#define BLUEFOOT_FILTERS_BOMRECOGNIZER_H_3

//Defines a filter to recognize Byte Order Marks

#include "BluefootQOR/BfFilter.h"
#include "AppocritaQOR/Event.h"
#include "AppocritaQOR/Application.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CBOMRecognizedEvent : public nsQOR::CEvent
	{
	public:

		//------------------------------------------------------------------------------
		enum eBOMType
		{
			eNone,
			eUTF8,
			eUTF16LE,
			eUTF16BE
		};

		//------------------------------------------------------------------------------
		CBOMRecognizedEvent() : nsQOR::CEvent( *TheApplication() )
		{
			m_BOMType = eNone;
		}

		/*
		//------------------------------------------------------------------------------
		CBOMRecognizedEvent( const CBOMRecognizedEvent& Src ) : nsQOR::CEvent( Src )
		{
			*this = Src;
		}*/

		//------------------------------------------------------------------------------
		CBOMRecognizedEvent& operator = ( const CBOMRecognizedEvent& Src )
		{
			m_BOMType = Src.m_BOMType;
			return *this;
		}

		//------------------------------------------------------------------------------
		eBOMType& BOMType( void )
		{
			return m_BOMType;
		}

	protected:

		eBOMType m_BOMType;

	};

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CBOMRecognizerFilter : public nsBluefoot::CBFFilter
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CBOMRecognizerFilter );

		CBOMRecognizerFilter();
		virtual ~CBOMRecognizerFilter();
		CBOMRecognizerFilter( const CBOMRecognizerFilter& src );
		CBOMRecognizerFilter& operator = ( const CBOMRecognizerFilter& src );
		
		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead = 1 );
		virtual bool Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite = 1 );
		virtual CBFBuffer* GetSourceBuffer( void );

		__QCMP_STATIC_CONSTANT( unsigned long, sculBOMBytes = 4 );
		__QCMP_STATIC_CONSTANT( unsigned long, sculPatterns = 3 );

		CBOMRecognizedEvent m_RecognitionEvent;

	protected:

		bool m_bRecognized;

	private:

		byte* GetBOM( unsigned long& ulBOMBytes  );
		void AcknowledgeBOM( unsigned long ulBOMBytes );
		void RejectBOM( unsigned long ulBOMBytes );
		void RecognizeBOM( void );		
	};
}

#endif//BLUEFOOT_FILTERS_BOMRECOGNIZER_H_3

