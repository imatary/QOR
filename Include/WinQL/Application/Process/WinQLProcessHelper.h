//WinQLProcessHelper.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Process and thread helper

#ifndef WINQL_CS_THREADING_H_3
#define WINQL_CS_THREADING_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/Handles.h"
#include "CodeQOR/ClassReg/ClassRegEntry.h"
#include "WinQL/CodeServices/Text/WinString.h"

__QCMP_WARNING_DISABLE( __QCMP_WARN_UNREF_LOCAL_FUNCTION, "Unreferenced functions OK at the moment." )

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CPSAPI;
	class __QOR_INTERFACE( __WINQAPI ) CDll;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CProcessHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CProcessHelper );

		CProcessHelper();
		CProcessHelper( const CProcessHelper& );
		CProcessHelper& operator=( const CProcessHelper& );
		~CProcessHelper();
		bool FreeEnvironmentStringsT( TCHAR* lpszEnvironmentBlock );
		TCHAR* GetCommandLineT( void );
		void* GetEnvironmentStringsT( void );
		unsigned long GetEnvironmentVariableT( const TCHAR* lpName, TCHAR* lpBuffer, unsigned long nSize );
		static nsWin32::STARTUPINFO StartupInfo( void );
		bool SetEnvironmentVariableT( const TCHAR* lpName, const TCHAR* lpValue );
		unsigned int WinExec( const char* lpCmdLine, unsigned int uCmdShow );
		unsigned long LoadModule( const char* lpModuleName, void* lpParameterBlock );
		bool NeedCurrentDirectoryForExePathT( const TCHAR* ExeName );
		CTString GetFileName( void );

		bool EnumProcesses( unsigned long* lpidProcess, unsigned long cb, unsigned long* lpcbNeeded );
		bool EnumProcessModules( ModuleHandle hProcess, ModuleHandle* lphModule, unsigned long cb, unsigned long* lpcbNeeded );
		bool EnumProcessModulesEx( ModuleHandle hProcess, ModuleHandle* lphModule, unsigned long cb, unsigned long* lpcbNeeded, unsigned long dwFilterFlag );

	protected:

		nsWinQAPI::CPSAPI& m_PSAPI;
			
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CProcessThreadAttributeList
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CProcessThreadAttributeList );

		CProcessThreadAttributeList( unsigned long dwAttributeCount, int* pbResult = 0 );
		virtual ~CProcessThreadAttributeList();
		bool Update( Cmp_ulong_ptr Attribute, void* lpValue, Cmp_ulong_ptr cbSize );

	private:

		Cmp_ulong_ptr m_Size;
		void* m_pAttributeList;

		CProcessThreadAttributeList();
		CProcessThreadAttributeList( const CProcessThreadAttributeList& );
		CProcessThreadAttributeList& operator = ( const CProcessThreadAttributeList& );
	};

	/*
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CThreadHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CThreadHelper );

		CThreadHelper();
		CThreadHelper( const CThreadHelper& );
		CThreadHelper& operator = ( const CThreadHelper& );
		virtual ~CThreadHelper();
		bool SetThreadStackGuarantee( unsigned long* StackSizeInBytes );
		void Sleep( unsigned long dwMilliseconds );
		unsigned long SleepEx( unsigned long dwMilliseconds, bool bAlertable );
		void SwitchToFiber( void* lpFiber );
		bool SwitchToThread( void );
		unsigned long GetCurrentProcessorNumber( void );
	};
	*/
}//nsWin32

#endif//WINQL_CS_THREADING_H_3
