//BfSource.h

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_SOURCE_H_3
#define BLUEFOOT_SOURCE_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//Defines a Source for a Bluefoot pipeline

#include "BfElement.h"
#include "BfBuffer.h"
#include "AppocritaQOR/Event.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	class CSink;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CSource : public CElement
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CSource);

		//------------------------------------------------------------------------------
		class CReadSuccess : public nsQOR::CEvent
		{
		public:

			//------------------------------------------------------------------------------
			CReadSuccess() : CEvent()
			{
				m_ulUnitsRead = 0;
			}

			unsigned long GetUnitsRead(void) { return m_ulUnitsRead; }

			
		protected:

			//------------------------------------------------------------------------------
			void SetUnitsRead(unsigned long ulUnitsRead) 
			{ 
				m_ulUnitsRead = ulUnitsRead; 
				Signal();
			}

			unsigned long m_ulUnitsRead;
			friend class CSource;
		}ReadSuccess;

		//------------------------------------------------------------------------------
		class CReadError : public nsQOR::CEvent
		{
		public:

			//------------------------------------------------------------------------------
			CReadError() : CEvent()
			{
				m_ulUnitsRead = 0;
				m_ulError = 0;
			}

			unsigned long GetUnitsRead(void) { return m_ulUnitsRead; }
			unsigned long GetError(void) { return m_ulError; }

		protected:

			void SetData(unsigned long ulUnitsRead, unsigned long ulError)
			{
				m_ulUnitsRead = ulUnitsRead;
				m_ulError = ulError;
				Signal();
			}

			unsigned long m_ulUnitsRead;
			unsigned long m_ulError;
			friend class CSource;
		}ReadError;

		nsQOR::CEvent EndOfData;

		CSource();
		virtual ~CSource();
		CSource(const CSource& src);
		CSource& operator = (const CSource& src);

		void SetSink( CSink* pSink );
		CSink* GetSink(void);

		virtual bool Read( unsigned long& ulNumberOfUnitsRead, unsigned long ulNumberOfUnitsToRead = 1 ) = 0;

		//------------------------------------------------------------------------------
		virtual void OnReadSuccess( unsigned long ulUnitsRead )
		{
			ReadSuccess.SetUnitsRead(ulUnitsRead);
		}

		//------------------------------------------------------------------------------
		virtual void OnReadError(unsigned long ulError, unsigned long ulUnitsRead)
		{
			ReadError.SetData(ulUnitsRead, ulError);
		}
		//------------------------------------------------------------------------------
		virtual void OnEndOfData()
		{
			EndOfData.Signal();
		}

		//------------------------------------------------------------------------------
		virtual bool IsSource( void )
		{
			return true;
		}

		//------------------------------------------------------------------------------
		virtual eFlowMode GetMode(void)
		{
			return m_pParent->GetMode();
		}

	protected:

		CSink* m_pSink;
	};

	//--------------------------------------------------------------------------------
	template< class TSource >
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CSourceProxy : public CSource
	{
	public:

		//--------------------------------------------------------------------------------
		CSourceProxy( TSource& Source ) : CSource()
		, m_Source( Source )
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CSourceProxy()
		{
		}

		//--------------------------------------------------------------------------------
		CSourceProxy( const CSourceProxy& src ) : CSource( src )
		, m_Source( src.m_Source )
		{
		}

		//--------------------------------------------------------------------------------
		CSourceProxy& operator = ( const CSourceProxy& src )
		{
			return *this;
		}

		//--------------------------------------------------------------------------------
		virtual void SetSink( CSink* pSink )
		{
			m_pSink = pSink;
		}

		//--------------------------------------------------------------------------------
		virtual CSink* GetSink( void )
		{
			return m_pSink;
		}

		//--------------------------------------------------------------------------------
		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead = 1 )
		{
			return m_Source.Read( ulUnitsRead, ulUnitsToRead );
		}

		//--------------------------------------------------------------------------------
		virtual CBuffer* GetBuffer( void )
		{
			return m_Source.GetSourceBuffer();
		}

	private:

		TSource& m_Source;

	};

	class __QOR_INTERFACE( __BLUEFOOTQOR ) CPlug;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CNULLSource : public CSource
	{
	public:

		//--------------------------------------------------------------------------------
		CNULLSource( CPlug* ) : CSource()
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CNULLSource()
		{
		}

		//--------------------------------------------------------------------------------
		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead = 1 )
		{
			ulUnitsRead = 0;
			return true;
		}

		//--------------------------------------------------------------------------------
		virtual bool IsAtEnd( void )
		{
			return true;
		}
	};

}//nsBluefoot

#endif//BLUEFOOT_SOURCE_H_3
