//WinQLProcessor.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Processor Device

#ifndef WINQL_PROCESSOR_H_3
#define WINQL_PROCESSOR_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
#include "WinQL/System/Devices/WinQLIODevice.h"

__QOR_DECLARE_REF(nsWin32, __WINQL, CProcessor, CTExtRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CProcessor : public CDeviceInterface
	{
	public:

		//--------------------------------------------------------------------------------
		struct Processor_Info_Ex
		{
			unsigned long	PhysicalID;
			unsigned long	PBlkAddress;
			unsigned long	PBlkLength;
			unsigned long	InitialApicId;
		};

		//--------------------------------------------------------------------------------
		enum eProcCtrls
		{
			Get_Info = 0x60,
		};

		__QOR_DECLARE_REF_TYPE(CProcessor);
		__QOR_DECLARE_OCLASS_ID( CProcessor );

		static nsCodeQOR::CTExternalRegEntry< CProcessor > RegEntry;

		__QCMP_STATIC_CONSTANT( unsigned long, File_Device_Processor = 0x00000029 );

		CProcessor();
		CProcessor( const CProcessor& src );
		CProcessor& operator = ( const CProcessor& src );
		virtual ~CProcessor();

		Processor_Info_Ex GetInfo( void );

	protected:

		void OpenDevice( void );
		CIODeviceFile::ref_type m_pIODevice;
	};

}//nsWin32

#endif//WINQL_PROCESSOR_H_3


/*
//
// Processor object class driver functions
//

typedef struct {
    ULONG   PhysicalID;
    ULONG   PBlkAddress;
    UCHAR   PBlkLength;
} PROCESSOR_OBJECT_INFO, *PPROCESSOR_OBJECT_INFO;

typedef struct {
    ULONG   PhysicalID;
    ULONG   PBlkAddress;
    UCHAR   PBlkLength;
    ULONG   InitialApicId;
} PROCESSOR_OBJECT_INFO_EX, *PPROCESSOR_OBJECT_INFO_EX;



#define IOCTL_GET_PROCESSOR_OBJ_INFO        \
        CTL_CODE(FILE_DEVICE_BATTERY, 0x60, METHOD_BUFFERED, FILE_READ_ACCESS)

*/