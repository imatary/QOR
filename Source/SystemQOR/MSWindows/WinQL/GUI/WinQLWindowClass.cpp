//WinQLWindowClass.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/WindowClass.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace ::nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CWindowClass );

	//--------------------------------------------------------------------------------
	CWindowClass::CWindowClass() : CWindowClassData(), m_pReg( 0 )
	{
		_WINQ_FCONTEXT( "CWindowClass::CWindowClass" );
	}

	//--------------------------------------------------------------------------------
	CWindowClass::~CWindowClass()
	{
		_WINQ_FCONTEXT( "CWindowClass::~CWindowClass" );
		delete m_pReg;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::Initialise()
	{
		_WINQ_FCONTEXT( "CWindowClass::Initialise" );
	}

	//--------------------------------------------------------------------------------
	//Override this for built in Windows classes that are preregistred
	bool CWindowClass::Preregistered()
	{
		_WINQ_FCONTEXT( "CWindowClass::Preregistered" );
		return false;
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::Registered( bool bRegister )
	{
		_WINQ_FCONTEXT( "CWindowClass::Registered" );
		static bool sbRegistered = false;
		if( bRegister == true )
		{
			sbRegistered = true;
		}
		return sbRegistered;
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::Register()
	{
		_WINQ_FCONTEXT( "CWindowClass::Register" );
		bool bResult = false;
		if( !Registered() )
		{
			Initialise();
			m_pReg = new CWindowClassRegistration( *this );
			Registered( true );					
			bResult = true;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CWindowClass::Name()
	{
		_WINQ_FCONTEXT( "CWindowClass::Name" );
		return _TXT( "" );
	};

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetByteAlignClient()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetByteAlignClient" );
		return ( m_uiStyle & BYTEALIGNCLIENT ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetByteAlignClient( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetByteAlignClient" );
		SetStyleBits( BYTEALIGNCLIENT, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetByteAlignWindow()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetByteAlignClient" );
		return ( m_uiStyle & BYTEALIGNWINDOW ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetByteAlignWindow( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetByteAlignClient" );
		SetStyleBits( BYTEALIGNWINDOW, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetUseClassDC()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetUseClassDC" );
		return ( m_uiStyle & CLASSDC ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetUseClassDC( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetUseClassDC" );
		SetStyleBits( CLASSDC, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetDoubleClicks()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetDoubleClicks" );
		return ( m_uiStyle & DBLCLKS ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetDoubleClicks( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetDoubleClicks" );
		SetStyleBits( DBLCLKS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetDropShadow()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetDropShadow" );
#if(_WIN32_WINNT >= 0x0501)
		return ( m_uiStyle & DROPSHADOW ) ? true : false;
#else
		return false;
#endif
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetDropShadow( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetDropShadow" );
#if(_WIN32_WINNT >= 0x0501)
		SetStyleBits( DROPSHADOW, bFlag );
#else
		__QCMP_UNREF( bFlag );
#endif
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetGlobalClass()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetGlobalClass" );
		return ( m_uiStyle & GLOBALCLASS ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetGlobalClass( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetGlobalClass" );
		SetStyleBits( GLOBALCLASS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetHRedrawTrigger()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetHRedrawTrigger" );
		return ( m_uiStyle & HREDRAW ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetHRedrawTrigger( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetHRedrawTrigger" );
		SetStyleBits( HREDRAW, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetVRedrawTrigger()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetVRedrawTrigger" );
		return ( m_uiStyle & VREDRAW ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetVRedrawTrigger( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetVRedrawTrigger" );
		SetStyleBits( VREDRAW, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetNoClose()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetNoClose" );
		return ( m_uiStyle & NOCLOSE ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetNoClose( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetNoClose" );
		SetStyleBits( NOCLOSE, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetOwnDC()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetOwnDC" );
		return ( m_uiStyle & OWNDC ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetOwnDC( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetOwnDC" );
		SetStyleBits( OWNDC, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetUsesParentDC()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetUsesParentDC" );
		return ( m_uiStyle & PARENTDC ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetUsesParentDC( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetUsesParentDC" );
		SetStyleBits( PARENTDC, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetSaveBits()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetSaveBits" );
		return ( m_uiStyle & SAVEBITS ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetSaveBits( bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetSaveBits" );
		SetStyleBits( SAVEBITS, bFlag );
	}

	//--------------------------------------------------------------------------------
	bool CWindowClass::GetStyleBits( unsigned int uiStyle )
	{
		_WINQ_FCONTEXT( "CWindowClass::GetStyleBits" );
		return ( ( m_uiStyle & uiStyle ) == uiStyle );
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetStyleBits( unsigned int uiStyle, bool bFlag )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetStyleBits" );
		if( bFlag )
		{
			m_uiStyle |= uiStyle;
		}
		else
		{
			m_uiStyle &= (~uiStyle);
		}
	}

	//--------------------------------------------------------------------------------
	unsigned int CWindowClass::GetStyle()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetStyle" );
		return m_uiStyle;
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::SetStyle( unsigned int uiStyle )
	{
		_WINQ_FCONTEXT( "CWindowClass::SetStyle" );
		m_uiStyle = uiStyle;
	}

	//--------------------------------------------------------------------------------
	nsWin32::WNDPROC CWindowClass::GetWndProc()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetWndProc" );
		return m_pfnWndProc;
	}

	//--------------------------------------------------------------------------------
	int CWindowClass::GetClassExtra()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetClassExtra" );
		return m_cbClsExtra;
	}

	//--------------------------------------------------------------------------------
	int CWindowClass::GetWindowExtra()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetWindowExtra" );
		return m_cbWndExtra;
	}

	//--------------------------------------------------------------------------------
	CWinModule* CWindowClass::GetInstance()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetInstance" );
		return CWinModule::FromHandle( CHandle( m_hInstance ) );
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CWindowClass::GetIcon()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetIcon" );
		return CIcon::FromHandle( CIconHandle( 0, m_pIcon ).Ref() );
	}

	//--------------------------------------------------------------------------------
	CCursor::refType CWindowClass::GetCursor()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetCursor" );
		return CCursor::FromHandle( CCursorHandle( 0, m_pCursor ).Ref() );
	}

	//--------------------------------------------------------------------------------
	CBrush::refType CWindowClass::GetBackgroundBrush()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetBackgroundBrush" );
		return CBrush::FromHandle( CBrushHandle( 0, m_pbrBackground ).Ref() );
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CWindowClass::GetMenuName()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetMenuName" );
		return m_lpszMenuName;
	}

	//--------------------------------------------------------------------------------
	const TCHAR* CWindowClass::GetClassNameT()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetClassNameT" );
		return m_lpszClassName;
	}

	//--------------------------------------------------------------------------------
	CIcon::refType CWindowClass::GetSmallIcon()
	{
		_WINQ_FCONTEXT( "CWindowClass::GetSmallIcon" );
		return CIcon::FromHandle( CIconHandle( 0, m_pIconSm ).Ref() );
	}

	//--------------------------------------------------------------------------------
	void CWindowClass::Preinitialise()
	{			
		_WINQ_FCONTEXT( "CWindowClass::Preinitialise" );
		m_pfnWndProc = &COSWindow::StaticWindowProc;
		m_cbClsExtra = 0;
		m_cbWndExtra = 0;
		m_hInstance = 0;
		m_pIcon = 0;
		m_pCursor = 0;
		m_pbrBackground = 0;
		m_lpszMenuName = 0;
		m_pIconSm = 0;
		m_lpszClassName = Name();
	}






	__QOR_IMPLEMENT_OCLASS_LUID( CWindowClassData );

	//--------------------------------------------------------------------------------
	CWindowClassData::CWindowClassData() : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CWindowClassData::CWindowClassData" );
		m_uicbSize = sizeof( nsWin32::WNDCLASSEX );
		m_uiStyle = 0;
		m_pfnWndProc = 0;
		m_cbClsExtra = 0;
		m_cbWndExtra = 0;
		m_hInstance = 0;
		m_pIcon = 0;
		m_pCursor = 0;
		m_pbrBackground = 0;
		m_lpszMenuName = 0;
		m_lpszClassName = 0;
		m_pIconSm = 0;
	}

	//--------------------------------------------------------------------------------
	CWindowClassData::CWindowClassData( InstanceHandle hinst, const TCHAR* lpszClass ) : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CWindowClassData::CWindowClassData" );
		__QOR_PROTECT
		{
			m_uicbSize = sizeof( WNDCLASSEX );
			m_User32Library.GetClassInfoEx( reinterpret_cast< ::HINSTANCE >( hinst ), lpszClass, reinterpret_cast< ::LPWNDCLASSEX >( dynamic_cast< nsWin32::WNDCLASSEX* >( this ) ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CWindowClassData::~CWindowClassData()
	{
		_WINQ_FCONTEXT( "CWindowClassData::~CWindowClassData" );
	}


	//--Window Class Registration-----------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CWindowClassRegistration );

	//--------------------------------------------------------------------------------
	CWindowClassRegistration::CWindowClassRegistration( CWindowClassData& WC ) : m_Class( WC ), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CWindowClassRegistration::CWindowClassRegistration" );
		__QOR_PROTECT
		{
			m_Atom = m_User32Library.RegisterClassEx( const_cast< const ::WNDCLASSEX* >( reinterpret_cast< ::WNDCLASSEX* >( dynamic_cast< nsWin32::WNDCLASSEX* >( &WC ) ) ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CWindowClassRegistration::~CWindowClassRegistration( )
	{
		_WINQ_FCONTEXT( "CWindowClassRegistration::~CWindowClassRegistration" );			
		__QOR_PROTECT
		{
			m_User32Library.UnregisterClass( m_Class.m_lpszClassName, reinterpret_cast< ::HINSTANCE >( m_Class.m_hInstance ) );
		}__QOR_ENDPROTECT
	}

}//nsWin32
