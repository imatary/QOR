//x86.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHQOR_X86_X86_H_1
#define ARCHQOR_X86_X86_H_1

#include "ArchQOR/Common/LogicBase.h"
#include "ArchQOR/Common/Assembler/CodeGenerator.h"

#ifndef QOR_ARCH_X86
__QCMP_MESSAGE( "Target instruction set level not set. Defaulting to i786." )
#	define QOR_ARCH_X86 QOR_PP_VERSION_NUMBER(7,0,0)
#else
//__QCMP_MESSAGE( QOR_PP_STRINGIZE( QOR_PP_EXPAND( QOR_ARCH_X86 ) ) )
#endif

#if( QOR_ARCH_X86 == QOR_PP_VERSION_NUMBER( 64, 0, 0 ) )
#	define QOR_ARCH_X86_MMX_REQUIRED
__QCMP_MESSAGE( "Target i786 instruction set." )
#	include "ArchQOR/x86/Assembler/BatchCPU/i786CPU.h"
namespace nsArch
{
	typedef nsx86::Ci786CPU CMainInstructionSet;
	typedef nsx86::CP7FPU CFloatingPointUnit;
#	define QOR_ARCH_X87_FPU_EXTENSION_CLASS ,public CFloatingPointUnit
#	define QOR_ARCH_X87_FPU_EXTENSION_INIT ,CFloatingPointUnit( (Cx86CPUCore&)(*this) )
}
#elif ( QOR_ARCH_X86 == QOR_PP_VERSION_NUMBER(7,0,0) )
#	define QOR_ARCH_X86_MMX_REQUIRED
__QCMP_MESSAGE( "Target i786 instruction set." )
#	include "ArchQOR/x86/Assembler/BatchCPU/i786CPU.h"
namespace nsArch
{
	typedef nsx86::Ci786CPU CMainInstructionSet;
	typedef nsx86::CP7FPU CFloatingPointUnit;
#	define QOR_ARCH_X87_FPU_EXTENSION_CLASS ,public CFloatingPointUnit
#	define QOR_ARCH_X87_FPU_EXTENSION_INIT ,CFloatingPointUnit( (Cx86CPUCore&)(*this) )
}
#elif ( QOR_ARCH_X86 == QOR_PP_VERSION_NUMBER(6,0,0) )
#	define QOR_ARCH_X86_MMX_REQUIRED
__QCMP_MESSAGE( "Target i686 instruction set." )
#	include "ArchQOR/x86/Assembler/BatchCPU/i686CPU.h"
namespace nsArch
{
	typedef nsx86::Ci686CPU CMainInstructionSet;
	typedef nsx86::CP6FPU CFloatingPointUnit;
#	define QOR_ARCH_X87_FPU_EXTENSION_CLASS ,public CFloatingPointUnit
#	define QOR_ARCH_X87_FPU_EXTENSION_INIT ,CFloatingPointUnit( (Cx86CPUCore&)(*this) )
}
#elif ( QOR_ARCH_X86 == QOR_PP_VERSION_NUMBER(5,0,0) )
#	define QOR_ARCH_X86_MMX_REQUIRED
__QCMP_MESSAGE( "Target i586 instruction set." )
#	include "ArchQOR/x86/Assembler/BatchCPU/i586CPU.h"
namespace nsArch
{
	typedef nsx86::Ci586CPU CMainInstructionSet;
	typedef nsx86::CPentiumFPU CFloatingPointUnit;
#	define QOR_ARCH_X87_FPU_EXTENSION_CLASS ,public CFloatingPointUnit
#	define QOR_ARCH_X87_FPU_EXTENSION_INIT ,CFloatingPointUnit( (Cx86CPUCore&)(*this) )
}
#elif ( QOR_ARCH_X86 == QOR_PP_VERSION_NUMBER(4,0,0) )
#	undef QOR_ARCH_X86_MMX_REQUIRED //not supported by 486?
#	undef QOR_ARCH_X86_MMX_EXTENSION
__QCMP_MESSAGE( "Target i486 instruction set." )
#	include "ArchQOR/x86/Assembler/BatchCPU/i486CPU.h"
namespace nsArch
{
	typedef nsx86::Ci486CPU CMainInstructionSet;
	typedef nsx86::C487 CFloatingPointUnit;
#	define QOR_ARCH_X87_FPU_EXTENSION_CLASS ,public CFloatingPointUnit
#	define QOR_ARCH_X87_FPU_EXTENSION_INIT ,CFloatingPointUnit( (Cx86CPUCore&)(*this) )
}
#else 
#	undef QOR_ARCH_X86_MMX_REQUIRED //not supported by 386
#	undef QOR_ARCH_X86_MMX_EXTENSION
__QCMP_MESSAGE( "Target i386 instruction set." )
#	include "ArchQOR/x86/Assembler/BatchCPU/i386CPU.h"
namespace nsArch
{
	typedef nsx86::Ci386CPU CMainInstructionSet;
	typedef nsx86::C387FPU CFloatingPointUnit;
#	define QOR_ARCH_X87_FPU_EXTENSION_CLASS ,public CFloatingPointUnit
#	define QOR_ARCH_X87_FPU_EXTENSION_INIT ,CFloatingPointUnit( (Cx86CPUCore&)(*this) )
}
#endif

namespace nsArch
{
#ifdef QOR_ARCH_X86_MMX_REQUIRED
	typedef CiSetExtension CMMXInstructionSet;
#	define QOR_ARCH_X86_MMX_EXTENSION_CLASS ,public CMMXInstructionSet
#	define QOR_ARCH_X86_MMX_EXTENSION_INIT ,CMMXInstructionSet( (*(dynamic_cast< Cx86CPUCore* >( this ) ) ) )
#else
#	define QOR_ARCH_X86_MMX_EXTENSION_CLASS
#	define QOR_ARCH_X86_MMX_EXTENSION_INIT
#endif
}//nsArch

 //MMX, SSE, SSE2, SSE3, SSSE3, SSE4, SSE5
#define QARCH_SECONDARY_ISET_LIST QOR_ARCH_X87_FPU_EXTENSION_CLASS QOR_ARCH_X86_MMX_EXTENSION_CLASS
//#define QARCH_SECONDARY_ISET_LIST , public CFloatingPointUnit QOR_ARCH_X86_MMX_EXTENSION_CLASS

#define QARCH_SECONDARY_ISET_INIT QOR_ARCH_X87_FPU_EXTENSION_INIT QOR_ARCH_X86_MMX_EXTENSION_INIT
//#define QARCH_SECONDARY_ISET_INIT ,CFloatingPointUnit( (Cx86CPUCore&)(*this) ) QOR_ARCH_X86_MMX_EXTENSION_INIT

//------------------------------------------------------------------------------
namespace nsArch
{
	//--------------------------------------------------------------------------------
	namespace nsx86
	{

		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CGPU : public CGPUBase
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CGPU );

			CGPU(){}
			~CGPU(){}
		};

		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CCPU : public CMainInstructionSet QARCH_SECONDARY_ISET_LIST
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CCPU );

			__QCMP_WARNING_PUSH
				__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, _QCMP_TXT("") )

				//--------------------------------------------------------------------------------
				CCPU( nsArch::CCodeGeneratorBase* codeGenerator ) : CMainInstructionSet( codeGenerator ) QARCH_SECONDARY_ISET_INIT
			{
			}

			__QCMP_WARNING_POP

				//--------------------------------------------------------------------------------
				virtual ~CCPU() __QCMP_THROW
			{
			}

			__QCS_DECLARE_NONCOPYABLE( CCPU );
		};

		//--------------------------------------------------------------------------------
		class __QOR_INTERFACE( __ARCHQOR ) CLogicalArch : public CLogicBase
		{
		public:

			__QOR_DECLARE_OCLASS_ID( CLogicalArch );

			CLogicalArch();
			virtual ~CLogicalArch();


			virtual CCPUBase& CPU( void );
			virtual CFPUBase& FPU( void );
			virtual CGPUBase& GPU( void );

		protected:

			nsArch::CJitCodeGenerator m_CG;
			CCPU m_CPU;
			CGPU m_GPU;

			__QCS_DECLARE_NONCOPYABLE( CLogicalArch );
		};

	}//nsx86
}//nsArch

#include "ArchQOR/x86/VendorPackage.h"

 //------------------------------------------------------------------------------
namespace nsArch
{
	typedef nsx86::Cx86PCVendorPackage CArchVPackage;
}//nsArch

#endif//ARCHQOR_X86_X86_H_1
