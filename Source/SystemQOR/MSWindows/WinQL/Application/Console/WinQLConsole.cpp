//WinQLConsole.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLErrDomain.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Console/WinQLConsole.h"
__QCMP_WARNING_POP
#include "WinQAPI/Kernel32.h"

#include "../Source/SystemQOR/MSWindows/WinCmpSupQORVC/include/PE/Sections.h"

_CRTALLOC(".CRT$XPX") static nsWin32::_PVFV pterm = nsWin32::CConsole::__termcon;

//--------------------------------------------------------------------------------
namespace 
{
	nsWin32::CConsole* g_pConsole = 0;

}//anonymous

//--------------------------------------------------------------------------------
namespace nsWin32
{
	CCRTFile* CConsole::s_pConsoleInput = (CCRTFile*)(-2);	// console input
	CCRTFile* CConsole::s_pConsoleOutput = (CCRTFile*)(-2);	// console output

	using namespace nsWinQAPI;

	//------------------------------------------------------------------------------	
	bool CConsStartContHandler::Handle( nsCodeQOR::CError* pError )
	{
		_WINQ_FCONTEXT( "CConsStartContHandler::Handle" );
		bool bResolved = nsCodeQOR::CDefaultContinuableHandler::Handle( *pError );

		if( pError->What().Code() == NO_STANDARD_HANDLE )
		{
			bResolved = true;//silence 'no standard handle' error during Console Initialization
		}

		return bResolved;
	}

	__QOR_IMPLEMENT_OCLASS_LUID( CConsoleController );

	//------------------------------------------------------------------------------
	CConsoleController::CConsoleController() : nsQOR::CController()
	{
		_WINQ_FCONTEXT( "CConsoleController::CConsoleController" );
	}

	//------------------------------------------------------------------------------
	CConsoleController::~CConsoleController()
	{
		_WINQ_FCONTEXT( "CConsoleController::~CConsoleController" );
	}

	//------------------------------------------------------------------------------
	CConsoleController::CConsoleController( const CConsoleController& src )
	{
		_WINQ_FCONTEXT( "CConsoleController::CConsoleController" );
	}

	//------------------------------------------------------------------------------
	CConsoleController& CConsoleController::operator = ( const CConsoleController& src )
	{
		_WINQ_FCONTEXT( "CConsoleController::operator =" );
		return *this;
	}

	//------------------------------------------------------------------------------
	bool CConsoleController::HandleCtrl( unsigned long Ctrl )
	{
		_WINQ_FCONTEXT( "CConsoleController::HandleCtrl" );
		bool bHandled = false;
		switch( Ctrl )
		{
		case CTRL_C_EVENT:
			bHandled = OnCtrlC();
			break;
		case CTRL_CLOSE_EVENT:
			bHandled = OnClose();
			break;
		case CTRL_BREAK_EVENT:
			bHandled = OnBreak();
			break;
		case CTRL_LOGOFF_EVENT:
			bHandled = OnLogOff();
			break;
		case CTRL_SHUTDOWN_EVENT:
			bHandled = OnShutdown();
			break;
		default:
			bHandled = OnUnknownCtrl();
		}
		return bHandled;
	}

	//------------------------------------------------------------------------------
	void CConsoleController::HandleEvent( InputRecord& Event )
	{
		_WINQ_FCONTEXT( "CConsoleController::HandleEvent" );
		switch( Event.EventType )
		{
		case KEY_EVENT:
			OnKeyEvent( Event.Event.KeyEvent );
			break;
		case MOUSE_EVENT:
			OnMouseEvent( Event.Event.MouseEvent );
			break;
		case WINDOW_BUFFER_SIZE_EVENT:
			OnWindowBufferSizeEvent( Event.Event.WindowBufferSizeEvent );
			break;
		case FOCUS_EVENT:
			OnFocusEvent( Event.Event.FocusEvent );
			break;
		case MENU_EVENT:
			OnMenuEvent( Event.Event.MenuEvent );
			break;
		}
	}

	//------------------------------------------------------------------------------
	void CConsoleController::OnKeyEvent( KeyEventRecord& KeyEvent )
	{
		_WINQ_FCONTEXT( "CConsoleController::OnKeyEvent" );
	}

	//------------------------------------------------------------------------------
	void CConsoleController::OnMouseEvent( MouseEventRecord& MouseEvent )
	{
		_WINQ_FCONTEXT( "CConsoleController::OnMouseEvent" );
	}

	//------------------------------------------------------------------------------
	void CConsoleController::OnWindowBufferSizeEvent( WindowBufferSizeRecord& WindowBufferSizeEvent )
	{
		_WINQ_FCONTEXT( "CConsoleController::OnWindowBufferSizeEvent" );
	}

	//------------------------------------------------------------------------------
	void CConsoleController::OnFocusEvent( FocusEventRecord& FocusEvent )
	{
		_WINQ_FCONTEXT( "CConsoleController::OnFocusEvent" );
	}

	//------------------------------------------------------------------------------
	void CConsoleController::OnMenuEvent( MenuEventRecord& MenuEvent )
	{
		_WINQ_FCONTEXT( "CConsoleController::OnMenuEvent" );
	}

	//------------------------------------------------------------------------------
	bool CConsoleController::OnCtrlC()
	{
		_WINQ_FCONTEXT( "CConsoleController::OnCtrlC" );
		return false;
	}

	//------------------------------------------------------------------------------
	bool CConsoleController::OnClose()
	{
		_WINQ_FCONTEXT( "CConsoleController::OnClose" );
		return false;
	}

	//------------------------------------------------------------------------------
	bool CConsoleController::OnBreak()
	{
		_WINQ_FCONTEXT( "CConsoleController::OnBreak" );
		return false;
	}

	//------------------------------------------------------------------------------
	bool CConsoleController::OnLogOff()
	{
		_WINQ_FCONTEXT( "CConsoleController::OnLogOff" );
		return false;
	}

	//------------------------------------------------------------------------------
	bool CConsoleController::OnShutdown()
	{
		_WINQ_FCONTEXT( "CConsoleController::OnShutdown" );
		return false;
	}

	//------------------------------------------------------------------------------
	bool CConsoleController::OnUnknownCtrl()
	{
		_WINQ_FCONTEXT( "CConsoleController::OnUnknownCtrl" );
		return false;
	}


	__QOR_IMPLEMENT_OCLASS_LUID( CConsoleInput );

	//------------------------------------------------------------------------------
	CConsoleInput::CConsoleInput() : CWaitableObject( nsWinQAPI::CKernel32::GetStdHandle( nsWin32::Std_Input_Handle ) )
	{
		_WINQ_FCONTEXT( "CConsoleInput::CConsoleInput" );
	}

	//------------------------------------------------------------------------------
	CConsoleInput::~CConsoleInput()
	{
		_WINQ_FCONTEXT( "CConsoleInput::~CConsoleInput" );
	}

	//------------------------------------------------------------------------------
	CConsoleInput::CConsoleInput( const CConsoleInput& src ) : CWaitableObject( src )
	{
		_WINQ_FCONTEXT( "CConsoleInput::CConsoleInput" );
	}

	//------------------------------------------------------------------------------
	CConsoleInput& CConsoleInput::operator = ( const CConsoleInput& src ) 
	{
		_WINQ_FCONTEXT( "CConsoleInput::operator =" );
		CWaitableObject::operator=( src );
		return *this;
	}

	//------------------------------------------------------------------------------
	bool CConsoleInput::OnCtrl( unsigned long ulCtrl )
	{
		_WINQ_FCONTEXT( "CConsoleInput::OnCtrl" );
		bool bHandled = Controller().HandleCtrl( ulCtrl );
		return bHandled;
	}

	//------------------------------------------------------------------------------
	void CConsoleInput::OnSignaled( void )
	{
		_WINQ_FCONTEXT( "CConsoleInput::OnSignaled" );
		unsigned long ulEventCount = 0;
		nsWinQAPI::CKernel32::ReadConsoleInput( m_Handle.Use(), reinterpret_cast< ::PINPUT_RECORD>( m_InputBuffer ), scuiBufferSize, &ulEventCount );

		for( unsigned long ulEvent = 0; ulEvent < ulEventCount; ulEvent++ )
		{
			Controller().HandleEvent( m_InputBuffer[ ulEvent ] );
		}
	}


	__QOR_IMPLEMENT_OCLASS_LUID( CConsole );

	//--------------------------------------------------------------------------------
	CConsole::CConsole() : m_Win32DefaultScreenBuffer( 0,0 )
	{	
		_WINQ_FCONTEXT( "CConsole::CConsole" );
#ifndef _CONSOLE
		CConsole::__initconin();
		CConsole::__initconout();
#endif
		m_Win32DefaultScreenBuffer.SetInputHandle( m_Helper.GetStdHandle( Std_Input_Handle ) );
		m_Win32DefaultScreenBuffer.SetOutputHandle( m_Helper.GetStdHandle( Std_Output_Handle ) );
		__QCS_ATTACH_REF_PROP( CConsole, DisplayMode, GetDisplayMode, SetDisplayMode );

		__QCS_ATTACH_REF_PROP( CConsole, Title, GetTitleText, SetTitleText );
		__QCS_ATTACH_REF_PROP( CConsole, OutputCodePage, GetOutputCodePage, SetOutputCodePage );
		__QCS_ATTACH_REF_PROP( CConsole, InputCodePage, GetInputCodePage, SetInputCodePage );
		__QCS_ATTACH_REF_PROP_RO( CConsole, OriginalTitle, GetOriginalTitle );
		__QCS_ATTACH_REF_PROP( CConsole, HistoryInfo, GetHistoryInfo, SetHistoryInfo );
		__QCS_ATTACH_REF_PROP_RO( CConsole, SelectionInfo, GetSelectionInfo );
		__QCS_ATTACH_REF_PROP_RO( CConsole, Window, GetWindow );
		__QCS_ATTACH_REF_PROP_RO( CConsole, NumberOfMouseButtons, GetNumberOfMouseButtons );
		__QCS_ATTACH_REF_PROP_RO( CConsole, ScreenBuffer, GetScreenBuffer );
		__QCS_ATTACH_REF_PROP_RO( CConsole, InputStdHandle, GetInputStdHandle );

		m_Helper.SetCtrlHandler( (nsWin32::CtrlHandlerCallback)&CtrlHandler, true );

		g_pConsole = this;
	}

	//------------------------------------------------------------------------------
	CConsole::~CConsole()
	{
		_WINQ_FCONTEXT( "CConsole::~CConsole" );
#ifndef _CONSOLE
		CConsole::__termcon();
#endif
		g_pConsole = 0;
	}

	//------------------------------------------------------------------------------
	int __stdcall CConsole::CtrlHandler(unsigned long CtrlType )
	{
		_WINQ_SFCONTEXT( "CConsole::CtrlHandler" );
		int iResult = 0;
		if( g_pConsole )
		{
			iResult = g_pConsole->InputStdHandle()->OnCtrl( CtrlType ) ? 1 : 0;
		}
		return iResult;
	}

	//------------------------------------------------------------------------------
	CConsoleInput::ref_type CConsole::GetInputStdHandle()
	{
		_WINQ_FCONTEXT( "CConsole::GetInputStdHandle" );
		return m_ConsoleInput.Ref();
	}

	//------------------------------------------------------------------------------
	CConsole::ref_type CConsole::TheWin32Console()
	{
		_WINQ_SFCONTEXT( "CConsole::TheWin32Console" );
		CConsole::ref_type Ref;
		if( g_pConsole == 0 )
		{
			Ref.Attach( new CConsole(), true );
		}
		else
		{
			Ref.Attach( g_pConsole, false );
		}
		return Ref;
	}
	
	//--------------------------------------------------------------------------------
	nsWin32::CCRTFile* CConsole::ConsoleInputFile()
	{
		return CConsole::s_pConsoleInput;
	}

	//--------------------------------------------------------------------------------
	nsWin32::CCRTFile* CConsole::ConsoleOutputFile()
	{
		return CConsole::s_pConsoleOutput;
	}

	//--------------------------------------------------------------------------------
	CConsole::eConsoleDisplayMode CConsole::GetDisplayMode( void )
	{
		_WINQ_FCONTEXT( "CConsole::GetDisplayMode" );
		unsigned long ulDisplayMode = 0;
		m_Helper.GetDisplayMode( ulDisplayMode );
		return static_cast< eConsoleDisplayMode >( ulDisplayMode );
	}

	//--------------------------------------------------------------------------------
	bool CConsole::SetDisplayMode( const eConsoleDisplayMode& Mode )
	{
		_WINQ_FCONTEXT( "CConsole::SetDisplayMode" );
		bool bResult = false;
		Coord NewScreenBufferDimensions;
		NewScreenBufferDimensions.X = 0;
		NewScreenBufferDimensions.Y = 0;
		unsigned long ulDisplayMode = static_cast< unsigned long >( Mode );
		bResult = m_Win32DefaultScreenBuffer.SetDisplayMode( ulDisplayMode, NewScreenBufferDimensions ) ? true : false;
		return bResult;
	}
	
	//------------------------------------------------------------------------------
	CTString CConsole::GetTitleText( void )
	{
		_WINQ_FCONTEXT( "CConsole::GetTitleText" );
		CTString strTitle;
		strTitle.Reserve( 255 );
		m_Helper.GetTitle( strTitle );
		return strTitle;
	}

	//------------------------------------------------------------------------------
	bool CConsole::SetTitleText( const CTString& _Title )
	{
		_WINQ_FCONTEXT( "CConsole::SetTitleText" );
		return m_Helper.SetTitle( _Title );
	}
	
	//------------------------------------------------------------------------------
	CCodePage CConsole::GetOutputCodePage( void )
	{
		_WINQ_FCONTEXT( "CConsole::GetOutputCodePage" );
		return m_Helper.GetOutputCP();
	}
	
	//------------------------------------------------------------------------------
	bool CConsole::SetOutputCodePage( const CCodePage& OutputCP )
	{
		_WINQ_FCONTEXT( "CConsole::SetOutputCodePage" );
		bool bResult = false;// m_Helper.SetOutputCP(OutputCP);
		return bResult;
	}
	
	//------------------------------------------------------------------------------
	CCodePage CConsole::GetInputCodePage( void )
	{
		_WINQ_FCONTEXT( "CConsole::GetInputCodePage" );
		return m_Helper.GetCP();
	}

	//------------------------------------------------------------------------------
	bool CConsole::SetInputCodePage( const CCodePage& InputCP )
	{
		_WINQ_FCONTEXT( "CConsole::SetInputCodePage" );
		bool bResult = m_Helper.SetCP( InputCP );
		return bResult;
	}

	//------------------------------------------------------------------------------
	CTString CConsole::GetOriginalTitle( void )
	{
		_WINQ_FCONTEXT( "CConsole::GetOriginalTitle" );
		CTString strTitle;
		strTitle.Reserve( 255 );
		unsigned long ulLen = m_Helper.GetOriginalTitle( strTitle() );
		strTitle.ValidateBuffer( static_cast< unsigned short >( ulLen ) );
		return strTitle;
	}

	//------------------------------------------------------------------------------
	ConsoleHistoryInfo CConsole::GetHistoryInfo( void )
	{
		_WINQ_FCONTEXT( "CConsole::GetHistoryInfo" );
		ConsoleHistoryInfo Info;
		m_Helper.GetHistoryInfo( Info );
		return Info;
	}

	//------------------------------------------------------------------------------
	bool CConsole::SetHistoryInfo( const ConsoleHistoryInfo& _HistoryInfo )
	{
		_WINQ_FCONTEXT( "CConsole::SetHistoryInfo" );
		bool bResult = m_Helper.SetHistoryInfo( _HistoryInfo );
		return bResult;
	}

	//------------------------------------------------------------------------------
	ConsoleSelectionInfo CConsole::GetSelectionInfo( void )
	{
		_WINQ_FCONTEXT( "CConsole::GetSelectionInfo" );
		ConsoleSelectionInfo Info;
		m_Helper.GetSelectionInfo( Info );
		return Info;
	}
	
	//------------------------------------------------------------------------------
	COSWindow::refType CConsole::GetWindow( void )
	{
		_WINQ_FCONTEXT( "CConsole::GetWindow" );
		return m_Helper.GetWindow();
	}
	
	//------------------------------------------------------------------------------
	unsigned long CConsole::GetNumberOfMouseButtons( void )
	{
		_WINQ_FCONTEXT( "CConsole::GetNumberOfMouseButtons" );
		unsigned long ulResult = 0;
		m_Helper.GetNumberOfMouseButtons( ulResult );
		return ulResult;
	}
	
	//------------------------------------------------------------------------------
	CConsoleScreenBuffer::refType CConsole::GetScreenBuffer()
	{
		_WINQ_FCONTEXT( "CConsole::GetScreenBuffer" );
		return m_Win32DefaultScreenBuffer.Ref();
	}
	
	//--------------------------------------------------------------------------------
	void CConsole::__initconin()
	{
		_WINQ_SFCONTEXT( "CConsole::__initconin" );
		if( s_pConsoleInput == (nsWin32::CFile*)(-2) )
		{
			CConsStartContHandler ErrHandler;
			nsWin32::CConsoleHelper ConsoleHelper;
			CFileHandle hstdin = ConsoleHelper.GetStdHandle( nsWin32::Std_Input_Handle );
			if( hstdin.IsNull() || hstdin.IsInvalid() )
			{
				ConsoleHelper.Alloc();
				s_pConsoleInput = new nsWin32::CCRTFile( "CONIN$", Generic_Read | Generic_Write, File_Share_Read| File_Share_Write, 0, Open_Existing, 0, 0 );
			}
			else
			{
				s_pConsoleInput = new nsWin32::CCRTFile( hstdin );
			}
		}
	}

	//--------------------------------------------------------------------------------
	void CConsole::__initconout()
	{
		_WINQ_SFCONTEXT( "CConsole::__initconout" );
		if( s_pConsoleOutput == (nsWin32::CFile*)(-2) )
		{
			CConsStartContHandler ErrHandler;
			nsWin32::CConsoleHelper ConsoleHelper;
			CFileHandle hstdout = ConsoleHelper.GetStdHandle( nsWin32::Std_Output_Handle );
			if( hstdout.IsNull() || hstdout.IsInvalid() )
			{
				ConsoleHelper.Alloc();					
				s_pConsoleOutput = new nsWin32::CCRTFile( "CONOUT$", Generic_Write, File_Share_Read | File_Share_Write, 0, Open_Existing, 0, 0 );
			}
			else
			{
				s_pConsoleOutput = new nsWin32::CCRTFile( hstdout );
			}				
		}
	}

	//--------------------------------------------------------------------------------
	void CConsole::__termcon()
	{
		_WINQ_SFCONTEXT( "CConsole::__termcon" );
		if( s_pConsoleOutput > 0 ) 
		{
			delete s_pConsoleOutput;
			s_pConsoleOutput = 0;
		}

		if( s_pConsoleInput > 0 )
		{
			delete s_pConsoleInput;
			s_pConsoleInput = 0;
		}
		
	}

}//nsWin32
