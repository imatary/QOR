//MSVC2010.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Microsoft Visual C++ Compiler VS2010 header file

#ifndef QCMP_MSVC2010_H_1
#define QCMP_MSVC2010_H_1

#include "../VS2008/MSVC2008.h"

#undef __QCMP_MESSAGE
#if ( __QCMP_REPORTCONIG == __QCS_YES_ )
#	define __QCMP_MESSAGE( _X ) __pragma( message( _X ) )
#else
#	define __QCMP_MESSAGE( _X )
#endif

#undef __QCMP_WARNING_PUSH
#define __QCMP_WARNING_PUSH __pragma( warning( push ) )
#if		( __QOR_PERFORMANCE == __QCS_MAX_SAFETY_ )
#	undef __QCMP_WARNING_DISABLE
#	define __QCMP_WARNING_DISABLE(_X, _Reason )	__pragma( warning( disable : _X ) ) // __pragma( message( __FILE__"(" __QCMP_STRINGIZE(__LINE__) "):"_Reason ) )
#else//!( __QOR_PERFORMANCE == __QCS_MAX_SAFETY_ )
#	undef __QCMP_WARNING_DISABLE
#	define __QCMP_WARNING_DISABLE(_X, _Reason )	__pragma( warning( disable : _X ) )
#endif//( __QOR_PERFORMANCE == __QCS_MAX_SAFETY_ )
#undef __QCMP_WARNING_POP
#define __QCMP_WARNING_POP __pragma( warning( pop ) )
#undef __QCMP_WARNING_ENABLE
#define __QCMP_WARNING_ENABLE(_X) __pragma( warning( enable : _X ) )
#undef __QCMP_WARNING_DEFAULT
#define __QCMP_WARNING_DEFAULT(_X) __pragma( warning( default : _X ) )

#undef	__QCMP_OPTIMIZEINCLUDE
#define __QCMP_OPTIMIZEINCLUDE once

//__QCMP_WARNING_DISABLE( 4251, "Lots of false negatives if we leave this switched on" )	//
__pragma( warning( disable : 4251 ) )

//--------------------------------------------------------------------------------
namespace nsCompiler
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __QCMP ) CMSVCCompiler10 : public CMSVCCompiler9
	{
	public:

		CMSVCCompiler10(){}
		virtual ~CMSVCCompiler10(){}

		//--------------------------------------------------------------------------------
		struct FuncInfo
		{
			unsigned int magicNumber;
			int maxState;
			const EH::UnwindMapEntry* pUnwindMap;
			unsigned int nTryBlocks;
			const EH::TryBlockMapEntry* pTryBlockMap;
			unsigned int nIPMapEntries;
			void* pIPtoStateMap;
			void* pESTypeList;
			unsigned int EHFlags;
		};

	};

}//nsCompiler

#endif//QCMP_MSVC2010_H_1
