//WinQLSocketSink.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Definitions/IO.h"
#include "WinQL/Application/IO/Socket/WinQLSocketSink.h"
#include "WinQL/Application/IO/Socket/WinQLSocketConnector.h"
#include "WinQL/Application/ErrorSystem/WinQLFunctionContext.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	__QOR_IMPLEMENT_OCLASS_LUID( CSocketSink );

	//--------------------------------------------------------------------------------
	CSocketSink::CSocketSink( CSocketConnector* pSocketConnector ) : CIOSink( pSocketConnector )
	{
		_WINQ_FCONTEXT( "CSocketSink::CSocketSink" );
	}

	//--------------------------------------------------------------------------------
	CSocketSink::~CSocketSink()
	{
		_WINQ_FCONTEXT( "CSocketSink::~CSocketSink" );
	}

	//--------------------------------------------------------------------------------
	bool CSocketSink::Write( unsigned long ulNumberOfUnitsToWrite, unsigned long& ulNumberOfBytesWritten, byte* pBuffer, unsigned long ulUnitSize )
	{
		_WINQ_FCONTEXT( "CSocketSink::Write" );
		bool bResult = false;
		CSocketConnector* pSocketConnector = dynamic_cast< CSocketConnector* >( m_pIOSinkConnector );
		if( pSocketConnector && pSocketConnector->IsConnected() )
		{			
			if( pSocketConnector->AsyncConnection() )
			{
				WSABuf WSABuffer;
				WSABuffer.len = ulNumberOfUnitsToWrite * ulUnitSize;
				WSABuffer.buf = reinterpret_cast< char* >( pBuffer );
				int iSendResult = pSocketConnector->Socket().Send( &WSABuffer, 1, &ulNumberOfBytesWritten, 0, reinterpret_cast< OVERLAPPED* >( pSocketConnector->GetSyncObject() ), (fpWSAOverlappedCompletionRoutine)(&COverlappedHandler::OnOverlappedSocketWriteCompleted) );
				
				bResult = ( iSendResult == 0 ? true : false );

				if( !bResult && pSocketConnector->Protocol() )
				{
					pSocketConnector->Protocol().As< nsBluefoot::CProtocol >()->OnWriteError();
				}

			}
			else
			{
				WSABuf WSABuffer;
				WSABuffer.len = ulNumberOfUnitsToWrite * ulUnitSize;
				WSABuffer.buf = reinterpret_cast< char* >( pBuffer );
				int iSendResult = pSocketConnector->Socket().Send( &WSABuffer, 1, &ulNumberOfBytesWritten, 0, 0, 0 );

				bResult = ( iSendResult == 0 ? true : false );

				if( pSocketConnector->Protocol() )
				{
					if( bResult )
					{
						pSocketConnector->Protocol().As< nsBluefoot::CProtocol >()->OnWriteSuccess();
					}
					else
					{
						pSocketConnector->Protocol().As< nsBluefoot::CProtocol >()->OnWriteError();
					}
				}
			}
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CSocketSink::Flush( void )
	{
		_WINQ_FCONTEXT( "CSocketSink::Flush" );
		bool bResult = true;

		return bResult;
	}

}//nsWin32


