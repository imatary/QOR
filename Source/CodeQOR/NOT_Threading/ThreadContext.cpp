//ThreadContext.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
#include "CodeQOR/Threading/ThreadContext.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/BaseErrorDomain.h"
#include "CodeQOR/Instancing/TInstancePtr.h"
#include "CodeQOR/Tracing/TraceFlyer.h"
#include "CodeQOR/CodePages/CodePage.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CExceptionContextBase::CExceptionContextBase()
	{
		m_iDefaultProcessingThrow = 0;
		m_pDummyFrameInfoChain = 0;
	}

	//--------------------------------------------------------------------------------
	CExceptionContextBase::CExceptionContextBase( const CExceptionContextBase& src )
	{
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CExceptionContextBase::~CExceptionContextBase()
	{
	}

	//--------------------------------------------------------------------------------
	CExceptionContextBase& CExceptionContextBase::operator=( const CExceptionContextBase& src )
	{
		if( &src != this )
		{
			m_iDefaultProcessingThrow = src.m_iDefaultProcessingThrow;
			m_pDummyFrameInfoChain = src.m_pDummyFrameInfoChain;
#if     ( __QCMP_COMPILER == __QCMP_MSVC )
			m_DummyExceptData = src.m_DummyExceptData;
#endif//( __QCMP_COMPILER == __QCMP_MSVC )
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	int& CExceptionContextBase::ProcessingThrow( void )
	{
		return m_iDefaultProcessingThrow;
	}

	//--------------------------------------------------------------------------------
	void*& CExceptionContextBase::FrameInfoChain( void )
	{
		return m_pDummyFrameInfoChain;
	}

#if     ( ( __QCMP_COMPILER != __QCMP_MSVC ) && ( __QCMP_COMPILER != __QCMP_INTEL ) )
	//--------------------------------------------------------------------------------
	void* CExceptionContextBase::CurrentException( void )
	{
		return 0;
	}
#else
	//--------------------------------------------------------------------------------
	nsCompiler::EH::ExceptData& CExceptionContextBase::CurrentException( void )
	{
		return m_DummyExceptData;
	}
#endif

	//--------------------------------------------------------------------------------
	CThreadContextBase* CThreadContextBase::Create( void )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------
	CThreadContextBase* CThreadContextBase::GetCurrent( void )
	{
		CProcessBase* pProcess = CProcessBase::ThisProcess();
		CThreadContextBase* pThread = 0;
		if( pProcess != 0 )
		{
			pThread = pProcess->ThreadContext();
		}
		return pThread;
	}

    //--------------------------------------------------------------------------------
    CThreadContextBase::CThreadContextBase()
    {
		m_pBaseFContext = 0;
		m_pBaseErrorDomain = 0;
		m_pBaseExceptionContext = 0;
		m_ulRecursionCount = 0;
		m_bTraceEnabled = false;
    }

    //--------------------------------------------------------------------------------
    CThreadContextBase::CThreadContextBase( const CThreadContextBase& src )
    {
		if( &src != this )
		{
			*this = src;
		}
    }

	//--------------------------------------------------------------------------------
	CThreadContextBase& CThreadContextBase::operator=( CThreadContextBase const & src )
	{
		m_pBaseFContext = src.m_pBaseFContext;
		m_pBaseErrorDomain = 0;//TODO:
		//m_iDefaultProcessingThrow = src.m_iDefaultProcessingThrow;
		//m_DummyExceptData = src.m_DummyExceptData;
		//m_pDummyFrameInfoChain = src.m_pDummyFrameInfoChain;
		return *this;
	}

	//--------------------------------------------------------------------------------
    CThreadContextBase::~CThreadContextBase()
    {
    }

	//--------------------------------------------------------------------------------
	CFunctionContextBase* CThreadContextBase::RegisterFunctionContext( CFunctionContextBase* pFContext )
	{
		CFunctionContextBase* pParent = m_pBaseFContext;
		m_pBaseFContext = pFContext;
		if( m_bTraceEnabled && pParent && !pParent->Locked() )
		{
			CTInstancePtr< CTraceFlyer > pTraceFlyer;
			if( !pTraceFlyer.IsNull() )
			{
				pTraceFlyer->Trace( const_cast< char* >( pFContext->Name() ) );
			}
		}
		return pParent;
	}

	//--------------------------------------------------------------------------------
	void CThreadContextBase::UnregisterFunctionContext( CFunctionContextBase* pFContext, CFunctionContextBase* pParent )
	{
		m_pBaseFContext = pParent;
		if( m_pBaseFContext )
		{
			m_pBaseFContext->Lock();
		}
	}

    //--------------------------------------------------------------------------------
	CFunctionContextBase* CThreadContextBase::FunctionContext( void )
	{
		return m_pBaseFContext;
	}

	//--------------------------------------------------------------------------------
	CBaseErrorDomain*& CThreadContextBase::ErrorDomain( void )
	{
		return m_pBaseErrorDomain;
	}

	//--------------------------------------------------------------------------------
	CExceptionContextBase* CThreadContextBase::ExceptionContext( void )
	{
		return m_pBaseExceptionContext;
	}

	//--------------------------------------------------------------------------------
	unsigned long CThreadContextBase::IncrementRecursionCount()
	{
		return m_ulRecursionCount++;
	}

	//--------------------------------------------------------------------------------
	unsigned long CThreadContextBase::DecrementRecursionCount()
	{
		return m_ulRecursionCount--;
	}

	//--------------------------------------------------------------------------------
	unsigned long CThreadContextBase::RecursionCount()
	{
		return m_ulRecursionCount;
	}

	//--------------------------------------------------------------------------------
	bool CThreadContextBase::InErrorSystem()
	{
		return RecursionCount() > 0;
	}

	//--------------------------------------------------------------------------------
	void CThreadContextBase::LeaveErrorSystem( void )
	{
		DecrementRecursionCount();
	}

	//--------------------------------------------------------------------------------
	void CThreadContextBase::EnterErrorSystem( void )
	{
		IncrementRecursionCount();
	}

	//------------------------------------------------------------------------------
	unsigned int CThreadContextBase::TlsAlloc( void )
	{
		m_aThreadLocalStorage.AcquireAccess();
		unsigned int uiResult = m_aThreadLocalStorage.Size();
		void* pNothing = 0;
		m_aThreadLocalStorage.Append( pNothing );
		m_aThreadLocalStorage.ReleaseAccess();
		return uiResult;
	}

	//------------------------------------------------------------------------------
	bool CThreadContextBase::TlsFree( unsigned int uiTlsIndex )
	{
		m_aThreadLocalStorage.AcquireAccess();
		m_aThreadLocalStorage[ uiTlsIndex ] = 0;
		m_aThreadLocalStorage.ReleaseAccess();
		return true;
	}

	//------------------------------------------------------------------------------
	void* CThreadContextBase::TlsGetValue( unsigned int uiTlsIndex )
	{
		void* pResult = 0;
		m_aThreadLocalStorage.AcquireAccess();
		pResult = m_aThreadLocalStorage[ uiTlsIndex ];
		m_aThreadLocalStorage.ReleaseAccess();
		return pResult;
	}

	//------------------------------------------------------------------------------
	bool CThreadContextBase::TlsSetValue( unsigned int uiTlsIndex, void* lpTlsValue )
	{
		m_aThreadLocalStorage.AcquireAccess();
		m_aThreadLocalStorage[ uiTlsIndex ] = lpTlsValue;
		m_aThreadLocalStorage.ReleaseAccess();
		return true;
	}

	//------------------------------------------------------------------------------
	CTMap< mxGUID*, void* >& CThreadContextBase::ClassThreadMap()
	{
		return m_ClassThreadMap;
	}

	//------------------------------------------------------------------------------
	void CThreadContextBase::SetTraceEnabled( bool bEnabled )
	{
		m_bTraceEnabled = bEnabled;
	}

	//------------------------------------------------------------------------------
	bool CThreadContextBase::GetTraceEnabled( void )
	{
		return m_bTraceEnabled;
	}

	//------------------------------------------------------------------------------
	void CThreadContextBase::SetCodePage( CCodePage* pCodePage )
	{
		m_pCodePage = pCodePage;
	}

	//------------------------------------------------------------------------------
	CCodePage* CThreadContextBase::GetCodePage( void )
	{
		return m_pCodePage;
	}

}//nsCodeQOR
