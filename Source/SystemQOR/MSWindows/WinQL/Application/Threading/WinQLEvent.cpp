//WinQLEvent.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Threading/WinQLEvent.h"
#include "WinQL/Application/Threading/WinQLWait.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CEvent );

	//--------------------------------------------------------------------------------
	CEvent::CEvent( nsWin32::LPSECURITY_ATTRIBUTES lpEventAttributes, const TCHAR* lpName, unsigned long dwFlags, unsigned long dwDesiredAccess, bool* pbAlreadyExists ) : CWaitableObject()
	{
		_WINQ_FCONTEXT( "CEvent::CEvent" );
		__QOR_PROTECT
		{
			static DWORD dwMajorVersion = ( DWORD )( LOBYTE( LOWORD( CKernel32::GetVersion() ) ) );
			bool bAlreadyExists = false;
			if( dwMajorVersion >= 6 )
			{
				m_Handle = CKernel32::CreateEventEx( reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpEventAttributes ), lpName, dwFlags, dwDesiredAccess, bAlreadyExists );
			}
			else
			{
				m_Handle = CKernel32::CreateEvent( reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( lpEventAttributes ), ( dwFlags & _CREATE_EVENT_MANUAL_RESET ) > 0 ? TRUE : FALSE,
					( dwFlags & _CREATE_EVENT_INITIAL_SET ) > 0 ? TRUE : FALSE, lpName, bAlreadyExists );
			}
			m_Handle.SetCanBeSignaled( true );
			m_Handle.Attach( this );
			if( pbAlreadyExists != 0 )
			{
				*pbAlreadyExists = bAlreadyExists;
			}

		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CEvent::CEvent( unsigned long dwDesiredAccess, bool bInheritHandle, const TCHAR* lpName ) : CWaitableObject()
	{
		_WINQ_FCONTEXT( "CEvent::CEvent" );
		__QOR_PROTECT
		{
			m_Handle = CKernel32::OpenEvent( dwDesiredAccess, bInheritHandle ? TRUE : FALSE, lpName );
			m_Handle.SetCanBeSignaled( true );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CEvent::CEvent( CSyncHandle& ExistingHandle ) : CWaitableObject( ExistingHandle.Ref() )
	{
		_WINQ_FCONTEXT( "CEvent::CEvent" );
	}

	//--------------------------------------------------------------------------------
	CEvent::CEvent( const CEvent& Src, E_EVT_COPY_CONSTRUCT_OPTS Opt ) : CWaitableObject( Src )
		, m_bAlreadyExists( Src.m_bAlreadyExists )
	{
		_WINQ_FCONTEXT( "CEvent::CEvent" );
		__QOR_PROTECT
		{
			if( &Src != this )
			{
				if( Opt == E_OPT_DEFAULT )
				{
					m_Handle = Src.m_Handle;
				}
				else if ( Opt == E_OPT_TRANSFER_HANDLE )
				{
					m_Handle = Src.m_Handle.ptr();
					( const_cast< CEvent& >(Src) ).m_Handle.Drop();
				}
				else
				{
					//TODO: Report unknown option error
				}
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CEvent::~CEvent()
	{
		_WINQ_FCONTEXT( "CEvent::~CEvent" );
	}

	//--------------------------------------------------------------------------------
	bool CEvent::Pulse()
	{
		_WINQ_FCONTEXT( "CEvent::Pulse" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::PulseEvent( m_Handle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CEvent::Reset()
	{
		_WINQ_FCONTEXT( "CEvent::Reset" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ResetEvent( m_Handle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CEvent::Set()
	{
		_WINQ_FCONTEXT( "CEvent::Set" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetEvent( m_Handle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
	/*
	//--------------------------------------------------------------------------------
	nsCodeQOR::CTCRef< CSyncHandle > CEvent::Handle()
	{
		nsCodeQOR::CTCRef< CSyncHandle > refHandle( const_cast< CSyncHandle* >( &m_Handle ) );
		return refHandle;
	}

	//--------------------------------------------------------------------------------
	unsigned long CEvent::Wait( unsigned long dwMilliseconds, bool bAlertable )
	{
		_WINQ_FCONTEXT( "CEvent::Wait" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			CSystemInfoHelper InfoHelper;
			static unsigned long dwMajorVersion = ( unsigned long )( LoByte( LoWord( InfoHelper.GetVersion() ) ) );
			nsWin32::CWaitHelper WaitHelper;					
			if( bAlertable == true && dwMajorVersion >= 5 )
			{
				dwResult = WaitHelper.WaitForSingleObjectEx( m_Handle, dwMilliseconds, bAlertable );
			}
			else
			{
				dwResult = WaitHelper.WaitForSingleObject( m_Handle, dwMilliseconds );
			}
		}__QOR_ENDPROTECT
		return dwResult;
	}
	*/
	//--------------------------------------------------------------------------------
	CSessionEvent::CSessionEvent( TCHAR* pszName, SECURITY_ATTRIBUTES* pEventSecurity, unsigned long dwFlags, unsigned long dwAccessDesired ) :
	CEvent( pEventSecurity, CTString( _TXT("Local\\" ) ).Append( pszName ), dwFlags, dwAccessDesired )
	{
		_WINQ_FCONTEXT( "CSessionEvent::CSessionEvent" );
	}

	//--------------------------------------------------------------------------------
	CGlobalEvent::CGlobalEvent( TCHAR* pszName, SECURITY_ATTRIBUTES* pEventSecurity, unsigned long dwFlags, unsigned long dwAccessDesired ) :
	CEvent( pEventSecurity, CTString( _TXT("Global\\" ) ).Append( pszName ), dwFlags, dwAccessDesired )
	{
		_WINQ_FCONTEXT( "CGlobalEvent::CGlobalEvent" );
	}

}//nsWin32
