//BfXmlParseException.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.


#include "BluefootQOR/XML/SAX/BfXmlParseException.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CXmlParseException );

	//------------------------------------------------------------------------------
	CXmlParseException::CXmlParseException( const nsCodeQOR::CUCS2String& name, int c, int l, const nsCodeQOR::CUCS2String& p, const nsCodeQOR::CUCS2String& s )
	{
		__QCS_MEMBER_FCONTEXT( _TXT("CXmlParseException::CXmlParseException") );
		m_Msg = name;
		m_Column = c;
		m_Line = l;
		m_Pub = p;
		m_Sys = s;
	}

	//------------------------------------------------------------------------------
	CXmlParseException::CXmlParseException( const CXmlParseException& Src )
	{
		__QCS_MEMBER_FCONTEXT( _TXT("CXmlParseException::CXmlParseException") );
		*this = Src;
	}

	//------------------------------------------------------------------------------
	CXmlParseException& CXmlParseException::operator = ( const CXmlParseException& Src )
	{
		__QCS_MEMBER_FCONTEXT( _TXT("CXmlParseException::operator =") );
		if( &Src != this )
		{
			m_Msg = Src.m_Msg;
			m_Column = Src.m_Column;
			m_Line = Src.m_Line;
			m_Pub = Src.m_Pub;
			m_Sys = Src.m_Sys;
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	CXmlParseException::~CXmlParseException()
	{
		__QCS_MEMBER_FCONTEXT( _TXT("CXmlParseException::~CXmlParseException") );
	}

	//------------------------------------------------------------------------------
	//Returns the error message
	nsCodeQOR::CUCS2String CXmlParseException::Message() const
	{
		__QCS_MEMBER_FCONTEXT( _TXT("CXmlParseException::Message") );
		return m_Msg;
	}

	//------------------------------------------------------------------------------
	//Returns the column number where the error occurred.
	int CXmlParseException::ColumnNumber() const
	{
		__QCS_MEMBER_FCONTEXT( _TXT("CXmlParseException::ColumnNumber") );
		return m_Column;
	}

	//------------------------------------------------------------------------------
	//Returns the line number where the error occurred.
	int CXmlParseException::LineNumber() const
	{
		__QCS_MEMBER_FCONTEXT( _TXT("CXmlParseException::LineNumber") );
		return m_Line;
	}

	//------------------------------------------------------------------------------
	//Returns the public identifier where the error occurred.
	nsCodeQOR::CUCS2String CXmlParseException::PublicId() const
	{
		__QCS_MEMBER_FCONTEXT( _TXT("CXmlParseException::PublicId") );
		return m_Pub;
	}

	//------------------------------------------------------------------------------
	//Returns the system identifier where the error occurred.
	nsCodeQOR::CUCS2String CXmlParseException::SystemId() const
	{
		__QCS_MEMBER_FCONTEXT( _TXT("CXmlParseException::SystemId") );
		return m_Sys;
	}

}//nsBluefoot
