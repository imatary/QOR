//WinQLGeoLocation.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/Locale/WinQLGeoLocation.h"
#include <string.h>

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CGeoLocationHelper );

	//--------------------------------------------------------------------------------
	CGeoLocationHelper::CGeoLocationHelper()
	{
		_WINQ_FCONTEXT( "CGeoLocationHelper::CGeoLocationHelper" );
	}

	//--------------------------------------------------------------------------------
	CGeoLocationHelper::CGeoLocationHelper( const CGeoLocationHelper& src )
	{
		_WINQ_FCONTEXT( "CGeoLocationHelper::CGeoLocationHelper" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CGeoLocationHelper::CGeoLocationHelper( CGeoLocationHelper&& move )
	{
		_WINQ_FCONTEXT("CGeoLocationHelper::CGeoLocationHelper");
		*this = std::move(move);
	}

	//--------------------------------------------------------------------------------
	CGeoLocationHelper& CGeoLocationHelper::operator = ( const CGeoLocationHelper& src )
	{
		_WINQ_FCONTEXT( "CGeoLocationHelper::operator =" );
		return *this;
	}

	//--------------------------------------------------------------------------------
	CGeoLocationHelper& CGeoLocationHelper::operator = ( CGeoLocationHelper&& move)
	{
		_WINQ_FCONTEXT("CGeoLocationHelper::operator =");
		return *this;
	}

	//--------------------------------------------------------------------------------
	CGeoLocationHelper::~CGeoLocationHelper()
	{
		_WINQ_FCONTEXT( "CGeoLocationHelper::~CGeoLocationHelper" );
	}

	//--------------------------------------------------------------------------------
	BOOL CGeoLocationHelper::EnumSystemGeoID( GEOCLASS GeoClass, GEOID ParentGeoId, GeoEnumCallback lpGeoEnumProc ) const
	{
		_WINQ_FCONTEXT( "CGeoLocationHelper::EnumSystemGeoID" );
		BOOL bResult = m_Win32LocaleHelper.EnumSystemGeoID( GeoClass, ParentGeoId, lpGeoEnumProc );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTString CGeoLocationHelper::GetGeoInfo( GEOID GeoId, GEOTYPE GeoType, unsigned short usLanguage ) const
	{
		_WINQ_FCONTEXT( "CGeoLocationHelper::GetGeoInfo" );
		return m_Win32LocaleHelper.GetGeoInfoT( GeoId, GeoType, usLanguage );
	}

	//--------------------------------------------------------------------------------
	GEOID CGeoLocationHelper::GetUserNation() const
	{
		_WINQ_FCONTEXT( "CGeoLocationHelper::GetUserNation" );
		return GetUserGeoID( GeoClass_Nation );
	}

	//--------------------------------------------------------------------------------
	GEOID CGeoLocationHelper::GetUserRegion() const
	{
		_WINQ_FCONTEXT( "CGeoLocationHelper::GetUserRegion" );
		return GetUserGeoID( GeoClass_Region );
	}

	//--------------------------------------------------------------------------------
	GEOID CGeoLocationHelper::GetUserGeoID( GEOCLASS GeoClass ) const
	{
		_WINQ_FCONTEXT( "CGeoLocationHelper::GetUSerGeoID" );
		GEOID Result = m_Win32LocaleHelper.GetUserGeoID( GeoClass );
		return Result;
	}

	//--------------------------------------------------------------------------------
	BOOL CGeoLocationHelper::SetUserGeoID( GEOID GeoID ) const
	{
		_WINQ_FCONTEXT( "CGeoLocationHelper::SetUserGeoID" );
		BOOL bResult = m_Win32LocaleHelper.SetUserGeoID( GeoID );
		return bResult;
	}

	__QOR_IMPLEMENT_OCLASS_LUID( CGeoLocation );

	//--------------------------------------------------------------------------------
	CGeoLocation::CGeoLocation( GEOID ID ) : m_ID( ID )
	{
		_WINQ_FCONTEXT( "CGeoLocation::CGeoLocation" );
	}

	//--------------------------------------------------------------------------------
	CGeoLocation::CGeoLocation( const CGeoLocation& src )
	{
		_WINQ_FCONTEXT( "CGeoLocation::CGeoLocation" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CGeoLocation::CGeoLocation( CGeoLocation&& move )
	{
		_WINQ_FCONTEXT("CGeoLocation::CGeoLocation");
		*this = std::move(move);
	}

	//--------------------------------------------------------------------------------
	CGeoLocation& CGeoLocation::operator = ( const CGeoLocation& src )
	{
		_WINQ_FCONTEXT( "CGeoLocation::operator =" );
		if( &src != this )
		{
			m_ID = src.m_ID;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CGeoLocation& CGeoLocation::operator = ( CGeoLocation&& move)
	{
		_WINQ_FCONTEXT("CGeoLocation::operator =");
		if (&move != this)
		{
			m_ID = move.m_ID;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CGeoLocation::~CGeoLocation()
	{
		_WINQ_FCONTEXT( "CGeoLocation::~CGeoLocation" );
	}

	//--------------------------------------------------------------------------------
	GEOID CGeoLocation::ID() const
	{
		_WINQ_FCONTEXT( "CGeoLocation::ID" );
		return m_ID;
	}

	//--------------------------------------------------------------------------------
	CTString CGeoLocation::GetNation( unsigned short usLanguage ) const
	{
		_WINQ_FCONTEXT( "CGeoLocation::GetNation" );
		return m_Helper.GetGeoInfo( m_ID, GeoType_Nation, usLanguage );
	}

	//--------------------------------------------------------------------------------
	CTString CGeoLocation::GetLatitude( unsigned short usLanguage ) const
	{
		_WINQ_FCONTEXT( "CGeoLocation::GetLatitude" );
		return m_Helper.GetGeoInfo( m_ID, GeoType_Latitude, usLanguage );
	}

	//--------------------------------------------------------------------------------
	CTString CGeoLocation::GetLongitude( unsigned short usLanguage ) const
	{
		_WINQ_FCONTEXT( "CGeoLocation::GetLongitude" );
		return m_Helper.GetGeoInfo( m_ID, GeoType_Longitude, usLanguage );
	}

	//--------------------------------------------------------------------------------
	CTString CGeoLocation::GetISO2( unsigned short usLanguage ) const
	{
		_WINQ_FCONTEXT( "CGeoLocation::GetISO2" );
		return m_Helper.GetGeoInfo( m_ID, GeoType_ISO2, usLanguage );
	}

	//--------------------------------------------------------------------------------
	CTString CGeoLocation::GetISO3( unsigned short usLanguage ) const
	{
		_WINQ_FCONTEXT( "CGeoLocation::GetISO3" );
		return m_Helper.GetGeoInfo( m_ID, GeoType_ISO3, usLanguage );
	}

	//--------------------------------------------------------------------------------
	CTString CGeoLocation::GetRFC1766( unsigned short usLanguage ) const
	{
		_WINQ_FCONTEXT( "CGeoLocation::GetRFC1766" );
		return m_Helper.GetGeoInfo( m_ID, GeoType_RFC1766, usLanguage );
	}

	//--------------------------------------------------------------------------------
	CTString CGeoLocation::GetLCID( unsigned short usLanguage ) const
	{
		_WINQ_FCONTEXT( "CGeoLocation::GetLCID" );
		return m_Helper.GetGeoInfo( m_ID, GeoType_LCID, usLanguage );
	}

	//--------------------------------------------------------------------------------
	CTString CGeoLocation::GetFriendlyName( unsigned short usLanguage ) const
	{
		_WINQ_FCONTEXT( "CGeoLocation::GetFriendlyName" );
		return m_Helper.GetGeoInfo( m_ID, GeoType_FriendlyName, usLanguage );
	}

	//--------------------------------------------------------------------------------
	CTString CGeoLocation::GetOfficialName( unsigned short usLanguage ) const
	{
		_WINQ_FCONTEXT( "CGeoLocation::GetOfficialName" );
		return m_Helper.GetGeoInfo( m_ID, GeoType_OfficialName, usLanguage );
	}

}//nsWin32
