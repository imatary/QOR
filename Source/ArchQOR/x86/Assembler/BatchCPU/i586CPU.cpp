//i586CPU.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement i586 Assembler intrinsics for x86PC platform

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/Assembler/BatchCPU/i586CPU.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	namespace nsx86
	{
		//--------------------------------------------------------------------------------
		Ci586CPU::Ci586CPU( CCodeGeneratorBase* codeGenerator ) : Ci486CPU( codeGenerator )
		{
		}

		//--------------------------------------------------------------------------------
		Ci586CPU::~Ci586CPU() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		//Compares the 64-bit value in EDX:EAX with the memory operand (Pentium).
		//
		// If the values are equal, then this instruction stores the 64-bit value
		// in ECX:EBX into the memory operand and sets the zero flag. Otherwise,
		// this instruction copies the 64-bit memory operand into the EDX:EAX
		// registers and clears the zero flag.
		void Ci586CPU::cmpxchg8b( const CMem& dst )
		{
			_emitInstruction( INST_CMPXCHG8B, &dst );
		}

		//------------------------------------------------------------------------------
		//Read Time-Stamp Counter (Pentium).
		void Ci586CPU::rdtsc()
		{
			_emitInstruction( INST_RDTSC );
		}

		//------------------------------------------------------------------------------
		//Read Time-Stamp Counter and Processor ID (New).
		void Ci586CPU::rdtscp()
		{
			_emitInstruction( INST_RDTSCP );
		}

		//------------------------------------------------------------------------------
#if ( QOR_ARCH_WORDSIZE == 64 )
		//Convert DWord to QWord (Sign Extend).
		//
		// RAX <- Sign Extend EAX
		void Ci586CPU::cdqe()
		{
			_emitInstruction( INST_CDQE );
		}
#endif // 
#if ( QOR_ARCH_WORDSIZE == 64 )
		//Compares the 128-bit value in RDX:RAX with the memory operand (X64).
		//
		// If the values are equal, then this instruction stores the 128-bit value
		// in RCX:RBX into the memory operand and sets the zero flag. Otherwise,
		// this instruction copies the 128-bit memory operand into the RDX:RAX
		// registers and clears the zero flag.
		void Ci586CPU::cmpxchg16b( const CMem& dst )
		{
			_emitInstruction( INST_CMPXCHG16B, &dst );
		}
#endif // 
#if ( QOR_ARCH_WORDSIZE == 64 )

		//------------------------------------------------------------------------------
		//Move DWord to QWord with sign-extension.
		void Ci586CPU::movsxd( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_MOVSXD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move DWord to QWord with sign-extension.
		// @overload
		void Ci586CPU::movsxd( const CGPReg& dst, const CMem& src )
		{
			_emitInstruction( INST_MOVSXD, &dst, &src );
		}
#endif // 
#if ( QOR_ARCH_WORDSIZE == 64 )
		//------------------------------------------------------------------------------
		//Load ECX/RCX QWORDs from DS:[ESI/RSI] to RAX.
		void Ci586CPU::rep_lodsq()
		{
			_emitInstruction( INST_REP_LODSQ );
		}
#endif // 
#if ( QOR_ARCH_WORDSIZE == 64 )
		//------------------------------------------------------------------------------
		//Move ECX/RCX QWORDs from DS:[ESI/RSI] to ES:[EDI/RDI].
		void Ci586CPU::rep_movsq()
		{
			_emitInstruction( INST_REP_MOVSQ );
		}
#endif // 
#if ( QOR_ARCH_WORDSIZE == 64 )
		//------------------------------------------------------------------------------
		//Fill ECX/RCX QWORDs at ES:[EDI/RDI] with RAX.
		void Ci586CPU::rep_stosq()
		{
			_emitInstruction( INST_REP_STOSQ );
		}
#endif // 

#if ( QOR_ARCH_WORDSIZE == 64 )
		//------------------------------------------------------------------------------
		//Repeated find nonmatching QWORDs in ES:[EDI/RDI] and DS:[ESI/RDI].
		void Ci586CPU::repe_cmpsq()
		{
			_emitInstruction( INST_REPE_CMPSQ );
		}
#endif // 
#if ( QOR_ARCH_WORDSIZE == 64 )
		//------------------------------------------------------------------------------
		//Find non-RAX QWORD starting at ES:[EDI/RDI].
		void Ci586CPU::repe_scasq()
		{
			_emitInstruction( INST_REPE_SCASQ );
		}
#endif // 

#if ( QOR_ARCH_WORDSIZE == 64 )
		//------------------------------------------------------------------------------
		//Repeated find nonmatching QWORDs in ES:[EDI/RDI] and DS:[ESI/RDI].
		void Ci586CPU::repne_cmpsq()
		{
			_emitInstruction( INST_REPNE_CMPSQ );
		}
#endif // 


#if ( QOR_ARCH_WORDSIZE == 64 )
		//------------------------------------------------------------------------------
		//Find RAX, starting at ES:[EDI/RDI].
		void Ci586CPU::repne_scasq()
		{
			_emitInstruction( INST_REPNE_SCASQ );
		}
#endif // 


		//--------------------------------------------------------------------------------
		CPentiumFPU::CPentiumFPU( Cx86CPUCore& refCPU ) : C486FPU( refCPU )
		{
		}

		//--------------------------------------------------------------------------------
		CPentiumFPU::~CPentiumFPU()
		{
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
