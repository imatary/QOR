//WinQLNetworkHost.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/Comms/Network/WinQLNetworkHost.h"

#include "WinQAPI/WS2_32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CNetworkHost );

	//--------------------------------------------------------------------------------
	CNetworkHost::CNetworkHost() : m_WS32Library( nsWinQAPI::CWS2_32::Instance() ), m_pProtocolInfo( 0 ), m_ulProtocolCount( 0 )
	{
		_WINQ_FCONTEXT( "CNetworkHost::CNetworkHost" );
		EnumerateProtocols();
	}

	//--------------------------------------------------------------------------------
	CNetworkHost::~CNetworkHost()
	{
		_WINQ_FCONTEXT( "CNetworkHost::~CNetworkHost" );
		m_ulProtocolCount = 0;
		delete [] m_pProtocolInfo;
	}

	//--------------------------------------------------------------------------------
	void CNetworkHost::EnumerateProtocols()
	{
		_WINQ_FCONTEXT( "CNetworkHost::EnumerateProtocols" );
		unsigned long ulBufferLength = 0;
		int iResult = m_WS32Library.WSAEnumProtocols( 0, 0, &ulBufferLength );

		if( iResult != SOCKET_ERROR )
		{
			m_pProtocolInfo = new nsWin32::WSAProtocolInfo[ ulBufferLength / sizeof( nsWin32::WSAProtocolInfo ) ];
			m_ulProtocolCount = m_WS32Library.WSAEnumProtocols( 0, reinterpret_cast<::LPWSAPROTOCOL_INFO>( m_pProtocolInfo ), &ulBufferLength );
		}
	}

	//--------------------------------------------------------------------------------
	WSAProtocolInfo* CNetworkHost::GetProtocols( unsigned long& ulProtocolCount )
	{
		_WINQ_FCONTEXT( "CNetworkHost::GetProtocols" );
		ulProtocolCount = m_ulProtocolCount;
		return m_pProtocolInfo;
	}

}//nsWin32
