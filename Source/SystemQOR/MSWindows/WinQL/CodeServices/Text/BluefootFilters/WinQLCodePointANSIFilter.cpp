//WinQLCodePointANSIFilter.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/Text/BluefootFilters/WinQLCodePointANSIFilter.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	//------------------------------------------------------------------------------
	CCodePointANSIFilter::CCodePointANSIFilter() : nsBluefoot::CFilter()
	{
	}

	//------------------------------------------------------------------------------
	CCodePointANSIFilter::~CCodePointANSIFilter()
	{
	}

	//------------------------------------------------------------------------------
	CCodePointANSIFilter::CCodePointANSIFilter( const CCodePointANSIFilter& src ) : nsBluefoot::CFilter( src )
	{
	}

	//------------------------------------------------------------------------------
	CCodePointANSIFilter& CCodePointANSIFilter::operator = ( const CCodePointANSIFilter& src )
	{
		if( &src != this ){}
		return *this;
	}

	//------------------------------------------------------------------------------
	unsigned long CCodePointANSIFilter::ProcessCodePointToBuffer( unsigned long ulUnit, unsigned int* pCodePointBuffer )
	{
		int iDefaultUsed = 0;
		unsigned long ulANSIWritten = 0;
		if( pCodePointBuffer[ ulUnit ] < 0x10000 )
		{
			wchar_t utf16 = static_cast< wchar_t >( pCodePointBuffer[ ulUnit ] );
			ulANSIWritten = 2;
			ulANSIWritten = m_CodePage.WideCharToMultiByte( 0, const_cast< const wchar_t* >( &utf16 ), 1, reinterpret_cast< char* >( m_SourceBuffer.WriteRequest( ulANSIWritten ) ), 2, "?", &iDefaultUsed );
			m_SourceBuffer.WriteAcknowledge( ulANSIWritten );
		}
		else if( pCodePointBuffer[ ulUnit ] < 0x10FFFF )
		{
			wchar_t utf16[ 2 ];
			utf16[ 0 ] = static_cast< wchar_t >( ( pCodePointBuffer[ ulUnit ] >> 10 ) + 0xD7C0 );
			utf16[ 1 ] = static_cast< wchar_t >( ( pCodePointBuffer[ ulUnit ] & 0x3FF ) + 0xDC00 );
			ulANSIWritten = 4;
			ulANSIWritten = m_CodePage.WideCharToMultiByte( 0, const_cast< const wchar_t* >( utf16 ), 2, reinterpret_cast< char* >( m_SourceBuffer.WriteRequest( ulANSIWritten ) ), 4, "?", &iDefaultUsed );
			m_SourceBuffer.WriteAcknowledge( ulANSIWritten );
		}
		else
		{
			//invalid code point
		}
		return ulANSIWritten;
	}

	//------------------------------------------------------------------------------
	bool CCodePointANSIFilter::Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead )
	{
		//Read up to the number of code points 1-to-1 for the number of ANSI chars requested
		if( m_SinkProxy.GetSource()->Read( ulUnitsRead, ulUnitsToRead ) )
		{
			unsigned int* pCodePointBuffer = reinterpret_cast< unsigned int* >( m_SinkProxy.GetSource()->GetBuffer()->ReadRequest( ulUnitsToRead ) );

			for( ulUnitsRead = 0; ulUnitsRead < ulUnitsToRead; ulUnitsRead++ )
			{
				ProcessCodePointToBuffer( ulUnitsRead, pCodePointBuffer );
			}

			m_SinkProxy.GetSource()->GetBuffer()->ReadAcknowledge( ulUnitsRead );
		}
		return ulUnitsRead > 0 ? true : false;

	}

	//------------------------------------------------------------------------------
	bool CCodePointANSIFilter::Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite )
	{
		unsigned int* pCodePointBuffer = reinterpret_cast< unsigned int* >( m_SinkProxy.GetSource()->GetBuffer()->ReadRequest( ulUnitsToWrite ) );		
		unsigned long ulANSIWritten = 0;		
		
		for( ulUnitsWritten = 0; ulUnitsWritten < ulUnitsToWrite; ulUnitsWritten++ )
		{
			unsigned long ulANSIToWrite = ProcessCodePointToBuffer( ulUnitsWritten, pCodePointBuffer + ulUnitsWritten );

			if( ulANSIToWrite > 0 )
			{
				m_SourceProxy.GetSink()->Write( ulANSIWritten, ulANSIToWrite );
			}
		}

		m_SinkProxy.GetSource()->GetBuffer()->ReadAcknowledge( ulUnitsWritten );
		return ulUnitsWritten > 0 ? true : false;
	}
}
