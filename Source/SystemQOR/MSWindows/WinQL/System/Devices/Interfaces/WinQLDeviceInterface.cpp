//WinQLDeviceInterface.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterfaceClass.h"
#include "WinQL/System/Devices/Instances/WinQLDeviceInstance.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/SetupAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceInterface );

	//--------------------------------------------------------------------------------
	CDeviceInterface::CDeviceInterface()
	{
		_WINQ_FCONTEXT( "CDeviceInterface::CDeviceInterface" );
	}

	//--------------------------------------------------------------------------------
	CDeviceInterface::CDeviceInterface( CDeviceHandle& hExisting )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::CDeviceInterface" );
	}

	//--------------------------------------------------------------------------------
	CDeviceInterface::CDeviceInterface( const CDeviceInterface& src )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::CDeviceInterface" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CDeviceInterface& CDeviceInterface::operator = ( const CDeviceInterface& src )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::operator =" );

		if( &src != this )
		{
			m_bActive = src.m_bActive;
			m_bDefault = src.m_bDefault;
			m_bRemoved = src.m_bRemoved;
			m_strPath = src.m_strPath;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CDeviceInterface::~CDeviceInterface()
	{
		_WINQ_FCONTEXT( "CDeviceInterface::~CDeviceInterface" );
	}
	/*
	//--------------------------------------------------------------------------------
	void CDeviceInterface::SetClass( CDeviceInterfaceClass::ref_type pClass )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::SetClass" );
		m_pClass = pClass;
	}

	//--------------------------------------------------------------------------------
	CDeviceInterfaceClass::ref_type CDeviceInterface::GetClass()
	{
		_WINQ_FCONTEXT( "CDeviceInterface::GetClass" );
		return m_pClass;
	}
	*/
	/*
	//--------------------------------------------------------------------------------
	void CDeviceInterface::SetInstance( CDeviceInstance::ref_type pInstance )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::SetInstance" );
		m_pInstance = pInstance;
	}

	//--------------------------------------------------------------------------------
	CDeviceInstance::ref_type CDeviceInterface::GetInstance()
	{
		_WINQ_FCONTEXT( "CDeviceInterface::GetInstance" );
		return m_pInstance;
	}
	*/

	//--------------------------------------------------------------------------------
	void CDeviceInterface::SetActive( bool bActive )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::SetActive" );
		m_bActive = bActive;
	}
	//--------------------------------------------------------------------------------
	bool CDeviceInterface::GetActive( void )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::GetActive" );
		return m_bActive;
	}

	//--------------------------------------------------------------------------------
	void CDeviceInterface::SetDefault( bool bDefault )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::SetDefault" );
		m_bDefault = bDefault;
	}
	//--------------------------------------------------------------------------------
	bool CDeviceInterface::GetDefault( void )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::GetDefault" );
		return m_bDefault;
	}

	//--------------------------------------------------------------------------------
	void CDeviceInterface::SetRemoved( bool bRemoved )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::SetRemoved" );
		m_bRemoved = bRemoved;
	}
	//--------------------------------------------------------------------------------
	bool CDeviceInterface::GetRemoved( void )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::GetRemoved" );
		return m_bRemoved;
	}

	//--------------------------------------------------------------------------------
	void CDeviceInterface::SetPath( const mxTCHAR* szPath )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::SetPath" );
		nsCodeQOR::CTLRef< mxTCHAR > RefPath( szPath, false );
		m_strPath = CTString( RefPath );
	}

	//--------------------------------------------------------------------------------
	CTString& CDeviceInterface::GetPath()
	{
		return m_strPath;
	}

	//--------------------------------------------------------------------------------
	CIODeviceFile::ref_type CDeviceInterface::Open( unsigned long ulAccessRequired, unsigned long ulShareMode, unsigned long ulAttributes )
	{
		_WINQ_FCONTEXT( "CDeviceInterface::Open" );
		return new_shared_ref< CIODeviceFile >( m_strPath.GetBuffer(), ulAccessRequired, ulShareMode, ulAttributes );
	}

}//nsWin32
