//WS2_32.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQAPI/WinQAPI.h"
#include "WinQAPI/WS2_32.h"
#include "../Source/SystemQOR/MSWindows/WINQAPI/include/ReturnCheck.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	//--------------------------------------------------------------------------------
	SOCKET CWS2_32::accept( SOCKET s, sockaddr* addr, int* addrlen )
	{
		_WINQ_FCONTEXT( "CWS2_32::accept" );
		CCheckReturn< SOCKET, CTCheckFailureValue< SOCKET, INVALID_SOCKET > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( accept );
		Result = Call< SOCKET, SOCKET, sockaddr*, int* >( pFunc, s, addr, addrlen );
#else
		__QCMP_UNREF3( s, addr, addrlen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "accept" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::bind( SOCKET s, const sockaddr* name, int namelen )
	{
		_WINQ_FCONTEXT( "CWS2_32::bind" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( bind );
		iResult = Call< int, SOCKET, const sockaddr*, int >( pFunc, s, name, namelen );
#else
		__QCMP_UNREF3( s, name, namelen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "bind" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::closesocket( SOCKET s )
	{
		_WINQ_FCONTEXT( "CWS2_32::closesocket" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( closesocket );
		iResult = Call< int, SOCKET >( pFunc, s );
#else
		__QCMP_UNREF( s );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "closesocket" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::connect( SOCKET s, const sockaddr* name, int namelen )
	{
		_WINQ_FCONTEXT( "CWS2_32::connect" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( connect );
		iResult = Call< int, SOCKET, const sockaddr*, int >( pFunc, s, name, namelen );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( name );
		__QCMP_UNREF( namelen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "connect" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )

		if (iResult == SOCKET_ERROR)
		{
			int iError = WSAGetLastError();
			//__WINQAPI_CONT_ERROR((WINSOCK_ERROR, _T("Connect"), iResult, 0));
		}

		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::getpeername( SOCKET s, sockaddr* name, int* namelen )
	{
		_WINQ_FCONTEXT( "CWS2_32::getpeername" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( getpeername );
		iResult = Call< int, SOCKET, sockaddr*, int* >( pFunc, s, name, namelen );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( name );
		__QCMP_UNREF( namelen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "getpeername" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::getsockname( SOCKET s, struct sockaddr* name, int* namelen )
	{
		_WINQ_FCONTEXT( "CWS2_32::getsockname" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( getsockname );
		iResult = Call< int, SOCKET, sockaddr*, int* >( pFunc, s, name, namelen );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( name );
		__QCMP_UNREF( namelen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "getsockname" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::getsockopt( SOCKET s, int level, int optname, char* optval, int* optlen )
	{
		_WINQ_FCONTEXT( "CWS2_32::getsockopt" );
		CCheckReturn< int, CCheckNonZero< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( getsockopt );
		iResult = Call< int, SOCKET, int, int, char*, int* >( pFunc, s, level, optname, optval, optlen );
#else
		__QCMP_UNREF4( s, level, optname, optval );
		__QCMP_UNREF( optlen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "getsockopt" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	u_long CWS2_32::htonl( u_long hostlong )
	{
		_WINQ_FCONTEXT( "CWS2_32::htonl" );
		u_long ulResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( htonl );
		ulResult = Call< u_long, u_long >( pFunc, hostlong );
#else
		__QCMP_UNREF( hostlong );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "htonl" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	u_short CWS2_32::htons( u_short hostshort )
	{
		_WINQ_FCONTEXT( "CWS2_32::htons" );
		u_short Result = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( htons );
		Result = Call< u_short, u_short >( pFunc, hostshort );
#else
		__QCMP_UNREF( hostshort );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "htons" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::ioctlsocket( SOCKET s, long cmd, u_long* argp )
	{
		_WINQ_FCONTEXT( "CWS2_32::ioctlsocket" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ioctlsocket );
		iResult = Call< int, SOCKET, long, u_long* >( pFunc, s, cmd, argp );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( cmd );
		__QCMP_UNREF( argp );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ioctlsocket" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CWS2_32::inet_addr( const char* cp )
	{
		_WINQ_FCONTEXT( "CWS2_32::inet_addr" );
		unsigned long ulResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( inet_addr );
		ulResult = Call< unsigned long, const char* >( pFunc, cp );
#else
		__QCMP_UNREF( cp );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "inet_addr" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	char* CWS2_32::inet_ntoa( in_addr in )
	{
		_WINQ_FCONTEXT( "CWS2_32::inet_ntoa" );
		char* pResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( inet_ntoa );
		pResult = Call< char*, in_addr >( pFunc, in );
#else
		__QCMP_UNREF( in );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "inet_ntoa" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x500 )
		return pResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::listen( SOCKET s, int backlog )
	{
		_WINQ_FCONTEXT( "CWS2_32::listen" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( listen );
		iResult = Call< int, SOCKET, int >( pFunc, s, backlog );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( backlog );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "listen" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	u_long CWS2_32::ntohl( u_long netlong )
	{
		_WINQ_FCONTEXT( "CWS2_32::ntohl" );
		u_long ulResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ntohl );
		ulResult = Call< u_long, u_long >( pFunc, netlong );
#else
		__QCMP_UNREF( netlong );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ntohl" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	u_short CWS2_32::ntohs( u_short netshort )
	{
		_WINQ_FCONTEXT( "CWS2_32::ntohs" );
		u_short usResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( ntohs );
		usResult = Call< u_short, u_short >( pFunc, netshort );
#else
		__QCMP_UNREF( netshort );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "ntohs" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return usResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::recv( SOCKET s, char* buf, int len, int flags )
	{
		_WINQ_FCONTEXT( "CWS2_32::recv" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( recv );
		iResult = Call< int, SOCKET, char*, int, int >( pFunc, s, buf, len, flags );
#else
		__QCMP_UNREF4( s, buf, len, flags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "recv" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::recvfrom( SOCKET s, char* buf, int len, int flags, sockaddr* from, int* fromlen )
	{
		_WINQ_FCONTEXT( "CWS2_32::recvfrom" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( recvfrom );
		iResult = Call< int, SOCKET, char*, int, int, sockaddr*, int* >( pFunc, s, buf, len, flags, from, fromlen );
#else
		__QCMP_UNREF4( s, buf, len, flags );
		__QCMP_UNREF( from );
		__QCMP_UNREF( fromlen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "recvfrom" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::select( int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, const timeval* timeout )
	{
		_WINQ_FCONTEXT( "CWS2_32::select" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( select );
		iResult = Call< int, int, fd_set*, fd_set*, fd_set*, const timeval* >( pFunc, nfds, readfds, writefds, exceptfds, timeout );
#else
		__QCMP_UNREF4( nfds, readfds, writefds, exceptfds );
		__QCMP_UNREF( timeout );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "select" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::send( SOCKET s, const char* buf, int len, int flags )
	{
		_WINQ_FCONTEXT( "CWS2_32::send" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( send );
		iResult = Call< int, SOCKET, const char*, int, int >( pFunc, s, buf, len, flags );
#else
		__QCMP_UNREF4( s, buf, len, flags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "send" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::sendto( SOCKET s, const char* buf, int len, int flags, const sockaddr* to, int tolen )
	{
		_WINQ_FCONTEXT( "CWS2_32::sendto" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( sendto );
		iResult = Call< int, SOCKET, const char*, int, int, const sockaddr*, int >( pFunc, s, buf, len, flags, to, tolen );
#else
		__QCMP_UNREF4( s, buf, len, flags );
		__QCMP_UNREF( to );
		__QCMP_UNREF( tolen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "sendto" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::setsockopt( SOCKET s, int level, int optname, const char* optval, int optlen )
	{
		_WINQ_FCONTEXT( "CWS2_32::setsockopt" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( setsockopt );
		iResult = Call< int, SOCKET, int, int, const char*, int >( pFunc, s, level, optname, optval, optlen );
#else
		__QCMP_UNREF4( s, level, optname, optval );
		__QCMP_UNREF( optlen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "setsockopt" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::shutdown( SOCKET s, int how )
	{
		_WINQ_FCONTEXT( "CWS2_32::shutdown" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( shutdown );
		iResult = Call< int, SOCKET, int >( pFunc, s, how );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( how );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "shutdown" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	SOCKET CWS2_32::socket( int af, int type, int protocol )
	{
		_WINQ_FCONTEXT( "CWS2_32::socket" );
		CCheckReturn< SOCKET, CTCheckFailureValue< SOCKET, INVALID_SOCKET > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( socket );
		Result = Call< SOCKET, int, int, int >( pFunc, af, type, protocol );
#else
		__QCMP_UNREF( af );
		__QCMP_UNREF( type );
		__QCMP_UNREF( protocol );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "socket" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	void CWS2_32::FreeAddrInfoEx( PADDRINFOEX pAddrInfo )
	{
		_WINQ_FCONTEXT( "CWS2_32::FreeAddrInfoEx" );
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( FreeAddrInfoEx );
		voidCall< PADDRINFOEX >( pFunc, pAddrInfo );
#else
		__QCMP_UNREF( pAddrInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FreeAddrInfoEx" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )

	}

	//--------------------------------------------------------------------------------
	void CWS2_32::FreeAddrInfoW( PADDRINFOW pAddrInfo )
	{
		_WINQ_FCONTEXT( "CWS2_32::FreeAddrInfoW" );
#if		( _WIN32_WINNT >= 0x0502 )
		_WINQ_USESAPI( FreeAddrInfoW );
		voidCall< PADDRINFOW >( pFunc, pAddrInfo );
#else
		__QCMP_UNREF( pAddrInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "FreeAddrInfoW" ), _T( "Windows XP Service Pack2" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::GetAddrInfoExA( PCSTR pName, PCSTR pServiceName, DWORD dwNameSpace, LPGUID lpNspId, const ADDRINFOEX* pHints, PADDRINFOEX* ppResult, timeval* timeout, LPOVERLAPPED lpOverlapped, LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, LPHANDLE lpNameHandle )
	{
		_WINQ_FCONTEXT( "CWS2_32::GetAddrInfoExA" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( GetAddrInfoExA );
		iResult = Call< int, PCSTR, PCSTR, DWORD, LPGUID, const ADDRINFOEX*, PADDRINFOEX*, timeval*, LPOVERLAPPED, LPLOOKUPSERVICE_COMPLETION_ROUTINE, LPHANDLE >( pFunc, pName, pServiceName, dwNameSpace, lpNspId, pHints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle );
#else
		__QCMP_UNREF4( pName, pServiceName, dwNameSpace, lpNameHandle );
		__QCMP_UNREF4( lpNspId, pHints, ppResult, timeout );
		__QCMP_UNREF( lpOverlapped );
		__QCMP_UNREF( lpCompletionRoutine );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetAddrInfoExA" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::GetAddrInfoExW( PCWSTR pName, PCWSTR pServiceName, DWORD dwNameSpace, LPGUID lpNspId, const ADDRINFOEX* pHints, PADDRINFOEX* ppResult, timeval* timeout, LPOVERLAPPED lpOverlapped, LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, LPHANDLE lpNameHandle )
	{
		_WINQ_FCONTEXT( "CWS2_32::GetAddrInfoExW" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( GetAddrInfoExW );
		iResult = Call< int, PCWSTR, PCWSTR, DWORD, LPGUID, const ADDRINFOEX*, PADDRINFOEX*, timeval*, LPOVERLAPPED, LPLOOKUPSERVICE_COMPLETION_ROUTINE, LPHANDLE >( pFunc, pName, pServiceName, dwNameSpace, lpNspId, pHints, ppResult, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle );
#else
		__QCMP_UNREF4( pName, pServiceName, dwNameSpace, lpNameHandle );
		__QCMP_UNREF4( lpNspId, pHints, ppResult, timeout );
		__QCMP_UNREF( lpOverlapped );
		__QCMP_UNREF( lpCompletionRoutine );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetAddrInfoExW" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::GetAddrInfoW( PCWSTR pNodeName, PCWSTR pServiceName, const ADDRINFOW* pHints, PADDRINFOW* ppResult )
	{
		_WINQ_FCONTEXT( "CWS2_32::GetAddrInfoW" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0502 )
		_WINQ_USESAPI( GetAddrInfoW );
		iResult = Call< int, PCWSTR, PCWSTR, const ADDRINFOW*, PADDRINFOW* >( pFunc, pNodeName, pServiceName, pHints, ppResult );
#else
		__QCMP_UNREF4( pNodeName, pServiceName, pHints, ppResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetAddrInfoW" ), _T( "Windows XP Service Pack2" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0502 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::GetNameInfoW( const SOCKADDR* pSockaddr, socklen_t SockaddrLength, PWCHAR pNodeBuffer, DWORD NodeBufferSize, PWCHAR pServiceBuffer, DWORD ServiceBufferSize, INT Flags )
	{
		_WINQ_FCONTEXT( "CWS2_32::GetNameInfoW" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0502 )
		_WINQ_USESAPI( GetNameInfoW );
		iResult = Call< int, const SOCKADDR*, socklen_t, PWCHAR, DWORD, PWCHAR, DWORD, INT >( pFunc, pSockaddr, SockaddrLength, pNodeBuffer, NodeBufferSize, pServiceBuffer, ServiceBufferSize, Flags );
#else
		__QCMP_UNREF4( pSockaddr, SockaddrLength, pNodeBuffer, NodeBufferSize );
		__QCMP_UNREF( pServiceBuffer );
		__QCMP_UNREF( ServiceBufferSize );
		__QCMP_UNREF( Flags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "GetNameInfoW" ), _T( "Windows XP Service Pack2" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0502 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	PCWSTR CWS2_32::InetNtopW( INT Family, PVOID pAddr, PWSTR pStringBuf, size_t StringBufSize )
	{
		_WINQ_FCONTEXT( "CWS2_32::InetNtopW" );
		CCheckReturn< PCWSTR, CCheckNonZero< PCWSTR > >::TType pResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( InetNtopW );
		pResult = Call< PCWSTR, INT, PVOID, PWSTR, size_t >( pFunc, Family, pAddr, pStringBuf, StringBufSize );
#else
		__QCMP_UNREF4( Family, pAddr, pStringBuf, StringBufSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "InetNtopW" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return pResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::InetPtonW( INT Family, PCWSTR pszAddrString, PVOID pAddrBuf )
	{
		_WINQ_FCONTEXT( "CWS2_32::InetPtonW" );
		CCheckReturn< INT, CTCheckNotLess< INT, 1 > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( InetPtonW );
		iResult = Call< INT, INT, PCWSTR, PVOID >( pFunc, Family, pszAddrString, pAddrBuf );
#else
		__QCMP_UNREF( Family );
		__QCMP_UNREF( pszAddrString );
		__QCMP_UNREF( pAddrBuf );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "InetPtonW" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::SetAddrInfoExA( PCSTR pName, PCSTR pServiceName, SOCKET_ADDRESS* pAddresses, DWORD dwAddressCount, LPBLOB lpBlob, DWORD dwFlags, DWORD dwNameSpace, LPGUID lpNspId, timeval* timeout, LPOVERLAPPED lpOverlapped, LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, LPHANDLE lpNameHandle )
	{
		_WINQ_FCONTEXT( "CWS2_32::SetAddrInfoExA" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( SetAddrInfoExA );
		iResult = Call< int, PCSTR, PCSTR, SOCKET_ADDRESS*, DWORD, LPBLOB, DWORD, DWORD, LPGUID, timeval*, LPOVERLAPPED, LPLOOKUPSERVICE_COMPLETION_ROUTINE, LPHANDLE >( pFunc, pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle );
#else
		__QCMP_UNREF4( pName, pServiceName, pAddresses, dwAddressCount );
		__QCMP_UNREF4( lpBlob, dwFlags, dwNameSpace, lpNspId );
		__QCMP_UNREF4( timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetAddrInfoExA" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::SetAddrInfoExW( PCWSTR pName, PCWSTR pServiceName, SOCKET_ADDRESS* pAddresses, DWORD dwAddressCount, LPBLOB lpBlob, DWORD dwFlags, DWORD dwNameSpace, LPGUID lpNspId, timeval* timeout, LPOVERLAPPED lpOverlapped, LPLOOKUPSERVICE_COMPLETION_ROUTINE lpCompletionRoutine, LPHANDLE lpNameHandle )
	{
		_WINQ_FCONTEXT( "CWS2_32::SetAddrInfoExW" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( SetAddrInfoExW );
		iResult = Call< int, PCWSTR, PCWSTR, SOCKET_ADDRESS*, DWORD, LPBLOB, DWORD, DWORD, LPGUID, timeval*, LPOVERLAPPED, LPLOOKUPSERVICE_COMPLETION_ROUTINE, LPHANDLE >( pFunc, pName, pServiceName, pAddresses, dwAddressCount, lpBlob, dwFlags, dwNameSpace, lpNspId, timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle );
#else
		__QCMP_UNREF4( pName, pServiceName, pAddresses, dwAddressCount );
		__QCMP_UNREF4( lpBlob, dwFlags, dwNameSpace, lpNspId );
		__QCMP_UNREF4( timeout, lpOverlapped, lpCompletionRoutine, lpNameHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "SetAddrInfoExW" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	SOCKET CWS2_32::WSAAccept( SOCKET s, sockaddr* addr, LPINT addrlen, LPCONDITIONPROC lpfnCondition, DWORD_PTR dwCallbackData )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAccept" );
		CCheckReturn< SOCKET, CTCheckFailureValue< SOCKET, INVALID_SOCKET > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAAccept );
		Result = Call< SOCKET, SOCKET, sockaddr*, LPINT, LPCONDITIONPROC, DWORD >( pFunc, s, addr, addrlen, lpfnCondition, dwCallbackData );
#else
		__QCMP_UNREF4( s, addr, addrlen, lpfnCondition );
		__QCMP_UNREF( dwCallbackData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAccept" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAAddressToStringA( LPSOCKADDR lpsaAddress, DWORD dwAddressLength, LPWSAPROTOCOL_INFO lpProtocolInfo, LPSTR lpszAddressString, LPDWORD lpdwAddressStringLength )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAddressToStringA" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAAddressToStringA );
		iResult = Call< INT, LPSOCKADDR, DWORD, LPWSAPROTOCOL_INFO, LPSTR, LPDWORD >( pFunc, lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength );
#else
		__QCMP_UNREF4( lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString );
		__QCMP_UNREF( lpdwAddressStringLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAddressToStringA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAAddressToStringW( LPSOCKADDR lpsaAddress, DWORD dwAddressLength, LPWSAPROTOCOL_INFO lpProtocolInfo, LPWSTR lpszAddressString, LPDWORD lpdwAddressStringLength )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAddressToStringW" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAAddressToStringW );
		iResult = Call< INT, LPSOCKADDR, DWORD, LPWSAPROTOCOL_INFO, LPWSTR, LPDWORD >( pFunc, lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString, lpdwAddressStringLength );
#else
		__QCMP_UNREF4( lpsaAddress, dwAddressLength, lpProtocolInfo, lpszAddressString );
		__QCMP_UNREF( lpdwAddressStringLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAddressToStringW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAAdvertiseProvider( const GUID* puuidProviderId, const LPCNSPV2_ROUTINE* pNSPv2Routine )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAdvertiseProvider" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSAAdvertiseProvider );
		iResult = Call< INT, const GUID*, const LPCNSPV2_ROUTINE* >( pFunc, puuidProviderId, pNSPv2Routine );
#else
		__QCMP_UNREF( puuidProviderId );
		__QCMP_UNREF( pNSPv2Routine );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAdvertiseProvider" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;	
	}

	//--------------------------------------------------------------------------------
	BOOL CWS2_32::WSACloseEvent( WSAEVENT hEvent )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSACloseEvent" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSACloseEvent );
		bResult = Call< BOOL, WSAEVENT >( pFunc, hEvent );
#else
		__QCMP_UNREF( hEvent );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSACloseEvent" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAConnect( SOCKET s, const sockaddr* name, int namelen, LPWSABUF lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAConnect" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAConnect );
		iResult = Call< int, SOCKET, const sockaddr*, int, LPWSABUF, LPWSABUF, LPQOS, LPQOS >( pFunc, s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS );
#else
		__QCMP_UNREF4( s, name, namelen, lpCallerData );
		__QCMP_UNREF( lpCalleeData );
		__QCMP_UNREF( lpSQOS );
		__QCMP_UNREF( lpGQOS );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAConnect" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CWS2_32::WSAConnectByList( SOCKET s, PSOCKET_ADDRESS_LIST SocketAddressList, LPDWORD LocalAddressLength, LPSOCKADDR LocalAddress, LPDWORD RemoteAddressLength, LPSOCKADDR RemoteAddress, const timeval* timeout, LPWSAOVERLAPPED Reserved )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAConnectByList" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSAConnectByList );
		bResult = Call< BOOL, SOCKET, PSOCKET_ADDRESS_LIST, LPDWORD, LPSOCKADDR, LPDWORD, LPSOCKADDR, const timeval*, LPWSAOVERLAPPED >( pFunc, s, SocketAddressList, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved );
#else
		__QCMP_UNREF4( s, SocketAddressList, LocalAddressLength, LocalAddress );
		__QCMP_UNREF4( RemoteAddressLength, RemoteAddress, timeout, Reserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAConnectByList" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CWS2_32::WSAConnectByNameA( SOCKET s, LPSTR nodename, LPSTR servicename, LPDWORD LocalAddressLength, LPSOCKADDR LocalAddress, LPDWORD RemoteAddressLength, LPSOCKADDR RemoteAddress, const timeval* timeout, LPWSAOVERLAPPED Reserved )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAConnectByNameA" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSAConnectByNameA );
		bResult = Call< BOOL, SOCKET, LPSTR, LPSTR, LPDWORD, LPSOCKADDR, LPDWORD, LPSOCKADDR, const timeval*, LPWSAOVERLAPPED >( pFunc, s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved );
#else
		__QCMP_UNREF4( s, nodename, servicename, LocalAddressLength );
		__QCMP_UNREF( LocalAddress );
		__QCMP_UNREF4( RemoteAddressLength, RemoteAddress, timeout, Reserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAConnectByNameA" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CWS2_32::WSAConnectByNameW( SOCKET s, LPWSTR nodename, LPWSTR servicename, LPDWORD LocalAddressLength, LPSOCKADDR LocalAddress, LPDWORD RemoteAddressLength, LPSOCKADDR RemoteAddress, const timeval* timeout, LPWSAOVERLAPPED Reserved )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAConnectByNameW" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSAConnectByNameW );
		bResult = Call< BOOL, SOCKET, LPWSTR, LPWSTR, LPDWORD, LPSOCKADDR, LPDWORD, LPSOCKADDR, const timeval*, LPWSAOVERLAPPED >( pFunc, s, nodename, servicename, LocalAddressLength, LocalAddress, RemoteAddressLength, RemoteAddress, timeout, Reserved );
#else
		__QCMP_UNREF4( s, nodename, servicename, LocalAddressLength );
		__QCMP_UNREF4( LocalAddress, RemoteAddressLength, RemoteAddress, timeout );
		__QCMP_UNREF( Reserved );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAConnectByNameW" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	WSAEVENT CWS2_32::WSACreateEvent(void)
	{
		_WINQ_FCONTEXT( "CWS2_32::WSACreateEvent" );		
		WSAEVENT Result = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSACreateEvent );
		Result = Call< WSAEVENT >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSACreateEvent" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSADuplicateSocketA( SOCKET s, DWORD dwProcessId, LPWSAPROTOCOL_INFO lpProtocolInfo )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSADuplicateSocketA" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSADuplicateSocketA );
		iResult = Call< int, SOCKET, DWORD, LPWSAPROTOCOL_INFO >( pFunc, s, dwProcessId, lpProtocolInfo );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( dwProcessId );
		__QCMP_UNREF( lpProtocolInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSADuplicateSocketA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSADuplicateSocketW( SOCKET s, DWORD dwProcessId, LPWSAPROTOCOL_INFO lpProtocolInfo )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSADuplicateSocketW" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSADuplicateSocketW );
		iResult = Call< int, SOCKET, DWORD, LPWSAPROTOCOL_INFO >( pFunc, s, dwProcessId, lpProtocolInfo );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( dwProcessId );
		__QCMP_UNREF( lpProtocolInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSADuplicateSocketW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAEnumNameSpaceProvidersA( LPDWORD lpdwBufferLength, LPWSANAMESPACE_INFO lpnspBuffer )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAEnumNameSpaceProvidersA" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAEnumNameSpaceProvidersA );
		iResult = Call< INT, LPDWORD, LPWSANAMESPACE_INFO >( pFunc, lpdwBufferLength, lpnspBuffer );
#else
		__QCMP_UNREF( lpdwBufferLength );
		__QCMP_UNREF( lpnspBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAEnumNameSpaceProvidersA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAEnumNameSpaceProvidersExA( LPDWORD lpdwBufferLength, LPWSANAMESPACE_INFOEX lpnspBuffer )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAEnumNameSpaceProvidersExA" );
		CCheckReturn< INT, CTCheckFailureValue< INT, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
			_WINQ_USESAPI( WSAEnumNameSpaceProvidersExA );
		iResult = Call< INT, LPDWORD, LPWSANAMESPACE_INFOEX >( pFunc, lpdwBufferLength, lpnspBuffer );
#else
		__QCMP_UNREF( lpdwBufferLength );
		__QCMP_UNREF( lpnspBuffer ); 
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAEnumNameSpaceProvidersExA" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	hostent* CWS2_32::gethostbyaddr( const char* addr, int len, int type )
	{
		_WINQ_FCONTEXT( "CWS2_32::gethostbyaddr" );
		CCheckReturn< hostent*, CCheckNonZero< hostent* > >::TType pResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( gethostbyaddr );
		pResult = Call< hostent*, const char*, int, int >( pFunc, addr, len, type  );
#else
		__QCMP_UNREF( addr );
		__QCMP_UNREF( len );
		__QCMP_UNREF( type );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "gethostbyaddr" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return pResult;
	}

	//--------------------------------------------------------------------------------
	hostent* CWS2_32::gethostbyname( const char* name )
	{
		_WINQ_FCONTEXT( "CWS2_32::gethostbyname" );
		CCheckReturn< hostent*, CCheckNonZero< hostent* > >::TType pResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( gethostbyname );
		pResult = Call< hostent*, const char* >( pFunc, name );
#else
		__QCMP_UNREF( name );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "gethostbyname" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return pResult;
	}

	//--------------------------------------------------------------------------------
	::PROTOENT* CWS2_32::getprotobyname( const char* name )
	{
		_WINQ_FCONTEXT( "CWS2_32::getprotobyname" );
		CCheckReturn< ::PROTOENT*, CCheckNonZero< ::PROTOENT* > >::TType pResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( getprotobyname );
		pResult = Call< ::PROTOENT*, const char* >( pFunc, name );
#else
		__QCMP_UNREF( name );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "getprotobyname" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return pResult;
	}

	//--------------------------------------------------------------------------------
	::PROTOENT* CWS2_32::getprotobynumber( int number )
	{
		_WINQ_FCONTEXT( "CWS2_32::getprotobynumber" );
		CCheckReturn< ::PROTOENT*, CCheckNonZero< ::PROTOENT* > >::TType pResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( getprotobynumber );
		pResult = Call< ::PROTOENT*, int >( pFunc, number );
#else
		__QCMP_UNREF( number );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "getprotobynumber" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return pResult;
	}

	//--------------------------------------------------------------------------------
	servent* CWS2_32::getservbyname( const char* name, const char* proto )
	{
		_WINQ_FCONTEXT( "CWS2_32::getservbyname" );
		CCheckReturn< servent*, CCheckNonZero< servent* > >::TType pResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( getservbyname );
		pResult = Call< servent*, const char*, const char* >( pFunc, name, proto );
#else
		__QCMP_UNREF( name );
		__QCMP_UNREF( proto );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "getservbyname" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return pResult;
	}

	//--------------------------------------------------------------------------------
	servent* CWS2_32::getservbyport( int port, const char* proto )
	{
		_WINQ_FCONTEXT( "CWS2_32::getservbyport" );
		CCheckReturn< servent*, CCheckNonZero< servent* > >::TType pResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( getservbyport );
		pResult = Call< servent*, int, const char* >( pFunc, port, proto );
#else
		__QCMP_UNREF( port );
		__QCMP_UNREF( proto );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "getservbyport" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return pResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::gethostname( char* name, int namelen )
	{
		_WINQ_FCONTEXT( "CWS2_32::gethostname" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( gethostname );
		iResult = Call< int, char*, int >( pFunc, name, namelen );
#else
		__QCMP_UNREF( name );
		__QCMP_UNREF( namelen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "gethostname" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAEnumNameSpaceProvidersExW( LPDWORD lpdwBufferLength, LPWSANAMESPACE_INFOEX lpnspBuffer )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAEnumNameSpaceProvidersExW" );
		CCheckReturn< INT, CTCheckFailureValue< INT, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSAEnumNameSpaceProvidersExW );
		iResult = Call< INT, LPDWORD, LPWSANAMESPACE_INFOEX >( pFunc, lpdwBufferLength, lpnspBuffer );
#else
		__QCMP_UNREF( lpdwBufferLength );
		__QCMP_UNREF( lpnspBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAEnumNameSpaceProvidersExW" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAEnumNameSpaceProvidersW( LPDWORD lpdwBufferLength, LPWSANAMESPACE_INFO lpnspBuffer )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAEnumNameSpaceProvidersW" );
		CCheckReturn< INT, CTCheckFailureValue< INT, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAEnumNameSpaceProvidersW );
		iResult = Call< INT, LPDWORD, LPWSANAMESPACE_INFO >( pFunc, lpdwBufferLength, lpnspBuffer );
#else
		__QCMP_UNREF( lpdwBufferLength );
		__QCMP_UNREF( lpnspBuffer );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAEnumNameSpaceProvidersW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAEnumNetworkEvents( SOCKET s, WSAEVENT hEventObject, LPWSANETWORKEVENTS lpNetworkEvents )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAEnumNetworkEvents" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAEnumNetworkEvents );
		iResult = Call< int, SOCKET, WSAEVENT, LPWSANETWORKEVENTS >( pFunc, s, hEventObject, lpNetworkEvents );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( hEventObject );
		__QCMP_UNREF( lpNetworkEvents );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAEnumNetworkEvents" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAEnumProtocolsA( LPINT lpiProtocols, LPWSAPROTOCOL_INFO lpProtocolBuffer, LPDWORD lpdwBufferLength )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAEnumProtocolsA" );
		//CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
		int iResult = SOCKET_ERROR;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAEnumProtocolsA );
		iResult = Call< int, LPINT, LPWSAPROTOCOL_INFO, LPDWORD >( pFunc, lpiProtocols, lpProtocolBuffer, lpdwBufferLength );
#else
		__QCMP_UNREF( lpiProtocols );
		__QCMP_UNREF( lpProtocolBuffer );
		__QCMP_UNREF( lpdwBufferLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAEnumProtocolsA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAEnumProtocolsW( LPINT lpiProtocols, LPWSAPROTOCOL_INFO lpProtocolBuffer, LPDWORD lpdwBufferLength )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAEnumProtocolsW" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAEnumProtocolsW );
		iResult = Call< int, LPINT, LPWSAPROTOCOL_INFO, LPDWORD >( pFunc, lpiProtocols, lpProtocolBuffer, lpdwBufferLength );
#else
		__QCMP_UNREF( lpiProtocols );
		__QCMP_UNREF( lpProtocolBuffer );
		__QCMP_UNREF( lpdwBufferLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAEnumProtocolsW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAEventSelect( SOCKET s, WSAEVENT hEventObject, long lNetworkEvents )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAEventSelect" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAEventSelect );
		iResult = Call< int, SOCKET, WSAEVENT, long >( pFunc, s, hEventObject, lNetworkEvents );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( hEventObject );
		__QCMP_UNREF( lNetworkEvents );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAEventSelect" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CWS2_32::WSAGetOverlappedResult( SOCKET s, LPWSAOVERLAPPED lpOverlapped, LPDWORD lpcbTransfer, BOOL fWait, LPDWORD lpdwFlags )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAGetOverlappedResult" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAGetOverlappedResult );
		bResult = Call< BOOL, SOCKET, LPWSAOVERLAPPED, LPDWORD, BOOL, LPDWORD >( pFunc, s, lpOverlapped, lpcbTransfer, fWait, lpdwFlags );
#else
		__QCMP_UNREF4( s, lpOverlapped, lpcbTransfer, fWait );
		__QCMP_UNREF( lpdwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAGetOverlappedResult" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CWS2_32::WSAGetQOSByName( SOCKET s, LPWSABUF lpQOSName, LPQOS lpQOS )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAGetQOSByName" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAGetQOSByName );
		bResult = Call< BOOL, SOCKET, LPWSABUF, LPQOS >( pFunc, s, lpQOSName, lpQOS );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( lpQOSName );
		__QCMP_UNREF( lpQOS );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAGetQOSByName" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAGetServiceClassInfoA( LPGUID lpProviderId, LPGUID lpServiceClassId, LPDWORD lpdwBufferLength, LPWSASERVICECLASSINFO lpServiceClassInfo )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAGetServiceClassInfoA" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAGetServiceClassInfoA );
		iResult = Call< INT, LPGUID, LPGUID, LPDWORD, LPWSASERVICECLASSINFO >( pFunc, lpProviderId, lpServiceClassId, lpdwBufferLength, lpServiceClassInfo );
#else
		__QCMP_UNREF4( lpProviderId, lpServiceClassId, lpdwBufferLength, lpServiceClassInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAGetServiceClassInfoA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAGetServiceClassInfoW( LPGUID lpProviderId, LPGUID lpServiceClassId, LPDWORD lpdwBufferLength, LPWSASERVICECLASSINFO lpServiceClassInfo )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAGetServiceClassInfoW" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAGetServiceClassInfoW );
		iResult = Call< INT, LPGUID, LPGUID, LPDWORD, LPWSASERVICECLASSINFO >( pFunc, lpProviderId, lpServiceClassId, lpdwBufferLength, lpServiceClassInfo );
#else
		__QCMP_UNREF4( lpProviderId, lpServiceClassId, lpdwBufferLength, lpServiceClassInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAGetServiceClassInfoW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAGetServiceClassNameByClassIdA( LPGUID lpServiceClassId, LPSTR lpszServiceClassName, LPDWORD lpdwBufferLength )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAGetServiceClassNameByClassIdA" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAGetServiceClassNameByClassIdA );
		iResult = Call< INT, LPGUID, LPSTR, LPDWORD >( pFunc, lpServiceClassId, lpszServiceClassName, lpdwBufferLength );
#else
		__QCMP_UNREF( lpServiceClassId );
		__QCMP_UNREF( lpszServiceClassName );
		__QCMP_UNREF( lpdwBufferLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAGetServiceClassNameByClassIdA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAGetServiceClassNameByClassIdW( LPGUID lpServiceClassId, LPWSTR lpszServiceClassName, LPDWORD lpdwBufferLength )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAGetServiceClassNameByClassIdW" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAGetServiceClassNameByClassIdW );
		iResult = Call< INT, LPGUID, LPWSTR, LPDWORD >( pFunc, lpServiceClassId, lpszServiceClassName, lpdwBufferLength );
#else
		__QCMP_UNREF( lpServiceClassId );
		__QCMP_UNREF( lpszServiceClassName );
		__QCMP_UNREF( lpdwBufferLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAGetServiceClassNameByClassIdW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAHtonl( SOCKET s, u_long hostlong, u_long* lpnetlong )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAHtonl" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAHtonl );
		iResult = Call< int, SOCKET, u_long, u_long* >( pFunc, s, hostlong, lpnetlong );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( hostlong );
		__QCMP_UNREF( lpnetlong );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAHtonl" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAHtons( SOCKET s, u_short hostshort, u_short* lpnetshort )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAHtons" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAHtons );
		iResult = Call< int, SOCKET, u_short, u_short* >( pFunc, s, hostshort, lpnetshort );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( hostshort );
		__QCMP_UNREF( lpnetshort );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAHtons" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAInstallServiceClassA( LPWSASERVICECLASSINFO lpServiceClassInfo )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAInstallServiceClassA" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAInstallServiceClassA );
		iResult = Call< INT, LPWSASERVICECLASSINFO >( pFunc, lpServiceClassInfo );
#else
		__QCMP_UNREF( lpServiceClassInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAInstallServiceClassA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAInstallServiceClassW( LPWSASERVICECLASSINFO lpServiceClassInfo )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAInstallServiceClassW" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAInstallServiceClassW );
		iResult = Call< INT, LPWSASERVICECLASSINFO >( pFunc, lpServiceClassInfo );
#else
		__QCMP_UNREF( lpServiceClassInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAInstallServiceClassW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAIoctl( SOCKET s, DWORD dwIoControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAIoctl" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAIoctl );
		iResult = Call< int, SOCKET, DWORD, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE >( pFunc, s, dwIoControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpOverlapped, lpCompletionRoutine );
#else
		__QCMP_UNREF4( s, dwIoControlCode, lpvInBuffer, cbInBuffer );
		__QCMP_UNREF4( lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpOverlapped );
		__QCMP_UNREF( lpCompletionRoutine );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAIoctl" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	SOCKET CWS2_32::WSAJoinLeaf( SOCKET s, const sockaddr* name, int namelen, LPWSABUF lpCallerData, LPWSABUF lpCalleeData, LPQOS lpSQOS, LPQOS lpGQOS, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAJoinLeaf" );
		CCheckReturn< SOCKET, CTCheckFailureValue< SOCKET, INVALID_SOCKET > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAJoinLeaf );
		Result = Call< SOCKET, SOCKET, const sockaddr*, int, LPWSABUF, LPWSABUF, LPQOS, LPQOS, DWORD >( pFunc, s, name, namelen, lpCallerData, lpCalleeData, lpSQOS, lpGQOS, dwFlags );
#else
		__QCMP_UNREF4(  s, name, namelen, lpCallerData );
		__QCMP_UNREF4( lpCalleeData, lpSQOS, lpGQOS, dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAJoinLeaf" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSALookupServiceBeginA( LPWSAQUERYSET lpqsRestrictions, DWORD dwControlFlags, LPHANDLE lphLookup )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSALookupServiceBeginA" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSALookupServiceBeginA );
		iResult = Call< INT, LPWSAQUERYSET, DWORD, LPHANDLE >( pFunc, lpqsRestrictions, dwControlFlags, lphLookup );
#else
		__QCMP_UNREF( lpqsRestrictions );
		__QCMP_UNREF( dwControlFlags );
		__QCMP_UNREF( lphLookup );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSALookupServiceBeginA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSALookupServiceBeginW( LPWSAQUERYSET lpqsRestrictions, DWORD dwControlFlags, LPHANDLE lphLookup )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSALookupServiceBeginW" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSALookupServiceBeginW );
		iResult = Call< INT, LPWSAQUERYSET, DWORD, LPHANDLE >( pFunc, lpqsRestrictions, dwControlFlags, lphLookup );
#else
		__QCMP_UNREF( lpqsRestrictions );
		__QCMP_UNREF( dwControlFlags );
		__QCMP_UNREF( lphLookup );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSALookupServiceBeginW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSALookupServiceEnd( HANDLE hLookup )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSALookupServiceEnd" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSALookupServiceEnd );
		iResult = Call< INT, HANDLE >( pFunc, hLookup );
#else
		__QCMP_UNREF( hLookup );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSALookupServiceEnd" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSALookupServiceNextA( HANDLE hLookup, DWORD dwControlFlags, LPDWORD lpdwBufferLength, LPWSAQUERYSET lpqsResults )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSALookupServiceNextA" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSALookupServiceNextA );
		iResult = Call< INT, HANDLE, DWORD, LPDWORD, LPWSAQUERYSET >( pFunc, hLookup, dwControlFlags, lpdwBufferLength, lpqsResults );
#else
		__QCMP_UNREF4( hLookup, dwControlFlags, lpdwBufferLength, lpqsResults );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSALookupServiceNextA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSALookupServiceNextW( HANDLE hLookup, DWORD dwControlFlags, LPDWORD lpdwBufferLength, LPWSAQUERYSET lpqsResults )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSALookupServiceNextW" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSALookupServiceNextW );
		iResult = Call< INT, HANDLE, DWORD, LPDWORD, LPWSAQUERYSET >( pFunc, hLookup, dwControlFlags, lpdwBufferLength, lpqsResults );
#else
		__QCMP_UNREF4( hLookup, dwControlFlags, lpdwBufferLength, lpqsResults );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSALookupServiceNextW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSANSPIoctl( HANDLE hLookup, DWORD dwControlCode, LPVOID lpvInBuffer, DWORD cbInBuffer, LPVOID lpvOutBuffer, DWORD cbOutBuffer, LPDWORD lpcbBytesReturned, LPWSACOMPLETION lpCompletion )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSANSPIoctl" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0501 )
		_WINQ_USESAPI( WSANSPIoctl );
		iResult = Call< int, HANDLE, DWORD, LPVOID, DWORD, LPVOID, DWORD, LPDWORD, LPWSACOMPLETION >( pFunc, hLookup, dwControlCode, lpvInBuffer, cbInBuffer, lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpCompletion );
#else
		__QCMP_UNREF4( hLookup, dwControlCode, lpvInBuffer, cbInBuffer );
		__QCMP_UNREF4( lpvOutBuffer, cbOutBuffer, lpcbBytesReturned, lpCompletion );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSANSPIoctl" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0501 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSANtohl( SOCKET s, u_long netlong, u_long* lphostlong )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSANtohl" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSANtohl );
		iResult = Call< int, SOCKET, u_long, u_long* >( pFunc, s, netlong, lphostlong );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( netlong );
		__QCMP_UNREF( lphostlong );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSANtohl" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSANtohs( SOCKET s, u_short netshort, u_short* lphostshort )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSANtohs" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSANtohs );
		iResult = Call< int, SOCKET, u_short, u_short* >( pFunc, s, netshort, lphostshort );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( netshort );
		__QCMP_UNREF( lphostshort );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSANtohs" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAPoll( WSAPOLLFD fdarray[], ULONG nfds, INT timeout )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAPoll" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSAPoll );
		iResult = Call< int, WSAPOLLFD*, ULONG, INT >( pFunc, fdarray, nfds, timeout  );
#else
		__QCMP_UNREF( fdarray );
		__QCMP_UNREF( nfds );
		__QCMP_UNREF( timeout );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAPoll" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAProviderCompleteAsyncCall( HANDLE hAsyncCall, INT iRetCode )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAProviderCompleteAsyncCall" );
		CCheckReturn< INT, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAProviderCompleteAsyncCall );
		iResult = Call< INT, HANDLE, INT >( pFunc, hAsyncCall, iRetCode );
#else
		__QCMP_UNREF( hAsyncCall );
		__QCMP_UNREF( iRetCode );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAProviderCompleteAsyncCall" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAProviderConfigChange( LPHANDLE lpNotificationHandle, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAProviderConfigChange" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAProviderConfigChange );
		iResult = Call< int, LPHANDLE, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE >( pFunc, lpNotificationHandle, lpOverlapped, lpCompletionRoutine );
#else
		__QCMP_UNREF( lpNotificationHandle );
		__QCMP_UNREF( lpOverlapped );
		__QCMP_UNREF( lpCompletionRoutine );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAProviderConfigChange" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSARecv( SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSARecv" );
		int iResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSARecv );
		iResult = Call< int, SOCKET, LPWSABUF, DWORD, LPDWORD, LPDWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE >( pFunc, s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpOverlapped, lpCompletionRoutine );
#else
		__QCMP_UNREF4( s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd );
		__QCMP_UNREF( lpFlags );
		__QCMP_UNREF( lpOverlapped );
		__QCMP_UNREF( lpCompletionRoutine );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSARecv" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSARecvDisconnect( SOCKET s, LPWSABUF lpInboundDisconnectData )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSARecvDisconnect" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSARecvDisconnect );
		iResult = Call< int, SOCKET, LPWSABUF >( pFunc, s, lpInboundDisconnectData );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( lpInboundDisconnectData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSARecvDisconnect" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSARecvFrom( SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesRecvd, LPDWORD lpFlags, struct sockaddr* lpFrom, LPINT lpFromLen, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSARecvFrom" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSARecvFrom );
		iResult = Call< int, SOCKET, LPWSABUF, DWORD, LPDWORD, LPDWORD, sockaddr*, LPINT, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE >( pFunc, s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd, lpFlags, lpFrom, lpFromLen, lpOverlapped, lpCompletionRoutine );
#else
		__QCMP_UNREF4( s, lpBuffers, dwBufferCount, lpNumberOfBytesRecvd );
		__QCMP_UNREF4( lpFlags, lpFrom, lpFromLen, lpOverlapped );
		__QCMP_UNREF( lpCompletionRoutine );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSARecvFrom" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSARemoveServiceClass( LPGUID lpServiceClassId )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSARemoveServiceClass" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSARemoveServiceClass );
		iResult = Call< INT, LPGUID >( pFunc, lpServiceClassId );
#else
		__QCMP_UNREF( lpServiceClassId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSARemoveServiceClass" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CWS2_32::WSAResetEvent( WSAEVENT hEvent )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAResetEvent" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAResetEvent );
		bResult = Call< BOOL, WSAEVENT >( pFunc, hEvent );
#else
		__QCMP_UNREF( hEvent );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAResetEvent" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSASend( SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSASend" );
		int iResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSASend );
		iResult = Call< int, SOCKET, LPWSABUF, DWORD, LPDWORD, DWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE >( pFunc, s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpOverlapped, lpCompletionRoutine );
#else
		__QCMP_UNREF4( s, lpBuffers, dwBufferCount, lpNumberOfBytesSent );
		__QCMP_UNREF( dwFlags );
		__QCMP_UNREF( lpOverlapped );
		__QCMP_UNREF( lpCompletionRoutine );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSASend" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSASendDisconnect( SOCKET s, LPWSABUF lpOutboundDisconnectData )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSASendDisconnect" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSASendDisconnect );
		iResult = Call< int, SOCKET, LPWSABUF >( pFunc, s, lpOutboundDisconnectData );
#else
		__QCMP_UNREF( s );
		__QCMP_UNREF( lpOutboundDisconnectData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSASendDisconnect" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSASendMsg( SOCKET s, LPWSAMSG lpMsg, DWORD dwFlags, LPDWORD lpNumberOfBytesSent, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSASendMsg" );
		int iResult = 0;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSASendMsg );
		iResult = Call< int, SOCKET, LPWSAMSG, DWORD, LPDWORD, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE >( pFunc, s, lpMsg, dwFlags, lpNumberOfBytesSent, lpOverlapped, lpCompletionRoutine );
#else
		__QCMP_UNREF4( s, lpMsg, dwFlags, lpNumberOfBytesSent );
		__QCMP_UNREF( lpOverlapped );
		__QCMP_UNREF( lpCompletionRoutine );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSASendMsg" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSASendTo( SOCKET s, LPWSABUF lpBuffers, DWORD dwBufferCount, LPDWORD lpNumberOfBytesSent, DWORD dwFlags, const sockaddr* lpTo, int iToLen, LPWSAOVERLAPPED lpOverlapped, LPWSAOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSASendTo" );
		int iResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSASendTo );
		iResult = Call< int, SOCKET, LPWSABUF, DWORD, LPDWORD, DWORD, const sockaddr*, int, LPWSAOVERLAPPED, LPWSAOVERLAPPED_COMPLETION_ROUTINE >( pFunc, s, lpBuffers, dwBufferCount, lpNumberOfBytesSent, dwFlags, lpTo, iToLen, lpOverlapped, lpCompletionRoutine );
#else
		__QCMP_UNREF4( s, lpBuffers, dwBufferCount, lpNumberOfBytesSent );
		__QCMP_UNREF4( dwFlags, lpTo, iToLen, lpOverlapped );
		__QCMP_UNREF( lpCompletionRoutine );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSASendTo" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	BOOL CWS2_32::WSASetEvent( WSAEVENT hEvent )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSASetEvent" );
		CCheckReturn< BOOL, CBoolCheck< > >::TType bResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSASetEvent );
		bResult = Call< BOOL, WSAEVENT >( pFunc, hEvent );
#else
		__QCMP_UNREF( hEvent );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSASetEvent" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return bResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSASetServiceA( LPWSAQUERYSET lpqsRegInfo, WSAESETSERVICEOP essOperation, DWORD dwControlFlags )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSASetServiceA" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSASetServiceA );
		iResult = Call< INT, LPWSAQUERYSET, WSAESETSERVICEOP, DWORD >( pFunc, lpqsRegInfo, essOperation, dwControlFlags );
#else
		__QCMP_UNREF( lpqsRegInfo );
		__QCMP_UNREF( essOperation );
		__QCMP_UNREF( dwControlFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSASetServiceA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSASetServiceW( LPWSAQUERYSET lpqsRegInfo, WSAESETSERVICEOP essOperation, DWORD dwControlFlags )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSASetServiceW" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSASetServiceW );
		iResult = Call< INT, LPWSAQUERYSET, WSAESETSERVICEOP, DWORD >( pFunc, lpqsRegInfo, essOperation, dwControlFlags );
#else
		__QCMP_UNREF( lpqsRegInfo );
		__QCMP_UNREF( essOperation );
		__QCMP_UNREF( dwControlFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSASetServiceW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	SOCKET CWS2_32::WSASocketA( int af, int type, int protocol, LPWSAPROTOCOL_INFO lpProtocolInfo, GROUP g, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSASocketA" );
		CCheckReturn< SOCKET, CTCheckFailureValue< SOCKET, INVALID_SOCKET > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSASocketA );
		Result = Call< SOCKET, int, int, int, LPWSAPROTOCOL_INFO, GROUP, DWORD >( pFunc, af, type, protocol, lpProtocolInfo, g, dwFlags );
#else
		__QCMP_UNREF4( af, type, protocol, lpProtocolInfo );
		__QCMP_UNREF( g );
		__QCMP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSASocketA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	SOCKET CWS2_32::WSASocketW( int af, int type, int protocol, LPWSAPROTOCOL_INFO lpProtocolInfo, GROUP g, DWORD dwFlags )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSASocketW" );
		CCheckReturn< SOCKET, CTCheckFailureValue< SOCKET, INVALID_SOCKET > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSASocketW );
		Result = Call< SOCKET, int, int, int, LPWSAPROTOCOL_INFO, GROUP, DWORD >( pFunc, af, type, protocol, lpProtocolInfo, g, dwFlags );
#else
		__QCMP_UNREF4( af, type, protocol, lpProtocolInfo );
		__QCMP_UNREF( g );
		__QCMP_UNREF( dwFlags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSASocketW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAAsyncSelect( SOCKET s, HWND hWnd, unsigned int wMsg, long lEvent )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAsyncSelect" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAAsyncSelect );
		iResult = Call< int, SOCKET, HWND, unsigned int, long >( pFunc, s, hWnd, wMsg, lEvent );
#else
		__QCMP_UNREF4( s, hWnd, wMsg, lEvent );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAsyncSelect" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	HANDLE CWS2_32::WSAAsyncGetHostByAddr( HWND hWnd, unsigned int wMsg, const char* addr, int len, int type, char* buf, int buflen )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAsyncGetHostByAddr" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAAsyncGetHostByAddr );
		Result = Call< HANDLE, HWND, unsigned int, const char*, int, int, char*, int >( pFunc, hWnd, wMsg, addr, len, type, buf, buflen );
#else
		__QCMP_UNREF4( hWnd, wMsg, addr, len );
		__QCMP_UNREF( type );
		__QCMP_UNREF( buf );
		__QCMP_UNREF( buflen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAsyncGetHostByAddr" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HANDLE CWS2_32::WSAAsyncGetHostByName( HWND hWnd, unsigned int wMsg, const char* name, char* buf, int buflen )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAsyncGetHostByName" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAAsyncGetHostByName );
		Result = Call< HANDLE, HWND, unsigned int, const char*, char*, int >( pFunc, hWnd, wMsg, name, buf, buflen );
#else
		__QCMP_UNREF4( hWnd, wMsg, name, buf );
		__QCMP_UNREF( buflen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAsyncGetHostByName" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HANDLE CWS2_32::WSAAsyncGetProtoByNumber( HWND hWnd, unsigned int wMsg, int number, char* buf, int buflen )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAsyncGetProtoByNumber" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAAsyncGetProtoByNumber );
		Result = Call< HANDLE, HWND, unsigned int, int, char*, int >( pFunc, hWnd, wMsg, number, buf, buflen );
#else
		__QCMP_UNREF4( hWnd, wMsg, number, buf );
		__QCMP_UNREF( buflen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAsyncGetProtoByNumber" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HANDLE CWS2_32::WSAAsyncGetProtoByName( HWND hWnd, unsigned int wMsg, const char* name, char* buf, int buflen )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAsyncGetProtoByName" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAAsyncGetProtoByName );
		Result = Call< HANDLE, HWND, unsigned int, const char*, char*, int >( pFunc, hWnd, wMsg, name, buf, buflen );
#else
		__QCMP_UNREF4( hWnd, wMsg, name, buf );
		__QCMP_UNREF( buflen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAsyncGetProtoByName" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HANDLE CWS2_32::WSAAsyncGetServByPort( HWND hWnd, unsigned int wMsg, int port, const char* proto, char* buf, int buflen )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAsyncGetServByPort" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAAsyncGetServByPort );
		Result = Call< HANDLE, HWND, unsigned int, int, const char*, char*, int >( pFunc, hWnd, wMsg, port, proto, buf, buflen );
#else
		__QCMP_UNREF4( hWnd, wMsg, port, proto );
		__QCMP_UNREF( buf );
		__QCMP_UNREF( buflen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAsyncGetServByPort" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	HANDLE CWS2_32::WSAAsyncGetServByName( HWND hWnd, unsigned int wMsg, const char* name, const char* proto, char* buf, int buflen )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAAsyncGetServByName" );
		CCheckReturn< HANDLE, CHandleNullCheck< > >::TType Result;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAAsyncGetServByName );
		Result = Call< HANDLE, HWND, unsigned int, const char*, const char*, char*, int >( pFunc, hWnd, wMsg, name, proto, buf, buflen );
#else
		__QCMP_UNREF4( hWnd, wMsg, name, proto );
		__QCMP_UNREF( buf );
		__QCMP_UNREF( buflen );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAAsyncGetServByName" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSACancelAsyncRequest( HANDLE hAsyncTaskHandle )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSACancelAsyncRequest" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSACancelAsyncRequest );
		iResult = Call< int, HANDLE >( pFunc, hAsyncTaskHandle );
#else
		__QCMP_UNREF( hAsyncTaskHandle );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSACancelAsyncRequest" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAGetLastError( void )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAGetLastError" );
		int iResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAGetLastError );
		iResult = Call< int >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAGetLastError" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	void CWS2_32::WSASetLastError( int iError )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSASetLastError" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSASetLastError );
		voidCall< int >( pFunc, iError );
#else
		__QCMP_UNREF( iError );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSASetLastError" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSAStartup( WORD wVersionRequested, LPWSADATA lpWSAData )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAStartup" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAStartup );
		iResult = Call< int, WORD, LPWSADATA >( pFunc, wVersionRequested, lpWSAData );
#else
		__QCMP_UNREF( wVersionRequested );
		__QCMP_UNREF( lpWSAData );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAStartup" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSACleanup( void )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSACleanup" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSACleanup );
		iResult = Call< int >( pFunc );
#else
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSACleanup" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAStringToAddressA( LPSTR AddressString, INT AddressFamily, LPWSAPROTOCOL_INFO lpProtocolInfo, LPSOCKADDR lpAddress, LPINT lpAddressLength )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAStringToAddressA" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAStringToAddressA );
		iResult = Call< INT, LPSTR, INT, LPWSAPROTOCOL_INFO, LPSOCKADDR, LPINT >( pFunc, AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength );
#else
		__QCMP_UNREF4( AddressString, AddressFamily, lpProtocolInfo, lpAddress );
		__QCMP_UNREF( lpAddressLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAStringToAddressA" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAStringToAddressW( LPWSTR AddressString, INT AddressFamily, LPWSAPROTOCOL_INFO lpProtocolInfo, LPSOCKADDR lpAddress, LPINT lpAddressLength )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAStringToAddressW" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAStringToAddressW );
		iResult = Call< INT, LPWSTR, INT, LPWSAPROTOCOL_INFO, LPSOCKADDR, LPINT >( pFunc, AddressString, AddressFamily, lpProtocolInfo, lpAddress, lpAddressLength );
#else
		__QCMP_UNREF4( AddressString, AddressFamily, lpProtocolInfo, lpAddress );
		__QCMP_UNREF( lpAddressLength );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAStringToAddressW" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::WSAUnadvertiseProvider( const GUID* puuidProviderId )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAUnadvertiseProvider" );
		CCheckReturn< INT, CTSuccessCheck< INT > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSAUnadvertiseProvider );
		iResult = Call< INT, const GUID* >( pFunc, puuidProviderId );
#else
		__QCMP_UNREF( puuidProviderId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAUnadvertiseProvider" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	DWORD CWS2_32::WSAWaitForMultipleEvents( DWORD cEvents, const WSAEVENT* lphEvents, BOOL fWaitAll, DWORD dwTimeout, BOOL fAlertable )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSAWaitForMultipleEvents" );
		CCheckReturn< DWORD, CTCheckFailureValue< DWORD, WSA_WAIT_FAILED > >::TType dwResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSAWaitForMultipleEvents );
		dwResult = Call< DWORD, DWORD, const WSAEVENT*, BOOL, DWORD, BOOL >( pFunc, cEvents, lphEvents, fWaitAll, dwTimeout, fAlertable );
#else
		__QCMP_UNREF4( cEvents, lphEvents, fWaitAll, dwTimeout );
		__QCMP_UNREF( fAlertable );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSAWaitForMultipleEvents" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCDeinstallProvider( LPGUID lpProviderId, LPINT lpErrno )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCDeinstallProvider" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSCDeinstallProvider );
		iResult = Call< int, LPGUID, LPINT >( pFunc, lpProviderId, lpErrno );
#else
		__QCMP_UNREF( lpProviderId );
		__QCMP_UNREF( lpErrno );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCDeinstallProvider" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCEnableNSProvider( LPGUID lpProviderId, BOOL fEnable )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCEnableNSProvider" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSCEnableNSProvider );
		iResult = Call< int, LPGUID, BOOL >( pFunc, lpProviderId, fEnable );
#else
		__QCMP_UNREF( lpProviderId );
		__QCMP_UNREF( fEnable );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCEnableNSProvider" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCEnumProtocols( LPINT lpiProtocols, LPWSAPROTOCOL_INFOW lpProtocolBuffer, LPDWORD lpdwBufferLength, LPINT lpErrno )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCEnumProtocols" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSCEnumProtocols );
		iResult = Call< int, LPINT, LPWSAPROTOCOL_INFOW, LPDWORD, LPINT >( pFunc, lpiProtocols, lpProtocolBuffer, lpdwBufferLength, lpErrno );
#else
		__QCMP_UNREF4( lpiProtocols, lpProtocolBuffer, lpdwBufferLength, lpErrno );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCEnumProtocols" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCGetApplicationCategory( LPCWSTR Path, DWORD PathLength, LPCWSTR Extra, DWORD ExtraLength, DWORD* pPermittedLspCategories, LPINT lpErrno )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCGetApplicationCategory" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSCGetApplicationCategory );
		iResult = Call< int, LPCWSTR, DWORD, LPCWSTR, DWORD, DWORD*, LPINT >( pFunc, Path, PathLength, Extra, ExtraLength, pPermittedLspCategories, lpErrno );
#else
		__QCMP_UNREF4( Path, PathLength, Extra, ExtraLength );
		__QCMP_UNREF( pPermittedLspCategories );
		__QCMP_UNREF( lpErrno );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCGetApplicationCategory" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCGetProviderInfo( LPGUID lpProviderId, WSC_PROVIDER_INFO_TYPE InfoType, PBYTE Info, size_t* InfoSize, DWORD Flags, LPINT lpErrno )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCGetProviderInfo" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSCGetProviderInfo );
		iResult = Call< int, LPGUID, WSC_PROVIDER_INFO_TYPE, PBYTE, size_t*, DWORD, LPINT >( pFunc, lpProviderId, InfoType, Info, InfoSize, Flags, lpErrno );
#else
		__QCMP_UNREF4(  lpProviderId, InfoType, Info, InfoSize );
		__QCMP_UNREF( Flags );
		__QCMP_UNREF( lpErrno );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCGetProviderInfo" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCGetProviderPath( LPGUID lpProviderId, LPWSTR lpszProviderDllPath, LPINT lpProviderDllPathLen, LPINT lpErrno )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCGetProviderPath" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSCGetProviderPath );
		iResult = Call< int, LPGUID, LPWSTR, LPINT, LPINT >( pFunc, lpProviderId, lpszProviderDllPath, lpProviderDllPathLen, lpErrno );
#else
		__QCMP_UNREF4( lpProviderId, lpszProviderDllPath, lpProviderDllPathLen, lpErrno );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCGetProviderPath" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCInstallNameSpace( LPWSTR lpszIdentifier, LPWSTR lpszPathName, DWORD dwNameSpace, DWORD dwVersion, LPGUID lpProviderId )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCInstallNameSpace" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSCInstallNameSpace );
		iResult = Call< int, LPWSTR, LPWSTR, DWORD, DWORD, LPGUID >( pFunc, lpszIdentifier, lpszPathName, dwNameSpace, dwVersion, lpProviderId );

#else
		__QCMP_UNREF4( lpszIdentifier, lpszPathName, dwNameSpace, dwVersion );
		__QCMP_UNREF( lpProviderId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCInstallNameSpace" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCInstallNameSpaceEx( LPWSTR lpszIdentifier, LPWSTR lpszPathName, DWORD dwNameSpace, DWORD dwVersion, LPGUID lpProviderId, LPBLOB lpProviderInfo )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCInstallNameSpaceEx" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSCInstallNameSpaceEx );
		iResult = Call< int, LPWSTR, LPWSTR, DWORD, DWORD, LPGUID, LPBLOB >( pFunc, lpszIdentifier, lpszPathName, dwNameSpace, dwVersion, lpProviderId, lpProviderInfo );
#else
		__QCMP_UNREF4( lpszIdentifier, lpszPathName, dwNameSpace, dwVersion );
		__QCMP_UNREF( lpProviderId );
		__QCMP_UNREF( lpProviderInfo );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCInstallNameSpaceEx" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCInstallProvider( const LPGUID lpProviderId, const LPWSTR lpszProviderDllPath, const LPWSAPROTOCOL_INFO lpProtocolInfoList, DWORD dwNumberOfEntries, LPINT lpErrno )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCInstallProvider" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSCInstallProvider );
		iResult = Call< int, const LPGUID, const LPWSTR, const LPWSAPROTOCOL_INFO, DWORD, LPINT >( pFunc, lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries, lpErrno );
#else
		__QCMP_UNREF4( lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries );
		__QCMP_UNREF( lpErrno );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCInstallProvider" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCInstallProviderAndChains( const LPGUID lpProviderId, const LPWSTR lpszProviderDllPath, const LPWSTR lpszLspName, DWORD dwServiceFlags, const LPWSAPROTOCOL_INFO lpProtocolInfoList, DWORD dwNumberOfEntries, LPDWORD lpdwCatalogEntryId, LPINT lpErrno )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCInstallProviderAndChains" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSCInstallProviderAndChains );
		iResult = Call< int, const LPGUID, const LPWSTR, const LPWSTR, DWORD, const LPWSAPROTOCOL_INFO, DWORD, LPDWORD, LPINT >( pFunc, lpProviderId, lpszProviderDllPath, lpszLspName, dwServiceFlags, lpProtocolInfoList, dwNumberOfEntries, lpdwCatalogEntryId, lpErrno );
#else
		__QCMP_UNREF4( lpProviderId, lpszProviderDllPath, lpszLspName, dwServiceFlags );
		__QCMP_UNREF4( lpProtocolInfoList, dwNumberOfEntries, lpdwCatalogEntryId, lpErrno );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCInstallProviderAndChains" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCSetApplicationCategory( LPCWSTR Path, DWORD PathLength, LPCWSTR Extra, DWORD ExtraLength, DWORD PermittedLspCategories, DWORD* pPrevPermLspCat, LPINT lpErrno )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCSetApplicationCategory" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSCSetApplicationCategory );
		iResult = Call< int, LPCWSTR, DWORD, LPCWSTR, DWORD, DWORD, DWORD*, LPINT >( pFunc, Path, PathLength, Extra, ExtraLength, PermittedLspCategories, pPrevPermLspCat, lpErrno );
#else
		__QCMP_UNREF4( Path, PathLength, Extra, ExtraLength );
		__QCMP_UNREF( PermittedLspCategories );
		__QCMP_UNREF( pPrevPermLspCat );
		__QCMP_UNREF( lpErrno );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCSetApplicationCategory" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCSetProviderInfo( LPGUID lpProviderId, WSC_PROVIDER_INFO_TYPE InfoType, PBYTE Info, size_t InfoSize, DWORD Flags, LPINT lpErrno )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCSetProviderInfo" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( WSCSetProviderInfo );
		iResult = Call< int, LPGUID, WSC_PROVIDER_INFO_TYPE, PBYTE, size_t, DWORD, LPINT >( pFunc, lpProviderId, InfoType, Info, InfoSize, Flags, lpErrno );
#else
		__QCMP_UNREF4( lpProviderId, InfoType, Info, InfoSize );
		__QCMP_UNREF( Flags );
		__QCMP_UNREF( lpErrno );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCSetProviderInfo" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCUnInstallNameSpace( LPGUID lpProviderId )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCUnInstallNameSpace" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSCUnInstallNameSpace );
		iResult = Call< int, LPGUID >( pFunc, lpProviderId );
#else
		__QCMP_UNREF( lpProviderId );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCUnInstallNameSpace" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCUpdateProvider( LPGUID lpProviderId, const WCHAR* lpszProviderDllPath, const LPWSAPROTOCOL_INFO lpProtocolInfoList, DWORD dwNumberOfEntries, LPINT lpErrno )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCUpdateProvider" );
		CCheckReturn< int, CTCheckFailureValue< int, SOCKET_ERROR > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0502 )
		_WINQ_USESAPI( WSCUpdateProvider );
		iResult = Call< int, LPGUID, const WCHAR*, const LPWSAPROTOCOL_INFO, DWORD, LPINT >( pFunc, lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries, lpErrno );
#else
		__QCMP_UNREF4( lpProviderId, lpszProviderDllPath, lpProtocolInfoList, dwNumberOfEntries );
		__QCMP_UNREF( lpErrno );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCUpdateProvider" ), _T( "Windows XP" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0502 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCWriteNameSpaceOrder( LPGUID lpProviderId, DWORD dwNumberOfEntries )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCWriteNameSpaceOrder" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSCWriteNameSpaceOrder );
		iResult = Call< int, LPGUID, DWORD >( pFunc, lpProviderId, dwNumberOfEntries );
#else
		__QCMP_UNREF( lpProviderId );
		__QCMP_UNREF( dwNumberOfEntries );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCWriteNameSpaceOrder" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::WSCWriteProviderOrder( LPDWORD lpwdCatalogEntryId, DWORD dwNumberOfEntries )
	{
		_WINQ_FCONTEXT( "CWS2_32::WSCWriteProviderOrder" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( WSCWriteProviderOrder );
		iResult = Call< int, LPDWORD, DWORD >( pFunc, lpwdCatalogEntryId, dwNumberOfEntries );
#else
		__QCMP_UNREF( lpwdCatalogEntryId );
		__QCMP_UNREF( dwNumberOfEntries );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "WSCWriteProviderOrder" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::__WSAFDIsSet( SOCKET fd, fd_set* set )
	{
		_WINQ_FCONTEXT( "CWS2_32::__WSAFDIsSet" );
		int iResult = 0;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( __WSAFDIsSet );
		iResult = Call< int, SOCKET, fd_set* >( pFunc, fd, set );
#else
		__QCMP_UNREF( fd );
		__QCMP_UNREF( set );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "__WSAFDIsSet" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	void CWS2_32::freeaddrinfo( addrinfo* ai )
	{
		_WINQ_FCONTEXT( "CWS2_32::freeaddrinfo" );
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( freeaddrinfo );
		voidCall< addrinfo* >( pFunc, ai );
#else
		__QCMP_UNREF( ai );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "freeaddrinfo" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::getaddrinfo( PCSTR pNodeName, PCSTR pServiceName, const ADDRINFOA* pHints, PADDRINFOA* ppResult )
	{
		_WINQ_FCONTEXT( "CWS2_32::getaddrinfo" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( getaddrinfo );
		iResult = Call< int, PCSTR, PCSTR, const ADDRINFOA*, PADDRINFOA* >( pFunc, pNodeName, pServiceName, pHints, ppResult );
#else
		__QCMP_UNREF4( pNodeName, pServiceName, pHints, ppResult );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "getaddrinfo" ), _T( "Windows 2000 Professional" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CWS2_32::getnameinfo( const sockaddr* sa, socklen_t salen, char* host, DWORD hostlen, char* serv, DWORD servlen, int flags )
	{
		_WINQ_FCONTEXT( "CWS2_32::getnameinfo" );
		CCheckReturn< int, CTSuccessCheck< int > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0500 )
		_WINQ_USESAPI( getnameinfo );
		iResult = Call< int, const sockaddr*, socklen_t, char*, DWORD, char*, DWORD, int >( pFunc, sa, salen, host, hostlen, serv, servlen, flags );
#else
		__QCMP_UNREF4( sa, salen, host, hostlen );
		__QCMP_UNREF( serv );
		__QCMP_UNREF( servlen );
		__QCMP_UNREF( flags );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "getnameinfo" ), _T( "Windows 2000" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0500 )
		return iResult;
	}

	//--------------------------------------------------------------------------------
	PCSTR CWS2_32::inet_ntop( INT Family, PVOID pAddr, PSTR pStringBuf, size_t StringBufSize )
	{
		_WINQ_FCONTEXT( "CWS2_32::inet_ntop" );
		CCheckReturn< PCSTR, CCheckNonZero< PCSTR > >::TType pcResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( inet_ntop );
		pcResult = Call< PCSTR, INT, PVOID, PSTR, size_t >( pFunc, Family, pAddr, pStringBuf, StringBufSize );
#else
		__QCMP_UNREF4( Family, pAddr, pStringBuf, StringBufSize );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "inet_ntop" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return pcResult;
	}

	//--------------------------------------------------------------------------------
	INT CWS2_32::inet_pton( INT Family, PCSTR pszAddrString, PVOID pAddrBuf )
	{
		_WINQ_FCONTEXT( "CWS2_32::inet_pton" );
		CCheckReturn< INT, CTCheckNotLess< INT, 1 > >::TType iResult;
#if		( _WIN32_WINNT >= 0x0600 )
		_WINQ_USESAPI( inet_pton );
		iResult = Call< INT, INT, PCSTR, PVOID >( pFunc, Family, pszAddrString, pAddrBuf );
#else
		__QCMP_UNREF( Family );
		__QCMP_UNREF( pszAddrString );
		__QCMP_UNREF( pAddrBuf );
		__WINQAPI_CONT_ERROR(( API_REQUIRES_VERSION, _T( "inet_pton" ), _T( "Windows Vista" ), 0 ));
#endif//( _WIN32_WINNT >= 0x0600 )
		return iResult;
	}

}//nsWinQAPI
