//Thread.h

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Thread definition

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#ifndef APPOCRITAQOR_SUBSYSTEMS_THREADING_THREAD_H_3
#define APPOCRITAQOR_SUBSYSTEMS_THREADING_THREAD_H_3

#include "AppocritaQOR/SubSystems/IThread.h"
#include "CodeQOR/DataStructures/TArray.h"
#include "CodeQOR/DataStructures/TMap.h"
#include "CodeQOR/Instancing/STMember.h"

//------------------------------------------------------------------------------
namespace nsCodeQOR
{
	class __QOR_INTERFACE( __CODEQOR ) CFunctionContextBase;
	class __QOR_INTERFACE( __CODEQOR ) CExceptionContextBase;
	class __QOR_INTERFACE( __CODEQOR ) CCodePage;
	class __QOR_INTERFACE( __CODEQOR ) CBaseErrorDomain;
}//nsCodeQOR

 //------------------------------------------------------------------------------
namespace nsQOR
{
	class __QOR_INTERFACE( __APPOCRITA ) CEventManager;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __APPOCRITA ) CThread : public IThread
	{
		friend class nsCodeQOR::CFunctionContextBase;
	public:

		__QOR_DECLARE_OCLASS_ID( CThread );

		CThread();
		CThread( const CThread& src );
		CThread& operator=( CThread const & src );
		virtual ~CThread();

		//Function Context
		virtual nsCodeQOR::CFunctionContextBase* RegisterFunctionContext( nsCodeQOR::CFunctionContextBase* pFContext );
		virtual void UnregisterFunctionContext( nsCodeQOR::CFunctionContextBase* pFContext, nsCodeQOR::CFunctionContextBase* pParent );
		virtual nsCodeQOR::CFunctionContextBase* FunctionContext( void );
		virtual nsCodeQOR::CBaseErrorDomain*& ErrorDomain( void );
		virtual nsCodeQOR::CExceptionContextBase* ExceptionContext( void );

		unsigned long IncrementRecursionCount( void );                      //Stack depth tracking
		unsigned long DecrementRecursionCount( void );
		unsigned long RecursionCount( void );

		bool InErrorSystem();
		void LeaveErrorSystem( void );                                      //Error system stack boundary
		void EnterErrorSystem( void );

		unsigned int TlsAlloc( void );                                      //Thread Local Storage
		bool TlsFree( unsigned int uiTlsIndex );
		void* TlsGetValue( unsigned int uiTlsIndex );
		bool TlsSetValue( unsigned int uiTlsIndex, void* lpTlsValue );

		nsCodeQOR::CTMap< nsCodeQOR::mxGUID*, void*, CCodeQORPolicy >& ClassThreadMap( void );    //Flyer type-instance map

		virtual CEventManager& LocalEventManager();

		void SetTraceEnabled( bool );
		bool GetTraceEnabled( void );

		void SetCodePage( nsCodeQOR::CCodePage* pCodePage );
		nsCodeQOR::CCodePage* GetCodePage( void );

		virtual bool IsAFiber( void );
		virtual bool IsGUIThread( bool bConvert );

		static IThread::ref_type GetCurrent( void );

	protected:

		nsCodeQOR::CFunctionContextBase* m_pBaseFContext;
		nsCodeQOR::CBaseErrorDomain* m_pBaseErrorDomain;
		nsCodeQOR::CExceptionContextBase* m_pBaseExceptionContext;
		nsCodeQOR::CCodePage* m_pCodePage;
		CEventManager* m_pLocalEventManager;

	private:

		static IThread::ref_type m_spMainThread;

		unsigned long m_ulRecursionCount;
		nsCodeQOR::CTArray< void* > m_aThreadLocalStorage;
		nsCodeQOR::CTMap< nsCodeQOR::mxGUID*, void*, CCodeQORPolicy > m_ClassThreadMap;
		bool m_bTraceEnabled;
	};

}//nsQOR

#endif//APPOCRITAQOR_SUBSYSTEMS_THREADING_THREAD_H_3
