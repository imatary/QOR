//WinQLThreading.h

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//WinQL Threading Subsystem

#ifndef WINQL_SUBSYS_THREADING_H_1
#define WINQL_SUBSYS_THREADING_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "AppocritaQOR/Application.h"
#include "WinQL/CodeServices/Handles/WinQLHandle.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "AppocritaQOR/SubSystems/Threading.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CThreading : public nsQOR::IThreading
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CThreading );

		__QOR_IMPL_REF( CThreading );

		static nsCodeQOR::CTExternalRegEntry< CThreading > RegEntry;

		CThreading();
		CThreading( const CThreading& );
		CThreading& operator = ( const CThreading& );
		~CThreading();

		virtual void Setup( nsQOR::IApplication& Applicaton );
		virtual void Shutdown( nsQOR::IApplication& Application );

		virtual bool SetStackGuarantee( unsigned long ulStackSizeInBytes );
		virtual unsigned long Sleep( unsigned long ulMilliseconds, bool bAlertable = false );
		virtual unsigned long GetCurrentProcessorNumber( void );						
		virtual nsQOR::IThread::ref_type GetCurrent( void );
		virtual nsQOR::IThread::ref_type Create( Cmp_ulong_ptr ulStackSize = 0 );

		virtual unsigned long GetCurrentId( void );
		void SwitchToFiber( void* lpFiber );
		bool SwitchToThread( void );
	};

}//nsWin32

#endif//WINQL_SUBSYS_THREADING_H_1
