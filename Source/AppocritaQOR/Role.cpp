//Role.cpp

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/Instancing/TInstancePtr.h"
#include "AppocritaQOR/AppocritaQOR.h"
#include "AppocritaQOR/Role.h"
#include "AppocritaQOR/Workflow.h"

//------------------------------------------------------------------------------
namespace nsQOR
{
	//------------------------------------------------------------------------------
	CRole::CRole( nsCodeQOR::mxGUID* classID )
	{
		__QCS_FCONTEXT( "CRole::CRole" );
		nsCodeQOR::CClassInstanceFactory* pFactory = ThisModule().ExternalClassReg().GetFactory( classID );
		if( pFactory )
		{
			m_Impl.Attach( reinterpret_cast<IRole*>( pFactory->Instance() ), true );
		}
	}

	//------------------------------------------------------------------------------
	CRole::~CRole()
	{
		__QCS_FCONTEXT( "CRole::~CRole" );
	}

	//------------------------------------------------------------------------------
	void CRole::Setup( IApplication& Application )
	{
		__QCS_FCONTEXT( "CRole::Setup" );
		m_Impl->Setup( Application );
		Application.Setup();
	}

	//------------------------------------------------------------------------------
	void CRole::Shutdown( IApplication& Application )
	{
		__QCS_FCONTEXT( "CRole::Shutdown" );
		Application.Shutdown();
		m_Impl->Shutdown( Application );
	}

	//------------------------------------------------------------------------------
	ISubSystem::ref_type CRole::GetSubSystem( nsCodeQOR::mxGUID* classID )
	{
		return m_Impl->GetSubSystem( classID );
	}

	//------------------------------------------------------------------------------
	void CRole::AddSubSystem( nsCodeQOR::mxGUID classID, ISubSystem::ref_type SubSystem )
	{
		m_Impl->AddSubSystem( classID, SubSystem );
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::mxGUID* CRole::CmdLineTool( void )
	{
		__QCS_FCONTEXT( "CRole::CmdLineToole" );
		static nsCodeQOR::mxGUID _CmdLineTool = { 0xd0828572, 0xebd0, 0x47ad,{ 0xba, 0x8b, 0x8c, 0x99, 0x67, 0xec, 0xef, 0xe6 } };// {D0828572-EBD0-47AD-BA8B-8C9967ECEFE6}
		return &_CmdLineTool;
	}


	//--------------------------------------------------------------------------------
	CRoleImplBase::CRoleImplBase()
	{
	}

	//--------------------------------------------------------------------------------
	CRoleImplBase::~CRoleImplBase()
	{
	}

	//--------------------------------------------------------------------------------
	CRoleImplBase::CRoleImplBase( const CRoleImplBase& src )
	{
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CRoleImplBase& CRoleImplBase::operator = ( const CRoleImplBase& src )
	{
		if( &src != this )
		{
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	void CRoleImplBase::Setup( nsQOR::IApplication& )
	{
	}

	//--------------------------------------------------------------------------------
	void CRoleImplBase::Shutdown( nsQOR::IApplication& )
	{
	}

	//--------------------------------------------------------------------------------
	ISubSystem::ref_type CRoleImplBase::GetSubSystem( nsCodeQOR::mxGUID* classID )
	{
		ISubSystem* pSubSystem = nullptr;
		auto SubsystemIterator = m_MapSubsystems.find( *classID );
		if( SubsystemIterator != m_MapSubsystems.end() )
		{
			pSubSystem = ( ( *SubsystemIterator ).second );
		}
		return pSubSystem->Ref();
	}

	//--------------------------------------------------------------------------------
	void CRoleImplBase::AddSubSystem( nsCodeQOR::mxGUID classID, ISubSystem::ref_type SubSystem )
	{
		m_MapSubsystems.insert( std::make_pair( classID, SubSystem.operator->() ) );
	}

}//nsQOR
