//Where.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements the where-it-happened class.

#include "CompilerQOR.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Where.h"
#include "AppocritaQOR/Event.h"
//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//------------------------------------------------------------------------------
	CWhere::CWhere()
	{
		m_uiLine = 0;
		m_szFunction = _ATXT("Unknown");
		m_szFile = _ATXT("Unknown");		
		m_pDomain = 0;						
		m_pModuleContext = &(ThisModule());
		m_pProcessContext = nsCodeQOR::CProcessBase::ThisProcess();
		if( m_pProcessContext )
		{
			m_pThreadContext = m_pProcessContext->ThreadContext();
		}
	}

	//------------------------------------------------------------------------------
	CWhere::CWhere( const CWhere& src )
	{
		*this = src;
	}

	//------------------------------------------------------------------------------
	CWhere& CWhere::operator = ( const CWhere& src )
	{
		if( &src != this )
		{
			CErrorPropertyBase::operator=( src );
			m_uiLine = src.m_uiLine;
			m_szFunction = src.m_szFunction;
			m_szFile = src.m_szFile;			
			m_pDomain = src.m_pDomain;
			m_pThreadContext = src.m_pThreadContext;
			m_pModuleContext = src.m_pModuleContext;
			m_pProcessContext = src.m_pProcessContext;
			m_ObjContext = src.m_ObjContext;
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	CWhere::~CWhere()
	{
	}

	//------------------------------------------------------------------------------
	CErrorPropertyBase* CWhere::Clone( void )
	{
		CErrorPropertyBase* pClone = new CWhere( *this );
		return pClone;
	}

	//------------------------------------------------------------------------------
	unsigned int CWhere::GetLine( void ) const
	{
		return m_uiLine;
	}

	//------------------------------------------------------------------------------
	void CWhere::SetLine( const unsigned int uiLine )
	{
		m_uiLine = uiLine;
	}

	//------------------------------------------------------------------------------
	void CWhere::SetFunction( const char* pszFunction )
	{
		m_szFunction = pszFunction;
	}

	//------------------------------------------------------------------------------
	const char* CWhere::GetFunction( void ) const
	{
		return m_szFunction;
	}

	//------------------------------------------------------------------------------
	const char* CWhere::GetFile( void ) const
	{
		return m_szFile;
	}

	//------------------------------------------------------------------------------
	void CWhere::SetFile( const char* szFile )
	{
		m_szFile = szFile;
	}

	//------------------------------------------------------------------------------
	CBaseErrorDomain* CWhere::GetDomain( void ) const
	{
		return m_pDomain;
	}

	//------------------------------------------------------------------------------
	void CWhere::SetDomain( CBaseErrorDomain* pDomain )
	{
		m_pDomain = pDomain;
	}

	//------------------------------------------------------------------------------
	CObjectContextBase& CWhere::GetObjectContext( void )
	{
		return m_ObjContext;
	}

	//------------------------------------------------------------------------------
	void CWhere::SetObjectContext( CObjectContextBase& ObjContext )
	{
		m_ObjContext = ObjContext;
	}

	//------------------------------------------------------------------------------
	nsQOR::IThread::ref_type CWhere::GetThreadContext( void ) const
	{
		return m_pThreadContext;
	}

	//------------------------------------------------------------------------------
	void CWhere::SetThreadContext( nsQOR::IThread::ref_type pThreadContext )
	{
		if( !pThreadContext.IsNull() )
		{
			m_pThreadContext = pThreadContext->Ref();
		}
	}

	//------------------------------------------------------------------------------
	CLoadableModuleBase* CWhere::GetModuleContext( void ) const
	{
		return m_pModuleContext;
	}

	//------------------------------------------------------------------------------
	void CWhere::SetModuleContext( CLoadableModuleBase* pModuleContext )
	{
		m_pModuleContext = pModuleContext;
	}

	//------------------------------------------------------------------------------
	CProcessBase* CWhere::GetProcessContext( void ) const
	{
		return m_pProcessContext;
	}

	//------------------------------------------------------------------------------
	void CWhere::SetProcessContext( CProcessBase* pProcessContext )
	{
		m_pProcessContext = pProcessContext;
	}

	//------------------------------------------------------------------------------
	bool CWhere::GetInException( void ) const
	{
		return m_bInException;
	}

	//------------------------------------------------------------------------------
	void CWhere::SetInException( bool bInException )
	{
		m_bInException = bInException;
	}

}//nsCodeQOR
