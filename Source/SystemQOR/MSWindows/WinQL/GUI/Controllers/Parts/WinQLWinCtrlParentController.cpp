//WinQLWinCtrlParentController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/WinQL.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/Parts/WinCtrlParentController.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
__QCMP_WARNING_POP
#include "WinQL/GUI/CommonCtrl.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CWinCtrlParentController );

	//--------------------------------------------------------------------------------
	CWinCtrlParentController::CWinCtrlParentController( nsMammut::CModel* pModelItem, nsQOR::CController::ref_type Parent ) : CBaseWindowPartController( pModelItem, Parent )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:CWinCtrlParentController" );
	}

	//--------------------------------------------------------------------------------
	CWinCtrlParentController::~CWinCtrlParentController()
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:~CWinCtrlParentController" );
	}

	//--------------------------------------------------------------------------------
	bool CWinCtrlParentController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:ProcessMessage" );
		bool bProcessed = ProcessHook( Window, lResult, uMsg, wParam, lParam );

		switch ( uMsg )
		{
		case COSWindow::wmCtlColorMsgBox:
			{
				CDeviceContext::refType refDC = CDeviceContext::FromHandle( CDCHandle( (CDCInternal*)0, (void*)( wParam ) ).Ref() );
				COSWindow::refType refMsgBox = COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam ) ).Ref() );
				lResult = reinterpret_cast< long >( OnCtlColourMsgBox( Window, refDC, refMsgBox )->Handle()->AsHandle().ptr() );
				bProcessed = true;
			}
			break;
		case COSWindow::wmCtlColorEdit:
			{
				CDeviceContext::refType refDC = CDeviceContext::FromHandle( CDCHandle( (CDCInternal*)0, (void*)( wParam ) ).Ref() );
				COSWindow::refType refEdit = COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam ) ).Ref() );
				lResult = reinterpret_cast< long >( OnCtlColour( Window, refDC, refEdit, COSWindow::wmCtlColorEdit )->Handle()->AsHandle().ptr() );
				bProcessed = true;
			}
			break;
		case COSWindow::wmCtlColorListBox:
			{
				CDeviceContext::refType refDC = CDeviceContext::FromHandle( CDCHandle( (CDCInternal*)0, (void*)( wParam ) ).Ref() );
				COSWindow::refType refListBox = COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam ) ).Ref() );
				lResult = reinterpret_cast< long >( OnCtlColour( Window, refDC, refListBox, COSWindow::wmCtlColorListBox )->Handle()->AsHandle().ptr() );
				bProcessed = true;
			}
			break;
		case COSWindow::wmCtlColorBtn:
			{
				CDeviceContext::refType refDC = CDeviceContext::FromHandle( CDCHandle( (CDCInternal*)0, (void*)( wParam ) ).Ref() );
				COSWindow::refType refButton = COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam ) ).Ref() );
				lResult = reinterpret_cast< long >( OnCtlColour( Window, refDC, refButton, COSWindow::wmCtlColorBtn )->Handle()->AsHandle().ptr() );
				bProcessed = true;
			}
			break;
		case COSWindow::wmCtlColorDlg:
			{
				CDeviceContext::refType refDC = CDeviceContext::FromHandle( CDCHandle( (CDCInternal*)0, (void*)( wParam ) ).Ref() );
				COSWindow::refType refDlg = COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam ) ).Ref() );
				lResult = reinterpret_cast< long >( OnCtlColourDialog( Window, refDC, refDlg )->Handle()->AsHandle().ptr() );
				bProcessed = true;
			}
			break;
		case COSWindow::wmCtlColorScrollbar:
			{
				CDeviceContext::refType refDC = CDeviceContext::FromHandle( CDCHandle( (CDCInternal*)0, (void*)( wParam ) ).Ref() );
				COSWindow::refType refScrollBar = COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam ) ).Ref() );
				lResult = reinterpret_cast< long >( OnCtlColour( Window, refDC, refScrollBar, COSWindow::wmCtlColorStatic )->Handle()->AsHandle().ptr() );
				bProcessed = true;
			}
			break;
		case COSWindow::wmCtlColorStatic:
			{
				CDeviceContext::refType refDC = CDeviceContext::FromHandle( CDCHandle( (CDCInternal*)0, (void*)( wParam ) ).Ref() );
				COSWindow::refType refStatic = COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam ) ).Ref() );
				lResult = reinterpret_cast< long >( OnCtlColour( Window, refDC, refStatic, COSWindow::wmCtlColorStatic )->Handle()->AsHandle().ptr() );
				bProcessed = true;
			}
			break;
		case COSWindow::wmDrawItem:
			{
					DrawItemStruct* pItemStruct = reinterpret_cast< DrawItemStruct* >( lParam );
					OnDrawItem( Window, wParam, pItemStruct );
					lResult = 1;
					bProcessed = true;
			}
			break;
		case COSWindow::wmCompareItem:
			{
				lResult = OnCompareItem( Window, wParam, reinterpret_cast< ComparisonItem* >( lParam ) );					
				bProcessed = true;
			}
			break;
		case COSWindow::wmMeasureItem:
			{
				nsWin32::MeasureItemStruct* pItemStruct = reinterpret_cast< nsWin32::MeasureItemStruct* >( lParam );
				OnMeasureItem( Window, wParam, pItemStruct );
				lResult = 1;
				bProcessed = true;
			}
			break;
		case COSWindow::wmDeleteItem:
			{
				nsWin32::DeleteItemStruct* pItemStruct = reinterpret_cast< nsWin32::DeleteItemStruct* >( lParam );
				OnDeleteItem( Window, wParam, pItemStruct );
				lResult = 1;
				bProcessed = true;
			}
			break;
		case COSWindow::wmVKeyToItem:
			{
				unsigned short wVKey = LoWord( wParam );
				unsigned short wPos = HiWord( wParam );
				COSWindow::refType refListBox = COSWindow::FromHandle( CWindowHandle( 0, (void*)( lParam ) ).Ref() );
				lResult = OnVKeyToItem( Window, wVKey, wPos, refListBox );
				bProcessed = true;
			}
			break;
		case COSWindow::wmCharToItem:
			{
				unsigned short wKey = LoWord( wParam );
				unsigned short wPos = HiWord( wParam );
				COSWindow::refType refListBox = COSWindow::FromHandle( CWindowHandle( 0, (void*)( lParam ) ).Ref() );
				lResult = OnCharToItem( Window, wKey, wPos, refListBox );
				bProcessed = true;
			}
			break;
		}			

		return bProcessed;
	}

	//--------------------------------------------------------------------------------
	CBrush::refType CWinCtrlParentController::OnCtlColourMsgBox( COSWindow& Window, CDeviceContext::refType DC, COSWindow::refType MsgBox )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:OnCtlColourMsgBox" );
		return CBrush::FromHandle( CBrushHandle( 0, (void*)( Window.DefProc( COSWindow::wmCtlColorMsgBox, (Cmp_uint_ptr)(DC->Handle()->Use()), (Cmp_long_ptr)(MsgBox->Handle()->Use()) ) ) ).Ref() );
	}
		
	//--------------------------------------------------------------------------------
	CBrush::refType CWinCtrlParentController::OnCtlColour( COSWindow& Window, CDeviceContext::refType DC, COSWindow::refType Child, unsigned int uMsg )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:OnCtlColour" );
		CWinCtrlWindow* pCtrlWindow = dynamic_cast< CWinCtrlWindow* >( Child.operator nsWin32::COSWindow *() );

		if( pCtrlWindow != 0 )
		{
			return pCtrlWindow->OnCtlColour( DC );
		}
		else
		{
			return CBrush::FromHandle( CBrushHandle( 0, (void*)( Window.DefProc( uMsg, (Cmp_uint_ptr)(DC->Handle()->Use()), (Cmp_long_ptr)(Child->Handle()->Use()) ) ) ).Ref() );
		}
	}


	//--------------------------------------------------------------------------------
	CBrush::refType CWinCtrlParentController::OnCtlColourDialog( COSWindow& Window, CDeviceContext::refType DC, COSWindow::refType Dlg )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:OnCtlColourDialog" );
		return CBrush::FromHandle( CBrushHandle( 0, (void*)( Window.DefProc( COSWindow::wmCtlColorDlg, (Cmp_uint_ptr)( DC->Handle()->Use() ), (Cmp_long_ptr)( Dlg->Handle()->Use() ) ) ) ).Ref() );
	}

	//--------------------------------------------------------------------------------
	void CWinCtrlParentController::OnDrawItem( COSWindow& Window, Cmp_uint_ptr wParam, DrawItemStruct* pItemStruct )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:OnDrawItem" );
		bool bProcessed = false;
		if( pItemStruct != 0 )
		{
			COSWindow::refType refChildWindow = COSWindow::FromHandle( CWindowHandle( 0, pItemStruct->phwndItem ).Ref() );

			CWinCtrlWindow* pCtrlWindow = dynamic_cast< CWinCtrlWindow* >( refChildWindow.operator COSWindow *() );

			if( pCtrlWindow != 0 )
			{
				pCtrlWindow->OnDrawItem( pItemStruct );
				bProcessed = true;
			}
		}

		if( !bProcessed )
		{
			Window.DefProc( COSWindow::wmDrawItem, wParam, (Cmp_long_ptr)pItemStruct );
		}
	}

	//--------------------------------------------------------------------------------
	long CWinCtrlParentController::OnCompareItem( COSWindow& Window, Cmp_uint_ptr wParam, nsWin32::ComparisonItem* pItemStruct )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:OnCompareItem" );
		long lResult = 0;//All items equal by default			
		if( pItemStruct != 0 )
		{
			COSWindow::refType ChildWindow = COSWindow::FromHandle( CWindowHandle( 0, pItemStruct->phwndItem ).Ref() );
			
			CWinCtrlWindow* pCtrlWindow = dynamic_cast< CWinCtrlWindow* >( ChildWindow.operator COSWindow*() );

			if( pCtrlWindow != 0 )
			{
				lResult = pCtrlWindow->OnCompareItem( pItemStruct );
			}

		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CWinCtrlParentController::OnMeasureItem( COSWindow& Window, Cmp_uint_ptr wParam, nsWin32::MeasureItemStruct* pItemStruct )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:OnMeasureItem" );
		if( pItemStruct != 0 )
		{
			switch ( pItemStruct->CtlType )
			{
			case COSWindow::odtComboBox:
			case COSWindow::odtListBox:
				{
					COSWindow::refType ChildWindow = Window.GetItem( pItemStruct->CtlID );
					CWinCtrlWindow* pCtrlWindow = dynamic_cast< CWinCtrlWindow* >( ChildWindow.operator COSWindow *() );

					if( pCtrlWindow != 0 )
					{
						pCtrlWindow->OnMeasureItem( pItemStruct );
					}
				}
				break;

			case COSWindow::odtListView:
				//TODO:
				break;
			case COSWindow::odtMenu:
				//TODO:
				break;
			}
		}
	}

	//--------------------------------------------------------------------------------
	void CWinCtrlParentController::OnDeleteItem( COSWindow& Window, Cmp_uint_ptr wParam, nsWin32::DeleteItemStruct* pItemStruct )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:OnDeleteItem" );
		if( pItemStruct != 0 )
		{
			COSWindow::refType ChildWindow = COSWindow::FromHandle( CWindowHandle( 0, pItemStruct->phwndItem ).Ref() );
			
			CWinCtrlWindow* pCtrlWindow = dynamic_cast< CWinCtrlWindow* >( ChildWindow.operator COSWindow*() );

			if( pCtrlWindow != 0 )
			{
				pCtrlWindow->OnDeleteItem( pItemStruct );
			}
		}
	}

	//--------------------------------------------------------------------------------
	long CWinCtrlParentController::OnVKeyToItem( COSWindow& Window, unsigned short wVKey, unsigned short wPos, COSWindow::refType ListBox )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:OnKeyToItem" );
		long lResult = 0;

		CWinCtrlWindow* pCtrlWindow = dynamic_cast< CWinCtrlWindow* >( ListBox.operator COSWindow *() );
		if( pCtrlWindow != 0 )
		{
			lResult = pCtrlWindow->OnVKeyToItem( wVKey, wPos );
		}

		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CWinCtrlParentController::OnCharToItem( COSWindow& Window, unsigned short wKey, unsigned short wPos, COSWindow::refType ListBox )
	{
		_WINQ_FCONTEXT( "CWinCtrlParentController:OnCharToItem" );
		long lResult = 0;

		CWinCtrlWindow* pCtrlWindow = dynamic_cast< CWinCtrlWindow* >( ListBox.operator COSWindow *() );
		if( pCtrlWindow != 0 )
		{
			lResult = pCtrlWindow->OnCharToItem( wKey, wPos );
		}

		return lResult;
	}

}//nsWin32

