//WinQLMoniker.h

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_COM_MONIKER_H_3
#define WINQL_COM_MONIKER_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/Definitions/Interfaces.h"
#include "WinQL/COM/Client/WinQLClientBase.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CMoniker : public CComPtr< IMoniker >
	{
	public:
			
		__QOR_DECLARE_OCLASS_ID( CMoniker );

		CMoniker( IBindCtx* pbctx, const wchar_t* szUserName, unsigned long* pchEaten );
		CMoniker( void* pFirst, void* pRest );
		virtual ~CMoniker();

		long Bind( unsigned long grfOpt, const GUID& iidResult,	void** ppvResult );

	protected:

		CMoniker();
		CMoniker( const CMoniker& );
		CMoniker& operator = ( const CMoniker& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CAntiMoniker : public CMoniker
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CAntiMoniker );

		CAntiMoniker();
		virtual ~CAntiMoniker();

	private:

		CAntiMoniker( const CAntiMoniker& );
		CAntiMoniker& operator = ( const CAntiMoniker& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CClassMoniker : public CMoniker
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CClassMoniker );

		CClassMoniker( const GUID& rclsid );
		virtual ~CClassMoniker();

	private:

		CClassMoniker();
		CClassMoniker( const CClassMoniker& );
		CClassMoniker& operator = ( const CClassMoniker& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CFileMoniker : public CMoniker
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CFileMoniker );

		CFileMoniker( const wchar_t* lpszPathName );
		virtual ~CFileMoniker();

	private:

		CFileMoniker();
		CFileMoniker( const CFileMoniker& );
		CFileMoniker& operator = ( const CFileMoniker& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CItemMoniker : public CMoniker
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CItemMoniker );

		CItemMoniker( const wchar_t* lpszDelim, const wchar_t* lpszItem );
		virtual ~CItemMoniker();

	private:

		CItemMoniker();
		CItemMoniker( const CItemMoniker& );
		CItemMoniker& operator = ( const CItemMoniker& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CObjRefMoniker : public CMoniker
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CObjRefMoniker );

		CObjRefMoniker( void* punk );
		virtual ~CObjRefMoniker();

	private:

		CObjRefMoniker();
		CObjRefMoniker( const CObjRefMoniker& );
		CObjRefMoniker& operator = ( const CObjRefMoniker& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CPointerMoniker : public CMoniker
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CPointerMoniker );

		CPointerMoniker( void* punk );
		virtual ~CPointerMoniker();

	private:

		CPointerMoniker();
		CPointerMoniker( const CPointerMoniker& );
		CPointerMoniker& operator = ( const CPointerMoniker& );
	};

}//nsWin32

#endif//WINQL_COM_MONIKER_H_3
