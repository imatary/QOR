//WinQLCursorModel.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Model for Cursors

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: this stored in members for later usage" )
#include "WinQL/GUI/VisualModels/CursorModel.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CCursorModel );

	//--------------------------------------------------------------------------------
	//default construct
	CCursorModel::CCursorModel( CModel* pContainer ) : nsMammut::CPropertySet( pContainer )
	,	m_Type			( this, _TXT( "Type" ).str()		, eByNameCursor		)
	,	m_pModule		( this, _TXT( "Module" ).str()		, 0					)
	,	m_szName		( this, _TXT( "Name" ).str()		, 0					)
	,	m_iXHotSpot		( this, _TXT( "XHotSpot" ).str()	, 0					)
	,	m_iYHotSpot		( this, _TXT( "YHotSpot" ).str()	, 0					)
	,	m_iHeight		( this, _TXT( "Height" ).str()		, 32				)
	,	m_iWidth		( this, _TXT( "Width" ).str()		, 32				)
	,	m_pANDPlane		( this, _TXT( "ANDBits" ).str()		, 0					)
	,	m_pORPlane		( this, _TXT( "ORBits" ).str()		, 0					)
	{
	}

	//--------------------------------------------------------------------------------
	//copy construct
	CCursorModel::CCursorModel( const CCursorModel& src ) : nsMammut::CPropertySet( src )
	,	m_Type		( this, src.m_Type		)
	,	m_pModule	( this, src.m_pModule	)
	,	m_szName	( this, src.m_szName	)
	,	m_iXHotSpot	( this, src.m_iXHotSpot )
	,	m_iYHotSpot	( this, src.m_iYHotSpot )
	,	m_iHeight	( this, src.m_iHeight	)
	,	m_iWidth	( this, src.m_iWidth	)
	,	m_pANDPlane	( this, src.m_pANDPlane )
	,	m_pORPlane	( this, src.m_pORPlane	)
	{
	}

	//--------------------------------------------------------------------------------
	//Construct from a generic PropertySet
	CCursorModel::CCursorModel( nsMammut::CPropertySet& src ) : CPropertySet( src )
	,	m_Type		( this, _TXT( "Type" ).str()		,	src[ _TXT( "Type" ).str()		] )
	,	m_pModule	( this, _TXT( "Module" ).str()		,	src[ _TXT( "Module" ).str()		] )
	,	m_szName	( this, _TXT( "Name" ).str()		,	src[ _TXT( "Name" ).str()		] )	
	,	m_iXHotSpot	( this, _TXT( "XHotSpot" ).str()	,	src[ _TXT( "XHotSpot" ).str()	] )
	,	m_iYHotSpot	( this, _TXT( "YHotSpot" ).str()	,	src[ _TXT( "YHotSpot" ).str()	] )
	,	m_iHeight	( this, _TXT( "Height" ).str()		,	src[ _TXT( "Height" ).str()		] )
	,	m_iWidth	( this, _TXT( "Width" ).str()		,	src[ _TXT( "Width" ).str()		] )	
	,	m_pANDPlane	( this, _TXT( "ANDBits" ).str()		,	src[ _TXT( "ANDBits" ).str()	] )
	,	m_pORPlane	( this, _TXT( "ORBits" ).str()		,	src[ _TXT( "ORBits" ).str()		] )
	{
	}

__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	//assign from another CCursorModel
	CCursorModel& CCursorModel::operator = ( const CCursorModel& src )
	{
		if( &src != this )
		{
			nsMammut::CPropertySet::operator=( src );
			m_Type = src.m_Type;
			m_pModule = src.m_pModule;	
			m_szName = src.m_szName;
			m_iXHotSpot = src.m_iXHotSpot;
			m_iYHotSpot = src.m_iYHotSpot;
			m_iHeight = src.m_iHeight;
			m_iWidth = src.m_iWidth;
			m_pANDPlane = src.m_pANDPlane;
			m_pORPlane = src.m_pORPlane;								
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	//assign from a generic property set
	CCursorModel& CCursorModel::operator = ( const nsMammut::CPropertySet& src )
	{
		if( &src != this )
		{
			m_Type			=	src[ _TXT( "Type" ).str()		];
			m_pModule		=	src[ _TXT( "Module" ).str()		];
			m_szName		=	src[ _TXT( "Name" ).str()		];
			m_iXHotSpot		=	src[ _TXT( "XHotSpot" ).str()	];
			m_iYHotSpot		=	src[ _TXT( "YHotSpot" ).str()	];
			m_iHeight		=	src[ _TXT( "Height" ).str()		];
			m_iWidth		=	src[ _TXT( "Width" ).str()		];
			m_pANDPlane		=	src[ _TXT( "ANDBits" ).str()	];
			m_pORPlane		=	src[ _TXT( "ORBits" ).str()		];
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CCursorModel::~CCursorModel()
	{
	}

}//nsWin32
