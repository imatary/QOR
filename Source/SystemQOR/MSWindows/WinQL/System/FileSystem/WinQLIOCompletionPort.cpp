//WinQLIOCompletionPort.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLErrDomain.h"
#include "WinQL/System/FileSystem/WinQLIOCompletionPort.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CIOCompletionPort );

	//--------------------------------------------------------------------------------
	CIOCompletionPort::CIOCompletionPort()
	{
		_WINQ_FCONTEXT( "CIOCompletionPort::CIOCompletionPort" );
		m_Handle = new_shared_ref<CFileHandle>( CKernel32::CreateIoCompletionPort( (HANDLE)Invalid_Handle_Value, 0, 0, 0 ) );
	}

	//--------------------------------------------------------------------------------
	CIOCompletionPort::CIOCompletionPort( CFileHandle::ref_type FileHandle, Cmp_ulong_ptr CompletionKey, unsigned long NumberOfConcurrentThreads )
	{
		_WINQ_FCONTEXT( "CIOCompletionPort::CIOCompletionPort" );
		m_Handle = new_shared_ref<CFileHandle>( CKernel32::CreateIoCompletionPort( (HANDLE)Invalid_Handle_Value, 0, 0, 0 ) );
		Attach( FileHandle, CompletionKey, NumberOfConcurrentThreads );
	}

	//--------------------------------------------------------------------------------
	bool CIOCompletionPort::Attach( CFileHandle::ref_type FileHandle, Cmp_ulong_ptr CompletionKey, unsigned long NumberOfConcurrentThreads )
	{
		_WINQ_FCONTEXT( "CIOCompletionPort::CIOCompletionPort" );
		bool bResult = false;
		__QOR_PROTECT
		{
			void* pCheck = CKernel32::CreateIoCompletionPort( FileHandle().Use(), m_Handle().Use(), CompletionKey, NumberOfConcurrentThreads );
			if( pCheck == 0 || pCheck != m_Handle().ptr() )
			{
				//TODO: Raise error
			}
			else
			{
				bResult = true;
			}
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CIOCompletionPort::~CIOCompletionPort()
	{
		_WINQ_FCONTEXT( "CIOCompletionPort::~CIOCompletionPort" );
	}

	//--------------------------------------------------------------------------------
	bool CIOCompletionPort::GetQueuedCompletionStatus( unsigned long* lpNumberOfBytes, Cmp_ulong_ptr* lpCompletionKey, nsWin32::LPOVERLAPPED* lpOverlapped, unsigned long dwMilliseconds )
	{
		_WINQ_FCONTEXT( "CIOCompletionPort::GetQueuedCompletionStatus" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetQueuedCompletionStatus( m_Handle().Use(), lpNumberOfBytes, lpCompletionKey, reinterpret_cast< ::LPOVERLAPPED* >( lpOverlapped ), dwMilliseconds ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CIOCompletionPort::GetQueuedCompletionStatusEx( nsWin32::LPOVERLAPPED_ENTRY lpCompletionPortEntries, unsigned long ulCount, unsigned long* ulNumEntriesRemoved, unsigned long dwMilliseconds, bool fAlertable )
	{
		_WINQ_FCONTEXT( "CIOCompletionPort::GetQueuedCompletionStatusEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().GetQueuedCompletionStatusEx( m_Handle().Use(), reinterpret_cast< ::LPOVERLAPPED_ENTRY >( lpCompletionPortEntries ), ulCount, ulNumEntriesRemoved, dwMilliseconds, fAlertable ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CIOCompletionPort::PostQueuedCompletionStatus( unsigned long dwNumberOfBytesTransferred, Cmp_ulong_ptr dwCompletionKey, nsWin32::LPOVERLAPPED lpOverlapped )
	{
		_WINQ_FCONTEXT( "CIOCompletionPort::PostQueuedCompletionStatus" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::PostQueuedCompletionStatus( m_Handle().Use(), dwNumberOfBytesTransferred, dwCompletionKey, reinterpret_cast< ::LPOVERLAPPED >( lpOverlapped ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
