//wchar.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef QOR_WCHAR_H_3
#define QOR_WCHAR_H_3

#include <ctype.h>
#include <string.h>
#include <stdarg.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
//#include "SystemQOR.h"
#include QOR_SYS_PLATFORMTYPES(wchar)

typedef nsPlatform::FILE FILE;
typedef nsPlatform::locale_t locale_t;
typedef nsPlatform::mbstate_t mbstate_t;
//typedef nsPlatform::size_t size_t;
typedef nsPlatform::va_list va_list;
//typedef nsPlatform::wchar_t wchar_t;
#ifndef _WCTYPE_T_DEFINED
typedef nsPlatform::wctype_t wctype_t;
#endif
typedef nsPlatform::wint_t wint_t;
typedef nsPlatform::tm tm;

#define	WCHAR_MAX			( nsPlatform::WCharMax )
#define WCHAR_MIN			( nsPlatform::WCharMin )
#define WEOF				( nsPlatform::WEoF )

#undef NULL
#ifdef __cplusplus
#	define NULL    0
#else
#	define NULL    ( (void*)0 )
#endif

//extern int _fltused;

typedef nsPlatform::intptr_t intptr_t;
typedef nsPlatform::_stat32 _stat32;
typedef nsPlatform::_stat32i64 _stat32i64;
typedef nsPlatform::sstat64 __sstat64;
typedef nsPlatform::_stat64i32 _stat64i32;
typedef nsPlatform::_stat64 stat64;
typedef nsPlatform::__time32_t __time32_t;
typedef nsPlatform::__time64_t __time64_t;
typedef nsPlatform::__utimbuf32 __utimbuf32;
typedef nsPlatform::__utimbuf64 __utimbuf64;

typedef nsPlatform::_wfinddata32_t _wfinddata32_t;
typedef nsPlatform::_wfinddata32i64_t _wfinddata32i64_t;
typedef nsPlatform::_wfinddata64_t _wfinddata64_t;
typedef nsPlatform::_wfinddata64i32_t _wfinddata64i32_t;

__QCMP_STARTLINKAGE_C

    __QOR_INTERFACE( __CQOR ) wint_t btowc( int c );
    __QOR_INTERFACE( __CQOR ) wint_t fgetwc( ::FILE* stream );
    __QOR_INTERFACE( __CQOR ) wchar_t* fgetws( wchar_t* __QCMP_RESTRICT s, int n, ::FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) wint_t fputwc( wchar_t c, ::FILE* stream );
    __QOR_INTERFACE( __CQOR ) int fputws( const wchar_t* __QCMP_RESTRICT s, ::FILE* __QCMP_RESTRICT stream );
    __QOR_INTERFACE( __CQOR ) int fwide( ::FILE* stream, int mode );
    __QOR_INTERFACE( __CQOR ) int fwprintf( ::FILE* __QCMP_RESTRICT stream, const wchar_t* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int fwscanf( ::FILE* __QCMP_RESTRICT stream, const wchar_t* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) wint_t getwc( ::FILE* stream );
    __QOR_INTERFACE( __CQOR ) wint_t getwchar( void );
    __QOR_INTERFACE( __CQOR ) int iswalnum( ::wint_t wc );
    __QOR_INTERFACE( __CQOR ) int iswalpha( ::wint_t );
    __QOR_INTERFACE( __CQOR ) int iswcntrl( ::wint_t );
    __QOR_INTERFACE( __CQOR ) int iswctype( ::wint_t, ::wctype_t );
    __QOR_INTERFACE( __CQOR ) int iswdigit( ::wint_t );
    __QOR_INTERFACE( __CQOR ) int iswgraph( ::wint_t );
    __QOR_INTERFACE( __CQOR ) int iswlower( ::wint_t );
    __QOR_INTERFACE( __CQOR ) int iswprint( ::wint_t );
    __QOR_INTERFACE( __CQOR ) int iswpunct( ::wint_t );
    __QOR_INTERFACE( __CQOR ) int iswspace( ::wint_t );
    __QOR_INTERFACE( __CQOR ) int iswupper( ::wint_t );
    __QOR_INTERFACE( __CQOR ) int iswxdigit( ::wint_t );
    __QOR_INTERFACE( __CQOR ) size_t mbrlen( const char* __QCMP_RESTRICT s, size_t n, ::mbstate_t* __QCMP_RESTRICT ps );
    __QOR_INTERFACE( __CQOR ) size_t mbrtowc( wchar_t* __QCMP_RESTRICT pwc, const char* __QCMP_RESTRICT s, size_t n, ::mbstate_t* __QCMP_RESTRICT ps );
    __QOR_INTERFACE( __CQOR ) int mbsinit( const ::mbstate_t* ps );
	__QOR_INTERFACE( __CQOR ) size_t mbsnrtowcs( wchar_t* __QCMP_RESTRICT, const char** __QCMP_RESTRICT, size_t, size_t, ::mbstate_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) size_t mbsrtowcs( wchar_t* __QCMP_RESTRICT dst, const char** __QCMP_RESTRICT src, size_t len, ::mbstate_t* __QCMP_RESTRICT ps );
	__QOR_INTERFACE( __CQOR ) ::FILE* open_wmemstream( wchar_t**, size_t* );
    __QOR_INTERFACE( __CQOR ) wint_t putwc( wchar_t c, ::FILE* stream );
    __QOR_INTERFACE( __CQOR ) wint_t putwchar( wchar_t c );
    __QOR_INTERFACE( __CQOR ) int swprintf( wchar_t* __QCMP_RESTRICT s, size_t n, const wchar_t* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int swscanf( const wchar_t* __QCMP_RESTRICT s, const wchar_t* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) wint_t towlower( ::wint_t );
    __QOR_INTERFACE( __CQOR ) wint_t towupper( ::wint_t );
    __QOR_INTERFACE( __CQOR ) wint_t ungetwc( ::wint_t c, ::FILE* stream );
    __QOR_INTERFACE( __CQOR ) int vfwprintf( ::FILE* __QCMP_RESTRICT stream, const wchar_t* __QCMP_RESTRICT format, ::va_list arg );
    __QOR_INTERFACE( __CQOR ) int vfwscanf( ::FILE* __QCMP_RESTRICT stream, const wchar_t* __QCMP_RESTRICT format, ::va_list arg );
    __QOR_INTERFACE( __CQOR ) int vswprintf( wchar_t* __QCMP_RESTRICT s, size_t n, const wchar_t* __QCMP_RESTRICT format, ::va_list arg );
	__QOR_INTERFACE( __CQOR ) int vswscanf( const wchar_t* __QCMP_RESTRICT s, const wchar_t* __QCMP_RESTRICT format, ::va_list arg );
	__QOR_INTERFACE( __CQOR ) int vwprintf( const wchar_t* __QCMP_RESTRICT format, ::va_list arg );
    __QOR_INTERFACE( __CQOR ) int vwscanf( const wchar_t* __QCMP_RESTRICT format, ::va_list arg );
	__QOR_INTERFACE( __CQOR ) wchar_t* wcpcpy( wchar_t* __QCMP_RESTRICT, const wchar_t* __QCMP_RESTRICT );
	__QOR_INTERFACE( __CQOR ) wchar_t* wcpncpy( wchar_t* __QCMP_RESTRICT, const wchar_t* __QCMP_RESTRICT, size_t );
    __QOR_INTERFACE( __CQOR ) size_t wcrtomb( char* __QCMP_RESTRICT s, wchar_t wc, ::mbstate_t* __QCMP_RESTRICT ps );
	__QOR_INTERFACE( __CQOR ) int wcscasecmp( const wchar_t*, const wchar_t* );
	__QOR_INTERFACE( __CQOR ) int wcscasecmp_l( const wchar_t*, const wchar_t*, ::locale_t );
    __QOR_INTERFACE( __CQOR ) wchar_t* wcscat( wchar_t* __QCMP_RESTRICT s1, const wchar_t* __QCMP_RESTRICT s2 );
    __QOR_INTERFACE( __CQOR ) wchar_t* wcschr( const wchar_t* s, wchar_t c );
    __QOR_INTERFACE( __CQOR ) int wcscmp( const wchar_t* s1, const wchar_t* s2 );
    __QOR_INTERFACE( __CQOR ) int wcscoll( const wchar_t* s1, const wchar_t* s2 );
	__QOR_INTERFACE( __CQOR ) int wcscoll_l( const wchar_t *, const wchar_t*, ::locale_t );
    __QOR_INTERFACE( __CQOR ) wchar_t* wcscpy( wchar_t* __QCMP_RESTRICT s1, const wchar_t* __QCMP_RESTRICT s2 );
    __QOR_INTERFACE( __CQOR ) size_t wcscspn( const wchar_t* s1, const wchar_t* s2 );
	__QOR_INTERFACE( __CQOR ) wchar_t* wcsdup( const wchar_t* );
    __QOR_INTERFACE( __CQOR ) size_t wcsftime( wchar_t* __QCMP_RESTRICT s, size_t maxsize, const wchar_t* __QCMP_RESTRICT format, const ::tm* __QCMP_RESTRICT timeptr );
    __QOR_INTERFACE( __CQOR ) size_t wcslen( const wchar_t* s );
	__QOR_INTERFACE( __CQOR ) int wcsncasecmp( const wchar_t*, const wchar_t*, size_t );
	__QOR_INTERFACE( __CQOR ) int wcsncasecmp_l( const wchar_t*, const wchar_t*, size_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) wchar_t* wcsncat( wchar_t* __QCMP_RESTRICT s1, const wchar_t* __QCMP_RESTRICT s2, size_t n );
    __QOR_INTERFACE( __CQOR ) int wcsncmp( const wchar_t* s1, const wchar_t* s2, size_t n );
    __QOR_INTERFACE( __CQOR ) wchar_t* wcsncpy( wchar_t* __QCMP_RESTRICT s1, const wchar_t* __QCMP_RESTRICT s2, size_t n );
	__QOR_INTERFACE( __CQOR ) size_t wcsnlen( const wchar_t*, size_t );
	__QOR_INTERFACE( __CQOR ) size_t wcsnrtombs( char* __QCMP_RESTRICT, const wchar_t** __QCMP_RESTRICT, size_t, size_t, ::mbstate_t* __QCMP_RESTRICT );
    __QOR_INTERFACE( __CQOR ) wchar_t* wcspbrk( const wchar_t* s1, const wchar_t* s2 );
    __QOR_INTERFACE( __CQOR ) wchar_t* wcsrchr( const wchar_t* s, wchar_t c );
    __QOR_INTERFACE( __CQOR ) size_t wcsrtombs( char* __QCMP_RESTRICT dst, const wchar_t** __QCMP_RESTRICT src, size_t len, ::mbstate_t* __QCMP_RESTRICT ps );
    __QOR_INTERFACE( __CQOR ) size_t wcsspn( const wchar_t* s1, const wchar_t* s2 );
    __QOR_INTERFACE( __CQOR ) wchar_t* wcsstr( const wchar_t* s1, const wchar_t* s2 );
    __QOR_INTERFACE( __CQOR ) double wcstod( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr );
    __QOR_INTERFACE( __CQOR ) float wcstof( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr );
    __QOR_INTERFACE( __CQOR ) wchar_t* wcstok( wchar_t* __QCMP_RESTRICT s1, const wchar_t* __QCMP_RESTRICT s2, wchar_t** __QCMP_RESTRICT ptr );
    __QOR_INTERFACE( __CQOR ) long int wcstol( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr, int base );
    __QOR_INTERFACE( __CQOR ) long double wcstold( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr );
    __QOR_INTERFACE( __CQOR ) long long int wcstoll( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr, int base );
    __QOR_INTERFACE( __CQOR ) unsigned long int wcstoul( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr, int base );
    __QOR_INTERFACE( __CQOR ) unsigned long long int wcstoull( const wchar_t* __QCMP_RESTRICT nptr, wchar_t** __QCMP_RESTRICT endptr, int base );
	__QOR_INTERFACE( __CQOR ) wchar_t* wcswcs( const wchar_t*, const wchar_t* );
    __QOR_INTERFACE( __CQOR ) int wcswidth( const wchar_t*, size_t );
    __QOR_INTERFACE( __CQOR ) size_t wcsxfrm( wchar_t* __QCMP_RESTRICT s1, const wchar_t* __QCMP_RESTRICT s2, size_t n );
	__QOR_INTERFACE( __CQOR ) size_t wcsxfrm_l( wchar_t* __QCMP_RESTRICT, const wchar_t* __QCMP_RESTRICT, size_t, ::locale_t );
    __QOR_INTERFACE( __CQOR ) int wctob( ::wint_t c );
    __QOR_INTERFACE( __CQOR ) ::wctype_t wctype( const char* pproperty );
    __QOR_INTERFACE( __CQOR ) int wcwidth( wchar_t );
    __QOR_INTERFACE( __CQOR ) wchar_t* wmemchr( const wchar_t* s, wchar_t c, size_t n );
    __QOR_INTERFACE( __CQOR ) int wmemcmp( const wchar_t* s1, const wchar_t* s2, size_t n );
    __QOR_INTERFACE( __CQOR ) wchar_t* wmemcpy( wchar_t* __QCMP_RESTRICT s1, const wchar_t* __QCMP_RESTRICT s2, size_t n );
    __QOR_INTERFACE( __CQOR ) wchar_t* wmemmove( wchar_t* s1, const wchar_t* s2, size_t n);
    __QOR_INTERFACE( __CQOR ) wchar_t* wmemset( wchar_t* s, wchar_t c, size_t n );
    __QOR_INTERFACE( __CQOR ) int wprintf( const wchar_t* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int wscanf( const wchar_t* __QCMP_RESTRICT format, ... );
	//_swprintf_c	//TODO: no docs in MSDN on this
	//_swprintf_c_l //TODO: no docs in MSDN on this
	__QOR_INTERFACE( __CQOR ) int _swprintf_p_l( wchar_t* buffer, size_t sizeOfBuffer, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _swprintf_s_l( wchar_t* buffer, size_t sizeOfBuffer, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _swscanf_l( const wchar_t* buffer, const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _swscanf_s_l( const wchar_t* buffer, const wchar_t* format, ::locale_t locale, ... );
    __QOR_INTERFACE( __CQOR ) int _wcsncnt( const wchar_t* string, int cnt );
    __QOR_INTERFACE( __CQOR ) int isleadbyte( int wc );
    __QOR_INTERFACE( __CQOR ) int _wutime64( const wchar_t* filename, ::__utimbuf64* times );
    __QOR_INTERFACE( __CQOR ) int _wutime32( const wchar_t* filename, ::__utimbuf32* _Time );
    __QOR_INTERFACE( __CQOR ) int _wunlink( const wchar_t* filename );
    __QOR_INTERFACE( __CQOR ) double _wtof( const wchar_t* string );
	__QOR_INTERFACE( __CQOR ) double _wtof_l( const wchar_t* string, ::_locale_t locale );
    __QOR_INTERFACE( __CQOR ) int _wtoi( const wchar_t* string );
	__QOR_INTERFACE( __CQOR ) int _wtoi_l( const wchar_t* string, ::_locale_t locale );
    __QOR_INTERFACE( __CQOR ) long _wtol( const wchar_t* string );
	__QOR_INTERFACE( __CQOR ) long _wtol_l( const wchar_t* string, ::_locale_t locale );
    __QOR_INTERFACE( __CQOR ) Cmp_signed__int64 _wtoi64( const wchar_t* string );
	__QOR_INTERFACE( __CQOR ) Cmp_signed__int64 _wtoi64_l( const wchar_t* string, ::_locale_t locale );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wtmpnam( wchar_t* string );
    __QOR_INTERFACE( __CQOR ) errno_t _wtmpnam_s( wchar_t* pDstBuf, size_t SizeInWords );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wtempnam( const wchar_t* pDirectory, const wchar_t* pFilePrefix );
    __QOR_INTERFACE( __CQOR ) int _wsystem( const wchar_t* pCommand );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wstrtime( wchar_t* timestr );
    __QOR_INTERFACE( __CQOR ) errno_t _wstrtime_s( wchar_t* pBuf, size_t SizeInWords );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wstrdate( wchar_t* datestr );
    __QOR_INTERFACE( __CQOR ) errno_t _wstrdate_s( wchar_t* pBuf, size_t SizeInWords );
    __QOR_INTERFACE( __CQOR ) int _wstat32( const wchar_t* pName, ::_stat32* pStat );
    __QOR_INTERFACE( __CQOR ) int _wstat32i64( const wchar_t* pName, ::_stat32i64* pStat );
	__QOR_INTERFACE( __CQOR ) int _wstat64( const wchar_t* pName, ::__sstat64* pStat );
    __QOR_INTERFACE( __CQOR ) int _wstat64i32( const wchar_t* pName, ::_stat64i32* pStat );
    __QOR_INTERFACE( __CQOR ) void _wsplitpath( const wchar_t* path, wchar_t* drive, wchar_t* dir, wchar_t* fname, wchar_t* ext );
    __QOR_INTERFACE( __CQOR ) errno_t _wsplitpath_s( const wchar_t* pFullPath, wchar_t* pDrive, size_t DriveSize, wchar_t* pDir, size_t DirSize, wchar_t* pFilename, size_t FilenameSize, wchar_t* pExt, size_t ExtSize );
    __QOR_INTERFACE( __CQOR ) intptr_t _wspawnvpe( int _Mode, const wchar_t* Filename, const wchar_t* const* _ArgList, const wchar_t* const* _Env );
    __QOR_INTERFACE( __CQOR ) intptr_t _wspawnvp( int _Mode, const wchar_t* Filename, const wchar_t* const* _ArgList );
    __QOR_INTERFACE( __CQOR ) intptr_t _wspawnve( int _Mode, const wchar_t* Filename, const wchar_t* const* _ArgList, const wchar_t* const* _Env );
    __QOR_INTERFACE( __CQOR ) intptr_t _wspawnv( int _Mode, const wchar_t* Filename, const wchar_t* const* _ArgList );
    __QOR_INTERFACE( __CQOR ) intptr_t _wspawnlpe( int _Mode, const wchar_t* Filename, const wchar_t* _ArgList, ... );
    __QOR_INTERFACE( __CQOR ) intptr_t _wspawnlp( int _Mode, const wchar_t* Filename, const wchar_t* _ArgList, ... );
    __QOR_INTERFACE( __CQOR ) intptr_t _wspawnle( int _Mode, const wchar_t* Filename, const wchar_t* _ArgList, ... );
    __QOR_INTERFACE( __CQOR ) intptr_t _wspawnl( int _Mode, const wchar_t* Filename, const wchar_t* _ArgList, ... );
    __QOR_INTERFACE( __CQOR ) int _wsopen( const wchar_t* pFilename, int OpenFlag, int ShareFlag, int PermissionMode = 0 );
    __QOR_INTERFACE( __CQOR ) errno_t _wsopen_s( int* pFileHandle, const wchar_t* pFilename, int OpenFlag, int ShareFlag, int PermissionFlag );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wsetlocale( int Category, const wchar_t* pLocale );
    __QOR_INTERFACE( __CQOR ) void _wsearchenv( const wchar_t* filename, const wchar_t* varname, wchar_t* pathname );
    __QOR_INTERFACE( __CQOR ) errno_t _wsearchenv_s( const wchar_t* pFilename, const wchar_t* pEnvVar, wchar_t* pResultPath, size_t SizeInWords );
    __QOR_INTERFACE( __CQOR ) int _wrmdir( const wchar_t* pPath );
    __QOR_INTERFACE( __CQOR ) int _wrename( const wchar_t* pOldFilename, const wchar_t* pNewFilename );
    __QOR_INTERFACE( __CQOR ) int _wremove( const wchar_t* pFilename );
    __QOR_INTERFACE( __CQOR ) errno_t _wputenv_s( const wchar_t* pName, const wchar_t* pValue );
    __QOR_INTERFACE( __CQOR ) int _wputenv( const wchar_t* pEnvString );
    __QOR_INTERFACE( __CQOR ) int _wprintf_p( const wchar_t* pFormat, ... );
	__QOR_INTERFACE( __CQOR ) int _wprintf_l( const wchar_t* format, ::locale_t locale, ... );
    __QOR_INTERFACE( __CQOR ) ::FILE* _wpopen( const wchar_t* pCommand, const wchar_t* pMode );
    __QOR_INTERFACE( __CQOR ) void _wperror( const wchar_t* pErrMsg );
    __QOR_INTERFACE( __CQOR ) int _wopen( const wchar_t* pFilename, int OpenFlag, ... );
    __QOR_INTERFACE( __CQOR ) ::errno_t _wmktemp_s( wchar_t* pTemplateName, size_t SizeInWords );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wmktemp( wchar_t* pTemplate);
    __QOR_INTERFACE( __CQOR ) int _wmkdir( const wchar_t* pPath );
    __QOR_INTERFACE( __CQOR ) ::errno_t _wmakepath_s( wchar_t* pPathResult, size_t SizeInBytes, const wchar_t* pDrive, const wchar_t* pDir, const wchar_t* pFilename, const wchar_t* pExt );
    __QOR_INTERFACE( __CQOR ) void _wmakepath( wchar_t* path, const wchar_t* drive, const wchar_t* dir, const wchar_t* fname, const wchar_t* ext );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wgetenv( const wchar_t* _VarName );
    __QOR_INTERFACE( __CQOR ) ::errno_t _wgetenv_s( size_t* pReturnSize, wchar_t* pDstBuf, size_t DstSizeInWords, const wchar_t* pVarName );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wgetdcwd( int oDrive, wchar_t* pDstBuf, int SizeInWords );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wgetdcwd_nolock( int iDrive, wchar_t* pDstBuf, int SizeInWords );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wgetcwd( wchar_t* pDstBuf, int SizeInWords );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wfullpath( wchar_t* pFullPath, const wchar_t* pPath, size_t SizeInWords );
	__QOR_INTERFACE( __CQOR ) wchar_t *_wfullpath_dbg( wchar_t* absPath, const wchar_t* relPath, size_t maxLength, int blockType, const char *filename, int linenumber );
    __QOR_INTERFACE( __CQOR ) ::FILE* _wfsopen( const wchar_t* pFilename, const wchar_t* pMode );
    __QOR_INTERFACE( __CQOR ) ::FILE* _wfreopen( const wchar_t* pFilename, const wchar_t* pMode, FILE* pOldFile );
    __QOR_INTERFACE( __CQOR ) ::errno_t _wfreopen_s( FILE** pFile, const wchar_t* pFilename, const wchar_t* pMode, FILE* pOldFile );
    __QOR_INTERFACE( __CQOR ) ::FILE* _wfopen( const wchar_t* pFilename, const wchar_t* pMode );
    __QOR_INTERFACE( __CQOR ) ::errno_t _wfopen_s( ::FILE** ppFile, const wchar_t* pFilename, const wchar_t* pMode );
	__QOR_INTERFACE( __CQOR ) int _wfindnext( ::intptr_t handle, ::_wfinddata_t* fileinfo );
    __QOR_INTERFACE( __CQOR ) int _wfindnext32( ::intptr_t FindHandle, ::_wfinddata32_t* pFindData );
    __QOR_INTERFACE( __CQOR ) int _wfindnext32i64( ::intptr_t FindHandle, ::_wfinddata32i64_t* pFindData );
    __QOR_INTERFACE( __CQOR ) int _wfindnext64( ::intptr_t FindHandle, ::_wfinddata64_t* pFindData );
	__QOR_INTERFACE( __CQOR ) int _wfindnexti64( ::intptr_t handle, ::_wfinddatai64_t* fileinfo );
    __QOR_INTERFACE( __CQOR ) int _wfindnext64i32( ::intptr_t FindHandle, ::_wfinddata64i32_t* pFindData );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _wfindfirst( const wchar_t* filespec, ::_wfinddata_t* fileinfo );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wfindfirst32( const wchar_t* pFilename, ::_wfinddata32_t* pFindData );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wfindfirst32i64( const wchar_t* pFilename, ::_wfinddata32i64_t* pFindData );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wfindfirst64( const wchar_t* pFilename, ::_wfinddata64_t* pFindData );
	__QOR_INTERFACE( __CQOR ) ::intptr_t _wfindfirsti64( const wchar_t* filespec, ::_wfinddatai64_t* fileinfo );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wfindfirst64i32( const wchar_t* pFilename, ::_wfinddata64i32_t* pFindData );
    __QOR_INTERFACE( __CQOR ) ::FILE* _wfdopen( int FileHandle , const wchar_t* pMode );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wexecvpe( const wchar_t* pFilename, const wchar_t* const* ArgList, const wchar_t* const* pEnv );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wexecvp( const wchar_t* pFilename, const wchar_t* const* ArgList );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wexecve( const wchar_t* pFilename, const wchar_t* const* ArgList, const wchar_t* const* pEnv );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wexecv( const wchar_t* pFilename, const wchar_t* const* ArgList );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wexeclpe( const wchar_t* pFilename, const wchar_t* pArgList, ... );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wexeclp( const wchar_t* pFilename, const wchar_t* pArgList, ... );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wexecle( const wchar_t* pFilename, const wchar_t* pArgList, ... );
    __QOR_INTERFACE( __CQOR ) ::intptr_t _wexecl( const wchar_t* pFilename, const wchar_t* pArgList, ... );
    __QOR_INTERFACE( __CQOR ) ::errno_t _wdupenv_s( wchar_t** ppBuffer, size_t* pBufferSizeInWords, const wchar_t* pVarName );
	__QOR_INTERFACE( __CQOR ) wchar_t* _wctime( const ::time_t* timer );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wctime32( const ::__time32_t* pTime );
    __QOR_INTERFACE( __CQOR ) errno_t _wctime32_s( wchar_t* pBuf, size_t SizeInWords, const ::__time32_t* pTime );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wctime64( const __time64_t* pTime );
    __QOR_INTERFACE( __CQOR ) errno_t _wctime64_s( wchar_t* pBuf, size_t SizeInWords, const ::__time64_t* pTime );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wcsupr( wchar_t* pStr );
    __QOR_INTERFACE( __CQOR ) errno_t _wcsupr_s( wchar_t* pStr, size_t Size );
    __QOR_INTERFACE( __CQOR ) Cmp_signed__int64 _wcstoi64( const wchar_t* pStr, wchar_t** ppEndPtr, int iRadix );
    __QOR_INTERFACE( __CQOR ) Cmp_unsigned__int64  _wcstoui64( const wchar_t* pStr, wchar_t** ppEndPtr, int iRadix );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wcsset( wchar_t* pStr, wchar_t Val );
    __QOR_INTERFACE( __CQOR ) errno_t _wcsset_s( wchar_t* pStr, size_t SizeInWords, wchar_t Val );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wcsrev( wchar_t* pStr );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wcsnset( wchar_t* pStr, wchar_t Val, size_t MaxCount );
    __QOR_INTERFACE( __CQOR ) errno_t _wcsnset_s( wchar_t* pDst, size_t DstSizeInWords, wchar_t Val, size_t MaxCount );
    __QOR_INTERFACE( __CQOR ) int _wcsncoll( const wchar_t* pStr1, const wchar_t* pStr2, size_t MaxCount );
    __QOR_INTERFACE( __CQOR ) int _wcsnicoll( const wchar_t* pStr1, const wchar_t* pStr2, size_t MaxCount );
    __QOR_INTERFACE( __CQOR ) int _wcsnicmp( const wchar_t* pStr1, const wchar_t* pStr2, size_t MaxCount );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wcslwr( wchar_t* String );
    __QOR_INTERFACE( __CQOR ) errno_t _wcslwr_s( wchar_t* pStr, size_t SizeInWords );
    __QOR_INTERFACE( __CQOR ) int _wcsicoll( const wchar_t* pStr1, const wchar_t* pStr2 );
    __QOR_INTERFACE( __CQOR ) int _wcsicmp( const wchar_t* pStr1, const wchar_t* pStr2 );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wcsdup( const wchar_t* pStr );
    __QOR_INTERFACE( __CQOR ) int _wcreat( const wchar_t* pFilename, int iPermissionMode );
    __QOR_INTERFACE( __CQOR ) int _wchmod( const wchar_t* pFilename, int iMode );
    __QOR_INTERFACE( __CQOR ) int _wchdir( const wchar_t* pPath );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wcserror( int ErrNum );
    __QOR_INTERFACE( __CQOR ) ::errno_t _wcserror_s( wchar_t* pBuf, size_t SizeInWords, int ErrNum );
    __QOR_INTERFACE( __CQOR ) wchar_t* _wasctime( const tm* pTm );
    __QOR_INTERFACE( __CQOR ) ::errno_t _wasctime_s( wchar_t* pBuf, size_t SizeInWords, const tm* pTm );
    __QOR_INTERFACE( __CQOR ) int _waccess( const wchar_t* pFilename, int iAccessMode );
    __QOR_INTERFACE( __CQOR ) ::errno_t _waccess_s( const wchar_t* pFilename, int iAccessMode );
    __QOR_INTERFACE( __CQOR ) wchar_t* __wcserror( const wchar_t* pStr );
    __QOR_INTERFACE( __CQOR ) ::errno_t __wcserror_s( wchar_t* pBuffer, size_t SizeInWords, const wchar_t* pErrMsg );
    __QOR_INTERFACE( __CQOR ) void _wassert( const wchar_t* pMessage, const wchar_t* pFile, unsigned uiLine );
	__QOR_INTERFACE( __CQOR ) size_t __wcsncnt( const wchar_t* pStr, size_t MaxCount );
    __QOR_INTERFACE( __CQOR ) int fwprintf_s( ::FILE* pFile, const wchar_t* format, ... );
    __QOR_INTERFACE( __CQOR ) int fwscanf_s( ::FILE* pFile, const wchar_t* format, ... );
    __QOR_INTERFACE( __CQOR ) int swscanf_s( const wchar_t* s, const wchar_t* format, ... );
    __QOR_INTERFACE( __CQOR ) ::errno_t mbsrtowcs_s( size_t* pRetval, wchar_t* pDst, size_t Size, const char** ppSrc, size_t n, mbstate_t* _State );
    __QOR_INTERFACE( __CQOR ) int swprintf_s( wchar_t* s, size_t SizeInWords, const wchar_t* format, ... );
	__QOR_INTERFACE( __CQOR ) int _wscanf_l( const wchar_t* format, ::locale_t locale, ...  );
	__QOR_INTERFACE( __CQOR ) int _wscanf_s_l( const wchar_t *format, ::locale_t locale, ... );
    __QOR_INTERFACE( __CQOR ) int wscanf_s( const wchar_t* __QCMP_RESTRICT format, ... );
    __QOR_INTERFACE( __CQOR ) int vfwprintf_s( ::FILE* stream, const wchar_t* format, ::va_list arg );
    __QOR_INTERFACE( __CQOR ) int vwprintf_s( const wchar_t* format, ::va_list arg );
    __QOR_INTERFACE( __CQOR ) int vswprintf_s( wchar_t* s, size_t n, const wchar_t* format, ::va_list arg );
    __QOR_INTERFACE( __CQOR ) ::errno_t wcrtomb_s( size_t* pReturnValue, char* mbchar, size_t sizeOfmbchar, wchar_t* wchar, ::mbstate_t* mbstate );
    __QOR_INTERFACE( __CQOR ) ::errno_t wcscat_s( wchar_t* strDestination, size_t numberOfElements, const wchar_t* strSource );
    __QOR_INTERFACE( __CQOR ) ::errno_t wcscpy_s( wchar_t* strDestination, size_t numberOfElements, const wchar_t* strSource );
    __QOR_INTERFACE( __CQOR ) ::errno_t wcsncat_s( wchar_t* strDest, size_t numberOfElements, const wchar_t* strSource, size_t count );
    __QOR_INTERFACE( __CQOR ) ::errno_t wcsncpy_s( wchar_t* strDest, size_t numberOfElements, const wchar_t* strSource, size_t count );
    __QOR_INTERFACE( __CQOR ) ::errno_t wcsrtombs_s( size_t* pReturnValue, char* mbstr, size_t sizeInBytes, const wchar_t** wcstr, size_t count, ::mbstate_t* mbstate );
    __QOR_INTERFACE( __CQOR ) wchar_t* wcstok_s( wchar_t* strToken, const wchar_t* strDelimit, wchar_t** context );
    __QOR_INTERFACE( __CQOR ) int wprintf_s( const wchar_t* __QCMP_RESTRICT format, ... );
	__QOR_INTERFACE( __CQOR ) int _vcprintf( const char* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vcprintf_l( const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vcprintf_p( const char* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vcprintf_p_l( const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vcprintf_s( const char* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vcprintf_s_l( const char* format, ::locale_t locale, ::va_list argptr);
	__QOR_INTERFACE( __CQOR ) int _vcwprintf( const wchar_t* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vcwprintf_l( const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vcwprintf_p( const wchar_t* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vcwprintf_p_l( const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vcwprintf_s( const wchar_t* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vcwprintf_s_l( const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vfprintf_l( ::FILE* stream, const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vfprintf_p( ::FILE* stream, const char* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vfprintf_p_l( ::FILE* stream, const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vfprintf_s_l( ::FILE* stream, const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vfwprintf_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vfwprintf_p( ::FILE* stream, const wchar_t* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vfwprintf_p_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vfwprintf_s_l( ::FILE* stream, const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vprintf_l( const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vprintf_p( const char* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vprintf_p_l( const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vprintf_s_l( const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vscprintf( const char* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vscprintf_l( const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vscprintf_p_l( const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vscwprintf( const wchar_t* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vscwprintf_l( const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vscwprintf_p_l( const wchar_t* _Format, ::_locale_t _Locale, ::va_list _ArgList );
	__QOR_INTERFACE( __CQOR ) int _vsnprintf( char* buffer, size_t count, const char* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsnprintf_c( char* _DstBuf, size_t _MaxCount, const char* _Format, ::va_list _ArgList );
	__QOR_INTERFACE( __CQOR ) int _vsnprintf_c_l( char* _DstBuf, size_t _MaxCount, const char*, ::_locale_t _Locale, ::va_list _ArgList );
	__QOR_INTERFACE( __CQOR ) int _vsnprintf_l( char* buffer, size_t count, const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsnprintf_s( char *buffer, size_t sizeOfBuffer, size_t count, const char* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsnprintf_s_l( char* buffer, size_t sizeOfBuffer, size_t count, const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsnwprintf( wchar_t* buffer, size_t count, const wchar_t* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsnwprintf_l( wchar_t* buffer, size_t count, const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsnwprintf_s( wchar_t* buffer, size_t sizeOfBuffer, size_t count, const wchar_t* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsnwprintf_s_l( wchar_t* buffer, size_t sizeOfBuffer, size_t count, const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsprintf_l( char* buffer, const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsprintf_p( char* buffer, size_t sizeInBytes, const char* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsprintf_p_l( char* buffer, size_t sizeInBytes, const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vsprintf_s_l( char* buffer, size_t numberOfElements, const char* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vswprintf_c_l( wchar_t* _DstBuf, size_t _MaxCount, const wchar_t* _Format, ::_locale_t _Locale, ::va_list _ArgList );
	__QOR_INTERFACE( __CQOR ) int _vswprintf_l( wchar_t* buffer, size_t count, const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vswprintf_p_l( wchar_t* buffer, size_t count, const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vswprintf_s_l( wchar_t* buffer, size_t numberOfElements, const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vwprintf_l( const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vwprintf_p( const wchar_t* format, ::va_list ArgList );
	__QOR_INTERFACE( __CQOR ) int _vwprintf_p_l( const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _vwprintf_s_l( const wchar_t* format, ::locale_t locale, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) int _wprintf_s_l( const wchar_t* format, ::locale_t locale, ... );
	__QOR_INTERFACE( __CQOR ) int _wprintf_p_l( const wchar_t* format, ::locale_t locale, ... );
    __QOR_INTERFACE( __CQOR ) int is_wctype( ::wint_t wc, wctype_t Type );
    __QOR_INTERFACE( __CQOR ) int _vswprintf ( wchar_t* string, const wchar_t* format, ::va_list ArgList );
    __QOR_INTERFACE( __CQOR ) int _vswprintf_p( wchar_t* string, size_t MaxCount, const wchar_t* format, ::va_list ArgList );
    __QOR_INTERFACE( __CQOR ) int _vswprintf_c( wchar_t* string, size_t count, const wchar_t* format, ::va_list ArgList );
	__QOR_INTERFACE( __CQOR ) int _woutput_s( const wchar_t* format, ::va_list argptr );
	__QOR_INTERFACE( __CQOR ) ::errno_t _wctomb_s_l( int* pRetValue, char* mbchar, size_t sizeInBytes, wchar_t wchar, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _wctomb_l( char* mbchar, wchar_t wchar, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _wcsupr_s_l( wchar_t* str, size_t numberOfElements, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) wchar_t* _wcsupr_l( wchar_t* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned long _wcstoul_l( const wchar_t* nptr, wchar_t** endptr, int base, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) Cmp_unsigned__int64 _wcstoui64_l( const wchar_t* nptr, wchar_t** endptr, int base, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _wcstombs_s_l( size_t* pReturnValue, char* mbstr, size_t sizeInBytes, const wchar_t* wcstr, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _wcstombs_l( char* mbstr, const wchar_t* wcstr, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) long _wcstol_l( const wchar_t* nptr, wchar_t** endptr, int base, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) Cmp__int64 _wcstoi64_l( const wchar_t* nptr, wchar_t** endptr, int base, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _wcsnicoll_l( const wchar_t* string1, const wchar_t* string2, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _wcsnicmp_l( const wchar_t* string1, const wchar_t* string2, size_t count );
	__QOR_INTERFACE( __CQOR ) int _wcsncoll_l( const wchar_t* string1, const wchar_t* string2, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _wcslwr_s_l( wchar_t* str, size_t numberOfElements, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) wchar_t* _wcslwr_l( wchar_t* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _wcsicoll_l( const wchar_t* string1, const wchar_t* string2, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _wcsicmp_l( const wchar_t* string1, const wchar_t* string2, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _wcsftime_l( wchar_t* strDest, size_t maxsize, const wchar_t* format, const ::tm* timeptr, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) wchar_t* _wcsdup_dbg( const wchar_t* strSource, int blockType, const char* filename, int linenumber );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbbtombc( unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbbtombc_l( unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbbtype( unsigned char c, int type );
	__QOR_INTERFACE( __CQOR ) void _mbccpy( unsigned char* dest, const unsigned char* src );
	__QOR_INTERFACE( __CQOR ) void _mbccpy_l( unsigned char* dest, const unsigned char* src, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbccpy_s( unsigned char* dest, size_t buffSizeInBytes, int* pCopied, const unsigned char* src );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbccpy_s_l( unsigned char* dest, size_t buffSizeInBytes, int* pCopied, const unsigned char* src, ::locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbcjistojms( unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbcjistojms_l( unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbcjmstojis( unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbcjmstojis_l( unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _mbclen( const unsigned char *c );
	__QOR_INTERFACE( __CQOR ) int _mbclen_l( const char* mbstr, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbctohira( unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbctohira_l( unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbctokata( unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbctokata_l( unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbctolower( unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbctolower_l( unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbctoupper( unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbctoupper_l( unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbctombb( unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbctombb_l( unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mblen_l( const char* mbstr, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbsbtype( const unsigned char* mbstr, size_t count );
	__QOR_INTERFACE( __CQOR ) int _mbsbtype_l( const unsigned char* mbstr, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbscat( unsigned char* strDestination, const unsigned char* strSource );
	__QOR_INTERFACE( __CQOR ) errno_t _mbscat_s( unsigned char* strDestination, size_t numberOfElements, const unsigned char* strSource );
	__QOR_INTERFACE( __CQOR ) errno_t _mbscat_s_l( unsigned char* strDest, size_t numberOfElements, const unsigned char* strSource, size_t count, ::_locale_t locale);
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbschr( const unsigned char* str, unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbschr_l( const unsigned char* str, unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbscmp( const unsigned char* string1, const unsigned char* string2 );
	__QOR_INTERFACE( __CQOR ) int _mbscmp_l( const unsigned char* string1, const unsigned char* string2, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbscoll( const unsigned char* string1, const unsigned char* string2 );
	__QOR_INTERFACE( __CQOR ) int _mbscoll_l( const unsigned char* string1, const unsigned char* string2, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbscpy( unsigned char* strDestination, const unsigned char* strSource );
	__QOR_INTERFACE( __CQOR ) errno_t _mbscpy_s( unsigned char* strDestination, size_t numberOfElements, const unsigned char* strSource );
	__QOR_INTERFACE( __CQOR ) errno_t _mbscpy_s_l( unsigned char* strDestination, size_t numberOfElements, const unsigned char* strSource, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _mbscspn( const unsigned char* str, const unsigned char* strCharSet );
	__QOR_INTERFACE( __CQOR ) size_t _mbscspn_l( const unsigned char* str, const unsigned char* strCharSet, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsdec( const unsigned char* start, const unsigned char* current );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsdec_l( const unsigned char* start, const unsigned char* current, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsdup( const unsigned char* strSource );
	__QOR_INTERFACE( __CQOR ) int _mbsicmp( const unsigned char* string1, const unsigned char* string2 );
	__QOR_INTERFACE( __CQOR ) int _mbsicmp_l( const unsigned char* string1, const unsigned char* string2, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbsicoll( const unsigned char* string1, const unsigned char* string2 );
	__QOR_INTERFACE( __CQOR ) int _mbsicoll_l( const unsigned char* string1, const unsigned char* string2, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsinc( const unsigned char* current );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsinc_l( const unsigned char* current, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _mbslen( const unsigned char* str );
	__QOR_INTERFACE( __CQOR ) size_t _mbslen_l( const unsigned char* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbslwr( unsigned char* str );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbslwr_l( unsigned char* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbslwr_s( unsigned char* str, size_t numberOfElements );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbslwr_s_l( unsigned char* str, size_t numberOfElements, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsnbcat( unsigned char* dest, const unsigned char* src, size_t count );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsnbcat_l( unsigned char* dest, const unsigned char* src, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsnbcat_s( unsigned char* dest, size_t sizeInBytes, const unsigned char* src, size_t count );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsnbcat_s_l( unsigned char* dest, size_t sizeInBytes, const unsigned char* src, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbsnbcmp( const unsigned char* string1, const unsigned char* string2, size_t count );
	__QOR_INTERFACE( __CQOR ) int _mbsnbcmp_l( const unsigned char* string1, const unsigned char* string2, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _mbsnbcnt( const unsigned char* str, size_t count );
	__QOR_INTERFACE( __CQOR ) size_t _mbsnbcnt_l( const unsigned char* str, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbsnbcoll( const unsigned char* string1, const unsigned char* string2, size_t count );
	__QOR_INTERFACE( __CQOR ) int _mbsnbcoll_l( const unsigned char* string1, const unsigned char* string2, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsnbcpy( unsigned char* strDest, const unsigned char* strSource, size_t count );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsnbcpy_l( unsigned char* strDest, const unsigned char* strSource, size_t count, ::_locale_t locale);
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsnbcpy_s( unsigned char* strDest, size_t sizeInBytes, const unsigned char* strSource, size_t count );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsnbcpy_s_l( unsigned char* strDest, size_t sizeInBytes, const unsigned char* strSource, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbsnbicmp( const unsigned char* string1, const unsigned char* string2, size_t count );
	__QOR_INTERFACE( __CQOR ) int _mbsnbicmp_l( const unsigned char* string1, const unsigned char* string2, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbsnbicoll( const unsigned char* string1, const unsigned char* string2, size_t count );
	__QOR_INTERFACE( __CQOR ) int _mbsnbicoll_l( const unsigned char* string1, const unsigned char* string2, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsnbset( unsigned char* str, unsigned int c, size_t count );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsnbset_l( unsigned char* str, unsigned int c, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsnbset_s( unsigned char* str, size_t size, unsigned int c, size_t count );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsnbset_s_l( unsigned char* str, size_t size, unsigned int c, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsncat( unsigned char* strDest, const unsigned char* strSource, size_t count );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsncat_l( unsigned char* strDest, const unsigned char* strSource, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) errno_t _mbsncat_s( unsigned char* strDest, size_t numberOfElements, const unsigned char* strSource, size_t count );
	__QOR_INTERFACE( __CQOR ) errno_t _mbsncat_s_l( unsigned char* strDest, size_t numberOfElements, const unsigned char* strSource, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _mbsnccnt( const unsigned char* str, size_t count );
	__QOR_INTERFACE( __CQOR ) size_t _mbsnccnt_l( const unsigned char* str, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbsncmp( const unsigned char* string1, const unsigned char* string2, size_t count );
	__QOR_INTERFACE( __CQOR ) int _mbsncmp_l( const unsigned char* string1, const unsigned char* string2, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbsncoll( const unsigned char* string1, const unsigned char* string2, size_t count );
	__QOR_INTERFACE( __CQOR ) int _mbsncoll_l( const unsigned char* string1, const unsigned char* string2, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsncpy( unsigned char* strDest, const unsigned char* strSource, size_t count );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsncpy_l( unsigned char* strDest, const unsigned char* strSource, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) errno_t _mbsncpy_s( unsigned char* strDest, size_t numberOfElements, const unsigned char* strSource, size_t count );
	__QOR_INTERFACE( __CQOR ) errno_t _mbsncpy_s_l( unsigned char* strDest, size_t numberOfElements, const unsigned char* strSource, size_t count, ::locale_t locale);
	__QOR_INTERFACE( __CQOR ) unsigned int _mbsnextc( const unsigned char* str );
	__QOR_INTERFACE( __CQOR ) unsigned int _mbsnextc_l( const unsigned char* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbsnicmp( const unsigned char* string1, const unsigned char* string2, size_t count );
	__QOR_INTERFACE( __CQOR ) int _mbsnicmp_l( const unsigned char* string1, const unsigned char* string2, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbsnicoll( const unsigned char* string1, const unsigned char* string2, size_t count );
	__QOR_INTERFACE( __CQOR ) int _mbsnicoll_l( const unsigned char* string1, const unsigned char* string2, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsninc( const unsigned char* str, size_t count );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsninc_l( const unsigned char* str, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _mbsnlen( const unsigned char* str, size_t numberOfElements );
	__QOR_INTERFACE( __CQOR ) size_t _mbsnlen_l( const unsigned char* str, size_t numberOfElements, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsnset( unsigned char* str, unsigned int c, size_t count );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsnset_l( unsigned char* str, unsigned int c, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsnset_s( unsigned char* str, size_t numberOfElements, unsigned int c, size_t count );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsnset_s_l( unsigned char* str, size_t numberOfElements, unsigned int c, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbspbrk( const unsigned char* str, const unsigned char* strCharSet );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbspbrk_l( unsigned char* str, const unsigned char* strCharSet, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsrchr( const unsigned char* str, unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsrchr_l( const unsigned char* str, unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsrev( unsigned char* str );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsrev_l( unsigned char* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsset( unsigned char* str, unsigned int c );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsset_l( unsigned char* str, unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsset_s( unsigned char* str, size_t numberOfElements, unsigned int c );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsset_s_l( unsigned char* str, size_t numberOfElements, unsigned int c, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _mbsspn( const unsigned char* str, const unsigned char* strCharSet );
	__QOR_INTERFACE( __CQOR ) size_t _mbsspn_l( const unsigned char* str, const unsigned char* strCharSet, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsspnp( const unsigned char* str, const unsigned char* charset );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsspnp_l( const unsigned char* str, const unsigned char* charset, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsstr( const unsigned char* str, const unsigned char* strSearch );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsstr_l( const unsigned char* str, const unsigned char* strSearch, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbstok( unsigned char* strToken, const unsigned char* strDelimit );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbstok_l( unsigned char* strToken, const unsigned char* strDelimit, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbstok_s( unsigned char* strToken, const unsigned char* strDelimit, char** context );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbstok_s_l( unsigned char* strToken, const unsigned char* strDelimit, char** context, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _mbstowcs_l( wchar_t* wcstr, const char* mbstr, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbstowcs_s_l( size_t* pReturnValue, wchar_t* wcstr, size_t sizeInWords, const char* mbstr, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _mbstrlen( const char* str );
	__QOR_INTERFACE( __CQOR ) size_t _mbstrlen_l( const char* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t _mbstrnlen( const char* str, size_t numberOfElements );
	__QOR_INTERFACE( __CQOR ) size_t _mbstrnlen_l( const char* str, size_t numberOfElements, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsupr( unsigned char* str );
	__QOR_INTERFACE( __CQOR ) unsigned char* _mbsupr_l( unsigned char* str, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsupr_s( unsigned char* str, size_t numberOfElements );
	__QOR_INTERFACE( __CQOR ) ::errno_t _mbsupr_s_l( unsigned char* str, size_t numberOfElements, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int _mbtowc_l( wchar_t* wchar, const char* mbchar, size_t count, ::_locale_t locale );
	__QOR_INTERFACE( __CQOR ) int mbtowc_l( wchar_t* wchar, const char* mbchar, size_t count, ::locale_t locale );
	__QOR_INTERFACE( __CQOR ) size_t wcsnrtombs_l( char* __QCMP_RESTRICT dst, const wchar_t** __QCMP_RESTRICT src, size_t nwc, size_t len, ::mbstate_t* __QCMP_RESTRICT ps, ::locale_t loc );	//clang/libc++ extension
	__QOR_INTERFACE( __CQOR ) size_t mbsrtowcs_l( wchar_t* __QCMP_RESTRICT dst, const char** __QCMP_RESTRICT src, size_t len, ::mbstate_t* __QCMP_RESTRICT ps, ::locale_t loc );		//clang/libc++ extension
	__QOR_INTERFACE( __CQOR ) size_t mbsnrtowcs_l( wchar_t* __QCMP_RESTRICT dst, const char** __QCMP_RESTRICT src, size_t nms, size_t len, ::mbstate_t* __QCMP_RESTRICT ps, ::locale_t loc );	//clang/libc++ extension
	__QOR_INTERFACE( __CQOR ) size_t mbrtowc_l( wchar_t* __QCMP_RESTRICT pwc, const char* __QCMP_RESTRICT s, size_t n, ::mbstate_t* __QCMP_RESTRICT ps, ::locale_t loc );	//clang/libc++ extension
	__QOR_INTERFACE( __CQOR ) size_t mbrlen_l( const char* __QCMP_RESTRICT s, size_t n, ::mbstate_t* __QCMP_RESTRICT ps, ::locale_t loc );	//clang/libc++ extension

	__QOR_INTERFACE( __CQOR ) wchar_t*& f_wcmdln( void );
	extern unsigned char _mbctype[];
	extern unsigned char _mbcasemap[];

__QCMP_ENDLINKAGE_C

#endif //QOR_WCHAR_H_3
