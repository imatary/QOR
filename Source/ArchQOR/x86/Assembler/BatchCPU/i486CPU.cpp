//i486CPU.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement i486 Assembler intrinsics for x86PC platform

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/Assembler/BatchCPU/i486CPU.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	namespace nsx86
	{
		//--------------------------------------------------------------------------------
		Ci486CPU::Ci486CPU( CCodeGeneratorBase* codeGenerator ) : Ci386CPU( codeGenerator )
		{
		}

		//--------------------------------------------------------------------------------
		Ci486CPU::~Ci486CPU() __QCMP_THROW
		{
		}

		//------------------------------------------------------------------------------
		//Byte swap (32-bit or 64-bit registers only) (i486).
		void Ci486CPU::bswap( const CGPReg& dst )
		{
			//assert(dst.getRegType() == REG_TYPE_GPD || dst.getRegType() == REG_TYPE_GPQ);
			_emitInstruction( INST_BSWAP, &dst );
		}

		//------------------------------------------------------------------------------
		//Compare and Exchange (i486).
		void Ci486CPU::cmpxchg( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMPXCHG, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Compare and Exchange (i486).
		void Ci486CPU::cmpxchg( const CMem& dst, const CGPReg& src )
		{
			_emitInstruction( INST_CMPXCHG, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//CPU Identification (i486).
		void Ci486CPU::cpuid()
		{
			_emitInstruction( INST_CPUID );
		}

		//------------------------------------------------------------------------------
		//Exchange and Add.
		void Ci486CPU::xadd( const CGPReg& dst, const CGPReg& src )
		{
			_emitInstruction( INST_XADD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Exchange and Add.
		void Ci486CPU::xadd( const CMem& dst, const CGPReg& src )
		{
			_emitInstruction( INST_XADD, &dst, &src );
		}


		//--------------------------------------------------------------------------------
		C486FPU::C486FPU( Cx86CPUCore& refCPU ) : C387FPU( refCPU )
		{
		}

		//--------------------------------------------------------------------------------
		C486FPU::~C486FPU()
		{
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
