//LoadableModuleBase.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements a very basic loadable module representative

#ifndef __QORLIB//Don't include loadable module code in static library builds

#include "CompilerQOR.h"
#include "CodeQOR/Modules/LoadableModuleBase.h"
#include "CodeQOR/ClassReg/ClassReg.h"
#include "CodeQOR/ClassReg/ExternalClassReg.h"
#include "CodeQOR/Modules/ProcessBase.h"
#include "AppocritaQOR/Event.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CLoadableModuleBase::CLoadableModuleBase( const char* szModuleName ) : CLibraryBase( szModuleName, true )
	, m_pStaticLibraryList( 0 )
	{
		m_bRegistered = true;
	}

	//--------------------------------------------------------------------------------
	CLoadableModuleBase::~CLoadableModuleBase()
	{
		m_bRegistered = false;
	}

	//--------------------------------------------------------------------------------
	bool CLoadableModuleBase::RegisterLibrary( CLibraryBase* pLibrary )
	{
		if( m_pStaticLibraryList == 0 )
		{
			m_pStaticLibraryList = pLibrary;
		}
		else
		{
			m_pStaticLibraryList->AppendLibrary( pLibrary );
		}

		return true;
	}

	//--------------------------------------------------------------------------------
	void CLoadableModuleBase::UnregisterLibrary( CLibraryBase* pLibrary )
	{
	}

	//--------------------------------------------------------------------------------
	void CLoadableModuleBase::StaticLibraryList( void( pCallback )( CLibraryBase*, void* ), void* pContext )
	{
		CLibraryBase* pLibrary = m_pStaticLibraryList;
		while( pLibrary != 0 )
		{
			(pCallback)( pLibrary, pContext );
			pLibrary = pLibrary->NextLibrary();
		}
	}

	//--------------------------------------------------------------------------------
	CClassReg& CLoadableModuleBase::ClassReg()
	{
		return CProcessBase::ThisProcess()->ClassReg();
	}

	//--------------------------------------------------------------------------------
	CExternalClassReg& CLoadableModuleBase::ExternalClassReg()
	{
		return CProcessBase::ThisProcess()->ExternalClassReg();
	}

}//nsCodeQOR

#endif//!__QORLIB
