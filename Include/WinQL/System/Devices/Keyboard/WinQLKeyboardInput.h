//KeyboardInput.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 Keyboard Input

#ifndef WINQL_SYSTEM_DEVICE_KEYBOARD_H_3
#define WINQL_SYSTEM_DEVICE_KEYBOARD_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/Application/Threading/WinQLThreadAffinity.h"
#include "WinQL/CodeServices/WinQLSharedRef.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE(__WINQL) CKeyboardLayout;

	//--------------------------------------------------------------------------------
	//A collection class for KeyboardLayouts
	//CKeyboardLayouts is stateless and therefore thread safe sitting between the shared Keyboard object and the thread affinitive Layouts
	class __QOR_INTERFACE( __WINQL ) CKeyboardLayouts
	{
	public:
		/*
		//--------------------------------------------------------------------------------
		//An iterator over the keyboard layouts on the associated thread
		class __QOR_INTERFACE( __WINQL ) CKeyboardLayoutIterator
		{
			//QOR_PP_WINQL_THREAD_ATTACHED;

		public:

			CKeyboardLayoutIterator();
			CKeyboardLayoutIterator( unsigned long ulIndex );
			CKeyboardLayoutIterator( CKeyboardLayoutHandle::refType refHKL );
			~CKeyboardLayoutIterator();
			CKeyboardLayoutIterator& operator ++();
			CKeyboardLayoutIterator& operator --();
			CKeyboardLayout& operator *( void );
			CKeyboardLayout* operator ->( void );
			bool operator == ( const CKeyboardLayoutIterator& Cmp );

			unsigned int count( void );

		protected:

			void AcquireKL( void );

			CKeyboardLayout* m_pLayout;
			unsigned long m_ulIndex;
			CKeyboardLayoutHandleMap* m_pMap;
		};

		typedef CKeyboardLayoutIterator iterator;
		*/
		__QOR_DECLARE_OCLASS_ID( CKeyboardLayouts );

		CKeyboardLayouts();
		virtual ~CKeyboardLayouts();
		
		//unsigned int count( void );																//Return the number of Keyboard Layouts on the calling thread
		//CKeyboardLayoutIterator begin(void );													//Return an iterator to the first Keyboard Layout on the calling thread
		//CKeyboardLayoutIterator end( void );													//Return an iterator after the last Keyboard Layout on the calling thread
		
		/*
		CKeyboardLayoutIterator CreateKeyboardLayout( 
			unsigned int Flags, unsigned short usPrimaryLanguage, 
			unsigned short usSubLanguage = 1, unsigned short usDeviceID = 0 );					//Add a new Keyboard Layout
		
		CKeyboardLayoutIterator CreateKeyboardLayout( unsigned int Flags, 
			const CTString& strLayoutName );													//Add a new Keyboard Layout by name
		*/
	};


	class __QOR_INTERFACE( __WINQL ) CKeyboard;

}//nsWin32

#endif//WINQL_SYSTEM_DEVICE_KEYBOARD_H_3
