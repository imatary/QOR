//WinQLDeviceInfoSet.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Win32 DeviceInfoSet

#ifndef WINQL_DEVICEINFOSET_H_3
#define WINQL_DEVICEINFOSET_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/DataStructures/TRef.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/Definitions/IO.h"
#include "WinQL/System/Devices/WinQLDevice.h"
#include "WinQL/System/Devices/WinQLDeviceHandle.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/Application/Threading/WinQLThreadAffinity.h"
#include "WinQL/CodeServices/WinQLSharedRef.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"

__QOR_DECLARE_REF(nsWin32, __WINQL, CDeviceInfoSet, CTRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) COSWindow;
	//class __QOR_INTERFACE( __WINQL ) CDeviceInfoSet;

	//typedef nsWin32::CTHandleMap< nsCodeQOR::CTLRef< CHandle >, CDeviceInfoSet > CDeviceInfoSetHandleMap;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CDeviceInfoSet
	{
		QOR_PP_WINQL_THREAD_ATTACHED;															//A Device InfoSet has thread affinity

	public:

		typedef nsCodeQOR::CTLRef< CDeviceInfoSet > refType;

		__QOR_DECLARE_REF_TYPE(CDeviceInfoSet);
		__QOR_DECLARE_OCLASS_ID(CDeviceInfoSet);
		
		CDeviceInfoSet( nsCodeQOR::mxGUID* pGuid = 0, COSWindow* pWindow = 0, const mxTCHAR* szMachineName = 0 );
		CDeviceInfoSet( CTString& strEnumeratorID );
		CDeviceInfoSet( nsCodeQOR::mxGUID& InterfaceGUID, unsigned long ulFlags );

		virtual ~CDeviceInfoSet();

		CHandle& Handle( void );

	protected:

		nsWinQAPI::CSetupAPI& m_Library;
		nsCodeQOR::mxGUID* m_pGUID;																//device setup class guid
		COSWindow* m_pWindow;
		const mxTCHAR* m_szMachine;
		CHandle m_Handle;
		
	private:

		CDeviceInfoSet( const CDeviceInfoSet& src );
		CDeviceInfoSet& operator = ( const CDeviceInfoSet& src );								//not to be implemented

	};

}//nsWin32

#endif//WINQL_DEVICEINFOSET_H_3

