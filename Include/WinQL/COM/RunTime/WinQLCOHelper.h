//WinQLCOHelper.h

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Declares a helper class to wrap up a lot of general COM runtime functionality

#ifndef WINQL_COM_COHELPER_H_3
#define WINQL_COM_COHELPER_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/Definitions/IO.h"
#include "WinQL/COM/Runtime/DataStructures/WinQLPropVariant.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/GUI/Icon.h"
#include "WinQL/Definitions/Interfaces.h"
#include "WinQL/Application/Graphics/WinQLDeviceContext.h"
#include "WinQL/Application/Process/Module/WinQLDll.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) COLE32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	struct uClsSpec
    {
		unsigned long tyspec;
		
		union
        {
			GUID clsid;
			wchar_t* pFileExt;
			wchar_t* pMimeType;
			wchar_t* pProgId;
			wchar_t* pFileName;
			struct 
			{
				wchar_t* pPackageName;
				GUID PolicyId;
			}	ByName;
			struct 
			{
				GUID ObjectId;
				GUID PolicyId;
			} ByObjectId;
        } tagged_union;
    };

	//--------------------------------------------------------------------------------
	struct CSPlatform
	{
		unsigned long dwPlatformId;
		unsigned long dwVersionHi;
		unsigned long dwVersionLo;
		unsigned long dwProcessorArch;
	};

	//--------------------------------------------------------------------------------
	struct QueryContext
	{
		unsigned long dwContext;
		CSPlatform Platform;
		unsigned long Locale;
		unsigned long dwVersionHi;
		unsigned long dwVersionLo;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CCOHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CCOHelper );

		CCOHelper();
		~CCOHelper();

		CCOHelper& operator = ( const CCOHelper& src );

		long CLSIDFromProgID( const wchar_t* lpszProgID, GUID* lpclsid );
		long CLSIDFromProgIDEx( const wchar_t* lpszProgID, GUID* lpclsid );
		long CLSIDFromString( const wchar_t* lpsz, GUID* pclsid );
		long CopyProxy( void* pProxy, void** ppCopy );
		long CreateFreeThreadedMarshaler( void* punkOuter, void** ppunkMarshal );
		long CreateGUID( GUID* pguid );
		bool DosDatTimeToFileTime( unsigned short usDosDate, unsigned short usDosTime, FILETIME* pFileTime );
		long FileTimeNow( FILETIME* pFileTime );
		bool FileTimeToDosDateTime( FILETIME* pFileTime, unsigned short* pDosDate, unsigned short* pDosTime );
		long GetPSClsid( const GUID& riid, GUID* pClsid );
		long GetTreatAsClass( const GUID& clsidOld, GUID* pClsidNew );
		long InstallServer( uClsSpec* pClassSpec, QueryContext* pQuery );
		bool IsHandlerConnected( void* pUnk );
		bool IsOle1Class( const GUID& rclsid );
		void* TaskMemAlloc( Cmp_ulong_ptr cb );
		void TaskMemFree( void* pv );
		void* TaskMemRealloc( void* pv, Cmp_ulong_ptr cb );
		long WaitForMultipleHandles( unsigned long ulFlags, unsigned long ulTimeout, unsigned long cHandles, void** pHandles, unsigned long* pulIndex );
		long FmtIdToPropStgName( const GUID* pfmtid, wchar_t* wszName );
		long FreePropVariantArray( unsigned long cVariants, PropVariant* pVars );
		long GetClassFile( wchar_t* szFilename, GUID* pclsid );
		long IIDFromString( const wchar_t* lpsz, GUID* piid );
		int IsAccelerator( void* phAccel, int cAccelEntries, MSG* pMsg, unsigned short* pwCmd );
		int IsEqualGUID( const GUID& rguid1, const GUID& rguid2 );
		long MonikerCommonPrefixWith( IMoniker* pmkThis, IMoniker* pmkOther, IMoniker** ppmkCommon );
		long MonikerRelativePathTo( IMoniker* pmkSrc, IMoniker* pmkDest, IMoniker** ppmkRelPath );
		long OleConvertIStorageToOLESTREAM( IStorage* pStg, OLEStream* pOLEStream );
		long OleConvertIStorageToOLESTREAMEx( IStorage* pStg, CLIPFORMAT cfFormat, long lWidth, long lHeight, unsigned long ulSize, StgMedium* pmedium, OLEStream* polestm );
		long OleConvertOLESTREAMToIStorage( OLEStream* polestream, IStorage* pstg, const DVTargetDevice* ptd );
		long OleConvertOLESTREAMToIStorageEx( OLEStream* polestm, IStorage* pstg, CLIPFORMAT* pcfFormat, long* plWidth, long* plHeight, unsigned long* pulSize, StgMedium* pmedium );

		long OleSetAutoConvert( const GUID& clsidOld, const GUID& clsidNew );
		long StgCreateStorageEx( const wchar_t* pwcsName, unsigned long grfMode, unsigned long stgfmt, unsigned long grfAttrs, STGOPTIONS* pStgOptions, SECURITY_DESCRIPTOR** pSecurityDescriptor, const GUID& riid, void** ppObjectOpen );
		long StgIsStorageFile( const wchar_t* pwcsName );
		long StgOpenStorageEx( const wchar_t* pwcsName, unsigned long grfMode, unsigned long stgfmt, unsigned long grfAttrs, STGOPTIONS* pStgOptions, void* reserved2, const GUID& riid, void** ppObjectOpen );
		unsigned long StgPropertyLengthAsVariant( const SERIALIZEDPROPERTYVALUE* pProp, unsigned long cbProp, unsigned short CodePage );
		long StgSetTimes( wchar_t const* lpszName, FILETIME const* pctime, FILETIME const* patime, FILETIME const* pmtime );
		long StringFromCLSID( const GUID& rclsid, wchar_t** ppsz );
		int StringFromGUID2( const GUID& rguid, wchar_t* lpsz, int cchMax );
		long StringFromIID( const GUID& rclsid, wchar_t** ppsz );
		long ProgIDFromCLSID( const GUID& clsid, wchar_t** ppszProgID );
		void* OleMetafilePictFromIconAndLabel( CIcon::refType Icon, wchar_t* lpszLabel, wchar_t* lpszSourceFile, unsigned int iIconIndex );
		void* OleGetIconOfFile( wchar_t* lpszPath, bool bUseFileAsLabel );
		void* OleGetIconOfClass( const GUID& rclsid, wchar_t* lpszLabel, bool bUseTypeAsLabel );
		long OleGetAutoConvert( const GUID& clsidOld, GUID* pClsidNew );
		void* OleDuplicateData( void* hSrc, CLIPFORMAT cfFormat, unsigned int uiFlags );
		long OleDraw( IUnknown* pUnknown, unsigned long dwAspect, CDeviceContext::refType dcDraw, const RECT* lprcBounds );
		long OleCreateStaticFromData( IDataObject* pSrcDataObj, const GUID& iid, unsigned long renderopt, FormatEtc* pFormatEtc, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj );
		long RegisterServer( CDll& Module, const GUID& clsid, const TCHAR* szFriendlyName );
		long UnregisterServer( const GUID& clsid );
		long RegisterSnapin( const GUID& clsid, const TCHAR* szNameString, const GUID& clsidAbout, const TCHAR* szProvider, const bool bSupportExtensions );
		long UnregisterSnapin( const GUID& clsid );
		long GetMalloc( unsigned long ulMemContext, void** ppMalloc );

	protected:

		nsWinQAPI::COLE32& m_Library;

	private:

		bool SetSnapinKeyAndValue( const TCHAR* szKey, const TCHAR* szSubkey, const TCHAR* szName, const TCHAR* szValue );

		CCOHelper( const CCOHelper& );
	};

}//nsWin32

#endif//WINQL_COM_COHELPER_H_3
