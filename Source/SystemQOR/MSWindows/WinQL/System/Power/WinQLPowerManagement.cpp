//WinQLPowerManagement.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR/System.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/Power/WinQLPowerManagement.h"
#include "WinQL/System/Devices/WinQLIODevice.h"
#include "WinQL/System/Devices/Instances/WinQLDeviceInstance.h"
#include "WinQAPI/User32.h"
#include "WinQAPI/PowerProf.h"
#include "WinQL/System/WinQLSystem.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CAdvancedPowerHelper );

	//--------------------------------------------------------------------------------
	CAdvancedPowerHelper::CAdvancedPowerHelper() : m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::CAdvancedPowerHelper" );

	}

	//--------------------------------------------------------------------------------
	CAdvancedPowerHelper::CAdvancedPowerHelper( const CAdvancedPowerHelper& src ) : m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::CAdvancedPowerHelper" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CAdvancedPowerHelper& CAdvancedPowerHelper::operator = ( const CAdvancedPowerHelper& src )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::operator =" );
		if( &src != this )
		{
		}

		return *this;
	}

	//--------------------------------------------------------------------------------
	CAdvancedPowerHelper::~CAdvancedPowerHelper()
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::~CAdvancedPowerHelper" );
	}

	//--------------------------------------------------------------------------------
	long CAdvancedPowerHelper::CallNtPowerInformation( ePower_Information_Level InformationLevel, void* pInputBuffer, unsigned long ulInputBufferSize, void* pOutputBuffer, unsigned long ulOutputBufferSize )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::CallNtPowerInformation" );
		long lStatus = m_Library.CallNtPowerInformation( static_cast< ::POWER_INFORMATION_LEVEL >( InformationLevel ), pInputBuffer, ulInputBufferSize, pOutputBuffer, ulOutputBufferSize );
		return lStatus;
	}

	//--------------------------------------------------------------------------------
	ePowerPlatformRole CAdvancedPowerHelper::GetPlatformRole()
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::GetPlatformRole" );
		return static_cast< ePowerPlatformRole >( m_Library.PowerDeterminePlatformRole() );
	}

	//--------------------------------------------------------------------------------
	bool CAdvancedPowerHelper::CanUserWriteAPowerScheme()
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::CanUserWriteScheme" );
		return m_Library.CanUserWritePwrScheme() ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CAdvancedPowerHelper::IsHibernateAllowed( void )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::IsHibernateAllowed" );
		return m_Library.IsPwrHibernateAllowed() ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CAdvancedPowerHelper::IsShutdownAllowed( void )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::IsShutdownAllowed" );
		return m_Library.IsPwrShutdownAllowed() ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CAdvancedPowerHelper::IsSuspendAllowed( void )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::IsShutdownAllowed" );
		return m_Library.IsPwrSuspendAllowed() ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CAdvancedPowerHelper::IsSystemResumeAutomatic( void )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::IsSystemResumeAutomatic" );
		return m_Library.IsSystemResumeAutomatic() ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CAdvancedPowerHelper::GetCurrentPowerPolicies( Global_Power_Policy* pGlobalPowerPolicy, Power_Policy* pPowerPolicy )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::GetCurrentPowerPolicies" );
		return m_Library.GetCurrentPowerPolicies( reinterpret_cast< ::PGLOBAL_POWER_POLICY >( pGlobalPowerPolicy ), reinterpret_cast< ::PPOWER_POLICY >( pPowerPolicy ) ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CAdvancedPowerHelper::GetPwrCapabilities( System_Power_Capabilities* lpSystemPowerCapabilities )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::GetPwrCapabilities" );
		return m_Library.GetPwrCapabilities( reinterpret_cast< ::PSYSTEM_POWER_CAPABILITIES >( lpSystemPowerCapabilities ) ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CAdvancedPowerHelper::GetDiskSpindownRange( unsigned int* pRangeMax, unsigned int* pRangeMin )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::GetDiskSpindownRange" );
		return m_Library.GetPwrDiskSpindownRange( pRangeMax, pRangeMin ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CAdvancedPowerHelper::CanRestoreIndividualDefaultPowerScheme( const nsCodeQOR::mxGUID* pSchemeGuid )
	{
		_WINQ_FCONTEXT( "CAdvancedPowerHelper::CanRestoreIndividualDefaultPowerScheme" );
		return( m_Library.PowerCanRestoreIndividualDefaultPowerScheme( reinterpret_cast< const ::GUID* >( pSchemeGuid ) ) == 0 ? true : false );
	}




	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CPowerRequest );

	//--------------------------------------------------------------------------------
	CPowerRequest::CPowerRequest( wchar_t* wszReason ) : m_Library( CPowerProf::Instance() )
	, m_Handle( 0 )
	{
		_WINQ_FCONTEXT( "CPowerRequest::CPowerRequest" );
		m_Reason_Context.Version = POWER_REQUEST_CONTEXT_VERSION;
		m_Reason_Context.Flags = static_cast< unsigned long >( Simple );
		m_Reason_Context.Reason.SimpleReasonString = wszReason;
		m_Handle = m_Library.PowerCreateRequest( reinterpret_cast< PREASON_CONTEXT >( &m_Reason_Context ) );
		m_Handle.Attach( this );
	}

	//--------------------------------------------------------------------------------
	CPowerRequest::CPowerRequest( Reason_Context::Detail Reason ) : m_Library( CPowerProf::Instance() )
	, m_Handle( 0 )
	{
		_WINQ_FCONTEXT( "CPowerRequest::CPowerRequest" );
		m_Reason_Context.Version = POWER_REQUEST_CONTEXT_VERSION;
		m_Reason_Context.Flags = static_cast< unsigned long >( Detailed );
		m_Reason_Context.Reason.Detailed = Reason;
		m_Handle = m_Library.PowerCreateRequest( reinterpret_cast< PREASON_CONTEXT >( &m_Reason_Context ) );
		m_Handle.Attach( this );
	}

	//--------------------------------------------------------------------------------
	CPowerRequest::CPowerRequest( const CPowerRequest& src ) : m_Library( src.m_Library )
	, m_Handle( src.m_Handle )
	{
		_WINQ_FCONTEXT( "CPowerRequest::CPowerRequest" );
		m_Handle.Attach( this );
		m_Reason_Context = src.m_Reason_Context;
	}

	//--------------------------------------------------------------------------------
	CPowerRequest& CPowerRequest::operator = ( const CPowerRequest& src )
	{
		_WINQ_FCONTEXT( "CPowerRequest::operator =" );
		if( &src != this )
		{
			m_Reason_Context = src.m_Reason_Context;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	bool CPowerRequest::Clear( ePower_Request_Type RequestType )
	{
		_WINQ_FCONTEXT( "CPowerRequest::Clear" );
		bool bResult = m_Library.PowerClearRequest( m_Handle.Use(), static_cast< ::POWER_REQUEST_TYPE >( RequestType ) ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CPowerRequest::Set( ePower_Request_Type RequestType )
	{
		_WINQ_FCONTEXT( "CPowerRequest::Set" );
		bool bResult = m_Library.PowerSetRequest( m_Handle.Use(), static_cast< ::POWER_REQUEST_TYPE >( RequestType ) ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CPowerRequest::~CPowerRequest()
	{
		_WINQ_FCONTEXT( "CPowerRequest::~CPowerRequest" );
	}




	__QOR_IMPLEMENT_OCLASS_LUID( CPowerSetting );

	//--------------------------------------------------------------------------------
	CPowerSetting::CPowerSetting() : m_pParent( 0 )
	{
		_WINQ_FCONTEXT( "CPowerSetting::CPowerSetting" );
	}

	//--------------------------------------------------------------------------------
	CPowerSetting::CPowerSetting( CPowerSettingCollection* pParent, nsCodeQOR::mxGUID guid ) : m_pParent( pParent )
	,	m_GUID( guid )
	{
		_WINQ_FCONTEXT( "CPowerSetting::CPowerSetting" );
	}

	//--------------------------------------------------------------------------------
	CPowerSetting::CPowerSetting( const CPowerSetting& src )
	{
		_WINQ_FCONTEXT( "CPowerSetting::CPowerSetting" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CPowerSetting& CPowerSetting::operator = ( const CPowerSetting& src )
	{
		_WINQ_FCONTEXT( "CPowerSetting::operator =" );
		if( &src != this )
		{
			m_GUID = src.m_GUID;
			m_pParent = src.m_pParent;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CPowerSetting::~CPowerSetting()
	{
		_WINQ_FCONTEXT( "CPowerSetting::~CPowerSetting" );
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::mxGUID& CPowerSetting::GetGUID( void ) const
	{
		_WINQ_FCONTEXT( "CPowerSetting::GetGUID" );
		return m_GUID;
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerSetting::ReadDCValueIndex()
	{
		_WINQ_FCONTEXT( "CPowerSetting::ReadDCValueIndex" );
		unsigned long ulDCValueIndex = 0;
		if( m_pParent && m_pParent->m_pParent )
		{
			m_pParent->m_Library.PowerReadDCValueIndex(
				0, reinterpret_cast< const ::GUID* >( &( m_pParent->m_pParent->GetGUID() ) ),
				reinterpret_cast< const ::GUID* >( &( m_pParent->GetGUID() ) ), 
				reinterpret_cast< const ::GUID* >( &m_GUID ), &ulDCValueIndex );
		}
		return ulDCValueIndex;
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerSetting::ReadDCDefaultIndex()
	{
		_WINQ_FCONTEXT( "CPowerSetting::ReadDCDefaultIndex" );
		unsigned long ulDCDefaultIndex = 0;
		if( m_pParent && m_pParent->m_pParent )
		{
			m_pParent->m_Library.PowerReadDCValueIndex(
				0, reinterpret_cast< const ::GUID* >( &( m_pParent->m_pParent->GetGUID() ) ),
				reinterpret_cast< const ::GUID* >( &( m_pParent->GetGUID() ) ), 
				reinterpret_cast< const ::GUID* >( &m_GUID ), &ulDCDefaultIndex );
		}
		return ulDCDefaultIndex;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< byte > CPowerSetting::ReadDCValue( unsigned long& ulType, unsigned long& ulBufferSize )
	{
		_WINQ_FCONTEXT( "CPowerSetting::ReadDCValue" );
		ulType = 0;
		ulBufferSize = 0;
		CString< byte > ValueBuffer;
		if( m_pParent )
		{
			m_pParent->m_Library.PowerReadDCValue( 
				0, reinterpret_cast< const ::GUID* >( &( m_pParent->m_pParent->GetGUID() ) ),
				reinterpret_cast< const ::GUID* >( &( m_pParent->GetGUID() ) ),
				reinterpret_cast< const ::GUID* >( &m_GUID ), &ulType, 0, &ulBufferSize );

			m_pParent->m_Library.PowerReadDCValue( 
				0, reinterpret_cast< const ::GUID* >( &( m_pParent->m_pParent->GetGUID() ) ), 
				reinterpret_cast< const ::GUID* >( &( m_pParent->GetGUID() ) ),
				reinterpret_cast< const ::GUID* >( &m_GUID ),
				&ulType, reinterpret_cast< ::LPBYTE >( ValueBuffer.GetBufferSetLength( static_cast< unsigned short >( ulBufferSize + 1 ) ) ), &ulBufferSize );

			ValueBuffer.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
		}
		nsCodeQOR::CTLRef< byte > Result( ValueBuffer.DetachBuffer() );
		return Result;
	}

	//--------------------------------------------------------------------------------
	CWString CPowerSetting::ReadDescription()
	{
		_WINQ_FCONTEXT( "CPowerSetting::ReadDescription" );
		CWString strDescription;
		if( m_pParent && m_pParent->m_pParent )
		{
			unsigned long ulBufferSize = 0;
			m_pParent->m_Library.PowerReadFriendlyName(
				0, reinterpret_cast< const ::GUID* >( &( m_pParent->m_pParent->GetGUID() ) ),
				reinterpret_cast< const ::GUID* >( &( m_pParent->GetGUID() ) ), 
				reinterpret_cast< const ::GUID* >( &m_GUID ), 0, &ulBufferSize );

			m_pParent->m_Library.PowerReadFriendlyName(
				0, reinterpret_cast< const ::GUID* >( &( m_pParent->m_pParent->GetGUID() ) ),
				reinterpret_cast< const ::GUID* >( &( m_pParent->GetGUID() ) ), 
				reinterpret_cast< const ::GUID* >( &m_GUID ), 
				reinterpret_cast< ::PUCHAR >( strDescription.GetBufferSetLength( static_cast< unsigned short >( ( ulBufferSize / 2 ) + 2 ) ) ), &ulBufferSize );
			strDescription.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
		}
		return strDescription;
	}

	//--------------------------------------------------------------------------------
	CWString CPowerSetting::ReadFriendlyName()
	{
		_WINQ_FCONTEXT( "CPowerSetting::ReadFriendlyName" );
		CWString strFriendlyName;
		if( m_pParent && m_pParent->m_pParent )
		{
			unsigned long ulBufferSize = 0;
			m_pParent->m_Library.PowerReadFriendlyName(
				0, reinterpret_cast< const ::GUID* >( &( m_pParent->m_pParent->GetGUID() ) ),
				reinterpret_cast< const ::GUID* >( &( m_pParent->GetGUID() ) ), 
				reinterpret_cast< const ::GUID* >( &m_GUID ), 0, &ulBufferSize );

			m_pParent->m_Library.PowerReadFriendlyName(
				0, reinterpret_cast< const ::GUID* >( &( m_pParent->m_pParent->GetGUID() ) ),
				reinterpret_cast< const ::GUID* >( &( m_pParent->GetGUID() ) ), 
				reinterpret_cast< const ::GUID* >( &m_GUID ), 
				reinterpret_cast< ::PUCHAR >( strFriendlyName.GetBufferSetLength( static_cast< unsigned short >( ( ulBufferSize / 2 ) + 2 ) ) ), &ulBufferSize );
			strFriendlyName.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
		}
		return strFriendlyName;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< byte > CPowerSetting::ReadIconResourceSpecifier()
	{
		_WINQ_FCONTEXT( "CPowerSetting::ReadIconResourceSpecifier" );
		nsCodeQOR::CTLRef< byte > Result;
		if( m_pParent && m_pParent->m_pParent )
		{
			unsigned long ulBufferSize = 0;
			CString< byte > ValueBuffer;
			m_pParent->m_Library.PowerReadIconResourceSpecifier(
				0, reinterpret_cast< const ::GUID* >( &( m_pParent->m_pParent->GetGUID() ) ),
				reinterpret_cast< const ::GUID* >( &( m_pParent->GetGUID() ) ), 
				reinterpret_cast< const ::GUID* >( &m_GUID ), 0, &ulBufferSize );

			if( ulBufferSize != 0 )
			{
				m_pParent->m_Library.PowerReadIconResourceSpecifier(
					0, reinterpret_cast< const ::GUID* >( &( m_pParent->m_pParent->GetGUID() ) ),
					reinterpret_cast< const ::GUID* >( &( m_pParent->GetGUID() ) ), 
					reinterpret_cast< const ::GUID* >( &m_GUID ), ValueBuffer.GetBufferSetLength( static_cast< unsigned short >( ulBufferSize ) ), &ulBufferSize );
				ValueBuffer.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
				Result = ValueBuffer.DetachBuffer();
			}
		}
		return Result;
	}

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CPowerSettingCollection );

	//--------------------------------------------------------------------------------
	CPowerSettingCollection::CPowerSettingCollection() : nsCodeQOR::CTArray< CPowerSetting, CPolicy >()
	,	m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerSettingCollection::CPowerSettingCollection" );
		m_pParent = 0;
		m_iSubGroup = -1;
	}

	//--------------------------------------------------------------------------------
	CPowerSettingCollection::CPowerSettingCollection( const CPowerSettingCollection& src ) : nsCodeQOR::CTArray< CPowerSetting, CPolicy >()
	,	m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerSettingCollection::CPowerSettingCollection" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CPowerSettingCollection& CPowerSettingCollection::operator = ( const CPowerSettingCollection& src )
	{
		_WINQ_FCONTEXT( "CPowerSettingCollection::operator =" );
		if( &src != this )
		{
			m_GUID = src.m_GUID;
			m_pParent = src.m_pParent;
			m_iSubGroup = src.m_iSubGroup;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CPowerSettingCollection::~CPowerSettingCollection()
	{
		_WINQ_FCONTEXT( "CPowerSettingCollection::~CPowerSettingCollection" );
	}

	//--------------------------------------------------------------------------------
	void CPowerSettingCollection::Init( CPowerScenario* pParent, int iSubGroupID, nsCodeQOR::mxGUID guid )
	{
		_WINQ_FCONTEXT( "CPowerSettingCollection::Init" );
		if( m_pParent != pParent || m_iSubGroup != iSubGroupID )
		{
			m_pParent = pParent;
			m_iSubGroup = iSubGroupID;
			m_GUID = guid;
			if( m_pParent )
			{
				unsigned long ulIndex = 0;
				unsigned long ulBufferSize = 0;
				unsigned long ulError = 0;
				CString< byte > SettingBuffer;
				while( ulError == 0 )
				{
					m_Library.PowerEnumerate( 0, reinterpret_cast< const ::GUID* >( &(m_pParent->GetGUID()) ), reinterpret_cast< const ::GUID* >( &m_GUID ), ACCESS_INDIVIDUAL_SETTING, ulIndex, 0, &ulBufferSize );
					ulError = m_Library.PowerEnumerate( 0, reinterpret_cast< const ::GUID* >( &(m_pParent->GetGUID()) ), reinterpret_cast< const ::GUID* >( &m_GUID ), ACCESS_INDIVIDUAL_SETTING, ulIndex, 
						SettingBuffer.GetBufferSetLength( static_cast< unsigned short >( ulBufferSize + 1 ) ), &ulBufferSize );
					SettingBuffer.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
					if( ulBufferSize == sizeof( ::GUID ) )
					{
						nsCodeQOR::__mxGUID aguid = * ( reinterpret_cast< nsCodeQOR::mxGUID* >( SettingBuffer.GetBuffer() ) );
						SettingBuffer.ReleaseBuffer();					
						CPowerSetting PowerSetting( this, aguid );
						Append( PowerSetting );
					}
					ulIndex++;
				}
			}
		}
	}
		
	//--------------------------------------------------------------------------------
	nsCodeQOR::mxGUID& CPowerSettingCollection::GetGUID( void ) const
	{
		_WINQ_FCONTEXT( "CPowerSettingCollection::GetGUID" );
		return m_GUID;
	}




	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CPowerScenario );

	//--------------------------------------------------------------------------------
	nsCodeQOR::mxGUID CPowerScenario::SubGroupOfPowerSettingsGuids[ 8 ] = 
	{
		{ 0xfea3413e, 0x7e05, 0x4911, { 0x9a, 0x71, 0x70, 0x03, 0x31, 0xf1, 0xc2, 0x94 } },	//NO_SUBGROUP_GUID
		{ 0x0012ee47, 0x9041, 0x4b5d, { 0x9b, 0x77, 0x53, 0x5f, 0xba, 0x8b, 0x14, 0x42 } },	//GUID_DISK_SUBGROUP
		{ 0x4f971e89, 0xeebd, 0x4455, { 0xa8, 0xde, 0x9e, 0x59, 0x04, 0x0e, 0x73, 0x47 } },	//GUID_SYSTEM_BUTTON_SUBGROUP
		{ 0x54533251, 0x82be, 0x4824, { 0x96, 0xc1, 0x47, 0xb6, 0x0b, 0x74, 0x0d, 0x00 } },	//GUID_PROCESSOR_SETTINGS_SUBGROUP
		{ 0x7516b95f, 0xf776, 0x4464, { 0x8c, 0x53, 0x06, 0x16, 0x7f, 0x40, 0xcc, 0x99 } },	//GUID_VIDEO_SUBGROUP
		{ 0xe73a048d, 0xbf27, 0x4f12, { 0x97, 0x31, 0x8b, 0x20, 0x76, 0xe8, 0x89, 0x1f } },	//GUID_BATTERY_SUBGROUP
		{ 0x238C9FA8, 0x0AAD, 0x41ED, { 0x83, 0xF4, 0x97, 0xBE, 0x24, 0x2C, 0x8F, 0x20 } },	//GUID_SLEEP_SUBGROUP
		{ 0x501a4d13, 0x42af, 0x4429, { 0x9f, 0xd1, 0xa8, 0x21, 0x8c, 0x26, 0x8e, 0x20 } }	//GUID_PCIEXPRESS_SETTINGS_SUBGROUP
	};

	//--------------------------------------------------------------------------------
	CPowerScenario::CPowerScenario() : m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerScenario::CPowerScenario" );
	}

	//--------------------------------------------------------------------------------
	CPowerScenario::CPowerScenario( nsCodeQOR::mxGUID guid ) : m_Library( CPowerProf::Instance() )
	,	m_GUID( guid )
	{
		_WINQ_FCONTEXT( "CPowerScenario::CPowerScenario" );
	}

	//--------------------------------------------------------------------------------
	CPowerScenario::CPowerScenario( const CPowerScenario& src ) : m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerScenario::CPowerScenario" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CPowerScenario& CPowerScenario::operator = ( const CPowerScenario& src )
	{
		_WINQ_FCONTEXT( "CPowerScenario::CPowerScenario" );
		m_GUID = src.m_GUID;
		return *this;
	}

	//--------------------------------------------------------------------------------
	CPowerScenario::~CPowerScenario()
	{
		_WINQ_FCONTEXT( "CPowerScenario::~CPowerScenario" );
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::mxGUID& CPowerScenario::GetGUID( void ) const
	{
		_WINQ_FCONTEXT( "CPowerScenario::GetGUID" );
		return m_GUID;
	}

	//--------------------------------------------------------------------------------
	bool CPowerScenario::CanRestoreIndividualDefault()
	{
		_WINQ_FCONTEXT( "CPowerScenario::CanRestoreIndividualDefault" );
		return m_Library.PowerCanRestoreIndividualDefaultPowerScheme( reinterpret_cast< const ::GUID* >( &m_GUID ) ) ? false : true;
	}

	//--------------------------------------------------------------------------------
	bool CPowerScenario::Delete()
	{
		_WINQ_FCONTEXT( "CPowerScenario::Delete" );
		return m_Library.PowerDeleteScheme( 0, reinterpret_cast< const ::GUID* >( &m_GUID ) ) ? false : true;
	}

	//--------------------------------------------------------------------------------
	CPowerScenario::refType CPowerScenario::Duplicate()
	{
		_WINQ_FCONTEXT( "CPowerScenario::Duplicate" );

		CPowerScenario* pPowerScenario = 0;
		::GUID* pDestinationSchemeGuid = 0;
		if( m_Library.PowerDuplicateScheme( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), &pDestinationSchemeGuid ) == 0 )
		{
			nsCodeQOR::__mxGUID guid = *( reinterpret_cast< nsCodeQOR::mxGUID* >( pDestinationSchemeGuid ) );
			pPowerScenario = new CPowerScenario( guid );
		}
		CPowerScenario::refType Result( pPowerScenario, true );
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerScenario::ReadACDefaultIndex( CPowerScenario::eSubGroup SubGroup, nsCodeQOR::mxGUID* pPowerSettingGuid )
	{
		_WINQ_FCONTEXT( "CPowerScenario::ReadACDefaultIndex" );
		unsigned long ulResult = 0;
		m_Library.PowerReadACDefaultIndex( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ), reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), &ulResult );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerScenario::ReadDCDefaultIndex( CPowerScenario::eSubGroup SubGroup, nsCodeQOR::mxGUID* pPowerSettingGuid  )
	{
		_WINQ_FCONTEXT( "CPowerScenario::ReadDCDefaultIndex" );
		unsigned long ulResult = 0;
		m_Library.PowerReadDCDefaultIndex( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ), reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), &ulResult );
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef < byte > CPowerScenario::ReadACValue( CPowerScenario::eSubGroup SubGroup, nsCodeQOR::mxGUID* pPowerSettingGuid, unsigned long& ulType, unsigned long& ulBufferSize )
	{
		_WINQ_FCONTEXT( "CPowerScenario::ReadACValue" );
		ulType = 0;
		ulBufferSize = 0;
		CString< byte > ValueBuffer;
		m_Library.PowerReadACValue( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), &ulType, 0, &ulBufferSize );

		m_Library.PowerReadACValue( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), &ulType, reinterpret_cast< ::LPBYTE >( ValueBuffer.GetBufferSetLength( static_cast< unsigned short >( ulBufferSize + 1 ) ) ), &ulBufferSize );

		ValueBuffer.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
		nsCodeQOR::CTLRef< byte > Result( ValueBuffer.DetachBuffer() );
		return Result;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< byte > CPowerScenario::ReadDCValue( CPowerScenario::eSubGroup SubGroup, nsCodeQOR::mxGUID* pPowerSettingGuid, unsigned long& ulType, unsigned long& ulBufferSize )
	{
		_WINQ_FCONTEXT( "CPowerScenario::ReadDCValue" );
		ulType = 0;
		ulBufferSize = 0;
		CString< byte > ValueBuffer;
		m_Library.PowerReadDCValue( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), &ulType, 0, &ulBufferSize );

		m_Library.PowerReadDCValue( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), &ulType, reinterpret_cast< ::LPBYTE >( ValueBuffer.GetBufferSetLength( static_cast< unsigned short >( ulBufferSize + 1 ) ) ), &ulBufferSize );

		ValueBuffer.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
		nsCodeQOR::CTLRef< byte > Result( ValueBuffer.DetachBuffer() );
		return Result;
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerScenario::ReadACValueIndex( CPowerScenario::eSubGroup SubGroup, nsCodeQOR::mxGUID* pPowerSettingGuid )
	{
		_WINQ_FCONTEXT( "CPowerScenario::ReadACValueIndex" );
		unsigned long ulAcValueIndex = 0;
		m_Library.PowerReadACValueIndex( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), &ulAcValueIndex );
		return ulAcValueIndex;
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerScenario::ReadDCValueIndex( CPowerScenario::eSubGroup SubGroup, nsCodeQOR::mxGUID* pPowerSettingGuid )
	{
		_WINQ_FCONTEXT( "CPowerScenario::ReadDCValueIndex" );
		unsigned long ulDcValueIndex = 0;
		m_Library.PowerReadDCValueIndex( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), &ulDcValueIndex );
		return ulDcValueIndex;
	}

	//--------------------------------------------------------------------------------
	CAString CPowerScenario::ReadDescription( eSubGroup SubGroup, nsCodeQOR::mxGUID* pPowerSettingGuid )
	{
		_WINQ_FCONTEXT( "CPowerScenario::ReadDescription" );
		CAString strDescription;
		unsigned long ulBufferSize = 0;
		m_Library.PowerReadDescription( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), 0, &ulBufferSize );
		m_Library.PowerReadDescription( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), reinterpret_cast< ::UCHAR* >( strDescription.GetBufferSetLength( static_cast< unsigned short >( ulBufferSize + 1 ) ) ), &ulBufferSize );
		strDescription.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
		return strDescription;
	}

	//--------------------------------------------------------------------------------
	CAString CPowerScenario::ReadFriendlyName( eSubGroup SubGroup, nsCodeQOR::mxGUID* pPowerSettingGuid )
	{
		_WINQ_FCONTEXT( "CPowerScenario::ReadFriendlyName" );
		CAString strDescription;
		unsigned long ulBufferSize = 0;
		m_Library.PowerReadFriendlyName( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), 0, &ulBufferSize );
		m_Library.PowerReadFriendlyName( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), reinterpret_cast< ::UCHAR* >( strDescription.GetBufferSetLength( static_cast< unsigned short >( ulBufferSize + 1 ) ) ), &ulBufferSize );
		strDescription.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
		return strDescription;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< byte > CPowerScenario::ReadIconResourceSpecifier( eSubGroup SubGroup, nsCodeQOR::mxGUID* pPowerSettingGuid )
	{
		_WINQ_FCONTEXT( "CPowerScenario::ReadIconResourceSpecifier" );
		unsigned long ulBufferSize = 0;
		CString< byte > ValueBuffer;
		m_Library.PowerReadIconResourceSpecifier( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), 0, &ulBufferSize );

		m_Library.PowerReadIconResourceSpecifier( 0, reinterpret_cast< const ::GUID* >( &m_GUID ), reinterpret_cast< const ::GUID* >( &SubGroupOfPowerSettingsGuids[ SubGroup ] ),
			reinterpret_cast< const ::GUID* >( pPowerSettingGuid ), reinterpret_cast< ::LPBYTE >( ValueBuffer.GetBufferSetLength( static_cast< unsigned short >( ulBufferSize + 1 ) ) ), &ulBufferSize );

		ValueBuffer.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
		nsCodeQOR::CTLRef< byte > Result( ValueBuffer.DetachBuffer() );
		return Result;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CPowerSettingCollection > CPowerScenario::SubGroup( CPowerScenario::eSubGroup Group )
	{
		_WINQ_FCONTEXT( "CPowerScenario::SubGroup" );
		nsCodeQOR::CTLRef< CPowerSettingCollection > Result( &( m_SubGroups[ Group ].operator()() ), false );
		Result->Init( this, Group, SubGroupOfPowerSettingsGuids[ Group ] );
		return Result;
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CPowerScheme );

	//--------------------------------------------------------------------------------
	CPowerScheme::CPowerScheme()
	{
		_WINQ_FCONTEXT( "CPowerScheme::CPowerScheme" );
		m_uiIndex = (unsigned int)(-1);
	}

	//--------------------------------------------------------------------------------
	CPowerScheme::CPowerScheme( unsigned int uiIndex, CWString strName, CWString strDescription, Power_Policy& Policy )
	{
		_WINQ_FCONTEXT( "CPowerScheme::CPowerScheme" );
		m_uiIndex = uiIndex;
		m_strName = strName;
		m_strDescription = strDescription;
		m_Policy = Policy;
	}

	//--------------------------------------------------------------------------------
	CPowerScheme::CPowerScheme( const CPowerScheme& src )
	{
		_WINQ_FCONTEXT( "CPowerScheme::CPowerScheme" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CPowerScheme& CPowerScheme::operator = ( const CPowerScheme& src )
	{
		_WINQ_FCONTEXT( "CPowerScheme::operator =" );
		if( &src != this )
		{
			m_uiIndex = src.m_uiIndex;
			m_strName = src.m_strName;
			m_strDescription = src.m_strDescription;
			m_Policy = src.m_Policy;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CPowerScheme::~CPowerScheme()
	{
		_WINQ_FCONTEXT( "CPowerScheme::~CPowerScheme" );
	}

	//--------------------------------------------------------------------------------
	unsigned int CPowerScheme::GetIndex( void )
	{
		_WINQ_FCONTEXT( "CPowerScheme::GetIndex" );
		return m_uiIndex;
	}

	//--------------------------------------------------------------------------------
	CWString CPowerScheme::GetName( void )
	{
		_WINQ_FCONTEXT( "CPowerScheme::GetName" );
		return m_strName;
	}

	//--------------------------------------------------------------------------------
	CWString CPowerScheme::GetDescription( void )
	{
		_WINQ_FCONTEXT( "CPowerScheme::GetDescription" );
		return m_strDescription;
	}

	//--------------------------------------------------------------------------------
	Power_Policy& CPowerScheme::GetPolicy( void )
	{
		_WINQ_FCONTEXT( "CPowerScheme::GetPolicy" );
		return m_Policy;
	}

	//--------------------------------------------------------------------------------
	bool CPowerScheme::Write( void )
	{
		_WINQ_FCONTEXT( "CPowerScheme::Write" );
		bool bResult = CPowerProf::Instance().WritePwrScheme( &m_uiIndex, m_strName.GetBuffer(), m_strDescription.GetBuffer(), reinterpret_cast< ::PPOWER_POLICY >( &m_Policy ) ) ? true : false;
		m_strName.ReleaseBuffer();
		m_strDescription.ReleaseBuffer();
		return bResult;
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CPowerDevice );

	//--------------------------------------------------------------------------------
	CPowerDevice::CPowerDevice() : m_pDevice( 0 )
	,	m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerDevice::CPowerDevice" );
	}

	//--------------------------------------------------------------------------------
	CPowerDevice::CPowerDevice( const CPowerDevice& src ) :	m_pDevice( 0 )
	,	m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerDevice::CPowerDevice" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CPowerDevice& CPowerDevice::operator = ( const CPowerDevice& src )
	{
		_WINQ_FCONTEXT( "CPowerDevice::operator=" );
		if( &src != this )
		{
			SetName( src.m_strName );
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CPowerDevice::~CPowerDevice()
	{
		_WINQ_FCONTEXT( "CPowerDevice::~CPowerDevice" );
	}

	//--------------------------------------------------------------------------------
	void CPowerDevice::SetID( const CWString& strID )
	{
		_WINQ_FCONTEXT( "CPowerDevice::SetName" );
		m_strID = strID;		
	}

	//--------------------------------------------------------------------------------
	void CPowerDevice::SetName( const CWString& strName )
	{
		_WINQ_FCONTEXT( "CPowerDevice::SetName" );
		m_strName = strName;		
	}

	//--------------------------------------------------------------------------------
	void CPowerDevice::SetDevice( CDeviceInstance* pDevice )
	{
		_WINQ_FCONTEXT( "CPowerDevice::SetDevice" );
		m_pDevice = pDevice;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CDeviceInstance > CPowerDevice::Instance( void )
	{
		_WINQ_FCONTEXT( "CPowerDevice::Instance" );
		nsCodeQOR::CTLRef< CDeviceInstance > Result( m_pDevice, false );
		return Result;
	}
	
	/*
	//--------------------------------------------------------------------------------
	bool CPowerDevice::GetState( int& fOn )
	{
		_WINQ_FCONTEXT( "CPowerDevice::GetState" );
		bool bResult = false;
		AcquireDevice();
		if( m_pDevice )
		{
			bResult = m_PowerHelper.GetDevicePowerState( m_pDevice->Handle(), fOn );
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CPowerDevice::CancelWakeupRequest( void )
	{
		_WINQ_FCONTEXT( "CPowerDevice::CancelWakeupRequest" );
		bool bResult = false;
		AcquireDevice();
		if( m_pDevice )
		{
			bResult = m_PowerHelper.CancelDeviceWakeupRequest( m_pDevice->Handle() );
		}
		return bResult;
	}
	*/

	//--------------------------------------------------------------------------------
	void CPowerDevice::SetPowerData( nsCodeQOR::CTLRef< CM_Power_Data > Ref )
	{
		_WINQ_FCONTEXT( "CPowerDevice::SetPowerData" );
		m_PowerRef = Ref;
	}

	//--------------------------------------------------------------------------------
	eDevice_Power_State CPowerDevice::GetMostRecentPowerState()
	{
		return ( !m_PowerRef.IsNull() ? m_PowerRef->PD_MostRecentPowerState : PowerDeviceUnspecified );
	}

	//--------------------------------------------------------------------------------
	eDevice_Power_State CPowerDevice::GetPowerStateMapping( eSystem_Power_State PowerState )
	{
		return ( !m_PowerRef.IsNull() ? m_PowerRef->PD_PowerStateMapping[ PowerState ] : PowerDeviceUnspecified );
	}

	//--------------------------------------------------------------------------------
	eSystem_Power_State CPowerDevice::GetDeepestSystemWake()
	{
		return ( !m_PowerRef.IsNull() ? m_PowerRef->PD_DeepestSystemWake : PowerSystemUnspecified );
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerDevice::GetD1Latency()
	{
		return ( !m_PowerRef.IsNull() ? m_PowerRef->PD_D1Latency : (unsigned long)(-1) );
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerDevice::GetD2Latency()
	{
		return ( !m_PowerRef.IsNull() ? m_PowerRef->PD_D2Latency : (unsigned long)(-1) );
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerDevice::GetD3Latency()
	{
		return ( !m_PowerRef.IsNull() ? m_PowerRef->PD_D3Latency : (unsigned long)(-1) );
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerDevice::Capabilities()
	{
		return ( !m_PowerRef.IsNull() ? m_PowerRef->PD_Capabilities : 0 );
	}

	//--------------------------------------------------------------------------------
	bool CPowerDevice::D0_Supported()
	{
		return ( !m_PowerRef.IsNull() && ( m_PowerRef->PD_Capabilities & PDCAP_D0_SUPPORTED ) );
	}

	//--------------------------------------------------------------------------------
	bool CPowerDevice::D1_Supported()
	{
		return ( !m_PowerRef.IsNull() && ( m_PowerRef->PD_Capabilities & PDCAP_D1_SUPPORTED ) );
	}

	//--------------------------------------------------------------------------------
	bool CPowerDevice::D2_Supported()
	{
		return ( !m_PowerRef.IsNull() && ( m_PowerRef->PD_Capabilities & PDCAP_D2_SUPPORTED ) );
	}

	//--------------------------------------------------------------------------------
	bool CPowerDevice::D3_Supported()
	{
		return ( !m_PowerRef.IsNull() && ( m_PowerRef->PD_Capabilities & PDCAP_D3_SUPPORTED ) );
	}

	//--------------------------------------------------------------------------------
	bool CPowerDevice::Wake_From_D0_Supported()
	{
		return ( !m_PowerRef.IsNull() && ( m_PowerRef->PD_Capabilities & PDCAP_WAKE_FROM_D0_SUPPORTED ) );
	}

	//--------------------------------------------------------------------------------
	bool CPowerDevice::Wake_From_D1_Supported()
	{
		return ( !m_PowerRef.IsNull() && ( m_PowerRef->PD_Capabilities & PDCAP_WAKE_FROM_D1_SUPPORTED ) );
	}

	//--------------------------------------------------------------------------------
	bool CPowerDevice::Wake_From_D2_Supported()
	{
		return ( !m_PowerRef.IsNull() && ( m_PowerRef->PD_Capabilities & PDCAP_WAKE_FROM_D2_SUPPORTED ) );
	}

	//--------------------------------------------------------------------------------
	bool CPowerDevice::Wake_From_D3_Supported()
	{
		return ( !m_PowerRef.IsNull() && ( m_PowerRef->PD_Capabilities & PDCAP_WAKE_FROM_D3_SUPPORTED ) );
	}

	//--------------------------------------------------------------------------------
	bool CPowerDevice::Warm_Eject_Supported()
	{
		return ( !m_PowerRef.IsNull() && ( m_PowerRef->PD_Capabilities & PDCAP_WARM_EJECT_SUPPORTED ) );
	}




	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CPowerDeviceCollection );

	//--------------------------------------------------------------------------------
	CPowerDeviceCollection::CPowerDeviceCollection() : nsCodeQOR::CTArray< CPowerDevice*, CPolicy >()
	, m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerDeviceCollection::CPowerDeviceCollection" );
		m_bValid = m_Library.DevicePowerOpen( 0 ) ? true : false;

		unsigned long ulQueryIndex = 0;
		unsigned long ulBufferSize = MaxPath * sizeof( wchar_t );
		bool bResult = true;
		while( bResult )
		{
			CWString strDeviceName;
			bResult = m_Library.DevicePowerEnumDevices( ulQueryIndex, DEVICEPOWER_FILTER_DEVICES_PRESENT, 
				PDCAP_S0_SUPPORTED|PDCAP_S1_SUPPORTED|PDCAP_S2_SUPPORTED|PDCAP_S3_SUPPORTED|
				PDCAP_WAKE_FROM_S0_SUPPORTED|PDCAP_WAKE_FROM_S1_SUPPORTED|PDCAP_WAKE_FROM_S2_SUPPORTED|PDCAP_WAKE_FROM_S3_SUPPORTED|
				PDCAP_S4_SUPPORTED|PDCAP_S5_SUPPORTED, reinterpret_cast< ::PBYTE >( strDeviceName.GetBufferSetLength( MaxPath + 1 ) ), &ulBufferSize ) ? true : false;

			if( bResult )
			{
				strDeviceName.ValidateBuffer( static_cast< unsigned short >( wcslen( strDeviceName.GetBuffer() ) ) );
				strDeviceName.ReleaseBuffer();
				CPowerDevice* pPowerDevice = new CPowerDevice;

				if( !strDeviceName.IsEmpty() )
				{					
					CTString strTName = strDeviceName.toTString();
					
					nsCodeQOR::CTLRef< CDeviceInstance > RefDevice;//TODO: = System().Devices(QOR_PP_SHARED_OBJECT_ACCESS).DeviceFromName( strTName );
					
					pPowerDevice->SetName( strDeviceName );
					pPowerDevice->SetDevice( RefDevice );
					if( !RefDevice.IsNull() )
					{
						nsCodeQOR::CTLRef< CM_Power_Data > PowerData = RefDevice->GetPowerData();
						pPowerDevice->SetPowerData( PowerData );					
					}
					Append( pPowerDevice );
				}
			}
			ulQueryIndex++;
		}
	}

	//--------------------------------------------------------------------------------
	CPowerDeviceCollection::CPowerDeviceCollection( const CPowerDeviceCollection& src ) : nsCodeQOR::CTArray< CPowerDevice*, CPolicy >()
	, m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerDeviceCollection::CPowerDeviceCollection" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CPowerDeviceCollection& CPowerDeviceCollection::operator = ( const CPowerDeviceCollection& src )
	{
		_WINQ_FCONTEXT( "CPowerDeviceCollection::operator =" );
		if( &src != this )
		{
			nsCodeQOR::CTArray< CPowerDevice*, CPolicy >::operator = ( src );
			m_bValid = src.m_bValid;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CPowerDeviceCollection::~CPowerDeviceCollection()
	{
		_WINQ_FCONTEXT( "CPowerDeviceCollection::~CPowerDeviceCollection" );
		m_Library.DevicePowerClose();
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CPowerScenarioCollection );

	//--------------------------------------------------------------------------------
	CPowerScenarioCollection::CPowerScenarioCollection() : nsCodeQOR::CTArray< CPowerScenario*, CPolicy >()
	,	m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerScenarioCollection::CPowerScenarioCollection" );

		CAString SchemeBuffer;
		unsigned long ulError = 0;
		unsigned long ulIndex = 0;
		unsigned long ulBufferSize = 0;
		while( ulError == 0 )
		{
			ulError = m_Library.PowerEnumerate( 0, 0, 0, static_cast< ::POWER_DATA_ACCESSOR >( Access_Scheme ), ulIndex, 0, &ulBufferSize );
			if( ulError == ERROR_MORE_DATA )
			{
				ulError = m_Library.PowerEnumerate( 0, 0, 0, static_cast< ::POWER_DATA_ACCESSOR >( Access_Scheme ), ulIndex, reinterpret_cast< ::UCHAR* >( SchemeBuffer.GetBufferSetLength( static_cast< unsigned short >( ulBufferSize + 1 ) ) ), &ulBufferSize );				
				SchemeBuffer.ValidateBuffer( static_cast< unsigned short >( ulBufferSize ) );
				if( ulBufferSize == sizeof( ::GUID ) )
				{
					nsCodeQOR::mxGUID guidScheme = *( reinterpret_cast< nsCodeQOR::mxGUID* >( SchemeBuffer.GetBuffer() ) );
					SchemeBuffer.ReleaseBuffer();
					CPowerScenario* pScenario = new CPowerScenario( guidScheme );
					Append( pScenario );
				}				
			}
			ulIndex++;
		}
	}

	//--------------------------------------------------------------------------------
	CPowerScenarioCollection::CPowerScenarioCollection( const CPowerScenarioCollection& src ) : nsCodeQOR::CTArray< CPowerScenario*, CPolicy >( src )
		,	m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerScenarioCollection::CPowerScenarioCollection" );
	}

	//--------------------------------------------------------------------------------
	CPowerScenarioCollection& CPowerScenarioCollection::operator = ( const CPowerScenarioCollection& src )
	{
		_WINQ_FCONTEXT( "CPowerScenarioCollection::operator =" );

		CTArray< CPowerScenario*, CPolicy >::operator=( src );
		return *this;
	}
	
	//--------------------------------------------------------------------------------
	CPowerScenarioCollection::~CPowerScenarioCollection()
	{
		_WINQ_FCONTEXT( "CPowerScenarioCollection::~CPowerScenarioCollection" );
	}




	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CPowerSchemeCollection );

	//--------------------------------------------------------------------------------
	CPowerSchemeCollection::CPowerSchemeCollection() : nsCodeQOR::CTArray< CPowerScheme*, CPolicy >()
	, m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerSchemeCollection::CPowerSchemeCollection" );

		if( TheSystem().As< nsWin32::CSystem >()->Information(QOR_PP_SHARED_OBJECT_ACCESS).GetOSVerNumber() < 6 )
		{
			m_Library.EnumPwrSchemes( (::PWRSCHEMESENUMPROC)&StaticEnumProcV1, reinterpret_cast< LPARAM >( this ) );	
		}
		else
		{
			m_Library.EnumPwrSchemes( (::PWRSCHEMESENUMPROC)&StaticEnumProcV2, reinterpret_cast< LPARAM >( this ) );
		}

	}

	//--------------------------------------------------------------------------------
	CPowerSchemeCollection::CPowerSchemeCollection( const CPowerSchemeCollection& src ) : nsCodeQOR::CTArray< CPowerScheme*, CPolicy >( src)
	,	m_Library( CPowerProf::Instance() )
	{
		_WINQ_FCONTEXT( "CPowerSchemeCollection::CPowerSchemeCollection" );
	}

	//--------------------------------------------------------------------------------
	CPowerSchemeCollection& CPowerSchemeCollection::operator = ( const CPowerSchemeCollection& src )
	{
		_WINQ_FCONTEXT( "CPowerSchemeCollection::operator =" );

		CTArray< CPowerScheme*, CPolicy >::operator=( src );
		return *this;
	}

	//--------------------------------------------------------------------------------
	CPowerSchemeCollection::~CPowerSchemeCollection()
	{
		_WINQ_FCONTEXT( "CPowerSchemeCollection::~CPowerSchemeCollection" );
	}

	//--------------------------------------------------------------------------------
	unsigned int CPowerSchemeCollection::ActiveScheme()
	{
		_WINQ_FCONTEXT( "CPowerSchemeCollection::ActiveScheme" );
		unsigned int uiActiveScheme = (unsigned int)(-1);
		m_Library.GetActivePwrScheme( &uiActiveScheme );
		return uiActiveScheme;
	}

	//--------------------------------------------------------------------------------
	bool CPowerSchemeCollection::DeleteScheme( unsigned int uiIndex )
	{
		_WINQ_FCONTEXT( "CPowerSchemeCollection::DeleteScheme" );
		bool bResult = false;
		unsigned long ulArrayIndex = 0;
		while( ulArrayIndex < Size() )
		{
			if( this->operator[]( ulArrayIndex )->GetIndex() == uiIndex )
			{
				RemoveAt( ulArrayIndex );
				return true;
			}
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	byte CPowerSchemeCollection::EnumSchemeProc( unsigned int Index, unsigned long NameSize, wchar_t* wszName, unsigned long ulDescriptionSize, wchar_t* wszDescription, Power_Policy* pPolicy )
	{
		_WINQ_FCONTEXT( "CPowerSchemeCollection::EnumSchemeProc" );
		CPowerScheme* pPowerScheme = new CPowerScheme( Index, CWString( wszName, static_cast< unsigned short >( NameSize ) ), CWString( wszDescription, static_cast< unsigned short >( ulDescriptionSize ) ), *pPolicy );
		Append( pPowerScheme );
		return 1;
	}

	//--------------------------------------------------------------------------------
	byte CPowerSchemeCollection::StaticEnumProcV2( unsigned int Index, unsigned long NameSize, wchar_t* Name, unsigned long DescriptionSize, wchar_t* Description, Power_Policy* pPolicy, Cmp_long_ptr Context )
	{
		_WINQ_SFCONTEXT( "CPowerSchemeCollection::StaticEnumProcV2" );
		CPowerSchemeCollection* pPSC = reinterpret_cast< CPowerSchemeCollection* >( Context );
		if( pPSC )
		{
			return pPSC->EnumSchemeProc( Index, NameSize, Name, DescriptionSize, Description, pPolicy );
		}

		return 0;
	}

	//--------------------------------------------------------------------------------
	byte CPowerSchemeCollection::StaticEnumProcV1( unsigned int Index, unsigned long NameSize, wchar_t* Name, unsigned long DescriptionSize, TCHAR* Description, Power_Policy* pPolicy, Cmp_long_ptr Context )
	{
		_WINQ_SFCONTEXT( "CPowerSchemeCollection::StaticEnumProcV1" );
		CPowerSchemeCollection* pPSC = reinterpret_cast< CPowerSchemeCollection* >( Context );
		if( pPSC )
		{
			CWString strDescription( CTString( Description ).toWString() );
			return pPSC->EnumSchemeProc( Index, NameSize, Name, DescriptionSize, strDescription.GetBuffer(), pPolicy );			
		}

		return 0;
	}




	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CPowerSettingNotification );

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage:" )
	//--------------------------------------------------------------------------------
	CPowerSettingNotification::CPowerSettingNotification( void* hRecipient, const GUID* PowerSettingGuid, unsigned long Flags ) : m_Library( CUser32::Instance() )
	,	m_Handle( this, 0 )
	{
		_WINQ_FCONTEXT( "CPowerSettingNotification::CPowerSettingNotification" );
		__QOR_PROTECT
		{
			m_Handle = m_Library.RegisterPowerSettingNotification( hRecipient, reinterpret_cast< ::LPCGUID >( PowerSettingGuid ), Flags );
		}__QOR_ENDPROTECT
	}
	__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	CPowerSettingNotification::~CPowerSettingNotification()
	{
		_WINQ_FCONTEXT( "CPowerSettingNotification::~CPowerSettingNotification" );
		__QOR_PROTECT
		{
			m_Library.UnregisterPowerSettingNotification( m_Handle.Use() );
		}__QOR_ENDPROTECT
	}

	__QOR_IMPLEMENT_OCLASS_LUID( CPowerHelper );

	//--------------------------------------------------------------------------------
	CPowerHelper::CPowerHelper()
	{
		_WINQ_FCONTEXT( "CPowerHelper::CPowerHelper" );
	}

	//--------------------------------------------------------------------------------
	CPowerHelper::CPowerHelper( const CPowerHelper& src )
	{
		_WINQ_FCONTEXT( "CPowerHelper::CPowerHelper" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CPowerHelper& CPowerHelper::operator = ( const CPowerHelper& src)
	{
		_WINQ_FCONTEXT( "CPowerHelper::operator =" );
		if( &src != this )
		{
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CPowerHelper::~CPowerHelper()
	{
		_WINQ_FCONTEXT( "CPowerHelper::~CPowerHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CPowerHelper::GetDevicePowerState( CDeviceHandle& hDevice, int& fOn )
	{
		_WINQ_FCONTEXT( "CPowerHelper::GetDevicePowerState" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetDevicePowerState( hDevice.Use(), &fOn ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CPowerHelper::CancelDeviceWakeupRequest( CDeviceHandle& hDevice )
	{
		_WINQ_FCONTEXT( "CPowerHelper::CancelDeviceWakeupRequest" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CancelDeviceWakeupRequest( hDevice.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CPowerHelper::GetSystemPowerStatus( SystemPowerStatus& SystemPowerStatus )
	{
		_WINQ_FCONTEXT( "CPowerHelper::GetSystemPowerStatus" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetSystemPowerStatus( reinterpret_cast< ::LPSYSTEM_POWER_STATUS >( &SystemPowerStatus ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CPowerHelper::IsSystemResumeAutomatic()
	{
		_WINQ_FCONTEXT( "CPowerHelper::IsSystemResumeAutomatic" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::IsSystemResumeAutomatic() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CPowerHelper::RequestWakeupLatency( eLatency_Time latency )
	{
		_WINQ_FCONTEXT( "CPowerHelper::RequestWakeupLatency" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::RequestWakeupLatency( static_cast< ::LATENCY_TIME >( latency ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerHelper::SetThreadExecutionState( unsigned long esFlags )
	{
		_WINQ_FCONTEXT( "CPowerHelper::SetThreadExecutionState" );
		unsigned long Result = 0;
		__QOR_PROTECT
		{
			Result = CKernel32::SetThreadExecutionState( esFlags );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CPowerHelper::SetSystemPowerState( bool fSuspend, bool fForce )
	{
		_WINQ_FCONTEXT( "CPowerHelper::SetSystemPowerState" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetSystemPowerState( fSuspend ? TRUE : FALSE, fForce ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CPowerHelper::SetMessageWaitingIndicator( CDeviceHandle& hIndicator, unsigned long cmsg )
	{
		_WINQ_FCONTEXT( "CPowerHelper::SetMessageWaitingIndicator" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetMessageWaitingIndicator( hIndicator.Use(), cmsg ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CMessageWaitingIndicator::CMessageWaitingIndicator() : 
		m_MessageWaitingDevice( _TXT( "\\\\.\\MessageIndicator" ), Generic_Write, File_Share_Write, 0, Open_Existing, 0, 0 )
	{
	}

	//--------------------------------------------------------------------------------
	CMessageWaitingIndicator::~CMessageWaitingIndicator()
	{
	}

	//--------------------------------------------------------------------------------
	bool CMessageWaitingIndicator::Set( unsigned long cmsg )
	{
		bool bResult = false;
		bResult = m_Win32PowerHelper.SetMessageWaitingIndicator( m_MessageWaitingDevice.Handle(), cmsg );
		return bResult;
	}

	__QOR_IMPLEMENT_OCLASS_LUID( CPowerManager );

	//--------------------------------------------------------------------------------
	CPowerManager::CPowerManager() : m_pMessageWaitingIndicator( 0 )
	{
	}

	//--------------------------------------------------------------------------------
	CPowerManager::~CPowerManager()
	{
		_WINQ_FCONTEXT( "CPowerManager::~CPowerManager" );
		delete m_pMessageWaitingIndicator;
	}

	//--------------------------------------------------------------------------------
	bool CPowerManager::IsResumeAutomatic(void)
	{
		_WINQ_FCONTEXT( "CPowerManager::IsResumeAutomatic" );
		bool bResult = false;
		bResult = m_Win32PowerHelper.IsSystemResumeAutomatic();
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CPowerManager::GetPowerStatus( nsWin32::SystemPowerStatus& SystemPowerStatus )
	{
		_WINQ_FCONTEXT( "CPowerManager::GetPowerStatus" );
		bool bResult = false;
		bResult = m_Win32PowerHelper.GetSystemPowerStatus( SystemPowerStatus );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CPowerManager::SetPowerStatus( bool fSuspend, bool fForce )
	{
		_WINQ_FCONTEXT( "CPowerManager::SetPowerStatus" );
		bool bResult = false;
		bResult = m_Win32PowerHelper.SetSystemPowerState( fSuspend, fForce );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CPowerSettingNotifyRef CPowerManager::CreateNotification( void* hRecipient, const nsWin32::GUID* PowerSettingGuid, unsigned long Flags )
	{
		_WINQ_FCONTEXT( "CPowerManager::CreateNotification" );
		CPowerSettingNotifyRef NotifyRef( new CPowerSettingNotification( hRecipient, PowerSettingGuid, Flags ) );
		return NotifyRef;
	}

	//--------------------------------------------------------------------------------
	unsigned long CPowerManager::SetCurrentThreadPowerStateRequirements( unsigned long esFlags )
	{
		_WINQ_FCONTEXT( "CPowerManager::SetCurrentThreadPowerStateRequirements" );
		unsigned long eState = 0;
		eState = m_Win32PowerHelper.SetThreadExecutionState( esFlags );
		return eState;
	}

	//--------------------------------------------------------------------------------
	CMessageWaitingIndicator& CPowerManager::MessageWaitingIndicator()
	{
		_WINQ_FCONTEXT( "CPowerManager::MessageWaitingIndicator" );
		if( m_pMessageWaitingIndicator == 0 )
		{
			m_pMessageWaitingIndicator = new CMessageWaitingIndicator();
		}

		return (*m_pMessageWaitingIndicator);
	}

	//--------------------------------------------------------------------------------
	bool CPowerManager::RequestWakeupLatency( nsWin32::eLatency_Time latency )
	{
		_WINQ_FCONTEXT( "CPowerManager::RequestWakeupLatency" );
		bool bResult = false;
		bResult = m_Win32PowerHelper.RequestWakeupLatency( latency );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< Global_Power_Policy > CPowerManager::CurrentGlobalPowerPolicy( void )
	{
		_WINQ_FCONTEXT( "CPowerManager::CurrentGlobalPowerPolicy" );
		Global_Power_Policy* pGlobalPowerPolicy = new Global_Power_Policy;
		Power_Policy PowerPolicy;
		m_AdvancedPowerHelper().GetCurrentPowerPolicies( pGlobalPowerPolicy, &PowerPolicy );
		nsCodeQOR::CTLRef< Global_Power_Policy > Result( pGlobalPowerPolicy, true );
		return Result;
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< Power_Policy > CPowerManager::CurrentPowerPolicy( void )
	{
		_WINQ_FCONTEXT( "CPowerManager::CurrentPowerPolicy" );
		Power_Policy* pPowerPolicy = new Power_Policy;
		Global_Power_Policy GPP;
		m_AdvancedPowerHelper().GetCurrentPowerPolicies( &GPP, pPowerPolicy );
		nsCodeQOR::CTLRef< Power_Policy > Result( pPowerPolicy, true );
		return Result;
	}

	//--------------------------------------------------------------------------------
	ePowerPlatformRole CPowerManager::GetPlatformRole()
	{
		_WINQ_FCONTEXT( "CPowerManager::GetPlatformRole" );
		return m_AdvancedPowerHelper().GetPlatformRole();
	}

	//--------------------------------------------------------------------------------
	bool CPowerManager::CanUserWriteAPowerScheme()
	{
		_WINQ_FCONTEXT( "CPowerManager::CanUserWriteAPowerScheme" );
		return m_AdvancedPowerHelper().CanUserWriteAPowerScheme();
	}

}//nsWin32
