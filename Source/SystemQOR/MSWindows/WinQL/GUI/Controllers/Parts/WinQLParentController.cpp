//WinQLParentController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/Parts/ParentController.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/GUI/Windows/WinCtrlWindow.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CParentController );

	//--------------------------------------------------------------------------------
	CParentController::CParentController( nsMammut::CModel* pModelItem, nsQOR::CController::ref_type Parent ) : CBaseWindowPartController( pModelItem, Parent )
	{
		_WINQ_FCONTEXT( "CParentController::CParentController" );
	}

	//--------------------------------------------------------------------------------
	CParentController::~CParentController()
	{
		_WINQ_FCONTEXT( "CParentController::~CParentController" );
	}

	//--------------------------------------------------------------------------------
	void CParentController::SetModel( nsMammut::CModel* pModelItem )
	{
		_WINQ_FCONTEXT( "CParentController::SetModel" );
		nsQOR::CController::SetModel( pModelItem );
		WinCtrlParent().SetModel( pModelItem );
	}

	//--------------------------------------------------------------------------------
	bool CParentController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CParentController::ProcessMessage" );

		bool bProcessed = ProcessHook( Window, lResult, uMsg, wParam, lParam );

		bProcessed = WinCtrlParent().ProcessMessage( Window, lResult, uMsg, wParam, lParam ) ||				
			CParentController::HandleMessage( Window, lResult, uMsg, wParam, lParam );

		return bProcessed;
	}

	//--------------------------------------------------------------------------------
	bool CParentController::HandleMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CParentController::HandleMessage" );
		bool bHandled = false;

		switch ( uMsg )
		{
		case COSWindow::wmParentNotify:
			{
				unsigned short wEvent = LoWord( wParam );
				unsigned short wID = HiWord( wParam );
				OnParentNotify( Window, wEvent, wID, lParam );
				lResult = 0;
				bHandled = true;
			}
			break;
		case COSWindow::wmNotifyFormat:
			{
				COSWindow::refType refWndFrom = COSWindow::FromHandle( CWindowHandle( 0, (void*)(wParam) ).Ref() );
				lResult = OnNotifyFormat( Window, refWndFrom, lParam );
				bHandled = true;
			}
			break;
		case COSWindow::wmNotify:
			{
				NotificationMessageHeader* pHdr = reinterpret_cast< NotificationMessageHeader* >( lParam );
				lResult = OnNotify( Window, wParam, pHdr );
				bHandled = true;
			}
			break;
		case COSWindow::wmCommand:
			{					
				unsigned short wCode = HiWord( wParam );
				unsigned short wCtrlID = LoWord( wParam );
				COSWindow::refType refCtrl = COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam) ).Ref() );
				OnCommand( Window, wCtrlID, wCode, refCtrl );
				lResult = 0;
				bHandled = true;
			}
			break;
		}

		return bHandled;
	}


	//--------------------------------------------------------------------------------
	void CParentController::OnParentNotify( COSWindow& Window, unsigned short wEvent, unsigned short wID, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CParentController::OnParentNotify" );
		switch ( wEvent )
		{
		case COSWindow::wmCreate:
			{
				COSWindow::refType refChild = COSWindow::FromHandle( CWindowHandle( 0, (void*)( lParam ) ).Ref() );
				OnChildCreate( Window, wID, refChild );
			}
			break;
		case COSWindow::wmDestroy:
			{
				COSWindow::refType refChild = COSWindow::FromHandle( CWindowHandle( 0, (void*)( lParam ) ).Ref() );
				OnChildDestroy( Window, wID, refChild );
			}
			break;
		case COSWindow::wmLButtonDown:
			{
				unsigned short wXPos = LoWord( lParam );
				unsigned short wYPos = HiWord( lParam );
				OnChildLButtonDown( Window, wXPos, wYPos );
			}
			break;
		case COSWindow::wmMButtonDown:
			{
				unsigned short wXPos = LoWord( lParam );
				unsigned short wYPos = HiWord( lParam );
				OnChildMButtonDown( Window, wXPos, wYPos );
			}
			break;
		case COSWindow::wmRButtonDown:
			{
				unsigned short wXPos = LoWord( lParam );
				unsigned short wYPos = HiWord( lParam );
				OnChildRButtonDown( Window, wXPos, wYPos );
			}
			break;
#if		( _WIN32_WINNT >= 0x0500 )
		case COSWindow::wmXButtonDown:
			{
				unsigned short wXPos = LoWord( lParam );
				unsigned short wYPos = HiWord( lParam );
				OnChildXButtonDown( Window, wID, wXPos, wYPos );
			}
			break;
#endif//( _WIN32_WINNT >= 0x0500 )
		default:
			wEvent = wEvent;
			break;
		}
	}

	//--------------------------------------------------------------------------------
	void CParentController::OnChildCreate( COSWindow& Window, unsigned short wID, COSWindow::refType refChild )
	{
		_WINQ_FCONTEXT( "CParentController::OnChildCreate" );
	}

	//--------------------------------------------------------------------------------
	void CParentController::OnChildDestroy( COSWindow& Window, unsigned short wID, COSWindow::refType hChild )
	{
		_WINQ_FCONTEXT( "CParentController::OnChildDestroy" );
	}

	//--------------------------------------------------------------------------------
	void CParentController::OnChildLButtonDown( COSWindow& Window, unsigned short wXPos, unsigned short wYPos )
	{
		_WINQ_FCONTEXT( "CParentController::OnChildLButtonDown" );
	}

	//--------------------------------------------------------------------------------
	void CParentController::OnChildMButtonDown( COSWindow& Window, unsigned short wXPos, unsigned short wYPos )
	{
		_WINQ_FCONTEXT( "CParentController::OnChildMButtonDown" );
	}

	//--------------------------------------------------------------------------------
	void CParentController::OnChildRButtonDown( COSWindow& Window, unsigned short wXPos, unsigned short wYPos )
	{
		_WINQ_FCONTEXT( "CParentController::OnChildRButtonDown" );
	}

	//--------------------------------------------------------------------------------
	void CParentController::OnChildXButtonDown( COSWindow& Window, unsigned short wID, unsigned short wXPos, unsigned short wYPos )
	{
		_WINQ_FCONTEXT( "CParentController::OnChildXButtonDown" );
	}

	//--------------------------------------------------------------------------------
	long CParentController::OnNotify( COSWindow& Window, Cmp_uint_ptr wParam, NotificationMessageHeader* pHdr )
	{
		_WINQ_FCONTEXT( "CParentController::OnNotify" );
		long lResult = 0;
		if( pHdr != 0 )
		{
			COSWindow::refType refChild = COSWindow::FromHandle( CWindowHandle( 0, pHdr->m_phWindowFrom ).Ref() );

			CWinCtrlWindow* pCtrlWindow = dynamic_cast< CWinCtrlWindow* >( refChild.operator COSWindow *() );

			if( pCtrlWindow != 0 )
			{
				lResult = pCtrlWindow->OnNotify( pHdr );
			}
		}
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CParentController::OnNotifyFormat( COSWindow& Window, COSWindow::refType WndFrom, Cmp_long_ptr Command )
	{
		_WINQ_FCONTEXT( "CParentController::OnNotifyFormat" );
		long lResult = 0;
#ifdef UNICODE
		lResult = COSWindow::nfrUnicode;
#else
		lResult = COSWindow::nfrANSI;
#endif
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CParentController::OnCommand( COSWindow& Window, unsigned short wCtrlID, unsigned short wCode, COSWindow::refType refCtrl )
	{
		_WINQ_FCONTEXT( "CParentController::OnCommand" );
		switch ( wCode )
		{
		case 0://Menu
			{
				OnMenuCommand( Window, wCtrlID );
			}
			break;
		case 1://Accelerator
			{
				OnAccelerator( Window, wCtrlID );
			}
			break;
		default://Control Defined Code
			{
				CWinCtrlWindow* pCtrlWindow = dynamic_cast< CWinCtrlWindow* >( refCtrl.operator COSWindow *() );

				if( pCtrlWindow != 0 )
				{
					pCtrlWindow->OnCommand( wCtrlID, wCode );
				}
			}
			break;
		}
	}

	//--------------------------------------------------------------------------------
	void CParentController::OnMenuCommand( COSWindow& Window, unsigned short wMenuItemID )
	{
		_WINQ_FCONTEXT( "CParentController::OnMenuCommand" );
	}

	//--------------------------------------------------------------------------------
	void CParentController::OnAccelerator( COSWindow& Window, unsigned short wAccelID )
	{
		_WINQ_FCONTEXT( "CParentController::OnAccelerator" );
	}

}//nsWin32

