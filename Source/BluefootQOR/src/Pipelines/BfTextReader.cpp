//BfTextReader.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "BluefootQOR/Pipelines/BFTextReader.h"
#include "BluefootQOR/BFSink.h"
#include "BluefootQOR/BFSource.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	CRecognizerEventSink::CRecognizerEventSink( CTextReader* pContainer ) : CEventSink( m_pEvent ), m_pContainer( pContainer )
	{
	}

	//------------------------------------------------------------------------------
	bool CRecognizerEventSink::operator()( nsQOR::IEvent::ref_type, int iCookie )
	{
		if( m_pContainer )
		{
			m_pContainer->OnRecognizerEvent( m_pEvent.As< CBOMRecognizedEvent >()->BOMType() );
		}
		return true;
	}

	__QOR_IMPLEMENT_OCLASS_LUID(CTextReader);

	//------------------------------------------------------------------------------
	CTextReader::CTextReader( CSource* pSource ) : CPipeline()
	, m_RecognizerEventSink( this )
	{
		__QCS_MEMBER_FCONTEXT( "CTextReader::CTextReader" );
		SetSource( pSource );
		SetSink( &m_StringSink );
		InsertFilter( &m_BOMRecognizer );
		m_RecognizerEventSink.Connect( &m_BOMRecognizer.m_RecognitionEvent );
	}

	//------------------------------------------------------------------------------
	CTextReader::~CTextReader()
	{
		__QCS_MEMBER_FCONTEXT( "CTextReader::~CTextReader" );
	}

	//------------------------------------------------------------------------------
	CTextReader::CTextReader( const CTextReader& Src ) : CPipeline( Src )
	, m_RecognizerEventSink( this )
	{
		__QCS_MEMBER_FCONTEXT( "CTextReader::CTextReader" );
		m_BOMRecognizer = Src.m_BOMRecognizer;
	}

	//------------------------------------------------------------------------------
	CTextReader& CTextReader::operator = ( const CTextReader& Src )
	{
		__QCS_MEMBER_FCONTEXT( "CTextReader::operator =" );
		if( &Src != this )
		{
			CPipeline::operator=( Src );
			m_BOMRecognizer = Src.m_BOMRecognizer;
		}

		return *this;
	}

	//------------------------------------------------------------------------------
	void CTextReader::OnRecognizerEvent( CBOMRecognizedEvent::eBOMType BOMType )
	{
		__QCS_MEMBER_FCONTEXT( "CTextReader::OnRecognizerEvent" );

		switch( BOMType )
		{
			case CBOMRecognizedEvent::eNone:			//Assume Unicode UTF-8 until content can be analysed			
				InsertFilter( m_UTF8Filter.As<CFilter>() );
				break;
			case CBOMRecognizedEvent::eUTF8:			//UTF-8 with BOM			
				InsertFilter( m_UTF8Filter.As<CFilter>() );
				break;
			case CBOMRecognizedEvent::eUTF16BE:			//UTF-16 Big Endian			
				InsertFilter( m_UTF16Filter.As<CFilter>() );
				break;
			case CBOMRecognizedEvent::eUTF16LE:			//UTF-16 Little Endian			
				InsertFilter( m_UTF16Filter.As<CFilter>() );
				break;
		}
	}

}//nsBluefoot

