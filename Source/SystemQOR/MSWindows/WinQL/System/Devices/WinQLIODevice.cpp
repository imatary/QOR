//WinQLIODevice.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/WinQLIODevice.h"
#include "WinQL/System/Power/WinQLPowerManagement.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/SetupAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------	
	CIODeviceFile::CIODeviceFile( const TCHAR* pDeviceName, unsigned long dwDesiredAccess, unsigned long dwShareMode, unsigned long dwFlagsAndAttributes ) : 
		CDeviceFile( pDeviceName, dwDesiredAccess, dwShareMode, dwFlagsAndAttributes )
	{
		_WINQ_FCONTEXT( "CIODeviceFile::CIODeviceFile" );
	}

	//--------------------------------------------------------------------------------	
	CIODeviceFile::CIODeviceFile( CDeviceHandle::ref_type hExisting ) : CDeviceFile( hExisting )
	{
		_WINQ_FCONTEXT( "CIODeviceFile::CIODeviceFile" );
	}

	//--------------------------------------------------------------------------------	
	CIODeviceFile::~CIODeviceFile()
	{
		_WINQ_FCONTEXT( "CIODeviceFile::~CIODeviceFile" );
	}

	//--------------------------------------------------------------------------------	
	bool CIODeviceFile::Control( unsigned long dwIoControlCode, void* lpInBuffer, unsigned long nInBufferSize, void* lpOutBuffer, unsigned long nOutBufferSize, unsigned long* lpBytesReturned, nsWin32::LPOVERLAPPED lpOverlapped )
	{
		_WINQ_FCONTEXT( "CIODeviceFile::Control" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::DeviceIoControl( m_Handle().Use(), dwIoControlCode, lpInBuffer, nInBufferSize, lpOutBuffer, nOutBufferSize, lpBytesReturned, reinterpret_cast< ::LPOVERLAPPED >( lpOverlapped ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CIODeviceFile::GetPowerState( int& fOn )
	{
		_WINQ_FCONTEXT( "CIODeviceFile::GetPowerState" );
		CPowerHelper Win32PowerHelper;
		bool bResult = Win32PowerHelper.GetDevicePowerState( m_Handle, fOn );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CIODeviceFile::CancelWakeupRequest()
	{
		_WINQ_FCONTEXT( "CIODeviceFile::CancelWakeupRequest" );
		CPowerHelper Win32PowerHelper;
		bool bResult = Win32PowerHelper.CancelDeviceWakeupRequest( m_Handle );
		return bResult;
	}

}//nsWin32
