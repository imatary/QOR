//WinQLBluetoothFindRadioSession.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Comms/Bluetooth/WinQLBluetoothFindRadioSession.h"

#include "WinQAPI/Kernel32.h"
#include "WinQAPI/BthProps.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CFindBluetoothRadioSession );

	//--------------------------------------------------------------------------------
	CFindBluetoothRadioSession::CFindBluetoothRadioSession( CBluetoothRadio::ref_type& Radio ): m_Library( CBthProps::Instance() )
	{
		_WINQ_FCONTEXT( "CFindBluetoothRadioSession::CFindBluetoothRadioSession" );

		void* pRadio = 0;
		m_SearchParams.dwSize = sizeof ( SearchParams );
		m_Handle = m_Library.BluetoothFindFirstRadio( 
			reinterpret_cast< ::BLUETOOTH_FIND_RADIO_PARAMS* >( &m_SearchParams ),
			&pRadio );
		m_Handle.Attach( this );

		if( pRadio != 0 && Radio.IsNull() )
		{
			CDeviceHandle hTemp( pRadio );
			Radio = new_ext_ref<CBluetoothRadio>(CBluetoothRadio::ClassID());
			Radio->SetHandle(hTemp);
			//Radio.Attach( new CBluetoothRadio( hTemp ) );
		}
	}

	//--------------------------------------------------------------------------------
	CFindBluetoothRadioSession::CFindBluetoothRadioSession( CFindBluetoothRadioSession::SearchParams& SearchParams, CBluetoothRadio::ref_type& Radio ): m_Library( CBthProps::Instance() )
	,	m_SearchParams( SearchParams )
	{
		_WINQ_FCONTEXT( "CFindBluetoothRadioSession::CFindBluetoothRadioSession" );

		void* pRadio = 0;
		m_Handle = m_Library.BluetoothFindFirstRadio( 
			reinterpret_cast< ::BLUETOOTH_FIND_RADIO_PARAMS* >( &m_SearchParams ),
			&pRadio );
		m_Handle.Attach( this );

		if( pRadio != 0 && Radio.IsNull() )
		{
			CDeviceHandle hTemp( pRadio );
			Radio = new_ext_ref<CBluetoothRadio>(CBluetoothRadio::ClassID());
			Radio->SetHandle(hTemp);
		}
	}

	//--------------------------------------------------------------------------------
	CFindBluetoothRadioSession::~CFindBluetoothRadioSession()
	{
		_WINQ_FCONTEXT( "CFindBluetoothRadioSession::~CFindBluetoothRadioSession" );
		m_Library.BluetoothFindRadioClose( m_Handle.Use() );
	}

	//--------------------------------------------------------------------------------
	bool CFindBluetoothRadioSession::Next( CBluetoothRadio::ref_type& Radio )
	{
		_WINQ_FCONTEXT( "CFindBluetoothRadioSession::Next" );

		void* pRadio = 0;
		bool bResult = m_Library.BluetoothFindNextRadio( m_Handle.Use(), &pRadio ) ? true : false;

		if( bResult && pRadio != 0 && Radio.IsNull() )
		{
			CDeviceHandle hTemp( pRadio );
			Radio = new_ext_ref<CBluetoothRadio>(CBluetoothRadio::ClassID());
			Radio->SetHandle(hTemp);
		}
		return bResult;
	}

}//nsWin32
