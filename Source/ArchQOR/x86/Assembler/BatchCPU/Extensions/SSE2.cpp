//SSE2.cpp

// Copyright (c) 2008-2010, Petr Kobalicek <kobalicek.petr@gmail.com>
// Copyright (c) Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implement SSE2 extensions

#include "ArchQOR.h"

#if		( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )

#include "ArchQOR/x86/Assembler/BatchCPU/Extensions/SSE2.h"

//------------------------------------------------------------------------------
namespace nsArch
{
	namespace nsx86
	{
		//------------------------------------------------------------------------------
		CSSE2::CSSE2( Cx86CPUCore& refCPU ) : CSSE( refCPU )
		{
		}

		//------------------------------------------------------------------------------
		CSSE2::~CSSE2()
		{
		}

		//------------------------------------------------------------------------------
		//DQWord Shift Right Logical (SSE2).
		void CSSE2::psrldq( const CXMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRLDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Add (SSE2).
		void CSSE2::addpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_ADDPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Add (SSE2).
		void CSSE2::addpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_ADDPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar DP-FP Add (SSE2).
		void CSSE2::addsd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_ADDSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar DP-FP Add (SSE2).
		void CSSE2::addsd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_ADDSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bit-wise Logical And Not For DP-FP (SSE2).
		void CSSE2::andnpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_ANDNPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bit-wise Logical And Not For DP-FP (SSE2).
		void CSSE2::andnpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_ANDNPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bit-wise Logical And For DP-FP (SSE2).
		void CSSE2::andpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_ANDPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bit-wise Logical And For DP-FP (SSE2).
		void CSSE2::andpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_ANDPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Flush Cache Line (SSE2).
		void CSSE2::clflush( const CMem& mem )
		{
			m_PU._emitInstruction( INST_CLFLUSH, &mem );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Compare (SSE2).
		void CSSE2::cmppd( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_CMPPD, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Compare (SSE2).
		void CSSE2::cmppd( const CXMMReg& dst, const CMem& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_CMPPD, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Compare Scalar SP-FP Values (SSE2).
		void CSSE2::cmpsd( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_CMPSD, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Compare Scalar SP-FP Values (SSE2).
		void CSSE2::cmpsd( const CXMMReg& dst, const CMem& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_CMPSD, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Scalar Ordered DP-FP Compare and Set EFLAGS (SSE2).
		void CSSE2::comisd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_COMISD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar Ordered DP-FP Compare and Set EFLAGS (SSE2).
		void CSSE2::comisd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_COMISD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed Dword Integers to Packed DP-FP Values (SSE2).
		void CSSE2::cvtdq2pd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTDQ2PD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed Dword Integers to Packed DP-FP Values (SSE2).
		void CSSE2::cvtdq2pd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTDQ2PD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed Dword Integers to Packed SP-FP Values (SSE2).
		void CSSE2::cvtdq2ps( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTDQ2PS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed Dword Integers to Packed SP-FP Values (SSE2).
		void CSSE2::cvtdq2ps( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTDQ2PS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed DP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvtpd2dq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTPD2DQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed DP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvtpd2dq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTPD2DQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed DP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvtpd2pi( const CMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTPD2PI, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed DP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvtpd2pi( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTPD2PI, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed DP-FP Values to Packed SP-FP Values (SSE2).
		void CSSE2::cvtpd2ps( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTPD2PS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed DP-FP Values to Packed SP-FP Values (SSE2).
		void CSSE2::cvtpd2ps( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTPD2PS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed Dword Integers to Packed DP-FP Values (SSE2).
		void CSSE2::cvtpi2pd( const CXMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTPI2PD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed Dword Integers to Packed DP-FP Values (SSE2).
		void CSSE2::cvtpi2pd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTPI2PD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed SP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvtps2dq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTPS2DQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed SP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvtps2dq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTPS2DQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed SP-FP Values to Packed DP-FP Values (SSE2).
		void CSSE2::cvtps2pd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTPS2PD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Packed SP-FP Values to Packed DP-FP Values (SSE2).
		void CSSE2::cvtps2pd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTPS2PD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Scalar DP-FP Value to Dword Integer (SSE2).
		void CSSE2::cvtsd2si( const CGPReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTSD2SI, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Scalar DP-FP Value to Dword Integer (SSE2).
		void CSSE2::cvtsd2si( const CGPReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTSD2SI, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Scalar DP-FP Value to Scalar SP-FP Value (SSE2).
		void CSSE2::cvtsd2ss( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTSD2SS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Scalar DP-FP Value to Scalar SP-FP Value (SSE2).
		void CSSE2::cvtsd2ss( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTSD2SS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Dword Integer to Scalar DP-FP Value (SSE2).
		void CSSE2::cvtsi2sd( const CXMMReg& dst, const CGPReg& src )
		{
			m_PU._emitInstruction( INST_CVTSI2SD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Dword Integer to Scalar DP-FP Value (SSE2).
		void CSSE2::cvtsi2sd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTSI2SD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Scalar SP-FP Value to Scalar DP-FP Value (SSE2).
		void CSSE2::cvtss2sd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTSS2SD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert Scalar SP-FP Value to Scalar DP-FP Value (SSE2).
		void CSSE2::cvtss2sd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTSS2SD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert with Truncation Packed DP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvttpd2pi( const CMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTTPD2PI, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert with Truncation Packed DP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvttpd2pi( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTTPD2PI, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert with Truncation Packed DP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvttpd2dq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTTPD2DQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert with Truncation Packed DP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvttpd2dq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTTPD2DQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert with Truncation Packed SP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvttps2dq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTTPS2DQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert with Truncation Packed SP-FP Values to Packed Dword Integers (SSE2).
		void CSSE2::cvttps2dq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTTPS2DQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert with Truncation Scalar DP-FP Value to Signed Dword Integer (SSE2).
		void CSSE2::cvttsd2si( const CGPReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_CVTTSD2SI, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Convert with Truncation Scalar DP-FP Value to Signed Dword Integer (SSE2).
		void CSSE2::cvttsd2si( const CGPReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_CVTTSD2SI, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Divide (SSE2).
		void CSSE2::divpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_DIVPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Divide (SSE2).
		void CSSE2::divpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_DIVPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar DP-FP Divide (SSE2).
		void CSSE2::divsd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_DIVSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar DP-FP Divide (SSE2).
		void CSSE2::divsd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_DIVSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Load Fence (SSE2).
		void CSSE2::lfence()
		{
			m_PU._emitInstruction( INST_LFENCE );
		}

		//------------------------------------------------------------------------------
		//Store Selected Bytes of Double Quadword (SSE2).
		// Target is DS:EDI.
		void CSSE2::maskmovdqu( const CXMMReg& src, const CXMMReg& mask )
		{
			m_PU._emitInstruction( INST_MASKMOVDQU, &src, &mask );
		}

		//------------------------------------------------------------------------------
		//Return Maximum Packed Double-Precision FP Values (SSE2).
		void CSSE2::maxpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MAXPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Return Maximum Packed Double-Precision FP Values (SSE2).
		void CSSE2::maxpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MAXPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Return Maximum Scalar Double-Precision FP Value (SSE2).
		void CSSE2::maxsd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MAXSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Return Maximum Scalar Double-Precision FP Value (SSE2).
		void CSSE2::maxsd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MAXSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Memory Fence (SSE2).
		void CSSE2::mfence()
		{
			m_PU._emitInstruction( INST_MFENCE );
		}

		//------------------------------------------------------------------------------
		//Return Minimum Packed DP-FP Values (SSE2).
		void CSSE2::minpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MINPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Return Minimum Packed DP-FP Values (SSE2).
		void CSSE2::minpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MINPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Return Minimum Scalar DP-FP Value (SSE2).
		void CSSE2::minsd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MINSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Return Minimum Scalar DP-FP Value (SSE2).
		void CSSE2::minsd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MINSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Aligned DQWord (SSE2).
		void CSSE2::movdqa( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVDQA, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Aligned DQWord (SSE2).
		void CSSE2::movdqa( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVDQA, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Aligned DQWord (SSE2).
		void CSSE2::movdqa( const CMem& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVDQA, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Unaligned Double Quadword (SSE2).
		void CSSE2::movdqu( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVDQU, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Unaligned Double Quadword (SSE2).
		void CSSE2::movdqu( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVDQU, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Unaligned Double Quadword (SSE2).
		void CSSE2::movdqu( const CMem& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVDQU, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Extract Packed SP-FP Sign Mask (SSE2).
		void CSSE2::movmskps( const CGPReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVMSKPS, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Extract Packed DP-FP Sign Mask (SSE2).
		void CSSE2::movmskpd( const CGPReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVMSKPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Scalar Double-Precision FP Value (SSE2).
		void CSSE2::movsd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Scalar Double-Precision FP Value (SSE2).
		void CSSE2::movsd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Scalar Double-Precision FP Value (SSE2).
		void CSSE2::movsd( const CMem& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Aligned Packed Double-Precision FP Values (SSE2).
		void CSSE2::movapd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVAPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Aligned Packed Double-Precision FP Values (SSE2).
		void CSSE2::movapd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVAPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Aligned Packed Double-Precision FP Values (SSE2).
		void CSSE2::movapd( const CMem& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVAPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Quadword from XMM to MMX Technology Register (SSE2).
		void CSSE2::movdq2q( const CMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVDQ2Q, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Quadword from MMX Technology to XMM Register (SSE2).
		void CSSE2::movq2dq( const CXMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVQ2DQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move High Packed Double-Precision FP Value (SSE2).
		void CSSE2::movhpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVHPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move High Packed Double-Precision FP Value (SSE2).
		void CSSE2::movhpd( const CMem& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVHPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Low Packed Double-Precision FP Value (SSE2).
		void CSSE2::movlpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVLPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Low Packed Double-Precision FP Value (SSE2).
		void CSSE2::movlpd( const CMem& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVLPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Store Double Quadword Using Non-Temporal Hint (SSE2).
		void CSSE2::movntdq( const CMem& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVNTDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Store Store DWORD Using Non-Temporal Hint (SSE2).
		void CSSE2::movnti( const CMem& dst, const CGPReg& src )
		{
			m_PU._emitInstruction( INST_MOVNTI, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Store Packed Double-Precision FP Values Using Non-Temporal Hint (SSE2).
		void CSSE2::movntpd( const CMem& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVNTPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Unaligned Packed Double-Precision FP Values (SSE2).
		void CSSE2::movupd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVUPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Unaligned Packed Double-Precision FP Values (SSE2).
		void CSSE2::movupd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MOVUPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Unaligned Packed Double-Precision FP Values (SSE2).
		void CSSE2::movupd( const CMem& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MOVUPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Multiply (SSE2).
		void CSSE2::mulpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MULPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Multiply (SSE2).
		void CSSE2::mulpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MULPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar DP-FP Multiply (SSE2).
		void CSSE2::mulsd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_MULSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar DP-FP Multiply (SSE2).
		void CSSE2::mulsd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_MULSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bit-wise Logical OR for DP-FP Data (SSE2).
		void CSSE2::orpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_ORPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bit-wise Logical OR for DP-FP Data (SSE2).
		void CSSE2::orpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_ORPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Signed Saturation (SSE2).
		void CSSE2::packsswb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PACKSSWB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Signed Saturation (SSE2).
		void CSSE2::packsswb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PACKSSWB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Signed Saturation (SSE2).
		void CSSE2::packssdw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PACKSSDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Signed Saturation (SSE2).
		void CSSE2::packssdw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PACKSSDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Unsigned Saturation (SSE2).
		void CSSE2::packuswb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PACKUSWB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Pack with Unsigned Saturation (SSE2).
		void CSSE2::packuswb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PACKUSWB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed BYTE Add (SSE2).
		void CSSE2::paddb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed BYTE Add (SSE2).
		void CSSE2::paddb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed WORD Add (SSE2).
		void CSSE2::paddw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed WORD Add (SSE2).
		void CSSE2::paddw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DWORD Add (SSE2).
		void CSSE2::paddd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DWORD Add (SSE2).
		void CSSE2::paddd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed QWORD Add (SSE2).
		void CSSE2::paddq( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed QWORD Add (SSE2).
		void CSSE2::paddq( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed QWORD Add (SSE2).
		void CSSE2::paddq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed QWORD Add (SSE2).
		void CSSE2::paddq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add with Saturation (SSE2).
		void CSSE2::paddsb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add with Saturation (SSE2).
		void CSSE2::paddsb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add with Saturation (SSE2).
		void CSSE2::paddsw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add with Saturation (SSE2).
		void CSSE2::paddsw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add Unsigned with Saturation (SSE2).
		void CSSE2::paddusb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDUSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add Unsigned with Saturation (SSE2).
		void CSSE2::paddusb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDUSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add Unsigned with Saturation (SSE2).
		void CSSE2::paddusw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PADDUSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Add Unsigned with Saturation (SSE2).
		void CSSE2::paddusw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PADDUSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Logical AND (SSE2).
		void CSSE2::pand( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PAND, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Logical AND (SSE2).
		void CSSE2::pand( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PAND, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Logical AND Not (SSE2).
		void CSSE2::pandn( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PANDN, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Logical AND Not (SSE2).
		void CSSE2::pandn( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PANDN, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Spin Loop Hint (SSE2).
		void CSSE2::pause()
		{
			m_PU._emitInstruction( INST_PAUSE );
		}

		//------------------------------------------------------------------------------
		//Packed Average (SSE2).
		void CSSE2::pavgb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PAVGB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Average (SSE2).
		void CSSE2::pavgb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PAVGB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Average (SSE2).
		void CSSE2::pavgw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PAVGW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Average (SSE2).
		void CSSE2::pavgw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PAVGW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (BYTES) (SSE2).
		void CSSE2::pcmpeqb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPEQB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (BYTES) (SSE2).
		void CSSE2::pcmpeqb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPEQB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (WORDS) (SSE2).
		void CSSE2::pcmpeqw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPEQW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (WORDS) (SSE2).
		void CSSE2::pcmpeqw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPEQW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (DWORDS) (SSE2).
		void CSSE2::pcmpeqd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPEQD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Equal (DWORDS) (SSE2).
		void CSSE2::pcmpeqd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPEQD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (BYTES) (SSE2).
		void CSSE2::pcmpgtb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPGTB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (BYTES) (SSE2).
		void CSSE2::pcmpgtb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPGTB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (WORDS) (SSE2).
		void CSSE2::pcmpgtw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPGTW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (WORDS) (SSE2).
		void CSSE2::pcmpgtw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPGTW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (DWORDS) (SSE2).
		void CSSE2::pcmpgtd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PCMPGTD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Compare for Greater Than (DWORDS) (SSE2).
		void CSSE2::pcmpgtd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PCMPGTD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Signed Integer Word Maximum (SSE2).
		void CSSE2::pmaxsw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMAXSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Signed Integer Word Maximum (SSE2).
		void CSSE2::pmaxsw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMAXSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Unsigned Integer Byte Maximum (SSE2).
		void CSSE2::pmaxub( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMAXUB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Unsigned Integer Byte Maximum (SSE2).
		void CSSE2::pmaxub( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMAXUB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Signed Integer Word Minimum (SSE2).
		void CSSE2::pminsw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMINSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Signed Integer Word Minimum (SSE2).
		void CSSE2::pminsw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMINSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Unsigned Integer Byte Minimum (SSE2).
		void CSSE2::pminub( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMINUB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Unsigned Integer Byte Minimum (SSE2).
		void CSSE2::pminub( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMINUB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Move Byte Mask (SSE2).
		void CSSE2::pmovmskb( const CGPReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMOVMSKB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply High (SSE2).
		void CSSE2::pmulhw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMULHW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply High (SSE2).
		void CSSE2::pmulhw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMULHW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply High Unsigned (SSE2).
		void CSSE2::pmulhuw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMULHUW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply High Unsigned (SSE2).
		void CSSE2::pmulhuw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMULHUW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply Low (SSE2).
		void CSSE2::pmullw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMULLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply Low (SSE2).
		void CSSE2::pmullw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMULLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply to QWORD (SSE2).
		void CSSE2::pmuludq( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PMULUDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply to QWORD (SSE2).
		void CSSE2::pmuludq( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMULUDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply to QWORD (SSE2).
		void CSSE2::pmuludq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMULUDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply to QWORD (SSE2).
		void CSSE2::pmuludq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMULUDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bitwise Logical OR (SSE2).
		void CSSE2::por( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_POR, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bitwise Logical OR (SSE2).
		void CSSE2::por( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_POR, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (SSE2).
		void CSSE2::pslld( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSLLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (SSE2).
		void CSSE2::pslld( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSLLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (SSE2).
		void CSSE2::pslld( const CXMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSLLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (SSE2).
		void CSSE2::psllq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSLLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (SSE2).
		void CSSE2::psllq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSLLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (SSE2).
		void CSSE2::psllq( const CXMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSLLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (SSE2).
		void CSSE2::psllw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSLLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (SSE2).
		void CSSE2::psllw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSLLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (SSE2).
		void CSSE2::psllw( const CXMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSLLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Left Logical (SSE2).
		void CSSE2::pslldq( const CXMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSLLDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (SSE2).
		void CSSE2::psrad( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSRAD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (SSE2).
		void CSSE2::psrad( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSRAD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (SSE2).
		void CSSE2::psrad( const CXMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRAD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (SSE2).
		void CSSE2::psraw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSRAW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (SSE2).
		void CSSE2::psraw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSRAW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Arithmetic (SSE2).
		void CSSE2::psraw( const CXMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRAW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (SSE2).
		void CSSE2::psubb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (SSE2).
		void CSSE2::psubb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (SSE2).
		void CSSE2::psubw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (SSE2).
		void CSSE2::psubw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (SSE2).
		void CSSE2::psubd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (SSE2).
		void CSSE2::psubd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (SSE2).
		void CSSE2::psubq( const CMMReg& dst, const CMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (SSE2).
		void CSSE2::psubq( const CMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (SSE2).
		void CSSE2::psubq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract (SSE2).
		void CSSE2::psubq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply and Add (SSE2).
		void CSSE2::pmaddwd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PMADDWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Multiply and Add (SSE2).
		void CSSE2::pmaddwd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PMADDWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Shuffle Packed DWORDs (SSE2).
		void CSSE2::pshufd( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PSHUFD, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Shuffle Packed DWORDs (SSE2).
		void CSSE2::pshufd( const CXMMReg& dst, const CMem& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PSHUFD, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Shuffle Packed High Words (SSE2).
		void CSSE2::pshufhw( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PSHUFHW, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Shuffle Packed High Words (SSE2).
		void CSSE2::pshufhw( const CXMMReg& dst, const CMem& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PSHUFHW, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Shuffle Packed Low Words (SSE2).
		void CSSE2::pshuflw( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PSHUFLW, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Shuffle Packed Low Words (SSE2).
		void CSSE2::pshuflw( const CXMMReg& dst, const CMem& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PSHUFLW, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (SSE2).
		void CSSE2::psrld( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSRLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (SSE2).
		void CSSE2::psrld( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSRLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (SSE2).
		void CSSE2::psrld( const CXMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRLD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (SSE2).
		void CSSE2::psrlq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSRLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (SSE2).
		void CSSE2::psrlq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSRLQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (SSE2).
		void CSSE2::psrlq( const CXMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRLQ, &dst, &src );
		}
		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (SSE2).
		void CSSE2::psrlw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSRLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (SSE2).
		void CSSE2::psrlw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSRLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Shift Right Logical (SSE2).
		void CSSE2::psrlw( const CXMMReg& dst, const CImm& src )
		{
			m_PU._emitInstruction( INST_PSRLW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Saturation (SSE2).
		void CSSE2::psubsb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Saturation (SSE2).
		void CSSE2::psubsb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Saturation (SSE2).
		void CSSE2::psubsw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Saturation (SSE2).
		void CSSE2::psubsw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Unsigned Saturation (SSE2).
		void CSSE2::psubusb( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBUSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Unsigned Saturation (SSE2).
		void CSSE2::psubusb( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBUSB, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Unsigned Saturation (SSE2).
		void CSSE2::psubusw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PSUBUSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed Subtract with Unsigned Saturation (SSE2).
		void CSSE2::psubusw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PSUBUSW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Data (SSE2).
		void CSSE2::punpckhbw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Data (SSE2).
		void CSSE2::punpckhbw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Data (SSE2).
		void CSSE2::punpckhwd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Data (SSE2).
		void CSSE2::punpckhwd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Data (SSE2).
		void CSSE2::punpckhdq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Data (SSE2).
		void CSSE2::punpckhdq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Data (SSE2).
		void CSSE2::punpckhqdq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHQDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack High Data (SSE2).
		void CSSE2::punpckhqdq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKHQDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack Low Data (SSE2).
		void CSSE2::punpcklbw( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack Low Data (SSE2).
		void CSSE2::punpcklbw( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLBW, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack Low Data (SSE2).
		void CSSE2::punpcklwd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack Low Data (SSE2).
		void CSSE2::punpcklwd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLWD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack Low Data (SSE2).
		void CSSE2::punpckldq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack Low Data (SSE2).
		void CSSE2::punpckldq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack Low Data (SSE2).
		void CSSE2::punpcklqdq( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLQDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack Low Data (SSE2).
		void CSSE2::punpcklqdq( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PUNPCKLQDQ, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bitwise Exclusive OR (SSE2).
		void CSSE2::pxor( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_PXOR, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bitwise Exclusive OR (SSE2).
		void CSSE2::pxor( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_PXOR, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Shuffle DP-FP (SSE2).
		void CSSE2::shufpd( const CXMMReg& dst, const CXMMReg& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_SHUFPD, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Shuffle DP-FP (SSE2).
		void CSSE2::shufpd( const CXMMReg& dst, const CMem& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_SHUFPD, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Compute Square Roots of Packed DP-FP Values (SSE2).
		void CSSE2::sqrtpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_SQRTPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Compute Square Roots of Packed DP-FP Values (SSE2).
		void CSSE2::sqrtpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_SQRTPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Compute Square Root of Scalar DP-FP Value (SSE2).
		void CSSE2::sqrtsd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_SQRTSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Compute Square Root of Scalar DP-FP Value (SSE2).
		void CSSE2::sqrtsd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_SQRTSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Subtract (SSE2).
		void CSSE2::subpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_SUBPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Packed DP-FP Subtract (SSE2).
		void CSSE2::subpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_SUBPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar DP-FP Subtract (SSE2).
		void CSSE2::subsd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_SUBSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar DP-FP Subtract (SSE2).
		void CSSE2::subsd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_SUBSD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar Unordered DP-FP Compare and Set EFLAGS (SSE2).
		void CSSE2::ucomisd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_UCOMISD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Scalar Unordered DP-FP Compare and Set EFLAGS (SSE2).
		void CSSE2::ucomisd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_UCOMISD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack and Interleave High Packed Double-Precision FP Values (SSE2).
		void CSSE2::unpckhpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_UNPCKHPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack and Interleave High Packed Double-Precision FP Values (SSE2).
		void CSSE2::unpckhpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_UNPCKHPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack and Interleave Low Packed Double-Precision FP Values (SSE2).
		void CSSE2::unpcklpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_UNPCKLPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Unpack and Interleave Low Packed Double-Precision FP Values (SSE2).
		void CSSE2::unpcklpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_UNPCKLPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bit-wise Logical OR for DP-FP Data (SSE2).
		void CSSE2::xorpd( const CXMMReg& dst, const CXMMReg& src )
		{
			m_PU._emitInstruction( INST_XORPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Bit-wise Logical OR for DP-FP Data (SSE2).
		void CSSE2::xorpd( const CXMMReg& dst, const CMem& src )
		{
			m_PU._emitInstruction( INST_XORPD, &dst, &src );
		}

		//------------------------------------------------------------------------------
		//Insert Word (SSE2).
		void CSSE2::pinsrw( const CXMMReg& dst, const CGPReg& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PINSRW, &dst, &src, &imm8 );
		}

		//------------------------------------------------------------------------------
		//Insert Word (SSE2).
		void CSSE2::pinsrw( const CXMMReg& dst, const CMem& src, const CImm& imm8 )
		{
			m_PU._emitInstruction( INST_PINSRW, &dst, &src, &imm8 );
		}

	}//nsx86
}//nsArch

#endif//( QOR_ARCH == QOR_ARCH_X86_32 || QOR_ARCH == QOR_ARCH_X86_64 )
