//clang3.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//clang 3 common base

// When compiling with clang before __has_extension was defined,
// even if one writes 'defined(__has_extension) && __has_extension(xxx)',
// clang reports a compiler error. So the only workaround found is:

#ifndef __has_extension
#define __has_extension __has_feature
#endif

// Branch prediction hints
#if defined(__has_builtin)
#	if __has_builtin(__builtin_expect)
#		define QOR_LIKELY(x) __builtin_expect(x, 1)
#		define QOR_UNLIKELY(x) __builtin_expect(x, 0)
#	endif
#endif

//--------------------------------------------------------------------------------
//Module Interface declarations
#if !defined(_WIN32) && !defined(__WIN32__) && !defined(WIN32)
#	define __QCMP_EXPORT	__attribute__((__visibility__("default")))	//declare an item as exported from the module
#	define __QCMP_IMPORT	//declare an item as imported from another module
#	define __QCMP_LOCAL		__attribute__((__visibility__("hidden")))//declare an item as being local to a module
#endif

// The QOR_FALLTHROUGH macro can be used to annotate implicit fall-through
// between switch labels.
#if __cplusplus >= 201103L && defined(__has_warning)
#  if __has_feature(cxx_attributes) && __has_warning("-Wimplicit-fallthrough")
#    define QOR_FALLTHROUGH [[clang::fallthrough]]
#  endif
#endif

// Currently clang on Windows using VC++ RTL does not support C++11's char16_t or char32_t

// Unused attribute:
#if defined(__GNUC__) && (__GNUC__ >= 4)
#  define QOR_ATTRIBUTE_UNUSED __attribute__((unused))
#endif
