//WinQLSocketConnector.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_IO_SOCKETCONNECTOR_H_3
#define WINQL_IO_SOCKETCONNECTOR_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Application/IO/WinQLOverlappedHandler.h"
#include "WinQL/Application/Comms/Network/WinQLSocket.h"
#include "BluefootQOR/BfConnectionPool.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL ) CSocketConnector : public nsBluefoot::CPlug
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CSocketConnector );

		CSocketConnector( nsBluefoot::CConnectionPool* pPool = 0 );
		virtual ~CSocketConnector();

		//Plug interface
		virtual bool Connect();													//Device specific connection
		virtual void Disconnect( void );										//Device specific disconnection
		virtual bool HandlePendingConnectionResult( bool bConnected );			//Handling device specific pending connection states for async connections

		//Socket properties

		void SetType( CSocket::eType Type );
		CSocket::eType GetType( void );

		void SetAddressFamily( CSocket::eAddressFamily );
		CSocket::eAddressFamily GetAddressFamily( void );

		void SetProtocol( int iProtocol );
		int GetProtocol( void );

		void SetProtocolInfo( WSAProtocolInfo* pInfo );
		WSAProtocolInfo* GetProtocolInfo( void );

		void SetGroup( unsigned int uiGroup );
		unsigned int GetGroup( void );

		void SetFlags( unsigned long ulFlags );
		unsigned long GetFlags( void );

		void SetAddress( CSocket::Internet_SocketAddress& Addr );
		void SetAddress( byte* pAddress, unsigned int uiByteCount );

		virtual CSocket& Socket( void ){ return m_Socket; }						//The underlying WinQL Socket wrapper

	protected:

		CSocket m_Socket;
		CSocket::eType m_Type;
		CSocket::eAddressFamily m_AddressFamily;
		CSocket::eProtocol m_iProtocol;
		CSocket::Address m_Address;
		unsigned int m_AddressSize;
		WSAProtocolInfo* m_pProtocolInfo;
		unsigned int m_uiGroup;
		unsigned long m_ulFlags;
	};

}//nsWin32

#endif//WINQL_IO_SOCKETCONNECTOR_H_3
