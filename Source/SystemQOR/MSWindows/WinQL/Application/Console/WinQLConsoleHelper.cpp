//WinQLConsoleHelper.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/ErrorSystem/WinQLErrDomain.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Console/WinQLConsoleHelper.h"
__QCMP_WARNING_POP
#include "WinQAPI/Kernel32.h"

using namespace nsWinQAPI;

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CConsoleHelper );

	//--------------------------------------------------------------------------------
	CConsoleHelper::CConsoleHelper()
	{
		_WINQ_FCONTEXT( "CConsoleHelper::CConsoleHelper" );
	}

	//--------------------------------------------------------------------------------
	CConsoleHelper::~CConsoleHelper()
	{
		_WINQ_FCONTEXT( "CConsoleHelper::~CConsoleHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CConsoleHelper::AddAlias( const TCHAR* Source, const TCHAR* Target, const TCHAR* ExeName )
	{			
		_WINQ_FCONTEXT( "CConsoleHelper::AddAlias" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().AddConsoleAlias( const_cast< TCHAR* >( Source ), const_cast< TCHAR* >( Target ), const_cast< TCHAR* >( ExeName ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConsoleHelper::Alloc()
	{
		_WINQ_FCONTEXT( "CConsoleHelper::Alloc" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::AllocConsole() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConsoleHelper::Attach( unsigned long dwProcessId )
	{	
		_WINQ_FCONTEXT( "CConsoleHelper::Attach" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::AttachConsole( dwProcessId ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleHelper::Free()
	{
		_WINQ_FCONTEXT( "CConsoleHelper::Free" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::FreeConsole() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConsoleHelper::GenerateCtrlEvent( unsigned long dwCtrlEvent, unsigned long dwProcessGroupId )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GenerateCtrlEvent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GenerateConsoleCtrlEvent( dwCtrlEvent, dwProcessGroupId ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	unsigned long CConsoleHelper::GetAlias( const TCHAR* szSource, CTStringRef strTarget, const TCHAR* szExeName )
	{	
		_WINQ_FCONTEXT( "CConsoleHelper::GetAlias" );
		unsigned long dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::Instance().GetConsoleAlias( const_cast< TCHAR* >( szSource ), strTarget->GetBuffer(), strTarget->Allocation(), const_cast< TCHAR* >( szExeName ) );
			strTarget->ReleaseBuffer();
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------	
	unsigned long CConsoleHelper::GetAliases( CTStringRef strAliases, const TCHAR* szExeName )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetAliases" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::Instance().GetConsoleAliases( strAliases->GetBuffer(), strAliases->Allocation(), const_cast< TCHAR* >( szExeName ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------	
	unsigned long CConsoleHelper::GetAliasesLength( const TCHAR* szExeName )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetAliasesLength" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::Instance().GetConsoleAliasesLength( const_cast< TCHAR* >( szExeName ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------	
	unsigned long CConsoleHelper::GetAliasExes( CTStringRef strNameBuffer )
	{	
		_WINQ_FCONTEXT( "CConsoleHelper::GetAliasExes" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::Instance().GetConsoleAliasExes( strNameBuffer->GetBuffer(), strNameBuffer->Allocation() );
			if( dwResult == 0 )
			{
				_QSYS_MSW_WWL_CONT_ERROR(( GENERAL_API_ERROR, _T( "GetConsoleAliasExes" ), 0 ));
			}
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------	
	unsigned long CConsoleHelper::GetAliasExesLength()
	{	
		_WINQ_FCONTEXT( "CConsoleHelper::GetAliasExesLength" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::Instance().GetConsoleAliasExesLength();
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------	
	CCodePage CConsoleHelper::GetCP()
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetCP" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::GetConsoleCP();
		}__QOR_ENDPROTECT
		return CCodePage(uiResult);
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleHelper::GetDisplayMode( unsigned long& ModeFlags )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetDisplayMode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetConsoleDisplayMode( &ModeFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConsoleHelper::GetHistoryInfo( ConsoleHistoryInfo& ConsoleHistoryInfo )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetHistoryInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().GetConsoleHistoryInfo( reinterpret_cast< ::PCONSOLE_HISTORY_INFO >( &ConsoleHistoryInfo ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CConsoleHelper::GetOriginalTitle( CTStringRef strConsoleTitle )
	{	
		_WINQ_FCONTEXT( "CConsoleHelper::GetOriginalTitle" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::Instance().GetConsoleOriginalTitle( strConsoleTitle->GetBuffer(), strConsoleTitle->Allocation() );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------	
	CCodePage CConsoleHelper::GetOutputCP()
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetOutputCP" );
		CCodePage CP( CKernel32::GetConsoleOutputCP() );
		return CP;
	}

	//--------------------------------------------------------------------------------	
	unsigned long CConsoleHelper::GetProcessList( nsCodeQOR::CTArray< unsigned long >& ProcessList )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetProcessList" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			ProcessList.AcquireAccess();
			dwResult = CKernel32::GetConsoleProcessList( ProcessList.GetAddressOfData(), ProcessList.Capacity() );
			ProcessList.Validate( dwResult );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleHelper::GetSelectionInfo( ConsoleSelectionInfo& ConsoleSelectionInfo )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetSelectionInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().GetConsoleSelectionInfo( reinterpret_cast< ::PCONSOLE_SELECTION_INFO >( &ConsoleSelectionInfo ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	unsigned long CConsoleHelper::GetTitle( CTString& strConsoleTitle )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetTitle" );
		unsigned long ulResult = 0;
		__QOR_PROTECT
		{
			ulResult = CKernel32::GetConsoleTitle( strConsoleTitle.GetBuffer(), strConsoleTitle.Allocation() );
			strConsoleTitle.ValidateBuffer( static_cast< unsigned short >( ulResult ) );
		}__QOR_ENDPROTECT
		return ulResult;
	}

	//--------------------------------------------------------------------------------	
	COSWindow::refType CConsoleHelper::GetWindow()
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetWindow" );
		__QOR_PROTECT
		{
			return COSWindow::FromHandle( (void*)( CKernel32::GetConsoleWindow() ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleHelper::GetNumberOfMouseButtons( unsigned long& NumberOfMouseButtons )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetNumberOfMouseButtons" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetNumberOfConsoleMouseButtons( &NumberOfMouseButtons ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	CStdHandle CConsoleHelper::GetStdHandle( unsigned long nStdHandle )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::GetStdHandle" );
		CStdHandle hStd(nullptr);
		__QOR_PROTECT
		{
			hStd = CKernel32::GetStdHandle( nStdHandle );
		}__QOR_ENDPROTECT
		return hStd;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleHelper::SetCP( const CCodePage& CodePage )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::SetCP" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleCP( CodePage.ID() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleHelper::SetCtrlHandler( CtrlHandlerCallback HandlerRoutine, bool Add )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::SetCtrlHandler" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleCtrlHandler( reinterpret_cast< ::PHANDLER_ROUTINE >( HandlerRoutine ), Add ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CConsoleHelper::SetHistoryInfo( const ConsoleHistoryInfo& ConsoleHistory )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::SetHistoryInfo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().SetConsoleHistoryInfo( reinterpret_cast< ::PCONSOLE_HISTORY_INFO >( &( const_cast< nsWin32::ConsoleHistoryInfo& >( ConsoleHistory ) ) ) )? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleHelper::SetOutputCP( const CCodePage& CodePage )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::SetOutputCP" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleOutputCP( CodePage.ID() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleHelper::SetTitle( const TCHAR* lpConsoleTitle )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::SetTitle" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetConsoleTitle( lpConsoleTitle ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------	
	bool CConsoleHelper::SetStdHandle( unsigned long nStdHandle, CStdHandle& hHandle )
	{
		_WINQ_FCONTEXT( "CConsoleHelper::SetStdHandle" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetStdHandle( nStdHandle, hHandle.Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
