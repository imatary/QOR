//Window.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GUI_WINDOW_H_3
#define WINQL_GUI_WINDOW_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Instancing/STMember.h"
#include "WinQL/Application/Graphics/WinQLRectangle.h"
#include "WinQL/Application/User/WinQLUserObject.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Data.h"
#include "WinQL/GUI/WindowClass.h"
#include "WinQL/GUI/GUI.h"
#include "WinQL/GUI/Menu.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

//--------------------------------------------------------------------------------
namespace nsQOR
{
	class __QOR_INTERFACE( __APPOCRITA ) CController;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef struct tagALTTABINFO
	{
		unsigned long cbSize;
		int cItems;
		int cColumns;
		int cRows;
		int iColFocus;
		int iRowFocus;
		int cxItem;
		int cyItem;
		POINT ptStart;
	} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

	//--------------------------------------------------------------------------------
	typedef struct tagTITLEBARINFO
	{
		unsigned long cbSize;
		RECT rcTitleBar;
		unsigned long rgstate[ CChildren_TitleBar + 1 ];
	} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

	//--------------------------------------------------------------------------------
	typedef struct tagSCROLLBARINFO
	{
		unsigned long cbSize;
		RECT rcScrollBar;
		int dxyLineButton;
		int xyThumbTop;
		int xyThumbBottom;
		int reserved;
		unsigned long rgstate[ CChildren_ScrollBar + 1 ];
	} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

	//--------------------------------------------------------------------------------
	typedef struct tagWINDOWINFO
	{
		unsigned long cbSize;
		RECT rcWindow;
		RECT rcClient;
		unsigned long dwStyle;
		unsigned long dwExStyle;
		unsigned long dwWindowStatus;
		unsigned int cxWindowBorders;
		unsigned int cyWindowBorders;
		unsigned short atomWindowType;
		unsigned short wCreatorVersion;
	} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;

	//--------------------------------------------------------------------------------
	typedef struct tagWINDOWPLACEMENT 
	{
		unsigned int length;
		unsigned int flags;
		unsigned int showCmd;
		POINT ptMinPosition;
		POINT ptMaxPosition;
		RECT  rcNormalPosition;
#	ifdef _MAC
		RECT  rcDevice;
#	endif
	} WINDOWPLACEMENT, *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;

	
	//--------------------------------------------------------------------------------
	typedef struct tagUPDATELAYEREDWINDOWINFO
	{
		unsigned long cbSize;
		CDCHandle::refType hdcDst;
		const POINT* pptDst;
		const SIZE* psize;
		CDCHandle::refType hdcSrc;
		const POINT* pptSrc;
		unsigned long crKey;
		const BLENDFUNCTION* pblend;
		unsigned long dwFlags;
		const RECT* prcDirty;
	} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;
	
	//--------------------------------------------------------------------------------
	typedef struct tagSCROLLINFO
	{
		unsigned int    cbSize;
		unsigned int    fMask;
		int     nMin;
		int     nMax;
		unsigned int    nPage;
		int     nPos;
		int     nTrackPos;
	}   SCROLLINFO, *LPSCROLLINFO;

	typedef SCROLLINFO const *LPCSCROLLINFO;

	//--------------------------------------------------------------------------------
	typedef struct tagMINMAXINFO 
	{
		POINT ptReserved;
		POINT ptMaxSize;
		POINT ptMaxPosition;
		POINT ptMinTrackSize;
		POINT ptMaxTrackSize;
	} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;

	typedef int ( __QCMP_STDCALLCONVENTION *WindowEnumCallback)( CWindowHandle::refType, Cmp_long_ptr );
	typedef Cmp_long_ptr ( __QCMP_STDCALLCONVENTION *WindowProcedure )( void* hwnd, unsigned int, Cmp_uint_ptr, Cmp_long_ptr );
	typedef int ( __QCMP_STDCALLCONVENTION *PropEnumCallback )( CWindowHandle::refType, const TCHAR*, void* );
	typedef int ( __QCMP_STDCALLCONVENTION *PropEnumCallbackEx )( CWindowHandle::refType, TCHAR*, void*, Cmp_ulong_ptr );

	//Window field offsets for GetWindowLong

	__QCMP_STATIC_CONSTANT( int, gwlWndProc			= (-4)  );
	__QCMP_STATIC_CONSTANT( int, gwlHInstance		= (-6)  );
	__QCMP_STATIC_CONSTANT( int, gwlHwndParent		= (-8)  );
	__QCMP_STATIC_CONSTANT( int, gwlStyle			= (-16) );
	__QCMP_STATIC_CONSTANT( int, gwlExStyle			= (-20) );
	__QCMP_STATIC_CONSTANT( int, gwlUserData		= (-21) );
	__QCMP_STATIC_CONSTANT( int, gwlIDwm			= (-12) );

	class __QOR_INTERFACE( __WINQL_GUI ) COSWindow;

	typedef CTHandleMap< void*, COSWindow > CWindowHandleMap;

	extern __QCMP_DECLARE_PERTHREAD CWindowHandleMap* p_tWndHandleMap;

	//--------------------------------------------------------------------------------
	//forward declare friend variants of COSWindow so they can access the API wrapper
	class __QOR_INTERFACE( __WINQL_GUI ) CShellWindow;
	class __QOR_INTERFACE( __WINQL_GUI ) CForegroundWindow;
	class __QOR_INTERFACE( __WINQL_GUI ) CDesktopWindow;
	class __QOR_INTERFACE( __WINQL_GUI ) COSWindowProperties;
	class __QOR_INTERFACE( __WINQL_GUI ) COSWindowScroll;
	class __QOR_INTERFACE( __WINQL_GUI ) COSWindowPainting;
	class __QOR_INTERFACE( __WINQL_GUI ) CMDIChildWindow;
	class __QOR_INTERFACE( __WINQL_GUI ) CBaseWindowController;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) COSWindow
	{
		friend class CShellWindow;
		friend class CForegroundWindow;
		friend class CDesktopWindow;
		friend class COSWindowProperties;
		friend class COSWindowScroll;
		friend class COSWindowPainting;
		friend class CMDIChildWindow;
		friend class COSWindowShellHook;

	public:

		typedef nsCodeQOR::CTLRef< COSWindow > refType;

		//Window Styles
		//--------------------------------------------------------------------------------
		enum eWindowStyles
		{
			eWSOverlapped = 0x00000000L,
			eWSPopup = 0x80000000L,
			eWSChild = 0x40000000L,
			eWSMinimize = 0x20000000L,
			eWSVisible = 0x10000000L, 
			eWSDisabled = 0x08000000L,
			eWSClipSiblings = 0x04000000L,
			eWSClipChildren = 0x02000000L,
			eWSMaximize = 0x01000000L,
			eWSCaption = 0x00C00000L,//     WS_BORDER | WS_DLGFRAME
			eWSBorder = 0x00800000L,
			eWSDlgFrame = 0x00400000L,
			eWSVScroll = 0x00200000L, 
			eWSHScroll = 0x00100000L,
			eWSSysMenu = 0x00080000L, 
			eWSThickFrame = 0x00040000L,
			eWSGroup = 0x00020000L,
			eWSTabStop = 0x00010000L, 
			eWSMinimizeBox = 0x00020000L,
			eWSMaximizeBox = 0x00010000L,
			eWSTiled = eWSOverlapped,
			eWSIconic = eWSMinimize,
			eWSSizeBox = eWSThickFrame,				
			eWSOverlappedWindow = eWSOverlapped | eWSCaption | eWSSysMenu | eWSThickFrame | eWSMinimizeBox | eWSMaximizeBox,
			eWSTileWindow = eWSOverlappedWindow,
			eWSPopupWindow = eWSPopup | eWSBorder | eWSSysMenu,
			eWSChildWindow = eWSChild,
		};

		//--------------------------------------------------------------------------------
		enum eExWindowStyles
		{
			eWSExLeft = 0x00000000L,
			eWSExDlgModalFrame = 0x00000001L,
			eWSExNoParentNotify = 0x00000004L,
			eWSExTopmost = 0x00000008L,
			eWSExAcceptFiles = 0x00000010L,
			eWSExTransparent = 0x00000020L,
			eWSExMDIChild = 0x00000040L,
			eWSExToolWindow = 0x00000080L,
			eWSExWindowEdge = 0x00000100L,
			eWSExClientEdge = 0x00000200L,
			eWSExContextHelp = 0x00000400L,
			eWSExRight = 0x00001000L,
			eWSExRTLReading = 0x00002000L,
			eWSExLeftScrollBar = 0x00004000L,
			eWSExRightScrollBar = 0x00000000L,
			eWSExControlParent = 0x00010000L,
			eWSExStaticEdge = 0x00020000L,
			eWSExAppWindow = 0x00040000L,
			eWSExLayered = 0x00080000,
			eWSExNoInheritLayout = 0x00100000L,
			eWSExLayoutRTL = 0x00400000L,
			eWSExComposited = 0x02000000L,
			eWSExNoActivate = 0x08000000L,
			eWSExOverlappedWindow = ( eWSExWindowEdge | eWSExClientEdge ),
			eWSExPaletteWindow = ( eWSExWindowEdge | eWSExToolWindow | eWSExTopmost ),
		};

		//Window Messages

		__QCMP_STATIC_CONSTANT( unsigned short, wmNull =                          0x0000 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCreate =                        0x0001 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmDestroy =                       0x0002 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMove =                          0x0003 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSize =                          0x0005 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmActivate =                      0x0006 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSetFocus =                      0x0007 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmKillFocus = 					 0x0008 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmEnable =                        0x000A );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSetRedraw =                     0x000B );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSetText =                       0x000C );
		__QCMP_STATIC_CONSTANT( unsigned short, wmGetText =                       0x000D );
		__QCMP_STATIC_CONSTANT( unsigned short, wmGetTextLength =				0x000E );
		__QCMP_STATIC_CONSTANT( unsigned short, wmPaint =						0x000F );
		__QCMP_STATIC_CONSTANT( unsigned short, wmClose =						0x0010 );

#ifndef _WIN32_WCE
		__QCMP_STATIC_CONSTANT( unsigned short, wmQueryEndSession =              0x0011 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmQueryOpen =                    0x0013 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmEndSession =                   0x0016 );
#endif
		__QCMP_STATIC_CONSTANT( unsigned short, wmQuit =                         0x0012 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmEraseBackground =              0x0014 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSysColorChange =               0x0015 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmShowWindow =                   0x0018 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmWinINIChange =                 0x001A );
		__QCMP_STATIC_CONSTANT( unsigned short, wmDevModeChange                = 0x001B );
		__QCMP_STATIC_CONSTANT( unsigned short, wmActivateApp                  = 0x001C );
		__QCMP_STATIC_CONSTANT( unsigned short, wmFontChange                   = 0x001D );
		__QCMP_STATIC_CONSTANT( unsigned short, wmTimeChange                   = 0x001E );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCancelMode                   = 0x001F );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSetCursor                    = 0x0020 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseActivate                = 0x0021 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmChildActivate                = 0x0022 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmQueueSync                    = 0x0023 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmGetMinMaxInfo =				0x0024 );

		__QCMP_STATIC_CONSTANT( unsigned short, wmPaintIcon                    = 0x0026 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIconEraseBkgnd               = 0x0027 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNextDlgCtl                   = 0x0028 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSpoolerStatus                = 0x002A );
		__QCMP_STATIC_CONSTANT( unsigned short, wmDrawItem                     = 0x002B );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMeasureItem                  = 0x002C );
		__QCMP_STATIC_CONSTANT( unsigned short, wmDeleteItem                   = 0x002D );
		__QCMP_STATIC_CONSTANT( unsigned short, wmVKeyToItem                   = 0x002E );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCharToItem                   = 0x002F );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSetFont                      = 0x0030 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmGetFont                      = 0x0031 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSetHotKey                    = 0x0032 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmGetHotKey                    = 0x0033 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmQueryDragIcon                = 0x0037 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCompareItem                  = 0x0039 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmGetObject                    = 0x003D );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCompacting                   = 0x0041 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCommNotify                   = 0x0044 ); // no longer suported
		__QCMP_STATIC_CONSTANT( unsigned short, wmWindowPosChanging            = 0x0046 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmWindowPosChanged             = 0x0047 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmPower                        = 0x0048 );

		__QCMP_STATIC_CONSTANT( unsigned short, wmNotify                       = 0x004E );
		__QCMP_STATIC_CONSTANT( unsigned short, wmInputLangChangeRequest		  = 0x0050 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmInputLangChange              = 0x0051 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmTCard                        = 0x0052 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmHelp                         = 0x0053 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmUserChanged                  = 0x0054 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNotifyFormat                 = 0x0055 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmContextMenu                  = 0x007B );
		__QCMP_STATIC_CONSTANT( unsigned short, wmStyleChanging                = 0x007C );
		__QCMP_STATIC_CONSTANT( unsigned short, wmStyleChanged                 = 0x007D );
		__QCMP_STATIC_CONSTANT( unsigned short, wmDisplayChange                = 0x007E );
		__QCMP_STATIC_CONSTANT( unsigned short, wmGetIcon                      = 0x007F );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSetIcon                      = 0x0080 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCCreate =						0x0081 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCDestroy =					0x0082 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCCalcSize =					0x0083 );//WM_NCCALCSIZE
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCHitTest                    = 0x0084 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCPaint                      = 0x0085 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCActivate                   = 0x0086 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmGetDlgCode                   = 0x0087 );
#ifndef _WIN32_WCE
		__QCMP_STATIC_CONSTANT( unsigned short, wmSyncPaint                    = 0x0088 );
#endif
		__QCMP_STATIC_CONSTANT( unsigned short, wmUAHDestroyWindow =			0x0090 );
		__QCMP_STATIC_CONSTANT( unsigned short, wm93 =							0x0093 );
		__QCMP_STATIC_CONSTANT( unsigned short, wm94 =							0x0094 );

		__QCMP_STATIC_CONSTANT( unsigned short, wmNCMouseMove                  = 0x00A0 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCLButtonDown                = 0x00A1 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCLButtonUp                  = 0x00A2 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCLButtonDblClk              = 0x00A3 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCRButtonDown                = 0x00A4 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCRButtonUp                  = 0x00A5 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCRButtonDblClk              = 0x00A6 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCMButtonDown                = 0x00A7 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCMButtonUp                  = 0x00A8 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCMButtonDblClk              = 0x00A9 );

#if(_WIN32_WINNT >= 0x0500)
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCXButtonDown                = 0x00AB );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCXButtonUp                  = 0x00AC );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCXButtonDblClk              = 0x00AD );
#endif /* _WIN32_WINNT >= 0x0500 */

		__QCMP_STATIC_CONSTANT( unsigned short, wmKeyFirst                     = 0x0100 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmKeyDown                      = 0x0100 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmKeyUp                        = 0x0101 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmChar                         = 0x0102 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmDeadChar                     = 0x0103 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSysKeyDown                   = 0x0104 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSysKeyUp                     = 0x0105 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSysChar                      = 0x0106 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSysDeadChar                  = 0x0107 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmUniChar						= 0x0109 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMEStartComposition			= 0x010D );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMEEndComposition				= 0x010E );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMEComposition				    = 0x010F );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMEKeyLast					    = 0x010F );

		__QCMP_STATIC_CONSTANT( unsigned short, wmInitDialog						= 0x0110 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCommand						= 0x0111 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSysCommand						= 0x0112 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmTimer							= 0x0113 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmHScroll						= 0x0114 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmVScroll						= 0x0115 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmInitMenu						= 0x0116 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmInitMenuPopup					= 0x0117 );

		__QCMP_STATIC_CONSTANT( unsigned short, wmGesture						= 0x0119 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmGestureNotify					= 0x011A );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMenuSelect						= 0x011F );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMenuChar						= 0x0120 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmEnterIdle						= 0x0121 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMenuRButtonUp					= 0x0122 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMenuDrag						= 0x0123 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMenuGetObject					= 0x0124 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmUninitMenuPopup				= 0x0125 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMenuCommand					= 0x0126 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmChangeUIState					= 0x0127 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmUpdateUIState					= 0x0128 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmQueryUIState					= 0x0129 );

		__QCMP_STATIC_CONSTANT( unsigned short, wmCtlColorMsgBox					= 0x0132 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCtlColorEdit					= 0x0133 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCtlColorListBox				= 0x0134 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCtlColorBtn					= 0x0135 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCtlColorDlg					= 0x0136 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCtlColorScrollbar				= 0x0137 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCtlColorStatic					= 0x0138 );

		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseFirst                   = 0x0200	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseMove                    = 0x0200	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmLButtonDown                  = 0x0201	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmLButtonUp                    = 0x0202	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmLButtonDblClk                = 0x0203	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmRButtonDown                  = 0x0204	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmRButtonUp                    = 0x0205	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmRButtonDblClk                = 0x0206	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmMButtonDown                  = 0x0207	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmMButtonUp                    = 0x0208	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmMButtonDblClk                = 0x0209	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseWheel                   = 0x020A	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmXButtonDown                  = 0x020B	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmXButtonUp                    = 0x020C	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmXButtonDblClk                = 0x020D	);
		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseHWheel                  = 0x020E	);

#if (_WIN32_WINNT >= 0x0600)
		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseLast                    = 0x020E );
#elif (_WIN32_WINNT >= 0x0500)
		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseLast                    = 0x020D );
#elif (_WIN32_WINNT >= 0x0400) || (_WIN32_WINDOWS > 0x0400)
		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseLast                    = 0x020A );
#else
		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseLast                    = 0x0209 );
#endif /* (_WIN32_WINNT >= 0x0600) */

		__QCMP_STATIC_CONSTANT( unsigned short, wmParentNotify                  = 0x0210 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmEnterMenuLoop                 = 0x0211 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmExitMenuLoop                  = 0x0212 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNextMenu                      = 0x0213 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSizing                        = 0x0214 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCaptureChanged                = 0x0215 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMoving                        = 0x0216 );

		__QCMP_STATIC_CONSTANT( unsigned short, wmDeviceChange                   = 0x0219 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDICreate                      = 0x0220 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDIDestroy                     = 0x0221 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDIActivate                    = 0x0222 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDIRestore                     = 0x0223 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDINext                        = 0x0224 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDIMaximize                    = 0x0225 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDITile                        = 0x0226 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDICascade                     = 0x0227 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDIIconArrange                 = 0x0228 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDIGetActive                   = 0x0229 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDISetMenu                     = 0x0230 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmEnterSizeMove                  = 0x0231 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmExitSizeMove                   = 0x0232 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmDropFiles                      = 0x0233 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMDIRefreshMenu                 = 0x0234 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmTouch                          = 0x0240 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMESetContext                  = 0x0281 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMENotify                      = 0x0282 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMEControl                     = 0x0283 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMECompositionFull             = 0x0284 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMESelect                      = 0x0285 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMEChar                        = 0x0286 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMERequest                     = 0x0288 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMEKeyDown                     = 0x0290 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmIMEKeyUp                       = 0x0291 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseHover                     = 0x02A1 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmMouseLeave                     = 0x02A3 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCMouseHover                   = 0x02A0 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmNCMouseLeave                   = 0x02A2 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmWTSessionChange                = 0x02B1 );

		__QCMP_STATIC_CONSTANT( unsigned short, wmTabletFirst                    = 0x02c0 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmTabletLast                     = 0x02df );

		__QCMP_STATIC_CONSTANT( unsigned short, wmCut							= 0x0300 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmCopy							= 0x0301 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmPaste							= 0x0302 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmClear							= 0x0303 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmUndo							= 0x0304 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmRenderFormat					= 0x0305 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmRenderAllFormats				= 0x0306 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmDestroyClipboard				= 0x0307 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmDrawClipboard					= 0x0308 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmPaintClipboard					= 0x0309 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmVScrollClipboard				= 0x030A );
		__QCMP_STATIC_CONSTANT( unsigned short, wmSizeClipboard					= 0x030B );
		__QCMP_STATIC_CONSTANT( unsigned short, wmAskCBFormatName				= 0x030C );
		__QCMP_STATIC_CONSTANT( unsigned short, wmChangeCBChain					= 0x030D );
		__QCMP_STATIC_CONSTANT( unsigned short, wmHScrollClipboard				= 0x030E );
		__QCMP_STATIC_CONSTANT( unsigned short, wmQueryNewPalette				= 0x030F );
		__QCMP_STATIC_CONSTANT( unsigned short, wmPaletteIsChanging				= 0x0310 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmPaletteChanged					= 0x0311 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmHotKey							= 0x0312 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmPrint							= 0x0317 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmPrintClient					= 0x0318 );

		__QCMP_STATIC_CONSTANT( unsigned short, wmThemeChanged					= 0x031A );

		__QCMP_STATIC_CONSTANT( unsigned short, wmUser							= 0x0400 );
		__QCMP_STATIC_CONSTANT( unsigned short, wmApp							= 0x8000 );

		__QCMP_STATIC_CONSTANT( unsigned short, wmSetConsoleInfo				= wmUser + 201 );

		// ShowWindow Commands

		__QCMP_STATIC_CONSTANT( int, swHide             = 0	 );
		__QCMP_STATIC_CONSTANT( int, swShowNormal       = 1	 );
		__QCMP_STATIC_CONSTANT( int, swNormal           = 1	 );
		__QCMP_STATIC_CONSTANT( int, swShowMinimized    = 2	 );
		__QCMP_STATIC_CONSTANT( int, swShowMaximized    = 3	 );
		__QCMP_STATIC_CONSTANT( int, swMaximize         = 3	 );
		__QCMP_STATIC_CONSTANT( int, swShowNoActive	   = 4	 );
		__QCMP_STATIC_CONSTANT( int, swShow             = 5	 );
		__QCMP_STATIC_CONSTANT( int, swMinimize         = 6	 );
		__QCMP_STATIC_CONSTANT( int, swShowMinNoActive  = 7	 );
		__QCMP_STATIC_CONSTANT( int, swShowNA           = 8	 );
		__QCMP_STATIC_CONSTANT( int, swRestore          = 9	 );
		__QCMP_STATIC_CONSTANT( int, swShowDefault      = 10 );
		__QCMP_STATIC_CONSTANT( int, swForceMinimize    = 11 );
		__QCMP_STATIC_CONSTANT( int, swMax              = 11 );

		//SetWindowPos Flags
 
		__QCMP_STATIC_CONSTANT( int, swpNoSize          = 0x0001 );
		__QCMP_STATIC_CONSTANT( int, swpNoMove          = 0x0002 );
		__QCMP_STATIC_CONSTANT( int, swpNoZOrder        = 0x0004 );
		__QCMP_STATIC_CONSTANT( int, swpNoRedraw        = 0x0008 );
		__QCMP_STATIC_CONSTANT( int, swpNoActivate      = 0x0010 );
		__QCMP_STATIC_CONSTANT( int, swpFrameChanged    = 0x0020 );  // The frame changed: send WM_NCCALCSIZE
		__QCMP_STATIC_CONSTANT( int, swpShowWindow      = 0x0040 );
		__QCMP_STATIC_CONSTANT( int, swpHideWindow      = 0x0080 );
		__QCMP_STATIC_CONSTANT( int, swpNoCopyBits      = 0x0100 );
		__QCMP_STATIC_CONSTANT( int, swpNoOwnerZOrder   = 0x0200 );  // Don't do owner Z ordering
		__QCMP_STATIC_CONSTANT( int, swpNoSendChanging  = 0x0400 );  // Don't send WM_WINDOWPOSCHANGING

		__QCMP_STATIC_CONSTANT( int, swpDrawFrame       = swpFrameChanged );
		__QCMP_STATIC_CONSTANT( int, swpNoReposition    = swpNoOwnerZOrder );

#if		(WINVER >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, swpDeferErase      = 0x2000 );
		__QCMP_STATIC_CONSTANT( int, swpAsyncWindowPos  = 0x4000 );
#endif//WINVER >= 0x0400

		__QCMP_STATIC_CONSTANT( unsigned long, EndSessionLogOff    = 0x80000000 );
		__QCMP_STATIC_CONSTANT( unsigned long, EndSessionCritical  = 0x40000000 );
		__QCMP_STATIC_CONSTANT( unsigned long, EndSessionCloseApp  = 0x00000001 );

		__QCMP_STATIC_CONSTANT( int, SizeRestored       = 0 );
		__QCMP_STATIC_CONSTANT( int, SizeMinimized      = 1 );
		__QCMP_STATIC_CONSTANT( int, SizeMaximized      = 2 );
		__QCMP_STATIC_CONSTANT( int, SizeMaxShow        = 3 );
		__QCMP_STATIC_CONSTANT( int, SizeMaxHide        = 4 );

		//GetWindow Constants

		__QCMP_STATIC_CONSTANT( int, gwHWndFirst        = 0 );
		__QCMP_STATIC_CONSTANT( int, gwHwndLast         = 1 );
		__QCMP_STATIC_CONSTANT( int, gwHWndNext         = 2 );
		__QCMP_STATIC_CONSTANT( int, gwHWndPrev         = 3 );
		__QCMP_STATIC_CONSTANT( int, gwOwner            = 4 );
		__QCMP_STATIC_CONSTANT( int, gwChild            = 5 );
#if(WINVER <= 0x0400)
		__QCMP_STATIC_CONSTANT( int, gwMax              = 5 );
#else
		__QCMP_STATIC_CONSTANT( int, gwEnabledPopup     = 6 );
		__QCMP_STATIC_CONSTANT( int, gwMax              = 6 );
#endif

		//Owner draw control types

		__QCMP_STATIC_CONSTANT( int, odtMenu			= 1 );
		__QCMP_STATIC_CONSTANT( int, odtListBox			= 2 );
		__QCMP_STATIC_CONSTANT( int, odtComboBox		= 3 );
		__QCMP_STATIC_CONSTANT( int, odtButton			= 4 );
#if		(WINVER >= 0x0400)
		__QCMP_STATIC_CONSTANT( int, odtStatic			= 5 );
#endif//WINVER >= 0x0400
		__QCMP_STATIC_CONSTANT( int, odtHeader			= 100 );
		__QCMP_STATIC_CONSTANT( int, odtTab				= 101 );
		__QCMP_STATIC_CONSTANT( int, odtListView		= 102 );

		__QCMP_STATIC_CONSTANT( int, nfrANSI            = 1 );
		__QCMP_STATIC_CONSTANT( int, nfrUnicode         = 2 );
		__QCMP_STATIC_CONSTANT( int, nfQuery            = 3 );
		__QCMP_STATIC_CONSTANT( int, nfRequery          = 4 );

		__QCMP_STATIC_CONSTANT( int, mngoNoInterface	= 0 );
		__QCMP_STATIC_CONSTANT( int, mngoNoError		= 1 );

		__QOR_DECLARE_OCLASS_ID( COSWindow );

		COSWindow();
		COSWindow( void* hwnd );
		COSWindow( CDeviceContext::refType DC );
		COSWindow( POINT Point, bool bPhysical = false );
		COSWindow( CWindowClass* pClass , void* lpParam );
		COSWindow( CWindowClass* pClass , unsigned long dwExStyle, const TCHAR* lpWindowName, unsigned long dwStyle, int x, int y, int nWidth, int nHeight, CWindowHandle::refType hWndParent, CMenuHandle::refType hMenu, CWinModule* pModule, void* lpParam );
		//WindowHandle Create( unsigned long dwExStyle, const TCHAR* lpClassName, const TCHAR* lpWindowName, unsigned long dwStyle, int x, int y, int nWidth, int nHeight, WindowHandle hWndParent, MenuHandle hMenu, InstanceHandle hInstance, void* lpParam );
		void Create( const TCHAR* lpWindowName, InstanceHandle hInstance, unsigned long dwStyle, unsigned long dwExStyle, int x, int y, int nWidth, int nHeight, CWindowHandle::refType hWndParent, CMenuHandle::refType hMenu );
		virtual ~COSWindow();
		bool AdjustRect( CRectangle* pRect, unsigned long dwStyle, bool bMenu, unsigned long dwExStyle = 0 );
		bool Animate( unsigned long dwTime, unsigned long dwFlags );
		unsigned int ArrangeIconic( void );
		bool BringToTop( void );
		unsigned short CascadeChildren( unsigned short wFlags );
		unsigned short CascadeChildren( unsigned int wHow, const RECT* lpRect, unsigned int cKids, const refType lpKids );
		refType ChildFromPoint( POINT Point, unsigned int uFlags = 0 );
		bool Close( void );
		bool Destroy( void );
		bool EndTask( bool fShutDown, bool fForce );
		bool EnumChildren( WindowEnumCallback lpEnumFunc, Cmp_long_ptr lParam );
		refType FindChild( COSWindow& ChildAfter, const TCHAR* lpszClass, const TCHAR* lpszWindow );
		static refType Find( const TCHAR* lpszClass, const TCHAR* lpszWindow );
		bool GetAltTabInfoT( int iItem, PALTTABINFO pati, TCHAR* pszItemText, unsigned int cchItemText );
		refType GetAncestor( unsigned int gaFlags );
		CRectangle GetClientRect( void );
		bool GetClientRect( CRectangle* pRect );
		refType GetLastActivePopup();
		bool GetLayeredAttributes( unsigned long* pcrKey, unsigned char* pbAlpha, unsigned long* pdwFlags );
		refType GetParent( void );
		bool GetTitleBarInfo( PTITLEBARINFO pti );
		refType GetTop( void );
		refType Get( unsigned int uCmd );
		refType GetItem( int nIDItem );
		bool GetInfo( PWINDOWINFO pwi );
		unsigned int GetModuleFileNameT( TCHAR* lpszFileName, unsigned int cchFileNameMax );
		bool GetPlacement( WINDOWPLACEMENT* lpwndpl );
		bool GetRect( LPRECT lpRect );
		int GetText( TCHAR* lpString, int nMaxCount );
		int GetTextLength( void );
		unsigned long GetThreadProcessId( unsigned long* lpdwProcessId );
		int InternalGetText( wchar_t* lpString, int nMaxCount );
		bool IsChildOf( CWindowHandle::refType hWndParent );
		bool IsHungApp( void );
		bool IsIconic( void );
		bool IsWindow( void );
		bool IsUnicode( void );
		bool IsVisible( void );
		bool IsZoomed( void );
		void InvalidateClientRect();
		bool Move( int X, int Y, int nWidth, int nHeight, bool bRepaint );
		bool OpenIcon( void );
		void LogicalToPhysicalPoint( LPPOINT lpPoint );
		void PhysicalToLogicalPoint( LPPOINT lpPoint );
		refType RealChildFromPoint( POINT ptParentClientCoords );
		unsigned int RealGetClass( TCHAR* pszType, unsigned int cchType );
		COSWindowScroll Scroll();
		bool SetAsForegroundWindow( void );
		bool SetLayeredAttributes( unsigned long crKey, unsigned char bAlpha, unsigned long dwFlags );
		refType SetParent( COSWindow& NewParent );
		bool SetPlacement( WINDOWPLACEMENT* lpwndpl );
		bool SetPos( COSWindow* pWndInsertAfter, int X, int Y, int cx, int cy, unsigned int uFlags );
		bool SetText( const TCHAR* lpString );
		bool ShowOwnedPopups( bool fShow );
		bool Show( int nCmdShow );
		bool ShowAsync( int nCmdShow );
		void SwitchToThisWindow( bool fAltTab );
		unsigned short TileChildren( unsigned int wHow, CRectangle* pRect, unsigned int cKids, const refType lpKids );
		bool UpdateLayeredWindow( CDeviceContext::refType dcDst, POINT* pptDst, SIZE* psize, CDeviceContext::refType dcSrc, POINT* pptSrc, unsigned long crKey, nsWin32::BLENDFUNCTION* pblend, unsigned long dwFlags );
		bool UpdateLayeredIndirect( const UPDATELAYEREDWINDOWINFO* pULWInfo );
		Cmp_ulong_ptr GetClassLongPtrT( int nIndex );
		int GetClassNameT( TCHAR* lpClassName, int nMaxCount );
		unsigned short GetClassWord( int nIndex );
		Cmp_long_ptr GetLongPtr( int nIndex ) const;
		Cmp_long_ptr SetLongPtr( int nIndex, Cmp_long_ptr dwNewLong );
		Cmp_ulong_ptr SetClassLongPtrT( int nIndex, Cmp_long_ptr dwNewLong );
		unsigned short SetClassWord( int nIndex, unsigned short wNewWord );
		static Cmp_long_ptr CallProc( WindowProcedure lpPrevWndFunc, CWindowHandle::refType hWnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		virtual Cmp_long_ptr DefProc( unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		//virtual Cmp_long_ptr DefProc( WindowHandle hWnd, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		Cmp_long_ptr DefFrameProcT( refType WndMDIClient, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		bool Print( CDeviceContext::refType hdcBlt, unsigned int nFlags );
		bool SetContextHelpId( unsigned long dwContextHelpId );
		unsigned long GetContextHelpId();
		bool Help( const TCHAR* lpszHelp, unsigned int uCommand, Cmp_ulong_ptr dwData );
		bool Flash( bool bInvert );
		virtual Cmp_long_ptr MsgProc( void* hwnd, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		CUserObject Security();
		refType Ref( void );
		static Cmp_long_ptr DefFrameProcT( refType Window, refType WndMDIClient, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		static Cmp_long_ptr DefMDIChildProcT( refType Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_ulong_ptr lParam );
		//static Cmp_long_ptr DefProc( refType hWnd, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		static Cmp_long_ptr DefaultMsgProc( void* hwnd, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		static Cmp_long_ptr DefaultFrameProc( refType Window, refType hWndMDIClient, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		static Cmp_long_ptr DefaultChildFrameProc( refType Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );
		static Cmp_long_ptr __QCMP_STDCALLCONVENTION StaticWindowProc( void* hwnd, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );			
		static Cmp_long_ptr __QCMP_STDCALLCONVENTION WindowProc( refType Window, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );

		COSWindowPainting Painting();

		CBaseWindowController* Controller( CBaseWindowController* pController = 0 )
		{
			if( pController != 0 )
			{
				m_pController = pController;
			}
			return m_pController;
		}

		CWindowHandle::refType Handle();
		void SetHandle( void* hwnd );
		static refType FromHandle( void* hwnd );

	protected:

		COSWindow( const COSWindow& src );
		Cmp_long_ptr MsgFallback( unsigned int message, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );

		bool m_bOwnsHandle;
		CWindowHandle m_Handle;
		void* m_lpParam;
		CWindowClass* m_pClass;
		CBaseWindowController* m_pController;	

	private:			

		nsWinQAPI::CUser32& m_User32Library;

		__QCS_DECLARE_NONASSIGNABLE( COSWindow );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CMDIChildWindow : public COSWindow
	{
	public:

		CMDIChildWindow( CWindowHandle& hWnd );
		CMDIChildWindow( const TCHAR* lpClassName, const TCHAR* lpWindowName, unsigned long dwStyle, int X, int Y, int nWidth, int nHeight, CWindowHandle::refType hWndParent, InstanceHandle hInstance, Cmp_long_ptr lParam );				
		virtual ~CMDIChildWindow();
		virtual Cmp_long_ptr DefProc( unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam );

		__QCS_DECLARE_NONCOPYABLE( CMDIChildWindow );

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CShellWindow : public COSWindow
	{
	public:

		CShellWindow();
		virtual ~CShellWindow();

		__QCS_DECLARE_NONCOPYABLE( CShellWindow );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CForegroundWindow : public COSWindow
	{
	public:

		CForegroundWindow();
		virtual ~CForegroundWindow();

		__QCS_DECLARE_NONCOPYABLE( CForegroundWindow );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CDesktopWindow : public COSWindow
	{
	public:

		CDesktopWindow();
		virtual ~CDesktopWindow();

		__QCS_DECLARE_NONCOPYABLE( CDesktopWindow );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) COSWindowShellHook
	{
	public:

		__QOR_DECLARE_OCLASS_ID( COSWindowShellHook );
			
		COSWindowShellHook( COSWindow& Wnd, int* pbResult = 0 );
		virtual ~COSWindowShellHook();

	protected:

		int* m_pResult;
		COSWindow& m_Wnd;

	private:

		__QCS_DECLARE_NONCOPYABLE( COSWindowShellHook );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) COSWindowPainting
	{
	public:

		__QOR_DECLARE_OCLASS_ID( COSWindowPainting );
			
		COSWindowPainting( const COSWindowPainting& src );
		COSWindowPainting( COSWindow& Wnd );
		COSWindowPainting& operator = ( const COSWindowPainting& src );//not to be implemented
		virtual ~COSWindowPainting();
		bool DrawAnimatedRects( int idAni, const CRectangle* prcFrom, const CRectangle* prcTo );
		bool DrawCaption( CDeviceContext::refType hdc, const CRectangle* prc, unsigned int uFlags );
		int ExcludeUpdateRgn( CDeviceContext::refType hDC );
		bool GetUpdateRect( CRectangle* pRect, bool bErase );
		int GetUpdateRgn( CRegion::refType Rgn, bool bErase );
		CDeviceContext::refType GetDC();
		int GetRgn( CRegion::refType Rgn );
		int GetRgnBox( CRectangle* prc );
		bool InvalidateRect( const CRectangle* pRect, bool bErase );
		bool InvalidateRgn( CRegion::refType Rgn, bool bErase );
		bool LockUpdate();
		bool Redraw( const CRectangle* prcUpdate, CRegion::refType hrgnUpdate, unsigned int flags );
		int SetRgn( CRegion::refType hRgn, bool bRedraw );
		bool Update();
		bool ValidateRect( const CRectangle* pRect );
		bool ValidateRgn( CRegion::refType Rgn );
		bool ClientToScreen( LPPOINT lpPoint );
		bool ScreenToClient( LPPOINT lpPoint );
		int MapWindowPoints( COSWindow::refType To, LPPOINT lpPoints, unsigned int cPoints );

	protected:

		COSWindow& m_Wnd;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) COSWindowScroll
	{
	public:

		__QOR_DECLARE_OCLASS_ID( COSWindowScroll );

		__QCMP_STATIC_CONSTANT( int, HORZ             = 0 );
		__QCMP_STATIC_CONSTANT( int, VERT             = 1 );
		__QCMP_STATIC_CONSTANT( int, CTL              = 2 );
		__QCMP_STATIC_CONSTANT( int, BOTH             = 3 );

		COSWindowScroll( const COSWindowScroll& src );
		COSWindowScroll( COSWindow& Wnd );
		COSWindowScroll& operator = ( const COSWindowScroll& src );//not to be implemented
		virtual ~COSWindowScroll();
		bool Enable( unsigned int wSBFlags, unsigned int wArrows );
		bool GetBarInfo( long idObject, PSCROLLBARINFO psbi );
		bool GetInfo( int fnBar, LPSCROLLINFO lpsi );
		int GetPos( int nBar );
		bool GetRange( int nBar, int* lpMinPos, int* lpMaxPos );
		bool Scroll( int XAmount, int YAmount, const CRectangle* lpRect, const CRectangle* lpClipRect );
		int Scroll( int dx, int dy, const CRectangle* prcScroll, const CRectangle* prcClip, CRegion::refType rgnUpdate, CRectangle* prcUpdate, unsigned int flags );
		int SetInfo( int fnBar, LPCSCROLLINFO lpsi, bool fRedraw );
		int SetPos( int nBar, int nPos, bool bRedraw );
		bool SetRange( int nBar, int nMinPos, int nMaxPos, bool bRedraw );
		bool ShowBar( int wBar, bool bShow );

	protected:

		COSWindow& m_Wnd;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) COSWindowProperties
	{
	public:

		__QOR_DECLARE_OCLASS_ID( COSWindowProperties );

		COSWindowProperties( COSWindow& Wnd );
		virtual ~COSWindowProperties();
		int Enum( PropEnumCallback lpEnumFunc );
		int Enum( PropEnumCallbackEx lpEnumFunc, Cmp_long_ptr lParam );
		void* Get( const TCHAR* lpString );
		void* Remove( const TCHAR* lpString );
		bool Set( const TCHAR* lpString, void* hData );

	protected:

		COSWindow& m_Wnd;

	private:

		__QCS_DECLARE_NONCOPYABLE( COSWindowProperties );
	};	

}//nsWin32

#endif//WINQL_GUI_WINDOW_H_3
