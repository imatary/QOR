//EH_GuardDescriptor.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINCMPSUPVC_EXCEPT_GUARDDESC_H_1
#define WINCMPSUPVC_EXCEPT_GUARDDESC_H_1

#include "ExceptionHandling.h"

//--------------------------------------------------------------------------------
namespace nsCompiler
{
	//--------------------------------------------------------------------------------
	namespace EH
	{
		class ExceptionContext;

		//--------------------------------------------------------------------------------
		class GuardDescriptor
		{
			friend nsWin32::EXCEPTION_DISPOSITION CallHandler( HandlerPtr pfn, ExceptionContext& context, const GuardDescriptor& guard, BasicRegistrationNode* pMarkerRN, int recursive );

		public:

			class FrameInfo;

			//--------------------------------------------------------------------------------
			GuardDescriptor( RegistrationNode* pRN, const FuncInfo* pFuncInfo, int CatchDepth ): m_pFuncInfo( pFuncInfo ), m_pRN( pRN ), m_CatchDepth( CatchDepth )
			{
			}

			//--------------------------------------------------------------------------------
			int IsValid() const 
			{ 
				return ( ( m_pFuncInfo->magicNumber & MS_MAGIC_MASK ) == MS_MAGIC ); 
			}
			//--------------------------------------------------------------------------------
			int MayBeUnwound() const 
			{ 
				return m_pFuncInfo->pUnwindMap != 0; 
			}
			//--------------------------------------------------------------------------------
			int CurrentState() const 
			{ 
				return m_pRN->state; 
			}

			//--------------------------------------------------------------------------------
			int MaxState() const 
			{ 
				return m_pFuncInfo->maxState; 
			}

			//--------------------------------------------------------------------------------
			int CatchDepth() const 
			{ 
				return m_CatchDepth; 
			}

			//--------------------------------------------------------------------------------
			int MagicNumber() const 
			{ 
				return m_pFuncInfo->magicNumber;
			}

			//--------------------------------------------------------------------------------
			bool Synchronous()
			{
				bool bResult = false;
#	if		( _MSC_VER >= 1400 )
				( m_pFuncInfo->EHFlags & 0x00000001 ) ? true : false;
#	endif //( _MSC_VER >= 1400 )
				return bResult;
			}

			const TryBlockMapEntry* GetRangeOfTrysToCheck( unsigned int* pStart, unsigned int* pEnd ) const;
			void FrameUnwindToState( int targetState );
			void Catch( ExceptionContext& context, const HandlerType* pCatch, const CatchableType* pConv, const TryBlockMapEntry* pEntry, BasicRegistrationNode* pMarkerRN );

		private:

			class CatchGuardRN;
			
			nsQOR::IThread* GetThreadContext( void );
			void* CallCatchBlock( ExceptionContext& context, void* handlerAddress );
			void* CallCatchBlock2( void* handlerAddress );
			void __stdcall JumpToContinuation( void* target );
			bool IsToBeDestroyed( const ThrownObject& object ) const;

			static int FrameUnwindFilter( nsWin32::EXCEPTION_POINTERS* pExPtrs );
			static int ExFilterRethrow( nsWin32::EXCEPTION_POINTERS* pExPtrs );

			static nsWin32::EXCEPTION_DISPOSITION CatchGuardHandler( ExceptionRecord* pExcept, CatchGuardRN* pRN, Context* pContext, void* /*pDC*/ );

			const FuncInfo* m_pFuncInfo;
			RegistrationNode* m_pRN;
			int m_CatchDepth;
		};


		//--------------------------------------------------------------------------------
		class GuardDescriptor::CatchGuardRN : public BasicRegistrationNode
		{

		public:

			//--------------------------------------------------------------------------------
			CatchGuardRN( RegistrationNode* pRN, const FuncInfo* pFuncInfo, void* Handler, int CatchDepth ): BasicRegistrationNode( Handler ), m_Descriptor( pRN, pFuncInfo, CatchDepth )
			{
			}

			//--------------------------------------------------------------------------------
			GuardDescriptor& StoredValue() 
			{ 
				return m_Descriptor; 
			}

		private:

			GuardDescriptor m_Descriptor; 

			//not to be implemented
			CatchGuardRN( const CatchGuardRN& );
			CatchGuardRN& operator = ( const CatchGuardRN& );
		};


		//--------------------------------------------------------------------------------
		class GuardDescriptor::FrameInfo
		{
		public:

			FrameInfo( const ThrownObject& object );
			~FrameInfo();

			//--------------------------------------------------------------------------------
			const ThrownObject& Object() const 
			{ 
				return *m_pThrownObject; 
			}
			//--------------------------------------------------------------------------------
			const FrameInfo* Next() const 
			{ 
				return m_pNext; 
			}

		private:

			const ThrownObject* m_pThrownObject;
			FrameInfo* m_pNext;

			FrameInfo( const FrameInfo & );
			FrameInfo& operator = ( const FrameInfo& );
		};

	}//EH

} //nsCompiler


#endif//WINCMPSUPVC_EXCEPT_GUARDDESC_H_1

