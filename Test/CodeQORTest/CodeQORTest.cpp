// CodeQORTest.cpp

// Copyright Querysoft Limited 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/UsingCodeQOR.h"
#include "SystemQOR.h"

//------------------------------------------------------------------------------
class CPODType
{
public:
	int   a;
	float b;
	char  c[ 42 ];
};

class CResourceType;

//------------------------------------------------------------------------------
template <> struct nsCodeQOR::reference_type< CResourceType >
{
	typedef nsCodeQOR::CTRef< CResourceType > type;
};

//------------------------------------------------------------------------------
class CResourceType
{
public:

	//------------------------------------------------------------------------------
	CResourceType()
	{
		pVoid = (void*)( -1 );
	}

	//------------------------------------------------------------------------------
	CResourceType( void* p )
	{
		pVoid = p;
	}

	//------------------------------------------------------------------------------
	~CResourceType()
	{
		pVoid = nullptr;
	}

	CResourceType( const CResourceType& src ) = delete;
	CResourceType& operator=( const CResourceType& src ) = delete;

	//------------------------------------------------------------------------------
	CResourceType( CResourceType&& move )
	{
		*this = std::move( move );
	}

	//------------------------------------------------------------------------------
	CResourceType& operator=( CResourceType&& move )
	{
		pVoid      = move.pVoid;
		move.pVoid = nullptr;
		return *this;
	}

	//------------------------------------------------------------------------------
	const char* Result(void)
	{
		return (const char*)(pVoid);
	}

private:
	void* pVoid;
};

//------------------------------------------------------------------------------
void ListStaticLibrary( nsCodeQOR::CLibraryBase* pLibrary, void* pContext )
{
	if (pLibrary)
	{
		const char* szLibraryName = pLibrary->LibraryName();
	}
}

//------------------------------------------------------------------------------
void TestModuleSystem(void)
{
	//Library & Module
	//Bootstrap and relationship to Process object
}

//------------------------------------------------------------------------------
void TestAOPFramework(void)
{
	//Context
	__QCS_FCONTEXT("TestAOPFramework");

	printf("Querysoft Open Runtime: AOP demo:\r\n\r\n ");


	//Tracing
	//Interception
	//Parameter Checking
	//Error Handling
}

//------------------------------------------------------------------------------
int wmain( int /*argc*/, wchar_t** /*argv*/ )
{
	TestAOPFramework();

	const char* szVersion = ThisModule().Version();
	ThisModule().StaticLibraryList(&ListStaticLibrary, nullptr);

	nsCodeQOR::CProcessBase& ProcessBase = dynamic_cast<nsCodeQOR::CProcessBase&>( ThisModule() );
	
	auto MySharedResource = new_shared_ref< CResourceType >( (void*)szVersion );

	nsCodeQOR::CTSyncAdaptor< CPODType > SyncedPOD;

	SyncedPOD( QOR_PP_SYNCHRONIZE ).a = 42;

	{
		auto LockedSyncedPODRef = SyncedPOD();
		auto SecondRef          = MySharedResource;
		auto thirdRef			= SecondRef;

		nsCodeQOR::CTLazyAdaptor< CPODType > LazyPod( []() -> CPODType* {
			return new CPODType{3, (float)3.14159265, {'a', 'b', 'c', '\0'}};
		} );

		LockedSyncedPODRef().a = 21;

		LazyPod().b = 56.4;

		nsCodeQOR::CTSyncAdaptor< nsCodeQOR::CTLazyAdaptor< CPODType > > SyncedLazyPOD;
		SyncedLazyPOD( QOR_PP_SYNCHRONIZE ).Configure( ref( LazyPod() ) );

		SyncedLazyPOD( QOR_PP_SYNCHRONIZE )().c[ 0 ] = 'c';
	}

	const char* szResult = MySharedResource().Result();
	return 0;
}
