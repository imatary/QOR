//CodePage.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "AppocritaQOR/Event.h"
#include "CodeQOR/CodePages/CodePage.h"

//------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//------------------------------------------------------------------------------
	//MIB 4

	//------------------------------------------------------------------------------
	CodeString CcsISOLatin1CodePage::s_Aliases[] = 
	{
		_TXT( "iso-ir-100" ),
		_TXT( "ISO_8859-1" ),
		_TXT( "ISO-8859-1" ),
		_TXT( "latin1" ),
		_TXT( "l1" ),
		_TXT( "IBM819" ),
		_TXT( "CP819" ),
		_TXT( "csISOLatin1" )
	};

	//------------------------------------------------------------------------------
	unsigned int CcsISOLatin1CodePage::Encode( unsigned int uiCodePoint )
	{
		if( uiCodePoint > 0xFF )
		{
			return 0;
		}
		return uiCodePoint;
	}

	//------------------------------------------------------------------------------
	unsigned int CcsISOLatin1CodePage::Decode( unsigned int uiCharacter )
	{
		return uiCharacter;
	}

	//------------------------------------------------------------------------------
	//MIB 5

	//------------------------------------------------------------------------------
	CodeString CcsISOLatin2CodePage::s_Aliases[] = 
	{
		_TXT( "iso-ir-101" ),
		_TXT( "ISO_8859-2" ),
		_TXT( "ISO-8859-2" ),
		_TXT( "latin2" ),
		_TXT( "l2" ),
		_TXT( "csISOLatin2" )
	};

	//------------------------------------------------------------------------------
	static const unsigned int scuiLatin2Lookup[] = 
	{   0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087,
        0x0088, 0x0089, 0x008A, 0x008B, 0x008C, 0x008D, 0x008E, 0x008F,
        0x0090, 0x0091, 0x0092, 0x0093, 0x0094, 0x0095, 0x0096, 0x0097,
        0x0098, 0x0099, 0x009A, 0x009B, 0x009C, 0x009D, 0x009E, 0x009F,
        0x00A0, 0x0104, 0x02D8, 0x0141, 0x00A4, 0x013D, 0x015A, 0x00A7,
        0x00A8, 0x0160, 0x015E, 0x0164, 0x0179, 0x00AD, 0x017D, 0x017B,
        0x00B0, 0x0105, 0x02DB, 0x0142, 0x00B4, 0x013E, 0x015B, 0x02C7,
        0x00B8, 0x0161, 0x015F, 0x0165, 0x017A, 0x02DD, 0x017E, 0x017C,

        0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7,
        0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
        0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7,
        0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
        0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7,
        0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
        0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7,
        0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
	};

	//------------------------------------------------------------------------------
	unsigned int CcsISOLatin2CodePage::Encode( unsigned int uiCodePoint )
	{
		if( uiCodePoint > 0xFF )
		{
			return 0;
		}

		if( uiCodePoint < 0x80 )
		{
			return uiCodePoint;
		}

		unsigned int uiCharacter = 0;
		while( uiCharacter < 0x80 )
		{
			if( scuiLatin2Lookup[ uiCharacter ] == uiCodePoint )
			{
				return uiCharacter + 0x80;
			}
			uiCharacter++;
		}
		return 0;
	}

	//------------------------------------------------------------------------------
	unsigned int CcsISOLatin2CodePage::Decode( unsigned int uiCharacter )
	{
		if( uiCharacter > 0xFF )
		{
			return 0;
		}
		else if( uiCharacter < 0x80 )
		{
			return uiCharacter;
		}

		return scuiLatin2Lookup[ uiCharacter - 0x80 ];
	}


	//------------------------------------------------------------------------------
	//MIB 113

	//------------------------------------------------------------------------------
	unsigned int GBKCodePointIndex[][2] = 
	{
		{ 0, 0 },
	};

	//------------------------------------------------------------------------------
	unsigned int GBKCharacterIndex[][2] =
	{
		{ 0, 0 },
	};

	//------------------------------------------------------------------------------
	CodeString CcsGBKCodePage::s_Aliases[] = 
	{
		_TXT( "CP936" ),
		_TXT( "MS936" ),
		_TXT( "windows-936" ),
		_TXT( "csGBK" ),
	};

	//------------------------------------------------------------------------------
	unsigned int CcsGBKCodePage::Encode( unsigned int uiCodePoint )
	{
		/*bsearch the CodePointIndex for the highest value less than uiCodePoint
		Use the offset recorded at that index to obtain the Character code*/
		return 0;
	}

	//------------------------------------------------------------------------------
	unsigned int CcsGBKCodePage::Decode( unsigned int uiCharacter )
	{
		/*bsearch the CharacterIndex for the highest value less that uiCharacter
		Use the offset recorded at that index to obtain the Code Point*/
		return 0;
	}

}//nsCodeQOR
