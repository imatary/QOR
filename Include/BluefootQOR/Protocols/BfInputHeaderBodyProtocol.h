//BfInputHeaderBodyProtocol.h

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_PROTOCOLS_INPUTHEADERBODY_H_3
#define BLUEFOOT_PROTOCOLS_INPUTHEADERBODY_H_3

//Defines a one way protocol that reads a header and then reads that many bytes

#include "BluefootQOR/Protocols/BfInputProtocol.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{	
	//------------------------------------------------------------------------------
	template< class THeaderSizeType >
	class CInputHeaderBodyProtocol : public CProtocol
	{
	public:

		typedef nsCodeQOR::CTLRef< CInputHeaderBodyProtocol > refType;

		//------------------------------------------------------------------------------
		enum eInputHeaderBodySates
		{
			Header,
			Body,
		};

		__QOR_DECLARE_OCLASS_ID(CInputHeaderBodyProtocol);

		//------------------------------------------------------------------------------
		CInputHeaderBodyProtocol() : CInputProtocol()
		,	m_HeaderBuffer( 1 )
		,	m_BodyBuffer( 1 )
		{
		}
		
		//------------------------------------------------------------------------------
		virtual ~CInputHeaderBodyProtocol()
		{
		}

		//------------------------------------------------------------------------------
		CInputHeaderBodyProtocol( const CInputHeaderBodyProtocol& src ) : CInputProtocol( src )
		{

		}

		//------------------------------------------------------------------------------
		CInputHeaderBodyProtocol& operator = ( const CInputHeaderBodyProtocol& src )
		{
			return *this;
		}

		//------------------------------------------------------------------------------
		virtual void Run( void )
		{
			if( m_pInPipe )
			{
				m_HeaderBodyState = Header;
				m_HeaderBuffer.SetCapacity( 1 );
				m_pInPipe->SetSink( &m_ProtocolSink );

				while( OnProtocolStateChange() )
				{
				}
			}
		}

		//------------------------------------------------------------------------------
		virtual void GetNextReadCount( void )
		{
			switch( m_HeaderBodyState )
			{
			case Header:
				m_ulDataSize = sizeof( THeaderSizeType ) - m_HeaderBuffer.ReadCapacity();
				break;
			case Body:
				m_ulDataSize = static_cast< unsigned long >( m_BodySize ) - m_BodyBuffer.ReadCapacity();
				break;
			}
		}

		//------------------------------------------------------------------------------
		virtual void OnReadSuccess( unsigned long ulUnitsRead )
		{
			switch( m_HeaderBodyState )
			{
			case Header:
			{
				if( m_HeaderBuffer.ReadCapacity() == sizeof( THeaderSizeType ) )
				{
					m_HeaderBuffer >> m_BodySize;
					m_BodyBuffer.SetCapacity( m_BodySize );
					m_HeaderBodyState = Body:
				}
			}
			break;
			case Body:
				if( m_BodyBuffer.ReadCapacity() == m_BodySize )
				{
					m_eNextState = Stopped;
				}
			break;
			}
		}

		//------------------------------------------------------------------------------
		virtual bool OnWrite( unsigned long ulUnitsToRead, unsigned long& ulUnitsRead )
		{ 
			ulUnitsWritten = 0;			
			switch( m_HeaderBodyState )
			{
			case Header:
				return m_pOutPipe->GetSource()->GetSink()->Write( m_ulDataSize, ulUnitsWritten, m_HeaderBuffer->WriteRequest( ulUnitsToRead ) );
			case Body:
				return m_pOutPipe->GetSource()->GetSink()->Write( m_ulDataSize, ulUnitsWritten, m_BodyBuffer->WriteRequest( ulUnitsToRead ) );
			}
			return false;
		}

		//------------------------------------------------------------------------------
		virtual bool OnWrite( void )
		{
			return false;//shouldn't be called
		}

		//------------------------------------------------------------------------------
		refType Ref( void )
		{
			return refType( this );
		}

	protected:

		eInputHeaderBodySates m_HeaderBodyState;		
		CPODStreamBuffer< THeaderSizeType > m_HeaderBuffer;
		CPODStreamBuffer< byte > m_BodyBuffer;
		THeaderSizeType m_BodySize;
		nsBluefoot::CProtocolSink m_ProtocolSink;																	//A sink object to write incoming data to this protocol
	};

}//nsBluefoot

#endif//BLUEFOOT_PROTOCOLS_INPUT_H_3
