//WinQLClipboardOwnerController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/Parts/ClipboardOwnerController.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CClipboardOwnerController );

	//--------------------------------------------------------------------------------
	CClipboardOwnerController::CClipboardOwnerController( nsMammut::CModel* pModelItem, nsQOR::CController::ref_type Parent ) : CBaseWindowPartController( pModelItem, Parent )
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::CClipboardOwnerController" );
	}

	//--------------------------------------------------------------------------------
	CClipboardOwnerController::~CClipboardOwnerController()
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::~CClipboardOwnerController" );
	}

	//--------------------------------------------------------------------------------
	bool CClipboardOwnerController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::ProcessMessage" );

		bool bProcessed = ProcessHook( Window, lResult, uMsg, wParam, lParam );

		switch ( uMsg )
		{
		case COSWindow::wmRenderFormat:
			{
				OnRenderFormat( Window, wParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmRenderAllFormats:
			{
				OnRenderAllFormats( Window );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmDestroyClipboard:
			{
				OnDestroyData( Window );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmPaintClipboard:
			{
				COSWindow::refType refViewer = COSWindow::FromHandle( CWindowHandle( 0, (void*)(wParam) ).Ref() );
				PAINTSTRUCT* pPaintStruct = reinterpret_cast< PAINTSTRUCT* >( lParam );
				OnPaintClipboard( Window, refViewer, pPaintStruct );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmVScrollClipboard:
			{
				COSWindow::refType refViewer = COSWindow::FromHandle( CWindowHandle( 0, (void*)(wParam) ).Ref() );
				unsigned short wEvent = LoWord( lParam );
				unsigned short wPos = HiWord( lParam );

				OnVSCrollClipboard( Window, refViewer, wEvent, wPos );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmSizeClipboard:
			{
				COSWindow::refType refViewer = COSWindow::FromHandle( CWindowHandle( 0, (void*)(wParam) ).Ref() );
				RECT* pRect = reinterpret_cast< RECT* >( lParam );
				OnSizeClipboard( Window, refViewer, pRect );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmAskCBFormatName:
			{
				char* pszBuffer = reinterpret_cast< char* >( lParam );
				OnAskCBFormatName( Window, pszBuffer, wParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmHScrollClipboard:
			{
				COSWindow::refType refViewer = COSWindow::FromHandle( CWindowHandle( 0, (void*)(wParam) ).Ref() );
				unsigned short wEvent = LoWord( lParam );
				unsigned short wPos = HiWord( lParam );

				OnHScrollClipboard( Window, refViewer, wEvent, wPos );
				lResult = 0;
				bProcessed = true;
			}
			break;
		}

		return bProcessed;
	}

	//--------------------------------------------------------------------------------
	void CClipboardOwnerController::OnRenderFormat( COSWindow& Window, Cmp_uint_ptr ID )
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::OnRenderFormat" );
	}

	//--------------------------------------------------------------------------------
	void CClipboardOwnerController::OnRenderAllFormats( COSWindow& Window )
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::OnRenderAllFormats" );
	}

	//--------------------------------------------------------------------------------
	void CClipboardOwnerController::OnDestroyData( COSWindow& Window )
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::OnDestroyData" );
	}

	//--------------------------------------------------------------------------------
	void CClipboardOwnerController::OnPaintClipboard( COSWindow& Window, COSWindow::refType Viewer, PAINTSTRUCT* pPaintStruct )
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::OnPaintClipboard" );
	}

	//--------------------------------------------------------------------------------
	void CClipboardOwnerController::OnSizeClipboard( COSWindow& Window, COSWindow::refType Viewer, RECT* pRect )
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::OnSizeClipboard" );
	}

	//--------------------------------------------------------------------------------
	void CClipboardOwnerController::OnAskCBFormatName( COSWindow& Window, char* pszBuffer, Cmp_uint_ptr CharCount )
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::OnAskCBFormatName" );
	}

	//--------------------------------------------------------------------------------
	void CClipboardOwnerController::OnVSCrollClipboard( COSWindow& Window, COSWindow::refType Viewer, unsigned short wEvent, unsigned short wPos )
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::OnVScrollClipboard" );
	}

	//--------------------------------------------------------------------------------
	void CClipboardOwnerController::OnHScrollClipboard( COSWindow& Window, COSWindow::refType Viewer, unsigned short wEvent, unsigned short wPos )
	{
		_WINQ_FCONTEXT( "CClipboardOwnerController::OnHScrollClipboard" );
	}

}//nsWin32

