//SingletonFactory.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A class registry based factory for singleton classes

#ifndef CODEQOR_SINGELTONFACTORY_H_3
#define CODEQOR_SINGELTONFACTORY_H_3

#include "CodeQOR/ClassReg/ClassReg.h"
#include "CodeQOR/Modules/ProcessBase.h"
#include "CodeQOR/Traits/MemoryTraits.h"

//------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	template< class T, class TPolicy >
	class CTSingletonFactory : public CTClassRegEntry< T >
	{

	public:

		//--------------------------------------------------------------------------------
		CTSingletonFactory () : CTClassRegEntry()
		,	m_p( 0 )
		{
		}

		//--------------------------------------------------------------------------------
		virtual ~CTSingletonFactory()
		{
		}

		//--------------------------------------------------------------------------------
		virtual void* Instance( void )
		{
			TPolicy::TThreadSyncSingleLock Lock( m_Section );
			if( m_p != 0 )
			{
				m_lInstanceCount++;						//increment the reference count
				return m_p;
			}
			else
			{				
				m_p = Create();
				m_lInstanceCount = 1;
			}

			return m_p;
		}

		//--------------------------------------------------------------------------------
		virtual void Release( void* pInstance )
		{
			T* pT = reinterpret_cast< T* >( pInstance );
			if( pT == m_p )
			{
				TPolicy::TThreadSyncSingleLock Lock( m_Section );

				m_lInstanceCount--;							//decrement the reference count
				if( m_lInstanceCount <= 0 )
				{											//If no more references are held and then Release is called again
					Dispose( m_p )							//The one instance is deleted
					m_p = 0;								//reset pointer so re-creation can occur
					m_lInstanceCount = 0;					//Reference count is reset to 0		
				}
			}
		}

	protected:

		T* m_p;
		long m_lInstanceCount;

	private:

		//--------------------------------------------------------------------------------
		T* Create( void )
		{
			return mem_traits< T >::CTAllocator::Allocate();
		}

		//--------------------------------------------------------------------------------
		virtual void Dispose( T* pT )
		{
			return mem_traits< T >::CTAllocator::Free( pT );
		}

		TPolicy::TThreadSyncSinglePrimitive m_Section;

		CTSingletonFactory ( const CTSingletonFactory & );
		CTSingletonFactory & operator = ( const CTSingletonFactory & );

	};

}//nsCodeQOR

#endif//CODEQOR_SINGELTONFACTORY_H_3
