//WinQLOverlappedHandler.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/IO/WinQLOverlappedHandler.h"
#include <string.h>
#include "WinQL/Application/ErrorSystem/WinQLFunctionContext.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QCMP_DECLARE_PERTHREAD COverlappedHandlerMap* p_tOverlappedHandlerMap = 0;

	//--------------------------------------------------------------------------------
	void COverlappedHandler::Uninit()
	{
		_WINQ_SFCONTEXT( "COverlappedHandler::Uninit" );

		COverlappedHandlerMap* pMap = p_tOverlappedHandlerMap;

		if( pMap )
		{
			pMap->Remove( &m_Overlapped );
		}
	}

	//--------------------------------------------------------------------------------
	void COverlappedHandler::Init()
	{
		_WINQ_SFCONTEXT( "COverlappedHandler::Init" );

		COverlappedHandlerMap* pMap = p_tOverlappedHandlerMap;

		if( pMap == 0 )
		{
			pMap = new COverlappedHandlerMap;
		}
		
		pMap->Add( &m_Overlapped, this );
		
		if( p_tOverlappedHandlerMap == 0 )
		{
			p_tOverlappedHandlerMap = pMap;
		}
	}

	//--------------------------------------------------------------------------------
	COverlappedHandler* COverlappedHandler::FromHandle( OVERLAPPED* pOverlapped )
	{
		_WINQ_SFCONTEXT( "COverlappedHandler::FromHandle" );
		COverlappedHandler* pHandler = 0;
		
		if( p_tOverlappedHandlerMap != 0 )
		{
			pHandler = p_tOverlappedHandlerMap->FindHandle( pOverlapped );
		}

		return pHandler;
	}

	//--------------------------------------------------------------------------------
	COverlappedHandler::COverlappedHandler()
	{
		_WINQ_SFCONTEXT( "COverlappedHandler::COverlappedHandler" );
		memset( &m_Overlapped, 0, sizeof( OVERLAPPED ) );
		Init();
	}

	//--------------------------------------------------------------------------------
	COverlappedHandler::~COverlappedHandler()
	{
		_WINQ_SFCONTEXT( "COverlappedHandler::~COverlappedHandler" );
		Uninit();
	}

	//--------------------------------------------------------------------------------
	void __QCMP_STDCALLCONVENTION COverlappedHandler::OnOverlappedSocketWriteCompleted( unsigned long ulError, unsigned long ulCountBytesWritten, OVERLAPPED* pOverlapped, unsigned long ulFlags )
	{
		_WINQ_SFCONTEXT( "COverlappedHandler::OnOverlappedSocketWriteCompleted" );
		COverlappedHandler* pHandler = FromHandle( pOverlapped );

		if( pHandler )
		{
			pHandler->OnWriteCompleted( ulError, ulCountBytesWritten );
		}
		else
		{
			//ERROR
		}
	}

	//--------------------------------------------------------------------------------
	void __QCMP_STDCALLCONVENTION COverlappedHandler::OnOverlappedSocketReadCompleted( unsigned long ulError, unsigned long ulCountBytesRead, OVERLAPPED* pOverlapped, unsigned long ulFlags )
	{
		_WINQ_SFCONTEXT( "COverlappedHandler::OnOverlappedSocketReadCompleted" );
		COverlappedHandler* pHandler = FromHandle( pOverlapped );

		if( pHandler )
		{
			pHandler->OnReadCompleted( ulError, ulCountBytesRead );
		}
		else
		{
			//ERROR
		}
	}

	//--------------------------------------------------------------------------------
	void __QCMP_STDCALLCONVENTION COverlappedHandler::OnOverlappedWriteCompleted( unsigned long ulError, unsigned long ulCountBytesWritten, OVERLAPPED* pOverlapped )
	{
		_WINQ_SFCONTEXT( "COverlappedHandler::OnOverlappedWriteCompleted" );
		COverlappedHandler* pHandler = FromHandle( pOverlapped );

		if( pHandler )
		{
			pHandler->OnWriteCompleted( ulError, ulCountBytesWritten );
		}
		else
		{
			//ERROR
		}
	}

	//--------------------------------------------------------------------------------
	void __QCMP_STDCALLCONVENTION COverlappedHandler::OnOverlappedReadCompleted( unsigned long ulError, unsigned long ulCountBytesRead, OVERLAPPED* pOverlapped )
	{
		_WINQ_SFCONTEXT( "COverlappedHandler::OnOverlappedReadCompleted" );
		COverlappedHandler* pHandler = FromHandle( pOverlapped );

		if( pHandler )
		{
			pHandler->OnReadCompleted( ulError, ulCountBytesRead );
		}
		else
		{
			//ERROR
		}
	}

}//nsWin32
