//BaseErrorDomain.cpp

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "AppocritaQOR/Event.h"
#include "SystemQOR.h"
#include "CodeQOR/ErrorSystem/BaseErrorDomain.h"
#include "CodeQOR/ErrorSystem/What.h"
#include "CodeQOR/ErrorSystem/Where.h"
#include "CodeQOR/ErrorSystem/When.h"
#include "CodeQOR/Text/CodeString.h"
#include "CodeQOR/Text/Char.h"
#include "CodeQOR/Modules/ProcessBase.h"
#include <wchar.h>
#include <stdio.h>
//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CBaseErrorDomain GlobalErrorDomain( _TXT( "Global Error Domain" ) );

	//--------------------------------------------------------------------------------
	CBaseErrorDomain* GetGlobalErrorDomain()
	{
		return &GlobalErrorDomain;
	}

	//--------------------------------------------------------------------------------
	CBaseErrorDomain::CBaseErrorDomain( const mxTCHAR* szDomainName ) : m_szDomainName( szDomainName )
	{
	}

	//--------------------------------------------------------------------------------
	CBaseErrorDomain::s_BaseError CBaseErrorDomain::m_Notes[ CBaseErrorDomain::MAX_NOTES ] =
	{
		{ _TXT( "Unknown Note.\n" ), { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
		{ _TXT( "Note: %s" ), { __QCS_ERRORPARAM( CBaseErrorDomain, 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }
	};

	//--------------------------------------------------------------------------------
	CBaseErrorDomain::s_BaseError CBaseErrorDomain::m_Warnings[ CBaseErrorDomain::MAX_WARNS ] =
	{
		{ _TXT( "Unknown Warning.\n" ), { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
		{ _TXT( "Warning: %s\n" ), { __QCS_ERRORPARAM( CBaseErrorDomain, 0 ), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }
	};

	//--------------------------------------------------------------------------------
	CBaseErrorDomain::s_BaseError CBaseErrorDomain::m_Errors[ CBaseErrorDomain::MAX_ERRORS ] =
	{
		{ _TXT( "Unknown Error.\n" ), { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
		{ _TXT( "Logic Error.\n" ), { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
		{ _TXT( "Domain Error.\n" ), { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } },
		{ _TXT( "Range Error.\n" ), { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }
	};


	//--------------------------------------------------------------------------------
	CBaseErrorDomain::~CBaseErrorDomain()
	{
	}

	//--------------------------------------------------------------------------------
	const CBaseErrorDomain::s_BaseError* CBaseErrorDomain::NoteTemplate( unsigned int uiCode )
	{
		if( uiCode < CBaseErrorDomain::MAX_NOTES )
		{
			return &m_Notes[ uiCode ];
		}
		else
		{
			return &m_Notes[ 0 ];
		}
	}

	//--------------------------------------------------------------------------------
	const CBaseErrorDomain::s_BaseError* CBaseErrorDomain::WarningTemplate( unsigned int uiCode )
	{
		if( uiCode < CBaseErrorDomain::MAX_WARNS )
		{
			return &m_Warnings[ uiCode ];
		}
		else
		{
			return &m_Warnings[ 0 ];
		}
	}

	//--------------------------------------------------------------------------------
	const CBaseErrorDomain::s_BaseError* CBaseErrorDomain::ErrorTemplate( unsigned int uiCode )
	{
		return &m_Errors[ ( uiCode < CBaseErrorDomain::MAX_ERRORS ? uiCode : 0 ) ];
	}

	//--------------------------------------------------------------------------------
	bool CBaseErrorDomain::GetDescription( CString& strDescription, CError* pError )
	{
		bool bResult = false;
		if( pError != 0 )
		{
			unsigned int uiCustomLevel = 0;
			CError::E_LEVEL Severity = pError->What().GetLevel( &uiCustomLevel );
			unsigned int uiCode = pError->What().Code();

			void* ppszParts[ MAX_ERRPARTS ];
			int i = 0;
			while( i < MAX_ERRPARTS )
			{
				ppszParts[ i++ ] = 0;
			}

			const s_BaseError* pTemplate = 0;

			switch( Severity )
			{
			case CError::ERR_LVL_NOTE:
			{
				pTemplate = NoteTemplate( uiCode );
			}
			break;
			case CError::ERR_LVL_WARNING:
			{
				pTemplate = WarningTemplate( uiCode );
			}
			break;
			case CError::ERR_LVL_CONTINUE:
			case CError::ERR_LVL_SERIOUS:
			case CError::ERR_LVL_FATAL:
			default:
			{
				pTemplate = ErrorTemplate( uiCode );
			}
			break;
			}

			if( pTemplate != 0 )
			{
				GetErrorParts( pError, *pTemplate, ppszParts );
#if( __QOR_UNICODE )
				//strDescription.ValidateBuffer( static_cast< unsigned short > ( swprintf( strDescription.GetBufferSetLength( static_cast< unsigned short >( MAX_ERRTEXT ) ), MAX_ERRTEXT, pTemplate->pText, ppszParts[ 0 ], ppszParts[ 1 ], ppszParts[ 2 ], ppszParts[ 3 ], ppszParts[ 4 ], ppszParts[ 5 ], ppszParts[ 6 ], ppszParts[ 7 ], ppszParts[ 8 ], ppszParts[ 9 ] ) ) );
#else
				strDescription.ValidateBuffer( static_cast<unsigned short>( sprintf( (char*)(strDescription.GetBufferSetLength( MAX_ERRTEXT )), pTemplate->pText, ppszParts[ 0 ], ppszParts[ 1 ], ppszParts[ 2 ], ppszParts[ 3 ], ppszParts[ 4 ], ppszParts[ 5 ], ppszParts[ 6 ], ppszParts[ 7 ], ppszParts[ 8 ], ppszParts[ 9 ] ) ) );
#endif
				strDescription.ReleaseBuffer();
				bResult = true;
			}
			else
			{
				strDescription = _TXT( "No error description. The error object is invalid" ).str();
			}
		}
		else
		{
			strDescription = _TXT( "Null error object. Error memory may be low if many errors are currently being processed." ).str();
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CBaseErrorDomain::GetErrorParts( CError* pError, const s_BaseError& ErrorTemplate, void** ppszParts )
	{
		unsigned int uiCount = 0;
		while( ErrorTemplate.pDescriptorFuncs[ uiCount ] != 0 )
		{
			ppszParts[ uiCount ] = ( this->*ErrorTemplate.pDescriptorFuncs[ uiCount ] )( pError );
			uiCount++;
		}
		return uiCount;
	}
}//nsCodeQOR
