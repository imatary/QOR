//WinQLProtocolFilter.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "AppocritaQOR/SubSystems/INetworking.h"
#include "WinQL/Application/Comms/Network/WinQLProtocolFilter.h"
#include "WinQL/Application/WinQLApplication.h"
#include "WinQL/Application/SubSystems/WinQLNetworking.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	CProtocolFilter::CProtocolFilter() :
		m_bAddressFamily( false )
	{
		memset( &m_FilterData, 0, sizeof( WSAProtocolInfo ) );
	}

	//--------------------------------------------------------------------------------
	CProtocolFilter::CProtocolFilter( const CProtocolFilter& src )
	{
	}

	//--------------------------------------------------------------------------------
	CProtocolFilter& CProtocolFilter::operator = ( const CProtocolFilter& src )
	{
		return *this;
	}

	//--------------------------------------------------------------------------------
	CProtocolFilter::~CProtocolFilter()
	{
	}

	//--------------------------------------------------------------------------------
	std::vector< int > CProtocolFilter::operator()()
	{
		std::vector< int > VecResult;
		unsigned long ulProtocolCount = 0;
		nsQOR::IRole::ref_type Role = CWin32Application::TheWin32Application()->GetRole();
		nsWin32::CNetworking::ref_type Networking = Role->GetSubSystem( nsQOR::INetworking::ClassID() ).As< nsWin32::CNetworking >()->Ref();

		if( !Networking.IsNull() )
		{
			WSAProtocolInfo* pProtocol = Networking->NetworkHost().GetProtocols( ulProtocolCount );

			bool bIncluded = true;
			for( unsigned long ulProtocol = 0; ulProtocol < ulProtocolCount; ulProtocol++ )
			{
				if( m_bAddressFamily && ( pProtocol->iAddressFamily != m_FilterData.iAddressFamily ) )
				{
					bIncluded = false;
				}

				if( m_bType && ( pProtocol->iSocketType != m_FilterData.iSocketType ) )
				{
					bIncluded = false;
				}

				if( m_bProtocol && ( pProtocol->iProtocol != m_FilterData.iProtocol ) )
				{
					bIncluded = false;
				}

				if( bIncluded )
				{
					VecResult.push_back( ulProtocol );
				}
			}
		}
		return VecResult;
	}

	//--------------------------------------------------------------------------------
	void CProtocolFilter::SetAddressFamily( int iAF )
	{
		m_bAddressFamily = true;
		m_FilterData.iAddressFamily = iAF;
	}

	//--------------------------------------------------------------------------------
	void CProtocolFilter::SetType( int iType )
	{
		m_bType = true;
		m_FilterData.iSocketType = iType;
	}

	//--------------------------------------------------------------------------------
	void CProtocolFilter::SetProtocol( int iProtocol )
	{
		m_bProtocol = true;
		m_FilterData.iProtocol = iProtocol;
	}

}//nsWin32
