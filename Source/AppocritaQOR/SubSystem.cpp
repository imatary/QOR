//SubSystem.cpp

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "AppocritaQOR/AppocritaQOR.h"
#include "AppocritaQOR/SubSystem.h"
#include "CodeQOR/ClassReg/ClassReg.h"
#include "CodeQOR/Tracing/ObjectContext.h"
#include "CodeQOR/Modules/ProcessBase.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"

//------------------------------------------------------------------------------
namespace nsQOR
{
	//------------------------------------------------------------------------------
	CSubSystem::CSubSystem( nsCodeQOR::mxGUID* classID )
	{
		__QCS_FCONTEXT( "CSubSystem::CSubSystem" );
		nsCodeQOR::CClassInstanceFactory* pFactory = ThisModule().ExternalClassReg().GetFactory( classID );
		if( pFactory )
		{
			m_Impl.Attach( reinterpret_cast<ISubSystem*>( pFactory->Instance() ), true );
		}
	}

	//------------------------------------------------------------------------------
	CSubSystem::~CSubSystem()
	{
		__QCS_FCONTEXT( "CSubSystem::~CSubSystem" );
	}

	//------------------------------------------------------------------------------
	void CSubSystem::Setup( IApplication& Application )
	{
		__QCS_FCONTEXT( "CSubSystem::Setup" );
		m_Impl->Setup( Application );
	}

	//------------------------------------------------------------------------------
	void CSubSystem::Shutdown( IApplication& Application )
	{
		__QCS_FCONTEXT( "CSubSystem::Shutdown" );
		m_Impl->Shutdown( Application );
	}

}//nsQOR
