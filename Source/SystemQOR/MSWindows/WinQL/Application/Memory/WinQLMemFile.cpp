//WinQLMemFile.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/Memory/WinQLMemFile.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CMemFile );

	//--------------------------------------------------------------------------------
	CMemFile::CMemFile( SECURITY_ATTRIBUTES* pSecurity, unsigned long ulProtectFlags, unsigned long ulMaximumSizeHigh, unsigned long ulMaximumSizeLow, const TCHAR* szName ) : m_Handle( this, 0 )
	{
		m_Handle = CKernel32::Instance().CreateFileMapping( (HANDLE)Invalid_Handle_Value, reinterpret_cast< ::LPSECURITY_ATTRIBUTES >( pSecurity ), ulProtectFlags, ulMaximumSizeHigh, ulMaximumSizeLow, szName );
	}

	//--------------------------------------------------------------------------------
	CMemFile::~CMemFile()
	{
	}


	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CMappedViewOfFile );

	//--------------------------------------------------------------------------------
	CMappedViewOfFile::CMappedViewOfFile( CMemFile::refType RefMemFile, unsigned long ulAccess, unsigned long ulFileOffsetHigh, unsigned long ulFileOffsetLow, unsigned long ulNumberOfBytesToMap ) : m_pMapping( 0 )
	{
		if( !RefMemFile.IsNull() )
		{
			m_pMapping = CKernel32::Instance().MapViewOfFile( RefMemFile->m_Handle.Use(), ulAccess, ulFileOffsetHigh, ulFileOffsetLow, ulNumberOfBytesToMap );
		}
	}

	//--------------------------------------------------------------------------------
	CMappedViewOfFile::~CMappedViewOfFile()
	{
		if( m_pMapping )
		{
			CKernel32::Instance().UnmapViewOfFile( m_pMapping );
		}
	}

	//--------------------------------------------------------------------------------
	void* CMappedViewOfFile::operator()(void)
	{
		return m_pMapping;
	}

}//nsWin32