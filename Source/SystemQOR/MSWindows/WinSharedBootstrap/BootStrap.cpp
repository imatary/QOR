//BootStrap.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "BootStrap.h"
#include "WinQAPI/Kernel32.h"
#include <new>

CSharedBootStrap* g_pBootStrap;									//The module global pointer to the module bootstrap object

__QCMP_STARTLINKAGE_C
	extern Cmp_uint_ptr __security_cookie;						//The module global security cookie from the Compiler C++ support library
	extern Cmp_uint_ptr __security_cookie_complement;
__QCMP_ENDLINKAGE_C

//The following reserves space within special sections of the module image for static initializers

// C initializers
#pragma __QCMP_DATA_SEGMENT(".CRT$XIA")
nsWin32::CWinQORSharedBootStrap::InitFunc nsWin32::CWinQORSharedBootStrap::CInit_a[] __attribute__((section (".CRT$XIA"))) = { 0 };

#pragma __QCMP_DATA_SEGMENT(".CRT$XIZ")
nsWin32::CWinQORSharedBootStrap::InitFunc nsWin32::CWinQORSharedBootStrap::CInit_z[] __attribute__((section (".CRT$XIZ"))) = { 0 };

// C++ initializers
#pragma __QCMP_DATA_SEGMENT(".CRT$XCA")
nsWin32::CWinQORSharedBootStrap::InitFunc nsWin32::CWinQORSharedBootStrap::CppInit_a[] __attribute__((section (".CRT$XCA"))) = { 0 };

#pragma __QCMP_DATA_SEGMENT(".CRT$XCZ")
nsWin32::CWinQORSharedBootStrap::InitFunc nsWin32::CWinQORSharedBootStrap::CppInit_z[] __attribute__((section (".CRT$XCZ"))) = { 0 };

#pragma __QCMP_DEFAULT_DATA_SEGMENT		//Puts subsequent declarations into the default segment

//Tell the linker to merge the .CRT section into the regular data or read only data section
//Needs to be a writable data section for 32 bit Windows so we can tweak the loader to make
//per thread initialization work later on

#ifdef _M_IA64
	#pragma comment(linker, "/merge:.CRT=.rdata")
#else
	#pragma comment(linker, "/merge:.CRT=.data")
#endif

nsCodeQOR::CLibraryBase WindowsSharedLibraryBootstrapLibrary( "Windows DLL Bootstrap library", false );

namespace nsWin32
{
	//The Windows shared library bootstrap has its own new and delete so that process heap memory can be used even if the process module 
	//itself has not yet been initialized. Windows loads implicitly linked DLLs before calling the entry point of the main executable
	//We could create a private heap but this way is cleaner.
	//--------------------------------------------------------------------------------
	void* CWinQORSharedBootStrap::operator new( size_t )
	{
		return ::HeapAlloc(::GetProcessHeap(), 0x00000008/*Zero memory*/, sizeof( CWinQORSharedBootStrap ) );
	}

	//--------------------------------------------------------------------------------
	void CWinQORSharedBootStrap::operator delete( void* pInstance )
	{
		::HeapFree(::GetProcessHeap(), 0x00000000, pInstance );
	}

	//--------------------------------------------------------------------------------
	//Construct the bootstrap object
	CWinQORSharedBootStrap::CWinQORSharedBootStrap( void* hModule ) : ::CSharedBootStrap( hModule ), CModuleBootStrap()
	{
		m_iProcAttached = 0;
		m_hModule = hModule;
		ProcessAttach();
	}

	//--------------------------------------------------------------------------------
	//Destruct the bootstrap to clean up when the library is unloaded
	CWinQORSharedBootStrap::~CWinQORSharedBootStrap()
	{
	}

	//--------------------------------------------------------------------------------
	//Walk an initialization/termination list of C or C++ objects
	void CWinQORSharedBootStrap::InitTerm( InitFunc* pfbegin, InitFunc* pfend )
	{
		while( pfbegin < pfend )
		{
			if( *pfbegin != 0 )
			{
				( **pfbegin )( );
			}
			++pfbegin;
		}
	}

	//--------------------------------------------------------------------------------
	//Initialize all the C and C++ static objects. 
	//This is called by the Process after all implicitly linked libraries are loaded
	// which allows static objects to depend on other libraries.
	void CWinQORSharedBootStrap::InitStatic()
	{
		InitTerm( CInit_a, CInit_z );
		InitTerm( CppInit_a, CppInit_z );
		m_bStaticInitialised = true;
	}

	//--------------------------------------------------------------------------------
	//Set up the stack security Cookie to keep exception handling stack unwinding happy
	//The MSVC compiler encrypts this cookie into every stack frame and checks it when unwinding
	//or walking the stack for garbage collection if we ever integrate with any .NET code
	void CWinQORSharedBootStrap::InitializeSecurityCookie() __QCMP_THROW
	{
		CModuleBootStrap::InitializeSecurityCookie( __security_cookie, __security_cookie_complement );
	}

	//--------------------------------------------------------------------------------
	//Increment the process attach count
	int CWinQORSharedBootStrap::ProcessAttach()
	{
		return ++m_iProcAttached;
	}

	//--------------------------------------------------------------------------------
	//Decrement the process attach count
	int CWinQORSharedBootStrap::ProcessDetach()
	{
		return --m_iProcAttached;
	}

	//--------------------------------------------------------------------------------
	//Is the process attached ?
	bool CWinQORSharedBootStrap::ProcessAttached()
	{
		return m_iProcAttached > 0 ? true : false;
	}

	//--------------------------------------------------------------------------------
	void* CWinQORSharedBootStrap::InstanceHandle( void )
	{
		return m_hModule;
	}

}//nsWin32

//--------------------------------------------------------------------------------
int atexit( void (*pFunc)( void ) )
{
	
	return g_pBootStrap->atexit( pFunc );
}
