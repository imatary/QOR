//ExpectedHandler.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements an error handler for silently resolving a specific error that is
//expected as part of normal behavior

//This is used to provide special cases wherever we call code in circumstances where
//we expect it to fail but we don't want to prevent it raising errors if it fails
//when called from a different context.

#include "CodeQOR/ErrorSystem/ExpectedHandler.h"
#include "CodeQOR/ErrorSystem/What.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CExpectedHandler::CExpectedHandler( unsigned int uiExpectedError ) : CDefaultContinuableHandler(), 
		m_uiExpectedError( uiExpectedError )
	{
	}

	//--------------------------------------------------------------------------------
	CExpectedHandler::~CExpectedHandler()
	{
	}

	//--------------------------------------------------------------------------------
	//If the error is the one we expected then silently resolve it otherwise it is unhandled and will escalate
	bool CExpectedHandler::Handle( nsCodeQOR::CError& Error )
	{		
		return ( Error.What().Code() == m_uiExpectedError ) ? true : false;
	}

}//nsCodeQOR
