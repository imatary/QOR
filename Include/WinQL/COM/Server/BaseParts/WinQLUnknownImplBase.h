//WinQLUnknwonImplBase.h

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_COM_UNKNOWNIMPLBASE_H_3
#define WINQL_COM_UNKNOWNIMPLBASE_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Errors.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/Definitions/Interfaces.h"
#include "WinQL/Application/Threading/WinQLSynchronization.h"
#include "CodeQOR/DataStructures/TMap.h"
#include "WinQL/Application/ErrorSystem/WinQLFunctionContext.h"
#include "WinQL/CodeServices/WinQLPolicy.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{

	typedef nsCodeQOR::CTMap< GUID, void*, CWinQLPolicy > InterfaceMap;

	class __QOR_INTERFACE( __WINQL_COM ) CIUnknownDeferBase;

	//--------------------------------------------------------------------------------
	template< class TInterface = IUnknown >
	class CIUnknownImplBase : public TInterface
	{
		friend class CIUnknownDeferBase;

	public:

		//--------------------------------------------------------------------------------
		CIUnknownImplBase()
		{
			_WINQ_SFCONTEXT( "CIUnknownImplBase::CIUnknownImplBase" );
			m_bSelfDestructProtection = false;
			InterfaceMap::TItem item( IUnknown_IID, this );
			m_InterfaceMap.Append( item );
		}

		//--------------------------------------------------------------------------------
		virtual ~CIUnknownImplBase()
		{
			_WINQ_SFCONTEXT( "CIUnknownImplBase::~CIUnknownImplBase" );
		}

		//--------------------------------------------------------------------------------
		virtual long __QCMP_STDCALLCONVENTION QueryInterface( const GUID& riid, void **ppvObject )
		{
			_WINQ_SFCONTEXT( "CIUnknownImplBase::QueryInterface" );
			long lResult = Internal_QueryInterface( riid, ppvObject );
			if( lResult == nsWin32::OK )
			{
				AddRef();
			}
			return lResult;
		}
			
		//--------------------------------------------------------------------------------
		virtual unsigned long __QCMP_STDCALLCONVENTION AddRef( void )
		{
			_WINQ_SFCONTEXT( "CIUnknownImplBase::AddRef" );
			unsigned long ulResult = static_cast< unsigned long >( m_lReferenceCount++ );
			return ulResult;
		} 

		//--------------------------------------------------------------------------------
		virtual unsigned long __QCMP_STDCALLCONVENTION Release( void )
		{
			_WINQ_SFCONTEXT( "CIUnknownImplBase::Release" );
			unsigned long ulResult = static_cast< unsigned long >( m_lReferenceCount-- );
			if( ulResult == 0 && !m_bSelfDestructProtection )
			{
				delete this;
			}
			return ulResult;
		}

		//--------------------------------------------------------------------------------
		template< class TIface >
		long __QCMP_STDCALLCONVENTION QueryInterface( TIface** ppvObject )
		{
			_WINQ_SFCONTEXT( "CIUnknownImplBase::QueryInterface" );
			return QueryInterface( TIface::_IID, reinterpret_cast< void** >( ppvObject ) );
		}

		//--------------------------------------------------------------------------------
		template< class TIface >
		void RegisterInterface( TIface* pImpl )
		{
			_WINQ_SFCONTEXT( "CIUnknownImplBase::RegisterInterface" );
			const nsWin32::GUID iguid( *( reinterpret_cast< const nsWin32::GUID* >( &__uuidof(TIface) ) ) );
			InterfaceMap::TItem item( iguid, pImpl );
			m_InterfaceMap.Append( item );
		}

	protected:

		//--------------------------------------------------------------------------------
		//Returns interface pointer but does no AddRef. Only called from within the object
		long Internal_QueryInterface( const GUID& riid, void **ppvObject )
		{
			_WINQ_SFCONTEXT( "CIUnknownImplBase::Internal_QueryInterface" );
			long lResult = E_NoInterface;

			*ppvObject = m_InterfaceMap.Find( riid );
			if( *ppvObject != 0 )
			{
				lResult = 0;
			}
			return lResult;
		}

		//--------------------------------------------------------------------------------
		template< class TIface >
		TIface* Internal_Interface()
		{
			_WINQ_SFCONTEXT( "CIUnknownImplBase::Internal_Interface" );
			TIface* pInterface = 0;
			const nsWin32::GUID iguid( *( reinterpret_cast< const nsWin32::GUID* >( &__uuidof(TIface) ) ) );
			Internal_QueryInterface( iguid, reinterpret_cast< void** >( &pInterface ) );
			return pInterface;
		}

		bool m_bSelfDestructProtection;

	private:

		nsWin32::shared_long m_lReferenceCount;
		InterfaceMap m_InterfaceMap;
			
	};


	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CIUnknownDeferBase : public IUnknown
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CIUnknownDeferBase );

		CIUnknownDeferBase( CIUnknownImplBase<>* pImpl );
		~CIUnknownDeferBase();
		long __QCMP_STDCALLCONVENTION QueryInterface( const GUID& riid, void **ppvObject );
		unsigned long __QCMP_STDCALLCONVENTION AddRef( void );
		unsigned long __QCMP_STDCALLCONVENTION Release( void );

		//--------------------------------------------------------------------------------
		template< class TInterface > long __QCMP_STDCALLCONVENTION QueryInterface( TInterface** ppvObject )
		{
			_WINQ_SFCONTEXT( "CIUnknownDeferBase::QueryInterface" );
			return m_pImpl->QueryInterface( TInterface::_IID, reinterpret_cast< void** >( ppvObject ) );
		}

	protected:

		//--------------------------------------------------------------------------------
		template< class TInterface > void RegisterInterface( TInterface* pImpl )
		{
			_WINQ_SFCONTEXT( "CIUnknownDeferBase::RegisterInterface" );
			m_pImpl->RegisterInterface( pImpl );
		}

		long Internal_QueryInterface( const GUID& riid, void **ppvObject );

		//--------------------------------------------------------------------------------
		template< class TInterface > TInterface* Internal_Interface()
		{
			_WINQ_SFCONTEXT( "CIUnknownDeferBase::Internal_Interface" );
			return m_pImpl->Internal_Interface< TInterface >();
		}

	private:

		CIUnknownImplBase<>* m_pImpl;
		CIUnknownDeferBase();
		CIUnknownDeferBase( const CIUnknownDeferBase& );
		CIUnknownDeferBase& operator = ( const CIUnknownDeferBase& );
	};

}//nsWin32

#endif//WINQL_COM_UNKNOWNIMPLBASE_H_3

