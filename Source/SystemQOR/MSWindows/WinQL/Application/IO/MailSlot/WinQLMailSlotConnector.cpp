//WinQLMailSlotConnector.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/IO/MailSlot/WinQLMailSlotConnector.h"
#include "WinQL/Application/Threading/WinQLEvent.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CMailSlotConnector );

	//--------------------------------------------------------------------------------
	CMailSlotConnector::CMailSlotConnector( nsBluefoot::CConnectionPool* pPool ) : nsBluefoot::CPlug( pPool )
	{
		_WINQ_FCONTEXT( "CMailSlotConnector::CMailSlotConnector" );
		m_pSecurity = 0;
		m_strServerName = CTString( _TXT( "." ) );
		m_strSlotName = CTString( _TXT( "DefaultMailSlot" ) );
		m_ulMaximumMessageSize = 0;
		m_ulTimeoutMilliseconds = 0;
	}

	//--------------------------------------------------------------------------------
	CMailSlotConnector::~CMailSlotConnector()
	{
		_WINQ_FCONTEXT( "CMailSlotConnector::~CMailSlotConnector" );
		if( m_bConnected )
		{
			Disconnect();
		}		
	}

	//--------------------------------------------------------------------------------
	bool CMailSlotConnector::Connect()
	{
		_WINQ_FCONTEXT( "CMailSlotConnector::Connect" );

		//Construct the canonical MailSlot name
		CTString strSlotName = _TXT( "\\\\" );
		strSlotName.Append( m_strServerName );
		CTString strSlot = _TXT( "\\mailslot\\" );
		strSlotName.Append( strSlot );
		strSlotName.Append( m_strSlotName );

		m_RefMailSlot.Attach( new CMailSlot( strSlotName, m_ulMaximumMessageSize, m_ulTimeoutMilliseconds, m_pSecurity ), true );
		m_bConnected = true;

		if( !AsyncConnection() )
		{
			m_bConnected ? OnConnected() : OnConnectionError();
		}
		return m_bConnected;
	}

	//--------------------------------------------------------------------------------
	void CMailSlotConnector::Disconnect()
	{
		_WINQ_FCONTEXT( "CMailSlotConnector::Disconnect" );

		m_bConnected = false;
		m_RefMailSlot.Dispose();
		if( !AsyncConnection() )
		{
			OnDisconnected();
		}
	}

	//--------------------------------------------------------------------------------
	bool CMailSlotConnector::HandlePendingConnectionResult( bool bConnected )
	{
		_WINQ_FCONTEXT( "CMailSlotConnector::HandlePendingConnectionResult" );

		return false;
	}

	//--------------------------------------------------------------------------------
	void CMailSlotConnector::SetSecurity( SECURITY_ATTRIBUTES* pSecurity )
	{
		m_pSecurity = pSecurity;
	}

	//--------------------------------------------------------------------------------
	SECURITY_ATTRIBUTES* CMailSlotConnector::GetSecurity( void )
	{
		return m_pSecurity;
	}

	//--------------------------------------------------------------------------------
	void CMailSlotConnector::SetSlotName( CTString& strSlotName )
	{
		m_strSlotName = strSlotName;
	}

	//--------------------------------------------------------------------------------
	CTString CMailSlotConnector::GetSlotName( void )
	{
		return m_strSlotName;
	}

	//--------------------------------------------------------------------------------
	void CMailSlotConnector::SetServerName( CTString& strServerName )
	{
		m_strServerName = strServerName;
	}

	//--------------------------------------------------------------------------------
	CTString CMailSlotConnector::GetServerName( void )
	{
		return m_strServerName;
	}

	//--------------------------------------------------------------------------------
	void CMailSlotConnector::SetTimeout( unsigned long ulTimeoutMilliseconds )
	{
		m_ulTimeoutMilliseconds = ulTimeoutMilliseconds;
	}

	unsigned long CMailSlotConnector::GetTimeout( void )
	{
		return m_ulTimeoutMilliseconds;
	}
	
	//--------------------------------------------------------------------------------
	void CMailSlotConnector::SetMaximumMessageSize( unsigned long ulMaximumMessageBytes )
	{
		m_ulMaximumMessageSize = ulMaximumMessageBytes;
	}
	
	//--------------------------------------------------------------------------------
	unsigned long CMailSlotConnector::GetMaximumMessageSize( void )
	{
		return m_ulMaximumMessageSize;
	}

}//nsWin32


