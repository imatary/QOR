//WinQLIMEController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/Parts/IMEController.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CIMEController );

	//--------------------------------------------------------------------------------
	CIMEController::CIMEController( nsMammut::CModel* pModelItem, nsQOR::CController::ref_type Parent ) : CBaseWindowPartController( pModelItem, Parent )
	{
		_WINQ_FCONTEXT( "CIMEController::CIMEController" );
	}

	//--------------------------------------------------------------------------------
	CIMEController::~CIMEController()
	{
		_WINQ_FCONTEXT( "CIMEController::~CIMEController" );
	}

	//--------------------------------------------------------------------------------
	bool CIMEController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CIMEController::ProcessMessage" );

		bool bProcessed = ProcessHook( Window, lResult, uMsg, wParam, lParam );

		switch ( uMsg )
		{
		case COSWindow::wmIMEStartComposition:
			{
				OnStartComposition( Window );
				bProcessed = true;
			}
			break;
		case COSWindow::wmIMEEndComposition:
			{
				OnEndComposition( Window );
				bProcessed = true;
			}
			break;
		case COSWindow::wmIMEComposition:
			{
				OnComposition( Window, wParam, lParam );
				bProcessed = true;
			}
			break;
		case COSWindow::wmIMESetContext:
			{
				lResult = OnSetContext( Window, wParam, lParam );
				bProcessed = true;
			}
			break;
		case COSWindow::wmIMENotify:
			{
				lResult = OnNotify( Window, wParam, lParam );
				bProcessed = true;
			}
			break;
		case COSWindow::wmIMECompositionFull:
			{
				OnCompositionFull( Window );
				bProcessed = true;
			}
			break;
		case COSWindow::wmIMESelect:
			{
				OnSelect( Window, wParam, lParam );
				bProcessed = true;
			}
			break;
		case COSWindow::wmIMEChar:
			{
				//wParam;//DBCS or UNICODE
				/*
				unsigned short wRepeatCount = LOWORD( lParam );
				BYTE byScanCode = ( HIWORD( lParam ) & 0x00FF );
				BYTE byFlags = ( ( HIWORD( lParam ) ) >> 8 );
				bool bExtended = ( byFlags & 0x01 ) ? true : false;
				bool bContextCode = ( byFlags & 0x20 ) ? true : false;
				bool bPreviousState = ( byFlags & 0x40 ) ? true : false;
				bool bTransitionState = ( byFlags & 0x80 ) ? true : false;*/
				OnChar( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmIMEKeyDown:
			{
				OnKeyDown( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmIMEKeyUp:
			{
				OnKeyUp( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
#if( WINVER >= 0x0500 )
		case COSWindow::wmIMERequest:
			{
				lResult = OnRequest( Window, wParam, lParam );
				bProcessed = true;
			}
			break;
#endif
		}

		return bProcessed;
	}

	//--------------------------------------------------------------------------------
	void CIMEController::OnStartComposition( COSWindow& Window )
	{
		Window.DefProc( COSWindow::wmIMEStartComposition, 0, 0 );
	}

	//--------------------------------------------------------------------------------
	void CIMEController::OnEndComposition( COSWindow& Window )
	{
		Window.DefProc( COSWindow::wmIMEEndComposition, 0, 0 );
	}

	//--------------------------------------------------------------------------------
	void CIMEController::OnComposition( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Window.DefProc( COSWindow::wmIMEComposition, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	long CIMEController::OnSetContext( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		long lResult = Window.DefProc( COSWindow::wmIMESetContext, wParam, lParam );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	long CIMEController::OnNotify( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		long lResult = Window.DefProc( COSWindow::wmIMENotify, wParam, lParam );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	void CIMEController::OnCompositionFull( COSWindow& Window )
	{
		Window.DefProc( COSWindow::wmIMECompositionFull, 0, 0 );
	}

	//--------------------------------------------------------------------------------
	void CIMEController::OnSelect( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Window.DefProc( COSWindow::wmIMESelect, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CIMEController::OnChar( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Window.DefProc( COSWindow::wmIMEChar, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CIMEController::OnKeyDown( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Window.DefProc( COSWindow::wmIMEKeyDown, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CIMEController::OnKeyUp( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		Window.DefProc( COSWindow::wmIMEKeyUp, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	long CIMEController::OnRequest( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		long lResult = 0;
#if		( WINVER >= 0x0500 )
		lResult = Window.DefProc( COSWindow::wmIMERequest, wParam, lParam );
#endif//( WINVER >= 0x0500 )
		return lResult;
	}

}//nsWin32

