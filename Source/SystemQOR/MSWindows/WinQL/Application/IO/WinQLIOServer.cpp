//WinQLIOServer.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <string.h>
#include "WinQL/Application/IO/WinQLIOServer.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CIOServer );

	//--------------------------------------------------------------------------------
	CIOServer::CIOServer() : m_ConnectEvent( 0, 0, CEvent::_CREATE_EVENT_MANUAL_RESET | CEvent::_CREATE_EVENT_INITIAL_SET, Event_Modify_State | Synchronize | Read_Control )
	{
		_WINQ_FCONTEXT( "CIOServer::CIOServer" );
		m_bStopping = false;
		memset( &m_Overlapped, 0, sizeof( OVERLAPPED ) );
		m_Overlapped.hEvent = m_ConnectEvent.Handle()->ptr();
	}

	//--------------------------------------------------------------------------------
	CIOServer::~CIOServer()
	{
		_WINQ_FCONTEXT( "CIOServer::~CIOServer" );
	}

	//--------------------------------------------------------------------------------
	void CIOServer::SetConnectionPool( nsBluefoot::CConnectionPool::refType refConnectionPool )			//Attach a connection pool to allow the server to request new connections from a pool
	{
		m_refConnectionPool = refConnectionPool;
	}

	//--------------------------------------------------------------------------------
	nsBluefoot::CConnectionPool::refType CIOServer::GetConnectionPool( void )
	{
		return m_refConnectionPool;
	}

	//--------------------------------------------------------------------------------
	void CIOServer::SetupConnection( nsBluefoot::CPlug::refPlugType& refConnector )
	{
		_WINQ_FCONTEXT( "CIOServer::SetupConnection" );
		//Override to set device specific properties for the Connection
	}

	//------------------------------------------------------------------------------
	nsBluefoot::CPlug::refPlugType CIOServer::CreateConnection()
	{
		nsBluefoot::CPlug::refPlugType refServerConnection( 0 );
		
		if( !m_refConnectionPool.IsNull() )
		{
			refServerConnection = m_refConnectionPool->Get();

			if( !refServerConnection.IsNull() )
			{
				refServerConnection->SetSyncObject( &m_Overlapped );

				SetupConnection( refServerConnection );
			}
		}

		return refServerConnection;
	}

	//--------------------------------------------------------------------------------
	bool CIOServer::Listen()
	{
		_WINQ_FCONTEXT( "CIOServer::Listen" );

		m_refPendingIOConnection = CreateConnection();

		return (!m_refPendingIOConnection.IsNull() ) && m_refPendingIOConnection->Connect();
	}

	//--------------------------------------------------------------------------------
	bool CIOServer::OnListenResult( bool bConnected )
	{
		_WINQ_FCONTEXT( "CIOServer::OnListenResult" );

		if( m_refPendingIOConnection->AsyncConnection() )
		{
			return m_refPendingIOConnection->HandlePendingConnectionResult( bConnected );//For Windows Async device connections this is device type specific
		}
		else
		{
			return bConnected;
		}

	}

	//--------------------------------------------------------------------------------
	void CIOServer::Run( void )
	{
		_WINQ_FCONTEXT( "CIOServer::Run" );

		bool bSuccess = false;
		bool bPendingIO = OnListenResult( Listen() );
		unsigned long ulWaitResult = (unsigned long)(-1);
		unsigned long ulCountBytes = 0;
		unsigned long ulDataSize = 0;

		while( !m_bStopping )
		{
			ulWaitResult = m_ConnectEvent.Wait( Infinite, true );

			switch( ulWaitResult )
			{
			case 0:
				
				// If an operation is pending, get the result of the connect operation. 
   
				if( bPendingIO ) 
				{ 
					bSuccess = CKernel32::Instance().GetOverlappedResult( m_ConnectEvent.Handle()->Use(), reinterpret_cast< ::OVERLAPPED* >( &m_Overlapped ), &ulCountBytes, false) ? true : false;    // does not wait 

					if( !bSuccess ) 
					{
						unsigned long ulLastError = m_ErrorHelper.GetLastError();

						if( ulLastError == ErrorIOPending )
						{
							bSuccess = true;
						}
						else
						{
							//Raise an application level error
							return;
						}
					}
					else
					{
						bPendingIO = false;
					}

				} 
   				m_refPendingIOConnection->OnConnected();
				m_ConnectEvent.Reset();

				if( !bPendingIO )
				{									
					bPendingIO = Listen(); 
				}
				
				break;				

			case Wait_IO_Completion:
				break;

			default:
				m_refPendingIOConnection->OnConnectionError();
				return;
			}
		}
	}

	//--------------------------------------------------------------------------------
	void CIOServer::Stop( void )
	{
		_WINQ_FCONTEXT( "CIOServer::Stop" );
		m_bStopping = true;
	}

}//nsWin32
