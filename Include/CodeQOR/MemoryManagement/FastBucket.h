//FastBucket.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A bucket for memory page allocation

#ifndef CODEQOR_FASTBUCKET_H_2
#define CODEQOR_FASTBUCKET_H_2

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "FastPage.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	template< typename T > class TBox;
	template< typename T > class TPointer;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __CODEQOR ) CFastBucket
	{
	public:

		__QCMP_STATIC_CONSTANT( Cmp_uint_ptr, suiPageUnitSize = 1024 * 64 );

		CFastBucket( Cmp_uint_ptr uiPageUnits = 1 );
		CFastBucket( byte* pMemory, Cmp_uint_ptr uiPageUnits );
		~CFastBucket();
		Cmp_uint_ptr PageSize( void );
		Cmp_uint_ptr AllocatedItems( void );
		Cmp_uint_ptr AllocatedPages( void );
		Cmp_uint_ptr AllocatedSpace( void );
		void SetSize( Cmp_uint_ptr uiPageUnits );
		void Initialise();
		void* Allocate( Cmp_uint_ptr uiByteCount, unsigned int uiLine, const char* pFile, Cmp_uint_ptr ulAllocIndex );
		bool Free( void* pMemory );
		void Analyse( void(*pTrace)(char*) );

	protected:

		void PushPage( void );
		void PopPage( void );

		Cmp_uint_ptr m_uiPageUnits;
		CStackPage* m_pBasePage;	
		CStackPage* m_pToSPage;
		Cmp_uint_ptr m_uiItems;
		Cmp_uint_ptr m_uiPages;
	};

}//nsCodeQOR

#endif//CODEQOR_FASTBUCKET_H_2
