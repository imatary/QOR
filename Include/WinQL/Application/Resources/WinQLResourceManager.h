//WinQLResourceManager.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//WinQL Code Services Resource Manager

#ifndef WINQL_CS_RESOURCEMANAGER_H_3
#define WINQL_CS_RESOURCEMANAGER_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/System/Devices/WinQLDeviceHandle.h"
#include "WinQL/CodeServices/Handles/WinQLHandleMap.h"
#include "WinQL/Application/Process/Module/WinQLModule.h"
#include "WinQL/System/Devices/Keyboard/WinQLKeyboardInput.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterface.h"
#include "WinQL/System/Devices/SetupClasses/WinQLDeviceInfoSet.h"
#include "WinQL/System/Devices/WinQLNotification.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CThread;

	//--------------------------------------------------------------------------------
	//Resource manager for thread local resources, handles and objects
	class __QOR_INTERFACE( __WINQL ) CThreadResourceManager
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CThreadResourceManager );

		CThreadResourceManager( nsCodeQOR::CTCRef< CThread >& RefThread );
		~CThreadResourceManager();

		//TODO: Local descriptor pool

		//CKeyboardLayoutHandleMap& KeyboardLayoutHandleMap( void );
		//CDeviceInfoSetHandleMap& DeviceInfoSetHandleMap( void );
		//CDeviceNotificationHandleMap& DeviceNotificationHandleMap( void );
		//CDeviceHandleMap& DeviceHandleMap( void );

	private:

		nsCodeQOR::CTCRef< CThread > m_RefThread;
		//nsCodeQOR::CSTMember< CWinModuleHandleMap > m_WinModuleMap;
		//nsCodeQOR::CSTMember< CKeyboardLayoutHandleMap > m_KeyboardLayoutMap;
		//nsCodeQOR::CSTMember< CDeviceInfoSetHandleMap > m_DeviceInfoSetHandleMap;
		//nsCodeQOR::CSTMember< CDeviceNotificationHandleMap > m_DeviceNotificationHandleMap;
		//nsCodeQOR::CSTMember< CDeviceHandleMap > m_DeviceHandleMap;
		//DeviceContexts
		//Bitmaps
		//Brushes
		//EnhMetaFiles
		//Fonts
		//MetaFiles
		//Palettes
		//Pens
		//Regions ?
		//ThemeData
		//AcceleratorTables
		//Cursors
		//DeferWindowPos'
		//Desktops
		//Dialogs
		//Icons
		//ImageLists
		//Menus
		//Windows
		//OverlappedHandlers?
		//WinEventClients?

		CThreadResourceManager();//not implemented
	};

	//--------------------------------------------------------------------------------
	//Manage process wide resources that have no thread association
	class __QOR_INTERFACE( __WINQL ) CResourceManager
	{
	public:

		typedef nsCodeQOR::CTLRef< CResourceManager > refType;

		__QOR_DECLARE_OCLASS_ID( CResourceManager );

		CResourceManager();
		~CResourceManager();

		//Memory manager by reference to the CProcess
		//Per thread resource managers
		//Global descriptor pool

		//

	private:

		CResourceManager( const CResourceManager& );
		CResourceManager& operator = ( const CResourceManager& );
		
	};

}//nsWin32

#endif//WINQL_CS_RESOURCEMANAGER_H_3
