//Data.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Data structures, POD types only, for use with the Microsoft Windows Operating System

#ifndef _QSYS_WINDOWS_WWL_DATA_H_3
#define _QSYS_WINDOWS_WWL_DATA_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/WinQL.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Overlapped.h"
#include "WinQL/Definitions/Exception.h"
#include "CodeQOR/DataTypes/GUID.h"
#include <string.h>

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) COSWindow;
	class __QOR_INTERFACE( __WINQL ) CMenu;

	//--------------------------------------------------------------------------------
#if defined( MIDL_PASS )
	typedef struct _LARGE_INTEGER 
	{
#else // MIDL_PASS
	typedef union _LARGE_INTEGER 
	{

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_NAMELESS_STRUCTUNION, "Deliberate use of Microsoft extension" )

		struct __QCMP_NAMELESS_STRUCT
		{
			unsigned long LowPart;
			long HighPart;
		} DUMMYSTRUCTNAME;

		struct __QCMP_NAMELESS_STRUCT
		{
			unsigned long LowPart;
			long HighPart;
		} u;

__QCMP_WARNING_POP

#endif //MIDL_PASS
		Cmp_long_long QuadPart;
	} LARGE_INTEGER;

	//--------------------------------------------------------------------------------
#if defined(MIDL_PASS)
	typedef struct _ULARGE_INTEGER 
	{
#else // MIDL_PASS
	typedef union _ULARGE_INTEGER 
	{

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_NAMELESS_STRUCTUNION, _QCMP_TXT("Deliberate use of Microsoft extension") )

		struct __QCMP_NAMELESS_STRUCT
		{
			unsigned long LowPart;
			unsigned long HighPart;
		} DUMMYSTRUCTNAME;
		struct __QCMP_NAMELESS_STRUCT
		{
			unsigned long LowPart;
			unsigned long HighPart;
		} u;

__QCMP_WARNING_POP

#endif //MIDL_PASS
		Cmp_unsigned_long_long QuadPart;
	} ULARGE_INTEGER;

	typedef ULARGE_INTEGER *PULARGE_INTEGER;

	//--------------------------------------------------------------------------------
	typedef struct tagSIZE
	{
		long        cx;
		long        cy;
	} SIZE, *PSIZE, *LPSIZE;

	typedef int *pInt;

	//--------------------------------------------------------------------------------
	typedef struct _SECURITY_ATTRIBUTES 
	{
		unsigned long nLength;
		void* lpSecurityDescriptor;
		int bInheritHandle;
	} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

	//--------------------------------------------------------------------------------
	typedef struct _LUID 
	{
		unsigned long LowPart;
		long HighPart;
	} LUID, *PLUID;

	//--------------------------------------------------------------------------------
	typedef nsCodeQOR::GUID GUID;

	//--------------------------------------------------------------------------------
	struct CAGUID
	{
		unsigned long cElems;
		GUID* pElems;
	};

	//--------------------------------------------------------------------------------
	struct DVTargetDevice
	{
		unsigned long tdSize;
		unsigned short tdDriverNameOffset;
		unsigned short tdDeviceNameOffset;
		unsigned short tdPortNameOffset;
		unsigned short tdExtDevmodeOffset;
		unsigned char tdData[ 1 ];
	};

	//--------------------------------------------------------------------------------
	typedef unsigned short CLIPFORMAT;

	//--------------------------------------------------------------------------------
	struct FormatEtc
	{
		CLIPFORMAT cfFormat;
		DVTargetDevice *ptd;
		unsigned long dwAspect;
		long lindex;
		unsigned long tymed;
	};

	//--------------------------------------------------------------------------------
    struct BindOpts
	{
		unsigned long cbStruct;
		unsigned long grfFlags;
		unsigned long grfMode;
		unsigned long dwTickCountDeadline;
    };

	//--------------------------------------------------------------------------------
	struct IAdviseSink;

	struct STATDATA
	{
		FormatEtc formatetc;
		unsigned long advf;
		IAdviseSink* pAdvSink;
		unsigned long dwConnection;
	};

	//--------------------------------------------------------------------------------
	struct IStream;
	struct IStorage;
	struct IUnknown;
	
	struct StgMedium
	{
		unsigned long tymed;
		union 
		{
			CBitmap* pBitmap;
			void* hMetaFilePict;
			CEnhMetaFileHandle* pEnhMetaFile;
			void* hGlobal;
			wchar_t* lpszFileName;
			IStream* pstm;
			IStorage* pstg;
		} u;
		IUnknown* pUnkForRelease;
	};
	
	//--------------------------------------------------------------------------------
	enum TYMED 
	{ 
		TYMED_HGLOBAL   = 1,
		TYMED_FILE      = 2,
		TYMED_ISTREAM   = 4,
		TYMED_ISTORAGE  = 8,
		TYMED_GDI       = 16,
		TYMED_MFPICT    = 32,
		TYMED_ENHMF     = 64,
		TYMED_NULL      = 0
	};

	//--------------------------------------------------------------------------------
	enum DVASPECT 
	{
		DVASPECT_CONTENT    = 1,
		DVASPECT_THUMBNAIL  = 2,
		DVASPECT_ICON       = 4,
		DVASPECT_DOCPRINT   = 8
	};

	//--------------------------------------------------------------------------------
	union CY 
	{
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_NAMELESS_STRUCTUNION, _QCMP_TXT("Deliberate use of Microsoft extension") )

		struct __QCMP_NAMELESS_STRUCT
		{
#ifdef _MAC
			long Hi;
			long Lo;
#else
			unsigned long Lo;
			long Hi;
#endif
		} DUMMYSTRUCTNAME;
		Cmp_long_long int64;

__QCMP_WARNING_POP
	};

	//--------------------------------------------------------------------------------
	struct Decimal
	{
		unsigned short wReserved;

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_NAMELESS_STRUCTUNION, _QCMP_TXT("Deliberate use of Microsoft extension") )

		union __QCMP_NAMELESS_STRUCT
		{
			struct __QCMP_NAMELESS_STRUCT
			{
				unsigned char scale;
				unsigned char sign;
			} DUMMYSTRUCTNAME;
			unsigned short signscale;
		};
		unsigned long Hi32;
		union __QCMP_NAMELESS_STRUCT
		{
			struct __QCMP_NAMELESS_STRUCT
			{
#ifdef _MAC
				unsigned long Mid32;
				unsigned long Lo32;
#else
				unsigned long Lo32;
				unsigned long Mid32;
#endif
			}DUMMYSTRUCTNAME2;
			Cmp_unsigned_long_long Lo64;
		};

__QCMP_WARNING_POP

	};

	//--------------------------------------------------------------------------------
	struct ClipData
    {
		unsigned long cbSize;
		long ulClipFmt;
		unsigned char* pClipData;
    };

	//--------------------------------------------------------------------------------
	struct Blob 
	{
		unsigned long cbSize;
		unsigned char* pBlobData;
	};

	//--------------------------------------------------------------------------------
	struct SafeArrayBound
    {
		unsigned long cElements;
		long lLbound;
    };

	//--------------------------------------------------------------------------------
	struct SafeArray
    {
		unsigned short cDims;
		unsigned short fFeatures;
		unsigned long cbElements;
		unsigned long cLocks;
		void* pvData;
		SafeArrayBound rgsabound[ 1 ];
    };

	//--------------------------------------------------------------------------------
	struct BStrBlob
	{
		unsigned long cbSize;
		unsigned char* pData;
	};

	//--------------------------------------------------------------------------------
	struct CABool
    {
		unsigned long cElems;
		short* pElems;
    };

	//--------------------------------------------------------------------------------
	struct CABStr
	{
		unsigned long cElems;
		wchar_t** pElems;
	};

	//--------------------------------------------------------------------------------
	struct CABStrBlob
	{
		unsigned long cElems;
		BStrBlob* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAl
	{
		unsigned long cElems;
		long* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAul
	{
		unsigned long cElems;
		unsigned long* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAuh
	{
		unsigned long cElems;
		ULARGE_INTEGER* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAflt
	{
		unsigned long cElems;
		float* pElems;
	};


	//--------------------------------------------------------------------------------
	struct CAdbl
	{
		unsigned long cElems;
		double* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CASCode
    {
		unsigned long cElems;
		long* pElems;
    };

	//--------------------------------------------------------------------------------
	struct CAc
	{
		unsigned long cElems;
		char* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAClipData
	{
		unsigned long cElems;
		ClipData* pElems;
	};

	struct PropVariant;

	//--------------------------------------------------------------------------------
	struct CAPropVariant
    {
		unsigned long cElems;
		PropVariant* pElems;
    };

	//--------------------------------------------------------------------------------
	struct CAWStr
	{
		unsigned long cElems;
		wchar_t** pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAStr
	{
		unsigned long cElems;
		char** pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAcy
	{
		unsigned long cElems;
		CY* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CADate
	{
		unsigned long cElems;
		double* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAub
	{
		unsigned long cElems;
		unsigned char* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAi
	{
		unsigned long cElems;
		short* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAui
	{
		unsigned long cElems;
		unsigned short* pElems;
	};

	//--------------------------------------------------------------------------------
	struct CAh
	{
		unsigned long cElems;
		LARGE_INTEGER* pElems;
	};

	//--------------------------------------------------------------------------------
	enum TypeKind
	{	
		TKIND_ENUM	= 0,
		TKIND_RECORD	= ( TKIND_ENUM + 1 ) ,
		TKIND_MODULE	= ( TKIND_RECORD + 1 ) ,
		TKIND_INTERFACE	= ( TKIND_MODULE + 1 ) ,
		TKIND_DISPATCH	= ( TKIND_INTERFACE + 1 ) ,
		TKIND_COCLASS	= ( TKIND_DISPATCH + 1 ) ,
		TKIND_ALIAS	= ( TKIND_COCLASS + 1 ) ,
		TKIND_UNION	= ( TKIND_ALIAS + 1 ) ,
		TKIND_MAX	= ( TKIND_UNION + 1 ) 
	};

	struct ArrayDesc;

	//--------------------------------------------------------------------------------
	struct TypeDesc
	{
		union 
		{
			struct TypeDesc* lptdesc;
			struct ArrayDesc* lpadesc;
			unsigned long hreftype;
			// Empty union arm
		} DUMMYUNIONNAME;
		unsigned short vt;
	};

	//--------------------------------------------------------------------------------
	struct IDLDesc
	{
		Cmp_ulong_ptr dwReserved;
		unsigned short wIDLFlags;
	};

	//--------------------------------------------------------------------------------
	struct ArrayDesc
	{
		TypeDesc tdescElem;         // element type 
		unsigned short cDims;       // dimension count
		SafeArrayBound* rgbounds;  // var len array of bounds
	};

	//--------------------------------------------------------------------------------
	struct TypeAttr
	{
		GUID guid;
		unsigned long lcid;
		unsigned long dwReserved;
		long memidConstructor;
		long memidDestructor;
		wchar_t* lpstrSchema;
		unsigned long cbSizeInstance;
		TypeKind typekind;
		unsigned long cFuncs;
		unsigned long cVars;
		unsigned long cImplTypes;
		unsigned long cbSizeVft;
		unsigned long cbAlignment;
		unsigned long wTypeFlags;
		unsigned long wMajorVerNum;
		unsigned long wMinorVerNum;
		TypeDesc tdescAlias;
		IDLDesc idldescType;
	};

	//--------------------------------------------------------------------------------
	enum CallConv
	{	
		CC_FASTCALL	= 0,
		CC_CDECL	= 1,
		CC_MSCPASCAL	= ( CC_CDECL + 1 ) ,
		CC_PASCAL	= CC_MSCPASCAL,
		CC_MACPASCAL	= ( CC_PASCAL + 1 ) ,
		CC_STDCALL	= ( CC_MACPASCAL + 1 ) ,
		CC_FPFASTCALL	= ( CC_STDCALL + 1 ) ,
		CC_SYSCALL	= ( CC_FPFASTCALL + 1 ) ,
		CC_MPWCDECL	= ( CC_SYSCALL + 1 ) ,
		CC_MPWPASCAL	= ( CC_MPWCDECL + 1 ) ,
		CC_MAX	= ( CC_MPWPASCAL + 1 ) 
	};

	//--------------------------------------------------------------------------------
	enum InvokeKind
	{	
		INVOKE_FUNC	= 1,
		INVOKE_PROPERTYGET	= 2,
		INVOKE_PROPERTYPUT	= 4,
		INVOKE_PROPERTYPUTREF	= 8
	};

	//--------------------------------------------------------------------------------
	enum FuncKind
    {	
		FUNC_VIRTUAL	= 0,
		FUNC_PUREVIRTUAL	= ( FUNC_VIRTUAL + 1 ) ,
		FUNC_NONVIRTUAL	= ( FUNC_PUREVIRTUAL + 1 ) ,
		FUNC_STATIC	= ( FUNC_NONVIRTUAL + 1 ) ,
		FUNC_DISPATCH	= ( FUNC_STATIC + 1 ) 
    };

	//--------------------------------------------------------------------------------
	struct ExcepInfo
	{
		unsigned short wCode;
		unsigned short wReserved;
		wchar_t* bstrSource;
		wchar_t* bstrDescription;
		wchar_t* bstrHelpFile;
		unsigned long dwHelpContext;
		Cmp_ulong_ptr pvReserved;
		Cmp_ulong_ptr pfnDeferredFillIn;
		long scode;
	};

	struct IDispatch;
	struct IRecordInfo;

	struct __tagBRECORD_type
	{
		void* pvRecord;
		IRecordInfo* pRecInfo;
	};// 	__VARIANT_NAME_4;


    //--------------------------------------------------------------------------------
	struct Variant
    {
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_NAMELESS_STRUCTUNION, _QCMP_TXT("Deliberate use of Microsoft extension") )

		union
		{
			struct __QCMP_NAMELESS_STRUCT//__Variant
			{
				unsigned short vt;
				unsigned short wReserved1;
				unsigned short wReserved2;
				unsigned short wReserved3;
				union __QCMP_NAMELESS_STRUCT
				{
					Cmp_long_long llVal;
					long lVal;
					unsigned char bVal;
					short iVal;
					float fltVal;
					double dblVal;
					short boolVal;
					short _bool;
					long scode;
					CY cyVal;
					double date;
					wchar_t* bstrVal;
					IUnknown* punkVal;
					IDispatch* pdispVal;
					SafeArray* parray;
					unsigned char* pbVal;
					short* piVal;
					long* plVal;
					Cmp_long_long* pllVal;
					float* pfltVal;
					double* pdblVal;
					short* pboolVal;
					short* pbool;
					long* pscode;
					CY* pcyVal;
					double* pdate;
					wchar_t** pbstrVal;
					IUnknown** ppunkVal;
					IDispatch** ppdispVal;
					SafeArray** pparray;
					Variant* pvarVal;
					void* byref;
					char cVal;
					unsigned short uiVal;
					unsigned long ulVal;
					Cmp_unsigned_long_long ullVal;
					int intVal;
					unsigned int uintVal;
					Decimal* pdecVal;
					char* pcVal;
					unsigned short* puiVal;
					unsigned long* pulVal;
					Cmp_unsigned_long_long *pullVal;
					int* pintVal;
					unsigned int* puintVal;
#if (__CQOR_COMPILER == __CQOR_MSVC)
					struct __tagBRECORD_type2
					{
						void* pvRecord;
						IRecordInfo* pRecInfo;
					} __VARIANT_NAME_4;
#else
					__tagBRECORD_type __tagBRECORD;
#endif
				};
			};
			Decimal decVal;
		};
__QCMP_WARNING_POP

    };

	typedef Variant VariantArg;	

	//--------------------------------------------------------------------------------
	enum VarKind
	{	
		VAR_PERINSTANCE	= 0,
		VAR_STATIC	= ( VAR_PERINSTANCE + 1 ) ,
		VAR_CONST	= ( VAR_STATIC + 1 ) ,
		VAR_DISPATCH	= ( VAR_CONST + 1 ) 
	};

#define Variant_True ((short)-1)
#define Variant_False ((short)0)

	//--------------------------------------------------------------------------------
	struct DispParams
	{
		VariantArg* rgvarg;
		long* rgdispidNamedArgs;
		unsigned int cArgs;
		unsigned int cNamedArgs;
	};

	//--------------------------------------------------------------------------------
	struct ParamDescEx 
	{
		unsigned long cBytes;           // size of this structure
		VariantArg varDefaultValue;		// default value of this parameter
	};

	//--------------------------------------------------------------------------------
	struct ParamDesc
	{
		ParamDescEx* pparamdescex;
		unsigned short wParamFlags;
	};

	//--------------------------------------------------------------------------------
	struct ElemDesc
	{
		TypeDesc tdesc;             // the type of the element 
		union 
		{
			IDLDesc idldesc;        // info for remoting the element 
			ParamDesc paramdesc;    // info about the parameter
		} DUMMYUNIONNAME;
	};

	//--------------------------------------------------------------------------------
	struct VarDesc
	{
		long memid;
		wchar_t* lpstrSchema;
		union 
		{
			unsigned long oInst;
			Variant* lpvarValue;
		} 	DUMMYUNIONNAME;
		ElemDesc elemdescVar;
		unsigned short wVarFlags;
		VarKind varkind;
	};

	//--------------------------------------------------------------------------------
	struct FuncDesc
	{
		long memid;
		long* lprgscode;
		ElemDesc* lprgelemdescParam;
		FuncKind funckind;
		InvokeKind invkind;
		CallConv callconv;
		short cParams;
		short cParamsOpt;
		short oVft;
		short cScodes;
		ElemDesc elemdescFunc;
		unsigned short wFuncFlags;
	};

	//--------------------------------------------------------------------------------
	enum DescKind
	{	
		DESCKIND_NONE	= 0,
		DESCKIND_FUNCDESC	= ( DESCKIND_NONE + 1 ) ,
		DESCKIND_VARDESC	= ( DESCKIND_FUNCDESC + 1 ) ,
		DESCKIND_TYPECOMP	= ( DESCKIND_VARDESC + 1 ) ,
		DESCKIND_IMPLICITAPPOBJ	= ( DESCKIND_TYPECOMP + 1 ) ,
		DESCKIND_MAX	= ( DESCKIND_IMPLICITAPPOBJ + 1 ) 
	};

	struct ITypeComp;

	//--------------------------------------------------------------------------------
	union BindPtr
	{
		FuncDesc *lpfuncdesc;
		VarDesc *lpvardesc;
		ITypeComp *lptcomp;
	};

	//--------------------------------------------------------------------------------
    enum SysKind 
	{
        SYS_WIN16 = 0,
        SYS_WIN32,
        SYS_MAC,
        SYS_WIN64
    };

	//--------------------------------------------------------------------------------
	struct TLibAttr
    {
		GUID guid;
		unsigned long lcid;
		SysKind syskind;
		unsigned short wMajorVerNum;
		unsigned short wMinorVerNum;
		unsigned short wLibFlags;
    };

	struct OLEStream;

	//--------------------------------------------------------------------------------
	struct OLEStreamVTbl
	{
		unsigned long ( __QCMP_STDCALLCONVENTION * Get)( OLEStream*, void*, unsigned long );
		unsigned long ( __QCMP_STDCALLCONVENTION * Put)( OLEStream*, const void*, unsigned long );
	};

	//--------------------------------------------------------------------------------
	struct OLEStream
	{
		OLEStreamVTbl* lpstbl;
	};

	//--------------------------------------------------------------------------------
	struct MeasureItemStruct
	{
		unsigned int       CtlType;
		unsigned int       CtlID;
		unsigned int       itemID;
		unsigned int       itemWidth;
		unsigned int       itemHeight;
		Cmp_ulong_ptr	   itemData;
	};

	//--------------------------------------------------------------------------------
	typedef struct tagRECT
	{
		long    left;
		long    top;
		long    right;
		long    bottom;
	} RECT, *PRECT, *NPRECT, *LPRECT;
	
	//--------------------------------------------------------------------------------
	struct DrawItemStruct
	{
		unsigned int        CtlType;
		unsigned int        CtlID;
		unsigned int        itemID;
		unsigned int        itemAction;
		unsigned int        itemState;
		void*				phwndItem;
		void*				pDC;
		RECT				rcItem;
		Cmp_ulong_ptr		itemData;
	};

	//--------------------------------------------------------------------------------
	struct DeleteItemStruct
	{
		unsigned int       CtlType;
		unsigned int       CtlID;
		unsigned int       itemID;
		void*				phwndItem;
		Cmp_ulong_ptr	   itemData;
	};
	
	//--------------------------------------------------------------------------------
	struct ComparisonItem
	{
		unsigned int        CtlType;
		unsigned int        CtlID;
		void*				phwndItem;
		unsigned int        itemID1;
		Cmp_ulong_ptr		itemData1;
		unsigned int        itemID2;
		Cmp_ulong_ptr		itemData2;
		unsigned long       dwLocaleId;
	};	

	//--------------------------------------------------------------------------------
	struct NotificationMessageHeader	//NMHDR
	{
		void*				m_phWindowFrom;
		Cmp_uint_ptr		m_uiIdFrom;
		unsigned int		m_uiCode;
	};
	
	//--------------------------------------------------------------------------------
	struct NMCustomDraw : public NotificationMessageHeader	//NMCUSTOMDRAW
	{
		unsigned long dwDrawStage;
		CDCHandle::refType hdc;
		RECT rc;
		Cmp_ulong_ptr dwItemSpec;  // this is control specific, but it's how to specify an item.  valid only with CDDS_ITEM bit set
		unsigned int  uItemState;
		Cmp_long_ptr lItemlParam;
	};
	
	enum eItemStateFlags
	{
		CDIS_SELECTED           = 0x0001,
		CDIS_GRAYED             = 0x0002,
		CDIS_DISABLED           = 0x0004,
		CDIS_CHECKED            = 0x0008,
		CDIS_FOCUS              = 0x0010,
		CDIS_DEFAULT            = 0x0020,
		CDIS_HOT                = 0x0040,
		CDIS_MARKED             = 0x0080,
		CDIS_INDETERMINATE      = 0x0100,
#if (_WIN32_WINNT >= 0x0501)
		CDIS_SHOWKEYBOARDCUES   = 0x0200,
#endif
#if (_WIN32_WINNT >= 0x0600)
		CDIS_NEARHOT            = 0x0400,
		CDIS_OTHERSIDEHOT       = 0x0800,
		CDIS_DROPHILITED        = 0x1000,
#endif
	};

	//--------------------------------------------------------------------------------
	enum eDrawStageFlags
	{
		// values under 0x00010000 are reserved for global custom draw values.
		// above that are for specific controls
		CDDS_PREPAINT           = 0x00000001,
		CDDS_POSTPAINT          = 0x00000002,
		CDDS_PREERASE           = 0x00000003,
		CDDS_POSTERASE          = 0x00000004,
// the 0x000010000 bit means it's individual item specific
		CDDS_ITEM               = 0x00010000,
		CDDS_ITEMPREPAINT       = (CDDS_ITEM | CDDS_PREPAINT),
		CDDS_ITEMPOSTPAINT      = (CDDS_ITEM | CDDS_POSTPAINT),
		CDDS_ITEMPREERASE       = (CDDS_ITEM | CDDS_PREERASE),
		CDDS_ITEMPOSTERASE      = (CDDS_ITEM | CDDS_POSTERASE),
#if (_WIN32_IE >= 0x0400)
		CDDS_SUBITEM            = 0x00020000,
#endif
	};
	
	//--------------------------------------------------------------------------------
	struct WindowPos	//WINDOWPOS 
	{
		void*    hwnd;
		void*    hwndInsertAfter;
		int     x;
		int     y;
		int     cx;
		int     cy;
		unsigned int    flags;
	};
	
	//--------------------------------------------------------------------------------
	struct CREATESTRUCT
	{
		void*      lpCreateParams;
		InstanceHandle   hInstance;
		CMenu*       phMenu;
		COSWindow*  phwndParent;
		int         cy;
		int         cx;
		int         y;
		int         x;
		long        style;
		TCHAR*     lpszName;
		TCHAR*     lpszClass;
		unsigned long       dwExStyle;
	};

	//--------------------------------------------------------------------------------
	typedef struct tagCLIENTCREATESTRUCT 
	{
		void* hWindowMenu;
		unsigned int idFirstChild;
	} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

	//--------------------------------------------------------------------------------
	struct MDICREATESTRUCT
	{
		TCHAR*  szClass;
		TCHAR*  szTitle;
		void* hOwner;
		int x;
		int y;
		int cx;
		int cy;
		unsigned long style;
		Cmp_long_ptr lParam;
	};

	struct _TREEITEM;
	typedef _TREEITEM* HTREEITEM;

	//--------------------------------------------------------------------------------
	typedef struct tagSERIALIZEDPROPERTYVALUE
	{
		unsigned long dwType;
		unsigned char rgb[ 1 ];
	} SERIALIZEDPROPERTYVALUE;

	//--------------------------------------------------------------------------------
	typedef struct tagSTGOPTIONS
	{
		unsigned short usVersion;            // Versions 1 and 2 supported
		unsigned short reserved;             // must be 0 for padding
		unsigned long ulSectorSize;          // docfile header sector size (512)
#if STGOPTIONS_VERSION >= 2
		const wchar_t* pwcsTemplateFile;  // version 2 or above
#endif
	} STGOPTIONS;

	//--------------------------------------------------------------------------------
	typedef struct tagPROPSPEC
    {
		unsigned long ulKind;
		union 
        {
			unsigned long propid;
			wchar_t* lpwstr;
			/* Empty union arm */ 
        } 	DUMMYUNIONNAME;
    } 	PROPSPEC;

	//--------------------------------------------------------------------------------
	typedef struct _FILETIME 
	{
		unsigned long dwLowDateTime;
		unsigned long dwHighDateTime;
	} FILETIME, *PFILETIME, *LPFILETIME;

	//--------------------------------------------------------------------------------
	typedef struct tagSTATPROPSETSTG
	{
		GUID fmtid;
		GUID clsid;
		unsigned long grfFlags;
		FILETIME mtime;
		FILETIME ctime;
		FILETIME atime;
		unsigned long dwOSVersion;
	} 	STATPROPSETSTG;

	typedef struct tagCLIPDATA
	{
		unsigned long cbSize;
		long ulClipFmt;
		unsigned char* pClipData;
	} 	CLIPDATA;

	typedef struct tagBSTRBLOB
	{
		unsigned long cbSize;
		unsigned char* pData;
	} 	BSTRBLOB;

	typedef struct tagBLOB
	{
		unsigned long cbSize;
		unsigned char* pBlobData;
	} 	BLOB;

	typedef struct tagVersionedStream
	{
		GUID guidVersion;
		IStream* pStream;
	} 	VERSIONEDSTREAM;

	typedef struct tagVersionedStream *LPVERSIONEDSTREAM;

	typedef struct tagSAFEARRAYBOUND
	{
		unsigned long cElements;
		long lLbound;
	} 	SAFEARRAYBOUND;

	typedef struct tagSAFEARRAY
	{
		unsigned short cDims;
		unsigned short fFeatures;
		unsigned long cbElements;
		unsigned long cLocks;
		void* pvData;
		SAFEARRAYBOUND rgsabound[ 1 ];
	} 	SAFEARRAY;

	typedef /* [wire_marshal] */ SAFEARRAY *LPSAFEARRAY;

	typedef struct tagCAC
	{
		unsigned long cElems;
		char *pElems;
	} 	CAC;

	typedef struct tagCAUB
	{
		unsigned long cElems;
		unsigned char *pElems;
	} 	CAUB;

	typedef struct tagCAI
	{
		unsigned long cElems;
		short *pElems;
	} 	CAI;

	typedef struct tagCAUI
	{
		unsigned long cElems;
		unsigned short *pElems;
	} 	CAUI;

	typedef struct tagCAL
	{
		unsigned long cElems;
		long *pElems;
	} 	CAL;

	typedef struct tagCAUL
	{
		unsigned long cElems;
		unsigned long *pElems;
	} 	CAUL;

	typedef struct tagCAFLT
	{
		unsigned long cElems;
		float *pElems;
	} 	CAFLT;

	typedef struct tagCADBL
	{
		unsigned long cElems;
		double *pElems;
	} 	CADBL;

	typedef struct tagCACY
	{
		unsigned long cElems;
		CY *pElems;
	} 	CACY;

	typedef struct tagCADATE
	{
		unsigned long cElems;
		double *pElems;
	} 	CADATE;

	typedef struct tagCABSTR
	{
		unsigned long cElems;
		wchar_t** pElems;
	} 	CABSTR;

	typedef struct tagCABSTRBLOB
	{
		unsigned long cElems;
		BSTRBLOB *pElems;
	} 	CABSTRBLOB;

	typedef struct tagCABOOL
	{
		unsigned long cElems;
		short *pElems;
	} 	CABOOL;

	typedef struct tagCASCODE
	{
		unsigned long cElems;
		long *pElems;
	} 	CASCODE;

	struct PROPVARIANT;

	typedef struct tagCAPROPVARIANT
	{
		unsigned long cElems;
		PROPVARIANT *pElems;
	} 	CAPROPVARIANT;

	typedef struct tagCAH
	{
		unsigned long cElems;
		LARGE_INTEGER *pElems;
	} 	CAH;

	typedef struct tagCAUH
	{
		unsigned long cElems;
		ULARGE_INTEGER *pElems;
	} 	CAUH;

	typedef struct tagCALPSTR
	{
		unsigned long cElems;
		char** pElems;
	} 	CALPSTR;

	typedef struct tagCALPWSTR
	{
		unsigned long cElems;
		wchar_t** pElems;
	} 	CALPWSTR;

	typedef struct tagCAFILETIME
	{
		unsigned long cElems;
		FILETIME *pElems;
	} 	CAFILETIME;

	typedef struct tagCACLIPDATA
	{
		unsigned long cElems;
		CLIPDATA *pElems;
	} 	CACLIPDATA;

	typedef struct tagCACLSID
	{
		unsigned long cElems;
		GUID* pElems;
	} 	CACLSID;

	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE( __QCMP_WARN_NAMELESS_STRUCTUNION, _QCMP_TXT("Deliberate use of Microsoft extension") )

	typedef struct tagDEC
	{
		unsigned short wReserved;
		union
		{
			struct
			{
				byte scale;
				byte sign;
			};
			unsigned short signscale;
		};
		unsigned long Hi32;
		union
		{
			struct
			{
				unsigned long Lo32;
				unsigned long Mid32;
			};
			unsigned long long Lo64;
		};
	} DECIMAL;

	__QCMP_WARNING_POP

	typedef struct tag_inner_PROPVARIANT
	{
		unsigned short vt;
		unsigned short wReserved1;
		unsigned short wReserved2;
		unsigned short wReserved3;

		union __QCMP_NAMELESS_STRUCT
		{
			char cVal;
			unsigned char bVal;
			short iVal;
			unsigned short uiVal;
			long lVal;
			unsigned long ulVal;
			int intVal;
			unsigned int uintVal;
			LARGE_INTEGER hVal;
			ULARGE_INTEGER uhVal;
			float fltVal;
			double dblVal;
			short boolVal;
			short Bool;
			long scode;
			CY cyVal;
			double date;
			FILETIME filetime;
			GUID *puuid;
			CLIPDATA *pclipdata;
			wchar_t* bstrVal;
			BSTRBLOB bstrblobVal;
			BLOB blob;
			char* pszVal;
			wchar_t* pwszVal;
			IUnknown *punkVal;
			IDispatch *pdispVal;
			IStream *pStream;
			IStorage *pStorage;
			LPVERSIONEDSTREAM pVersionedStream;
			LPSAFEARRAY parray;
			CAC cac;
			CAUB caub;
			CAI cai;
			CAUI caui;
			CAL cal;
			CAUL caul;
			CAH cah;
			CAUH cauh;
			CAFLT caflt;
			CADBL cadbl;
			CABOOL cabool;
			CASCODE cascode;
			CACY cacy;
			CADATE cadate;
			CAFILETIME cafiletime;
			CACLSID cauuid;
			CACLIPDATA caclipdata;
			CABSTR cabstr;
			CABSTRBLOB cabstrblob;
			CALPSTR calpstr;
			CALPWSTR calpwstr;
			CAPROPVARIANT capropvar;
			char *pcVal;
			unsigned char *pbVal;
			short *piVal;
			unsigned short *puiVal;
			long *plVal;
			unsigned long *pulVal;
			int *pintVal;
			unsigned int *puintVal;
			float *pfltVal;
			double *pdblVal;
			short *pboolVal;
			DECIMAL *pdecVal;
			long *pscode;
			CY *pcyVal;
			double *pdate;
			wchar_t** pbstrVal;
			IUnknown **ppunkVal;
			IDispatch **ppdispVal;
			LPSAFEARRAY *pparray;
			PROPVARIANT *pvarVal;
		};

	}inner_PROPVARIANT;

	struct PROPVARIANT 
	{
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_NAMELESS_STRUCTUNION, _QCMP_TXT("Deliberate use of Microsoft extension") )
				
		union __QCMP_NAMELESS_STRUCT
		{
			inner_PROPVARIANT nameless;
			DECIMAL decVal;
		};
__QCMP_WARNING_POP
	};

	typedef struct tagSTATPROPSTG
	{
		wchar_t* lpwstrName;
		unsigned long propid;
		unsigned short vt;
	} 	STATPROPSTG;

	//--------------------------------------------------------------------------------
	struct AccessControlList	//_ACL , ACL, *PACL
	{
		unsigned char AclRevision;
		unsigned char Sbz1;
		unsigned short AclSize;
		unsigned short AceCount;
		unsigned short Sbz2;
	};
	
	typedef struct _SECURITY_DESCRIPTOR 
	{
		unsigned char  Revision;
		unsigned char  Sbz1;
		unsigned short Control;
		void* Owner;
		void* Group;
		AccessControlList* Sacl;
		AccessControlList* Dacl;

	} SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;

	typedef struct tagOLEVERB
	{
		long lVerb;
		wchar_t* lpszVerbName;
		unsigned long fuFlags;
		unsigned long grfAttribs;
	} OLEVERB;

	typedef struct tagOleMenuGroupWidths
	{
		long width[ 6 ];
	} OLEMENUGROUPWIDTHS;

	class __QOR_INTERFACE( __WINQL ) CAcceleratorTable;

	typedef struct tagOIFI
	{
		unsigned int cb;
		int fMDIApp;
		COSWindow* phwndFrame;
		CAcceleratorTable* phaccel;
		unsigned int cAccelEntries;
	} OLEINPLACEFRAMEINFO;

	enum VARENUM
	{	
		VT_EMPTY	= 0,
		VT_NULL	= 1,
		VT_I2	= 2,
		VT_I4	= 3,
		VT_R4	= 4,
		VT_R8	= 5,
		VT_CY	= 6,
		VT_DATE	= 7,
		VT_BSTR	= 8,
		VT_DISPATCH	= 9,
		VT_ERROR	= 10,
		VT_BOOL	= 11,
		VT_VARIANT	= 12,
		VT_UNKNOWN	= 13,
		VT_DECIMAL	= 14,
		VT_I1	= 16,
		VT_UI1	= 17,
		VT_UI2	= 18,
		VT_UI4	= 19,
		VT_I8	= 20,
		VT_UI8	= 21,
		VT_INT	= 22,
		VT_UINT	= 23,
		VT_VOID	= 24,
		VT_HRESULT	= 25,
		VT_PTR	= 26,
		VT_SAFEARRAY	= 27,
		VT_CARRAY	= 28,
		VT_USERDEFINED	= 29,
		VT_LPSTR	= 30,
		VT_LPWSTR	= 31,
		VT_RECORD	= 36,
		VT_INT_PTR	= 37,
		VT_UINT_PTR	= 38,
		VT_FILETIME	= 64,
		VT_BLOB	= 65,
		VT_STREAM	= 66,
		VT_STORAGE	= 67,
		VT_STREAMED_OBJECT	= 68,
		VT_STORED_OBJECT	= 69,
		VT_BLOB_OBJECT	= 70,
		VT_CF	= 71,
		VT_CLSID	= 72,
		VT_VERSIONED_STREAM	= 73,
		VT_BSTR_BLOB	= 0xfff,
		VT_VECTOR	= 0x1000,
		VT_ARRAY	= 0x2000,
		VT_BYREF	= 0x4000,
		VT_RESERVED	= 0x8000,
		VT_ILLEGAL	= 0xffff,
		VT_ILLEGALMASKED	= 0xfff,
		VT_TYPEMASK	= 0xfff
    } ;

	typedef enum _MF_ATTRIBUTE_TYPE
    {	
		MF_ATTRIBUTE_UINT32	= VT_UI4,
		MF_ATTRIBUTE_UINT64	= VT_UI8,
		MF_ATTRIBUTE_DOUBLE	= VT_R8,
		MF_ATTRIBUTE_GUID	= VT_CLSID,
		MF_ATTRIBUTE_STRING	= VT_LPWSTR,
		MF_ATTRIBUTE_BLOB	= ( VT_VECTOR | VT_UI1 ) ,
		MF_ATTRIBUTE_IUNKNOWN	= VT_UNKNOWN
    } 	MF_ATTRIBUTE_TYPE;

	typedef enum _MF_ATTRIBUTES_MATCH_TYPE
    {	
		MF_ATTRIBUTES_MATCH_OUR_ITEMS	= 0,
		MF_ATTRIBUTES_MATCH_THEIR_ITEMS	= 1,
		MF_ATTRIBUTES_MATCH_ALL_ITEMS	= 2,
		MF_ATTRIBUTES_MATCH_INTERSECTION	= 3,
		MF_ATTRIBUTES_MATCH_SMALLER	= 4
    } 	MF_ATTRIBUTES_MATCH_TYPE;

	enum MF_TOPOLOGY_TYPE
	{	
		MF_TOPOLOGY_OUTPUT_NODE	= 0,
		MF_TOPOLOGY_SOURCESTREAM_NODE	= ( MF_TOPOLOGY_OUTPUT_NODE + 1 ) ,
		MF_TOPOLOGY_TRANSFORM_NODE	= ( MF_TOPOLOGY_SOURCESTREAM_NODE + 1 ) ,
		MF_TOPOLOGY_TEE_NODE	= ( MF_TOPOLOGY_TRANSFORM_NODE + 1 ) ,
		MF_TOPOLOGY_MAX	= 0xffffffff
	};

	enum MFCLOCK_STATE
    {	
		MFCLOCK_STATE_INVALID	= 0,
		MFCLOCK_STATE_RUNNING	= ( MFCLOCK_STATE_INVALID + 1 ) ,
		MFCLOCK_STATE_STOPPED	= ( MFCLOCK_STATE_RUNNING + 1 ) ,
		MFCLOCK_STATE_PAUSED	= ( MFCLOCK_STATE_STOPPED + 1 ) 
    };

	typedef struct _MFCLOCK_PROPERTIES
	{
		Cmp_unsigned__int64 qwCorrelationRate;
		GUID guidClockId;
		unsigned long dwClockFlags;
		Cmp_unsigned__int64 qwClockFrequency;
		unsigned long dwClockTolerance;
		unsigned long dwClockJitter;
	} 	MFCLOCK_PROPERTIES;

	enum MF_FILE_ACCESSMODE
	{
		MF_ACCESSMODE_READ	= 1,
		MF_ACCESSMODE_WRITE	= 2,
		MF_ACCESSMODE_READWRITE	= 3
	};

	enum MF_FILE_OPENMODE
	{	
		MF_OPENMODE_FAIL_IF_NOT_EXIST	= 0,
		MF_OPENMODE_FAIL_IF_EXIST	= 1,
		MF_OPENMODE_RESET_IF_EXIST	= 2,
		MF_OPENMODE_APPEND_IF_EXIST	= 3,
		MF_OPENMODE_DELETE_IF_EXIST	= 4
	};

	enum MF_FILE_FLAGS
    {	
		MF_FILEFLAGS_NONE	= 0,
		MF_FILEFLAGS_NOBUFFERING	= 0x1,
		MF_FILEFLAGS_ALLOW_WRITE_SHARING	= 0x2
    };

	enum MFBYTESTREAM_SEEK_ORIGIN
    {	
		msoBegin	= 0,
		msoCurrent	= ( msoBegin + 1 ) 
    };

	enum MFSTREAMSINK_MARKER_TYPE
    {	
		MFSTREAMSINK_MARKER_DEFAULT	= 0,
		MFSTREAMSINK_MARKER_ENDOFSEGMENT	= ( MFSTREAMSINK_MARKER_DEFAULT + 1 ) ,
		MFSTREAMSINK_MARKER_TICK	= ( MFSTREAMSINK_MARKER_ENDOFSEGMENT + 1 ) ,
		MFSTREAMSINK_MARKER_EVENT	= ( MFSTREAMSINK_MARKER_TICK + 1 ) 
    };

	typedef struct _MediaType 
	{
		GUID			majortype;
		GUID			subtype;
		int				bFixedSizeSamples;
		int				bTemporalCompression;
		unsigned long   lSampleSize;
		GUID			formattype;
		IUnknown*		pUnk;
		unsigned long   cbFormat;
		unsigned char*	pbFormat;
	} AM_MEDIA_TYPE;

	typedef struct ASF_MUX_STATISTICS
    {
		unsigned long cFramesWritten;
		unsigned long cFramesDropped;
    } 	ASF_MUX_STATISTICS;

	typedef struct _tagpropertykey
    {
		GUID fmtid;
		unsigned long pid;
    } 	PROPERTYKEY;

	enum MF_OBJECT_TYPE
	{
		MF_OBJECT_MEDIASOURCE	= 0,
		MF_OBJECT_BYTESTREAM	= ( MF_OBJECT_MEDIASOURCE + 1 ) ,
		MF_OBJECT_INVALID	= ( MF_OBJECT_BYTESTREAM + 1 ) 
	};

	enum MFT_MESSAGE_TYPE
    {	
		MFT_MESSAGE_COMMAND_FLUSH	= 0,
		MFT_MESSAGE_COMMAND_DRAIN	= 0x1,
		MFT_MESSAGE_SET_D3D_MANAGER	= 0x2,
		MFT_MESSAGE_DROP_SAMPLES	= 0x3,
		MFT_MESSAGE_NOTIFY_BEGIN_STREAMING	= 0x10000000,
		MFT_MESSAGE_NOTIFY_END_STREAMING	= 0x10000001,
		MFT_MESSAGE_NOTIFY_END_OF_STREAM	= 0x10000002,
		MFT_MESSAGE_NOTIFY_START_OF_STREAM	= 0x10000003,
		MFT_MESSAGE_COMMAND_MARKER	= 0x20000000
    };

	typedef struct _MFT_INPUT_STREAM_INFO
    {
		Cmp_long_long hnsMaxLatency;
		unsigned long dwFlags;
		unsigned long cbSize;
		unsigned long cbMaxLookahead;
		unsigned long cbAlignment;
    } 	MFT_INPUT_STREAM_INFO;

	typedef struct _MFT_OUTPUT_STREAM_INFO
    {
		unsigned long dwFlags;
		unsigned long cbSize;
		unsigned long cbAlignment;
    } 	MFT_OUTPUT_STREAM_INFO;

	struct IMFSample;//forward decl
	struct IMFCollection;//forward decl

	typedef struct _MFT_OUTPUT_DATA_BUFFER
    {
		unsigned long dwStreamID;
		IMFSample* pSample;
		unsigned long dwStatus;
		IMFCollection* pEvents;
    } 	MFT_OUTPUT_DATA_BUFFER;

	enum MFVideoInterlaceMode
    {	
		MFVideoInterlace_Unknown	= 0,
		MFVideoInterlace_Progressive	= 2,
		MFVideoInterlace_FieldInterleavedUpperFirst	= 3,
		MFVideoInterlace_FieldInterleavedLowerFirst	= 4,
		MFVideoInterlace_FieldSingleUpper	= 5,
		MFVideoInterlace_FieldSingleLower	= 6,
		MFVideoInterlace_MixedInterlaceOrProgressive	= 7,
		MFVideoInterlace_Last	= ( MFVideoInterlace_MixedInterlaceOrProgressive + 1 ) ,
		MFVideoInterlace_ForceDWORD	= 0x7fffffff
    };

	typedef struct tagKS_BITMAPINFOHEADER
	{
		unsigned long		biSize;
		long				biWidth;
		long				biHeight;
		unsigned short      biPlanes;
		unsigned short      biBitCount;
		unsigned long		biCompression;
		unsigned long		biSizeImage;
		long				biXPelsPerMeter;
		long				biYPelsPerMeter;
		unsigned long		biClrUsed;
		unsigned long		biClrImportant;
	} KS_BITMAPINFOHEADER, *PKS_BITMAPINFOHEADER;

	typedef struct tagKS_VIDEOINFOHEADER 
	{
		RECT                rcSource;          // The bit we really want to use
		RECT                rcTarget;          // Where the video should go
		unsigned long       dwBitRate;         // Approximate bit data rate
		unsigned long       dwBitErrorRate;    // Bit error rate for this stream
		Cmp_long_long		AvgTimePerFrame;   // Average time per frame (100ns units)

		KS_BITMAPINFOHEADER bmiHeader;

	} KS_VIDEOINFOHEADER, *PKS_VIDEOINFOHEADER;

	typedef struct tagKS_VIDEOINFOHEADER2 
	{
		RECT						rcSource;
		RECT						rcTarget;
		unsigned long               dwBitRate;
		unsigned long               dwBitErrorRate;
		Cmp_long_long				AvgTimePerFrame;
		unsigned long               dwInterlaceFlags;   // use AMINTERLACE_* defines. Reject connection if undefined bits are not 0
		unsigned long               dwCopyProtectFlags; // use KS_COPYPROTECT_* defines. Reject connection if undefined bits are not 0
		unsigned long               dwPictAspectRatioX; // X dimension of picture aspect ratio, e.g. 16 for 16x9 display
		unsigned long               dwPictAspectRatioY; // Y dimension of picture aspect ratio, e.g.  9 for 16x9 display
		union 
		{
			unsigned long			dwControlFlags;               // use KS_AMCONTROL_* defines, use this from now on
			unsigned long			dwReserved1;                  // for backward compatiblity (was "must be 0";  connection rejected otherwise)
		};
		unsigned long               dwReserved2;        // must be 0; reject connection otherwise
		KS_BITMAPINFOHEADER bmiHeader;
	} KS_VIDEOINFOHEADER2, *PKS_VIDEOINFOHEADER2;

	enum MFVP_MESSAGE_TYPE
    {	
		MFVP_MESSAGE_FLUSH	= 0,
		MFVP_MESSAGE_INVALIDATEMEDIATYPE	= 0x1,
		MFVP_MESSAGE_PROCESSINPUTNOTIFY	= 0x2,
		MFVP_MESSAGE_BEGINSTREAMING	= 0x3,
		MFVP_MESSAGE_ENDSTREAMING	= 0x4,
		MFVP_MESSAGE_ENDOFSTREAM	= 0x5,
		MFVP_MESSAGE_STEP	= 0x6,
		MFVP_MESSAGE_CANCELSTEP	= 0x7
    };

	typedef struct _MFRatio
    {
		unsigned long Numerator;
		unsigned long Denominator;
    } 	MFRatio;

	enum MFVideoChromaSubsampling
    {	MFVideoChromaSubsampling_Unknown	= 0,
		MFVideoChromaSubsampling_ProgressiveChroma	= 0x8,
		MFVideoChromaSubsampling_Horizontally_Cosited	= 0x4,
		MFVideoChromaSubsampling_Vertically_Cosited	= 0x2,
		MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes	= 0x1,
		MFVideoChromaSubsampling_MPEG2	= ( MFVideoChromaSubsampling_Horizontally_Cosited | MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes ) ,
		MFVideoChromaSubsampling_MPEG1	= MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes,
		MFVideoChromaSubsampling_DV_PAL	= ( MFVideoChromaSubsampling_Horizontally_Cosited | MFVideoChromaSubsampling_Vertically_Cosited ) ,
		MFVideoChromaSubsampling_Cosited	= ( ( MFVideoChromaSubsampling_Horizontally_Cosited | MFVideoChromaSubsampling_Vertically_Cosited )  | MFVideoChromaSubsampling_Vertically_AlignedChromaPlanes ) ,
		MFVideoChromaSubsampling_Last	= ( MFVideoChromaSubsampling_Cosited + 1 ) ,
		MFVideoChromaSubsampling_ForceDWORD	= 0x7fffffff
    };

	enum MFVideoTransferFunction
    {	MFVideoTransFunc_Unknown	= 0,
		MFVideoTransFunc_10	= 1,
		MFVideoTransFunc_18	= 2,
		MFVideoTransFunc_20	= 3,
		MFVideoTransFunc_22	= 4,
		MFVideoTransFunc_709	= 5,
		MFVideoTransFunc_240M	= 6,
		MFVideoTransFunc_sRGB	= 7,
		MFVideoTransFunc_28	= 8,
		MFVideoTransFunc_Log_100	= 9,
		MFVideoTransFunc_Log_316	= 10,
		MFVideoTransFunc_709_sym	= 11,
		MFVideoTransFunc_Last	= ( MFVideoTransFunc_709_sym + 1 ) ,
		MFVideoTransFunc_ForceDWORD	= 0x7fffffff
    };

	enum MFVideoPrimaries
    {	MFVideoPrimaries_Unknown	= 0,
		MFVideoPrimaries_reserved	= 1,
		MFVideoPrimaries_BT709	= 2,
		MFVideoPrimaries_BT470_2_SysM	= 3,
		MFVideoPrimaries_BT470_2_SysBG	= 4,
		MFVideoPrimaries_SMPTE170M	= 5,
		MFVideoPrimaries_SMPTE240M	= 6,
		MFVideoPrimaries_EBU3213	= 7,
		MFVideoPrimaries_SMPTE_C	= 8,
		MFVideoPrimaries_Last	= ( MFVideoPrimaries_SMPTE_C + 1 ) ,
		MFVideoPrimaries_ForceDWORD	= 0x7fffffff
    };

	enum MFVideoTransferMatrix
    {	MFVideoTransferMatrix_Unknown	= 0,
		MFVideoTransferMatrix_BT709	= 1,
		MFVideoTransferMatrix_BT601	= 2,
		MFVideoTransferMatrix_SMPTE240M	= 3,
		MFVideoTransferMatrix_Last	= ( MFVideoTransferMatrix_SMPTE240M + 1 ) ,
		MFVideoTransferMatrix_ForceDWORD	= 0x7fffffff
    };

	enum MFVideoLighting
    {	
		MFVideoLighting_Unknown	= 0,
		MFVideoLighting_bright	= 1,
		MFVideoLighting_office	= 2,
		MFVideoLighting_dim	= 3,
		MFVideoLighting_dark	= 4,
		MFVideoLighting_Last	= ( MFVideoLighting_dark + 1 ) ,
		MFVideoLighting_ForceDWORD	= 0x7fffffff
    };

	enum MFNominalRange
    {	
		MFNominalRange_Unknown	= 0,
		MFNominalRange_Normal	= 1,
		MFNominalRange_Wide	= 2,
		MFNominalRange_0_255	= 1,
		MFNominalRange_16_235	= 2,
		MFNominalRange_48_208	= 3,
		MFNominalRange_64_127	= 4,
		MFNominalRange_Last	= ( MFNominalRange_64_127 + 1 ) ,
		MFNominalRange_ForceDWORD	= 0x7fffffff
    };

	typedef struct _MFOffset
    {
		unsigned short fract;
		short value;
    } 	MFOffset;

	typedef struct _MFVideoArea
    {
		MFOffset OffsetX;
		MFOffset OffsetY;
		SIZE Area;
    } 	MFVideoArea;

	typedef struct _MFVideoInfo
    {
		unsigned long dwWidth;
		unsigned long dwHeight;
		MFRatio PixelAspectRatio;
		MFVideoChromaSubsampling SourceChromaSubsampling;
		MFVideoInterlaceMode InterlaceMode;
		MFVideoTransferFunction TransferFunction;
		MFVideoPrimaries ColorPrimaries;
		MFVideoTransferMatrix TransferMatrix;
		MFVideoLighting SourceLighting;
		MFRatio FramesPerSecond;
		MFNominalRange NominalRange;
		MFVideoArea GeometricAperture;
		MFVideoArea MinimumDisplayAperture;
		MFVideoArea PanScanAperture;
		unsigned __int64 VideoFlags;
    } 	MFVideoInfo;

	typedef struct _MFVideoCompressedInfo
    {
		Cmp_long_long AvgBitrate;
		Cmp_long_long AvgBitErrorRate;
		unsigned long MaxKeyFrameSpacing;
    } 	MFVideoCompressedInfo;

	typedef struct _MFARGB
    {
		unsigned char rgbBlue;
		unsigned char rgbGreen;
		unsigned char rgbRed;
		unsigned char rgbAlpha;
    } 	MFARGB;

	typedef struct __MFAYUVSample
    {
		unsigned char bCrValue;
		unsigned char bCbValue;
		unsigned char bYValue;
		unsigned char bSampleAlpha8;
    } 	MFAYUVSample;

	typedef union _MFPaletteEntry
    {
		MFARGB ARGB;
		MFAYUVSample AYCbCr;
    } 	MFPaletteEntry;

	typedef struct _MFVideoSurfaceInfo
    {
		unsigned long Format;
		unsigned long PaletteEntries;
		MFPaletteEntry Palette[ 1 ];
    } 	MFVideoSurfaceInfo;

	typedef struct _MFVIDEOFORMAT
    {
		unsigned long dwSize;
		MFVideoInfo videoInfo;
		GUID guidFormat;
		MFVideoCompressedInfo compressedInfo;
		MFVideoSurfaceInfo surfaceInfo;
    } 	MFVIDEOFORMAT;

	enum __QOR_INTERFACE( __WINQL ) MFP_EVENT_TYPE
    {	
		MFP_EVENT_TYPE_PLAY	= 0,
		MFP_EVENT_TYPE_PAUSE	= 1,
		MFP_EVENT_TYPE_STOP	= 2,
		MFP_EVENT_TYPE_POSITION_SET	= 3,
		MFP_EVENT_TYPE_RATE_SET	= 4,
		MFP_EVENT_TYPE_MEDIAITEM_CREATED	= 5,
		MFP_EVENT_TYPE_MEDIAITEM_SET	= 6,
		MFP_EVENT_TYPE_FRAME_STEP	= 7,
		MFP_EVENT_TYPE_MEDIAITEM_CLEARED	= 8,
		MFP_EVENT_TYPE_MF	= 9,
		MFP_EVENT_TYPE_ERROR	= 10,
		MFP_EVENT_TYPE_PLAYBACK_ENDED	= 11,
		MFP_EVENT_TYPE_ACQUIRE_USER_CREDENTIAL	= 12
    };

	enum __QOR_INTERFACE( __WINQL ) MFP_MEDIAPLAYER_STATE
    {	
		MFP_MEDIAPLAYER_STATE_EMPTY	= 0,
		MFP_MEDIAPLAYER_STATE_STOPPED	= 0x1,
		MFP_MEDIAPLAYER_STATE_PLAYING	= 0x2,
		MFP_MEDIAPLAYER_STATE_PAUSED	= 0x3,
		MFP_MEDIAPLAYER_STATE_SHUTDOWN	= 0x4
    };

	struct __QOR_INTERFACE( __WINQL ) IMFPMediaPlayer;
	struct __QOR_INTERFACE( __WINQL ) IPropertyStore;

	enum _MFP_MEDIAITEM_CHARACTERISTICS
	{
		MFP_MEDIAITEM_IS_LIVE	= 0x1,
		MFP_MEDIAITEM_CAN_SEEK	= 0x2,
		MFP_MEDIAITEM_CAN_PAUSE	= 0x4,
		MFP_MEDIAITEM_HAS_SLOW_SEEK	= 0x8
	};

	struct __QOR_INTERFACE( __WINQL ) MFP_EVENT_HEADER
	{
		MFP_EVENT_TYPE eEventType;
		long hrEvent;
		IMFPMediaPlayer* pMediaPlayer;
		MFP_MEDIAPLAYER_STATE eState;
		IPropertyStore* pPropertyStore;
	};

	struct __QOR_INTERFACE( __WINQL ) MFVideoNormalizedRect
    {
		float left;
		float top;
		float right;
		float bottom;
    };

	struct __QOR_INTERFACE( __WINQL ) IMFPMediaItem; //forward decl

	struct __QOR_INTERFACE( __WINQL ) MFP_PLAY_EVENT
    {
		MFP_EVENT_HEADER header;
		IMFPMediaItem* pMediaItem;
    };

	struct __QOR_INTERFACE( __WINQL ) MFP_PAUSE_EVENT
    {
		MFP_EVENT_HEADER header;
		IMFPMediaItem* pMediaItem;
    };

	struct __QOR_INTERFACE( __WINQL ) MFP_STOP_EVENT
    {
		MFP_EVENT_HEADER header;
		IMFPMediaItem* pMediaItem;
    };

	struct __QOR_INTERFACE( __WINQL ) MFP_POSITION_SET_EVENT
    {
		MFP_EVENT_HEADER header;
		IMFPMediaItem* pMediaItem;
    };

	struct __QOR_INTERFACE( __WINQL ) MFP_RATE_SET_EVENT
    {
		MFP_EVENT_HEADER header;
		IMFPMediaItem *pMediaItem;
		float flRate;
    };

	struct __QOR_INTERFACE( __WINQL ) MFP_MEDIAITEM_CREATED_EVENT
    {
		MFP_EVENT_HEADER header;
		IMFPMediaItem* pMediaItem;
		Cmp_ulong_ptr dwUserData;
    };

	struct __QOR_INTERFACE( __WINQL ) MFP_MEDIAITEM_SET_EVENT
    {
		MFP_EVENT_HEADER header;
		IMFPMediaItem* pMediaItem;
    };

	struct __QOR_INTERFACE( __WINQL ) MFP_FRAME_STEP_EVENT
    {
		MFP_EVENT_HEADER header;
		IMFPMediaItem* pMediaItem;
    };

	struct __QOR_INTERFACE( __WINQL ) MFP_MEDIAITEM_CLEARED_EVENT
    {
		MFP_EVENT_HEADER header;
		IMFPMediaItem* pMediaItem;
    };

	struct __QOR_INTERFACE( __WINQL ) IMFMediaEvent;	//forward decl

	struct __QOR_INTERFACE( __WINQL ) MFP_MF_EVENT
    {
		MFP_EVENT_HEADER header;
		unsigned long MFEventType;
		IMFMediaEvent* pMFMediaEvent;
		IMFPMediaItem* pMediaItem;
    };

	struct __QOR_INTERFACE( __WINQL ) MFP_ERROR_EVENT
    {
		MFP_EVENT_HEADER header;
    };

	struct __QOR_INTERFACE( __WINQL ) MFP_PLAYBACK_ENDED_EVENT
    {
		MFP_EVENT_HEADER header;
		IMFPMediaItem* pMediaItem;
    };

	struct __QOR_INTERFACE( __WINQL ) IMFNetCredential;	//forward decl

	struct __QOR_INTERFACE( __WINQL ) MFP_ACQUIRE_USER_CREDENTIAL_EVENT
    {
		MFP_EVENT_HEADER header;
		Cmp_ulong_ptr dwUserData;
		int fProceedWithAuthentication;
		long hrAuthenticationStatus;
		const wchar_t* pwszURL;
		const wchar_t* pwszSite;
		const wchar_t* pwszRealm;
		const wchar_t* pwszPackage;
		long nRetries;
		Cmp_unsigned__int32 flags;
		IMFNetCredential* pCredential;
    };

	//------------------------------------------------------------------------------
	// BP_BUFFERFORMAT
	enum BP_BUFFERFORMAT
	{
		BPBF_COMPATIBLEBITMAP,    // Compatible bitmap
		BPBF_DIB,                 // Device-independent bitmap
		BPBF_TOPDOWNDIB,          // Top-down device-independent bitmap
		BPBF_TOPDOWNMONODIB       // Top-down monochrome device-independent bitmap
	};

	//------------------------------------------------------------------------------
	struct BLENDFUNCTION
	{
		unsigned char   BlendOp;
		unsigned char   BlendFlags;
		unsigned char   SourceConstantAlpha;
		unsigned char   AlphaFormat;
	};

	//------------------------------------------------------------------------------
	// BP_PAINTPARAMS
	typedef struct _BP_PAINTPARAMS
	{
		unsigned long				cbSize;
		unsigned long				dwFlags; // BPPF_ flags
		const RECT*					prcExclude;
		const BLENDFUNCTION*		pBlendFunction;
	} BP_PAINTPARAMS, *PBP_PAINTPARAMS;

	//------------------------------------------------------------------------------
	typedef struct _DTBGOPTS
	{
		unsigned long dwSize;           // size of the struct
		unsigned long dwFlags;          // which options have been specified
		RECT rcClip;            // clipping rectangle
	} DTBGOPTS, *PDTBGOPTS;

	//--------------------------------------------------------------------------------
	typedef struct tagPOINT
	{
		long x;
		long y;
	} POINT, *PPOINT, *NPPOINT, *LPPOINT, POINTL, *PPOINTL;
	
	typedef int ( __QCMP_STDCALLCONVENTION *DTT_CALLBACK_PROC ) ( void* phdc, wchar_t* pszText, int cchText, RECT* prc, unsigned int dwFlags, Cmp_long_ptr lParam );
	
	typedef struct _DTTOPTS
	{
		unsigned long             dwSize;              // size of the struct
		unsigned long             dwFlags;             // which options have been specified
		unsigned long          crText;              // color to use for text fill
		unsigned long          crBorder;            // color to use for text outline
		unsigned long          crShadow;            // color to use for text shadow
		int               iTextShadowType;     // TST_SINGLE or TST_CONTINUOUS
		POINT             ptShadowOffset;      // where shadow is drawn (relative to text)
		int               iBorderSize;         // Border radius around text
		int               iFontPropId;         // Font property to use for the text instead of TMT_FONT
		int               iColorPropId;        // Color property to use for the text instead of TMT_TEXTCOLOR
		int               iStateId;            // Alternate state id
		int              fApplyOverlay;       // Overlay text on top of any text effect?
		int               iGlowSize;           // Glow radious around text
		DTT_CALLBACK_PROC pfnDrawTextCallback; // Callback for DrawText
		Cmp_long_ptr            lParam;              // Parameter for callback
	} DTTOPTS, *PDTTOPTS; 

	// BP_ANIMATIONSTYLE
	enum BP_ANIMATIONSTYLE
	{
		BPAS_NONE,                // No animation
		BPAS_LINEAR,              // Linear fade animation
		BPAS_CUBIC,               // Cubic fade animation
		BPAS_SINE                 // Sinusoid fade animation
	};

	// BP_ANIMATIONPARAMS
	typedef struct _BP_ANIMATIONPARAMS
	{
		unsigned long               cbSize;
		unsigned long               dwFlags; // BPAF_ flags
		BP_ANIMATIONSTYLE			style;
		unsigned long               dwDuration;
	} BP_ANIMATIONPARAMS, *PBP_ANIMATIONPARAMS;

	//--------------------------------------------------------------------------------
	typedef struct tagRGBQUAD 
	{
		unsigned char rgbBlue;
		unsigned char rgbGreen;
		unsigned char rgbRed;
		unsigned char rgbReserved;
	} RGBQUAD;
	typedef RGBQUAD *LPRGBQUAD;

	typedef struct tagLOGFONTW
	{
		long      lfHeight;
		long      lfWidth;
		long      lfEscapement;
		long      lfOrientation;
		long      lfWeight;
		unsigned char      lfItalic;
		unsigned char      lfUnderline;
		unsigned char      lfStrikeOut;
		unsigned char      lfCharSet;
		unsigned char      lfOutPrecision;
		unsigned char      lfClipPrecision;
		unsigned char      lfQuality;
		unsigned char      lfPitchAndFamily;
		wchar_t     lfFaceName[ 32 ];
	} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW;

#if (_WIN32_WINNT >= 0x0600)
#	define MAX_INTLIST_COUNT 402
#else
#	define MAX_INTLIST_COUNT 10
#endif

	typedef struct _INTLIST
	{
		int iValueCount;      // number of values in iValues
		int iValues[ MAX_INTLIST_COUNT ];
	} INTLIST, *PINTLIST;

	typedef struct _MARGINS
	{
		int cxLeftWidth;      // width of left border that retains its size
		int cxRightWidth;     // width of right border that retains its size
		int cyTopHeight;      // height of top border that retains its size
		int cyBottomHeight;   // height of bottom border that retains its size
	} MARGINS, *PMARGINS;

	//--------------------------------------------------------------------------------
	enum THEMESIZE
	{
		TS_MIN,             // minimum size
		TS_TRUE,            // size without stretching
		TS_DRAW             // size that theme mgr will use to draw part
	};

	//--------------------------------------------------------------------------------
	enum PROPERTYORIGIN
	{
		PO_STATE,           // property was found in the state section
		PO_PART,            // property was found in the part section
		PO_CLASS,           // property was found in the class section
		PO_GLOBAL,          // property was found in [globals] section
		PO_NOTFOUND         // property was not found
	};

	//--------------------------------------------------------------------------------
	typedef struct tagTEXTMETRIC
	{
		long tmHeight;
		long tmAscent;
		long tmDescent;
		long tmInternalLeading;
		long tmExternalLeading;
		long tmAveCharWidth;
		long tmMaxCharWidth;
		long tmWeight;
		long tmOverhang;
		long tmDigitizedAspectX;
		long tmDigitizedAspectY;
		wchar_t tmFirstChar;
		wchar_t tmLastChar;
		wchar_t tmDefaultChar;
		wchar_t tmBreakChar;
		unsigned char tmItalic;
		unsigned char tmUnderlined;
		unsigned char tmStruckOut;
		unsigned char tmPitchAndFamily;
		unsigned char tmCharSet;
	} TEXTMETRIC, *PTEXTMETRIC, *NPTEXTMETRIC, *LPTEXTMETRIC;

	enum WINDOWTHEMEATTRIBUTETYPE
	{
		WTA_NONCLIENT = 1
	};

	//--------------------------------------------------------------------------------
	typedef struct tagDRAWTEXTPARAMS
	{
		unsigned int cbSize;
		int     iTabLength;
		int     iLeftMargin;
		int     iRightMargin;
		unsigned int uiLengthDrawn;
	} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS;

	//--------------------------------------------------------------------------------
	typedef struct  tagCOLORADJUSTMENT 
	{
		unsigned short caSize;
		unsigned short caFlags;
		unsigned short caIlluminantIndex;
		unsigned short caRedGamma;
		unsigned short caGreenGamma;
		unsigned short caBlueGamma;
		unsigned short caReferenceBlack;
		unsigned short caReferenceWhite;
		short caContrast;
		short caBrightness;
		short caColorfulness;
		short caRedGreenTint;
	} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;

	//--------------------------------------------------------------------------------
	typedef struct tagPALETTEENTRY 
	{
		unsigned char peRed;
		unsigned char peGreen;
		unsigned char peBlue;
		unsigned char peFlags;
	} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;

	//--------------------------------------------------------------------------------
	typedef struct _devicemode 
	{
		__QCMP_STATIC_CONSTANT( int, CchDeviceName = 32 );// size of a device name string
		__QCMP_STATIC_CONSTANT( int, CchFormName = 32 );// size of a form name string

		TCHAR dmDeviceName[ CchDeviceName ];
		unsigned short dmSpecVersion;
		unsigned shortdmDriverVersion;
		unsigned shortdmSize;
		unsigned shortdmDriverExtra;
		unsigned long dmFields;

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_NAMELESS_STRUCTUNION, _QCMP_TXT("Deliberate use of Microsoft extension") )
		union __QCMP_NAMELESS_STRUCT
		{
		  // printer only fields
		  struct __QCMP_NAMELESS_STRUCT
		  {
			short dmOrientation;
			short dmPaperSize;
			short dmPaperLength;
			short dmPaperWidth;
			short dmScale;
			short dmCopies;
			short dmDefaultSource;
			short dmPrintQuality;
		  };
		  // display only fields
		  struct __QCMP_NAMELESS_STRUCT
		  {
			POINTL dmPosition;
			unsigned long dmDisplayOrientation;
			unsigned long dmDisplayFixedOutput;
		  };
		};

__QCMP_WARNING_POP

		short dmColor;
		short dmDuplex;
		short dmYResolution;
		short dmTTOption;
		short dmCollate;
		TCHAR  dmFormName[ CchFormName ];
		unsigned short dmLogPixels;
		unsigned long dmBitsPerPel;
		unsigned long dmPelsWidth;
		unsigned long dmPelsHeight;
		union 
		{
			unsigned long dmDisplayFlags;
			unsigned long dmNup;
		};
		unsigned long dmDisplayFrequency;
#if	( WINVER >= 0x0400 )
		unsigned long dmICMMethod;
		unsigned long dmICMIntent;
		unsigned long dmMediaType;
		unsigned long dmDitherType;
		unsigned long dmReserved1;
		unsigned long dmReserved2;
#	if	  ( WINVER >= 0x0500 ) || ( _WIN32_WINNT >= _WIN32_WINNT_NT4 )
		unsigned long dmPanningWidth;
		unsigned long dmPanningHeight;
#	endif//( WINVER >= 0x0500 ) || ( _WIN32_WINNT >= _WIN32_WINNT_NT4 )
#endif//WINVER >= 0x0400
	} DEVMODE, *PDEVMODE, *NPDEVMODE, *LPDEVMODE;

	//--------------------------------------------------------------------------------
	typedef struct tagUSEROBJECTFLAGS 
	{
		int fInherit;
		int fReserved;
		unsigned long dwFlags;
	} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;
	/*
	//--------------------------------------------------------------------------------
	typedef struct tagGUITHREADINFO
	{
		unsigned long cbSize;
		unsigned long flags;
		CWindowHandle::refType hwndActive;
		CWindowHandle::refType hwndFocus;
		CWindowHandle::refType hwndCapture;
		CWindowHandle::refType hwndMenuOwner;
		CWindowHandle::refType hwndMoveSize;
		CWindowHandle::refType hwndCaret;
		nsWin32::RECT rcCaret;
	} GUITHREADINFO, *PGUITHREADINFO, * LPGUITHREADINFO;
	*/

	//--------------------------------------------------------------------------------
	typedef unsigned long ( __QCMP_STDCALLCONVENTION *PTHREAD_START_ROUTINE )( void* lpThreadParameter );
	typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

	//--------------------------------------------------------------------------------
	typedef struct _RECTL
	{
		long left;
		long top;
		long right;
		long bottom;
	} RECTL, *PRECTL, *LPRECTL;

	//--------------------------------------------------------------------------------
	typedef struct tagHANDLETABLE
	{
		void* objectHandle[ 1 ];
	} HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;

	//--------------------------------------------------------------------------------
	typedef struct tagMETARECORD
	{
		unsigned long rdSize;
		unsigned short rdFunction;
		unsigned short rdParm[ 1 ];
	} METARECORD;

	//--------------------------------------------------------------------------------
	typedef struct tagENHMETARECORD
	{
		unsigned long iType;              // Record type EMR_XXX
		unsigned long nSize;              // Record size in bytes
		unsigned long dParm[ 1 ];         // Parameters
	} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

	//--------------------------------------------------------------------------------
	typedef struct tagENHMETAHEADER
	{
		unsigned long iType;              // Record typeEMR_HEADER
		unsigned long nSize;              // Record size in bytes.  This may be greater
							// than the sizeof(ENHMETAHEADER).
		RECTL   rclBounds;          // Inclusive-inclusive bounds in device units
		RECTL   rclFrame;           // Inclusive-inclusive Picture Frame of metafile in .01 mm units
		unsigned long dSignature;         // Signature.  Must be ENHMETA_SIGNATURE.
		unsigned long nVersion;           // Version number
		unsigned long nBytes;             // Size of the metafile in bytes
		unsigned long nRecords;           // Number of records in the metafile
		unsigned short nHandles;           // Number of handles in the handle table
							// Handle index zero is reserved.
		unsigned short sReserved;          // Reserved.  Must be zero.
		unsigned long nDescription;       // Number of chars in the unicode description string
							// This is 0 if there is no description string
		unsigned long offDescription;     // Offset to the metafile description record.
							// This is 0 if there is no description string
		unsigned long nPalEntries;        // Number of entries in the metafile palette.
		SIZE   szlDevice;          // Size of the reference device in pels
		SIZE   szlMillimeters;     // Size of the reference device in millimeters
#if(WINVER >= 0x0400)
		unsigned long cbPixelFormat;      // Size of PIXELFORMATDESCRIPTOR information
							// This is 0 if no pixel format is set
		unsigned long offPixelFormat;     // Offset to PIXELFORMATDESCRIPTOR
							// This is 0 if no pixel format is set
		unsigned long bOpenGL;            // TRUE if OpenGL commands are present in
							// the metafile, otherwise FALSE
#endif /* WINVER >= 0x0400 */
#if(WINVER >= 0x0500)
		SIZE   szlMicrometers;     // Size of the reference device in micrometers
#endif /* WINVER >= 0x0500 */

	} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

	//--------------------------------------------------------------------------------
	typedef struct tagMETAFILEPICT
	{
		long mm;
		long xExt;
		long yExt;
		CMetaFileHandle::refType hMF;
	} METAFILEPICT, *LPMETAFILEPICT;
	
	typedef int ( __QCMP_STDCALLCONVENTION *ENHMFENUMPROC )( void* hdc, HANDLETABLE* lpht, const ENHMETARECORD* lpmr, int nHandles, Cmp_long_ptr data );
	
	//--------------------------------------------------------------------------------
	typedef struct tagPIXELFORMATDESCRIPTOR
	{
		unsigned short nSize;
		unsigned short nVersion;
		unsigned long dwFlags;
		unsigned char iPixelType;
		unsigned char cColorBits;
		unsigned char cRedBits;
		unsigned char cRedShift;
		unsigned char cGreenBits;
		unsigned char cGreenShift;
		unsigned char cBlueBits;
		unsigned char cBlueShift;
		unsigned char cAlphaBits;
		unsigned char cAlphaShift;
		unsigned char cAccumBits;
		unsigned char cAccumRedBits;
		unsigned char cAccumGreenBits;
		unsigned char cAccumBlueBits;
		unsigned char cAccumAlphaBits;
		unsigned char cDepthBits;
		unsigned char cStencilBits;
		unsigned char cAuxBuffers;
		unsigned char iLayerType;
		unsigned char bReserved;
		unsigned long dwLayerMask;
		unsigned long dwVisibleMask;
		unsigned long dwDamageMask;
	} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;

	//--------------------------------------------------------------------------------
	typedef struct  tagXFORM
	{
		float eM11;
		float eM12;
		float eM21;
		float eM22;
		float eDx;
		float eDy;
	} XFORM, *PXFORM, *LPXFORM;

	//--------------------------------------------------------------------------------
	typedef struct _RGNDATAHEADER 
	{
		unsigned long dwSize;
		unsigned long iType;
		unsigned long nCount;
		unsigned long nRgnSize;
		nsWin32::RECT rcBound;
	} RGNDATAHEADER, *PRGNDATAHEADER;

	//--------------------------------------------------------------------------------
	typedef struct _RGNDATA 
	{
		RGNDATAHEADER   rdh;
		char            Buffer[1];
	} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA;

	//--------------------------------------------------------------------------------
	typedef struct _ASF_INDEX_IDENTIFIER
	{
		GUID guidIndexType;
		unsigned short wStreamNumber;
	} 	ASF_INDEX_IDENTIFIER;

	//--------------------------------------------------------------------------------
	typedef struct _MF_SINK_WRITER_STATISTICS
	{
		unsigned long cb;
		long long llLastTimestampReceived;
		long long llLastTimestampEncoded;
		long long llLastTimestampProcessed;
		long long llLastStreamTickReceived;
		long long llLastSinkSampleRequest;
		unsigned long long qwNumSamplesReceived;
		unsigned long long qwNumSamplesEncoded;
		unsigned long long qwNumSamplesProcessed;
		unsigned long long qwNumStreamTicksReceived;
		unsigned long dwByteCountQueued;
		unsigned long long qwByteCountProcessed;
		unsigned long dwNumOutstandingSinkSampleRequests;
		unsigned long dwAverageSampleRateReceived;
		unsigned long dwAverageSampleRateEncoded;
		unsigned long dwAverageSampleRateProcessed;
	} 	MF_SINK_WRITER_STATISTICS;

	//--------------------------------------------------------------------------------
	typedef struct tagBITMAPINFOHEADER
	{
		unsigned long biSize;
		long biWidth;
		long biHeight;
		unsigned short biPlanes;
		unsigned short biBitCount;
		unsigned long biCompression;
		unsigned long biSizeImage;
		long biXPelsPerMeter;
		long biYPelsPerMeter;
		unsigned long biClrUsed;
		unsigned long biClrImportant;
	} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;

	//--------------------------------------------------------------------------------
	typedef struct tagVIDEOINFOHEADER 
	{
	  RECT             rcSource;
	  RECT             rcTarget;
	  unsigned long            dwBitRate;
	  unsigned long            dwBitErrorRate;
	  long long   AvgTimePerFrame;
	  BITMAPINFOHEADER bmiHeader;
	} VIDEOINFOHEADER;

	//--------------------------------------------------------------------------------
	typedef struct tagVIDEOINFOHEADER2 
	{
		RECT             rcSource;
		RECT             rcTarget;
		unsigned long            dwBitRate;
		unsigned long            dwBitErrorRate;
		long long				 AvgTimePerFrame;
		unsigned long            dwInterlaceFlags;
		unsigned long            dwCopyProtectFlags;
		unsigned long            dwPictAspectRatioX;
		unsigned long            dwPictAspectRatioY;
		union 
		{
			unsigned long dwControlFlags;
			unsigned long dwReserved1;
		};
		unsigned long            dwReserved2;
		BITMAPINFOHEADER bmiHeader;
	} VIDEOINFOHEADER2;

	//--------------------------------------------------------------------------------
	typedef struct tagMPEG1VIDEOINFO 
	{
		VIDEOINFOHEADER hdr;
		unsigned long           dwStartTimeCode;
		unsigned long           cbSequenceHeader;
		unsigned char            bSequenceHeader[1];
	} MPEG1VIDEOINFO;

	//--------------------------------------------------------------------------------
	typedef struct tagMPEG2VIDEOINFO 
	{
		VIDEOINFOHEADER2 hdr;
		unsigned long            dwStartTimeCode;
		unsigned long            cbSequenceHeader;
		unsigned long            dwProfile;
		unsigned long            dwLevel;
		unsigned long            dwFlags;
		unsigned long            dwSequenceHeader[1];
	} MPEG2VIDEOINFO;

	//--------------------------------------------------------------------------------
	typedef struct tWAVEFORMATEX
	{
		unsigned short        wFormatTag;         /* format type */
		unsigned short        nChannels;          /* number of channels (i.e. mono, stereo...) */
		unsigned long       nSamplesPerSec;     /* sample rate */
		unsigned long       nAvgBytesPerSec;    /* for buffer estimation */
		unsigned short        nBlockAlign;        /* block size of data */
		unsigned short        wBitsPerSample;     /* number of bits per sample of mono data */
		unsigned short        cbSize;             /* the count in bytes of the size of */
										/* extra information (after cbSize) */
	} WAVEFORMATEX;

	//--------------------------------------------------------------------------------	
	typedef struct tagMSG 
	{
		void* hwnd;
		unsigned int message;
		Cmp_uint_ptr wParam;
		Cmp_long_ptr lParam;
		unsigned long time;
		nsWin32::POINT pt;
	#ifdef _MAC
		unsigned long lPrivate;
	#endif
	} MSG, *PMSG, *NPMSG, *LPMSG;
	
	typedef long FXPT16DOT16, *LPFXPT16DOT16;
	typedef long FXPT2DOT30, *LPFXPT2DOT30;

	//--------------------------------------------------------------------------------
	typedef struct tagCIEXYZ
	{
		FXPT2DOT30 ciexyzX;
		FXPT2DOT30 ciexyzY;
		FXPT2DOT30 ciexyzZ;
	} CIEXYZ;
	typedef CIEXYZ *LPCIEXYZ;

	//--------------------------------------------------------------------------------
	typedef struct tagICEXYZTRIPLE
	{
		CIEXYZ  ciexyzRed;
		CIEXYZ  ciexyzGreen;
		CIEXYZ  ciexyzBlue;
	} CIEXYZTRIPLE;
	typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;

	//--------------------------------------------------------------------------------
	typedef struct tagLOGCOLORSPACE
	{
		unsigned long lcsSignature;
		unsigned long lcsVersion;
		unsigned long lcsSize;
		long lcsCSType;
		long lcsIntent;
		CIEXYZTRIPLE lcsEndpoints;
		unsigned long lcsGammaRed;
		unsigned long lcsGammaGreen;
		unsigned long lcsGammaBlue;
		TCHAR  lcsFilename[ Max_Path ];
	} LOGCOLORSPACE, *LPLOGCOLORSPACE;

	//--------------------------------------------------------------------------------
	typedef struct tagLOGPALETTE 
	{
		unsigned short palVersion;
		unsigned short palNumEntries;
		PALETTEENTRY palPalEntry[ 1 ];
	} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;

	//--------------------------------------------------------------------------------
	enum eProcessorFeature
	{
		eFloating_Point_Precision_Errata = 0,
		eFloating_Point_Emulated = 1,
		eCompare_Exchange_double = 2,
		eMMX_Instructions = 3,
		eSSE_Instructions = 6,
		e3DNow_Instructions_Available = 7,
		eRDTSC_Instruction_Available = 8,
		ePhysical_Address_Extension = 9,
		eSSE2_Instructions = 10,
		eData_Execution_Prevention = 12,
		eSSE3_Instructions = 13,
		eCompare_Exchange128 = 14,
		eCompare64_Exchange128 = 15,
		eChannels_enabled = 16,
		eXSTOR_XRSTOR = 17,

	};


	//--------------------------------------------------------------------------------
	enum eSystem_Power_State
	{
		PowerSystemUnspecified = 0,
		PowerSystemWorking     = 1,
		PowerSystemSleeping1   = 2,
		PowerSystemSleeping2   = 3,
		PowerSystemSleeping3   = 4,
		PowerSystemHibernate   = 5,
		PowerSystemShutdown    = 6,
		PowerSystemMaximum     = 7
	};

	//--------------------------------------------------------------------------------
	enum eDevice_Power_State
	{
		PowerDeviceUnspecified = 0,
		PowerDeviceD0,
		PowerDeviceD1,
		PowerDeviceD2,
		PowerDeviceD3,
		PowerDeviceMaximum
	};

	//--------------------------------------------------------------------------------
	struct CM_Power_Data
	{
		unsigned long		PD_Size;
		eDevice_Power_State PD_MostRecentPowerState;
		unsigned long		PD_Capabilities;
		unsigned long		PD_D1Latency;
		unsigned long		PD_D2Latency;
		unsigned long		PD_D3Latency;
		eDevice_Power_State PD_PowerStateMapping[ PowerSystemMaximum ];
		eSystem_Power_State	PD_DeepestSystemWake;
	};

	__QCMP_STATIC_CONSTANT( unsigned short, MaxDeviceIDLen = 200 );
	__QCMP_STATIC_CONSTANT( unsigned short, MaxClassNameLen = 32 );

	//--------------------------------------------------------------------------------
	enum AudioSessionState
	{
		AudioSessionStateInactive = 0,
		AudioSessionStateActive = 1,
		AudioSessionStateExpired = 2
	};

	//--------------------------------------------------------------------------------
	enum AudioSessionDisconnectReason
    {	
		DisconnectReasonDeviceRemoval	= 0,
		DisconnectReasonServerShutdown,
		DisconnectReasonFormatChanged,
		DisconnectReasonSessionLogoff,
		DisconnectReasonSessionDisconnected,
		DisconnectReasonExclusiveModeOverride
    };

	//--------------------------------------------------------------------------------
	enum EDataFlow
    {	
		eRender	= 0,
		eCapture,
		eAll,
		EDataFlow_enum_count
    };

	//--------------------------------------------------------------------------------
	enum ERole
	{	
		eConsole	= 0,
		eMultimedia,
		eCommunications,
		ERole_enum_count
	};

	//------------------------------------------------------------------------------
	struct ProcessInformation
	{
		void* hProcess;
		void* hThread;
		unsigned long dwProcessId;
		unsigned long dwThreadId;
	};

	//------------------------------------------------------------------------------
	struct IOCounters
	{
		Cmp_unsigned_long_long ReadOperationCount;
		Cmp_unsigned_long_long WriteOperationCount;
		Cmp_unsigned_long_long OtherOperationCount;
		Cmp_unsigned_long_long ReadTransferCount;
		Cmp_unsigned_long_long WriteTransferCount;
		Cmp_unsigned_long_long OtherTransferCount;
	};

	//--------------------------------------------------------------------------------
	typedef struct _STARTUPINFO 
	{
		unsigned long cb;
		TCHAR* lpReserved;
		TCHAR* lpDesktop;
		TCHAR* lpTitle;
		unsigned long dwX;
		unsigned long dwY;
		unsigned long dwXSize;
		unsigned long dwYSize;
		unsigned long dwXCountChars;
		unsigned long dwYCountChars;
		unsigned long dwFillAttribute;
		unsigned long dwFlags;
		unsigned short wShowWindow;
		unsigned short cbReserved2;
		unsigned char* lpReserved2;
		void* hStdInput;
		void* hStdOutput;
		void* hStdError;
	} STARTUPINFO, *LPSTARTUPINFO;

	//--------------------------------------------------------------------------------
	typedef enum _MMC_NOTIFY_TYPE                                
	{                                                            
		MMCN_ACTIVATE           = 0x8001,                        
		MMCN_ADD_IMAGES         = 0x8002,                        
		MMCN_BTN_CLICK          = 0x8003,                        
		MMCN_CLICK              = 0x8004,   // NOT USED          
		MMCN_COLUMN_CLICK       = 0x8005,                        
		MMCN_CONTEXTMENU        = 0x8006,   // NOT USED          
		MMCN_CUTORMOVE          = 0x8007,                        
		MMCN_DBLCLICK           = 0x8008,                        
		MMCN_DELETE             = 0x8009,                        
		MMCN_DESELECT_ALL       = 0x800A,                        
		MMCN_EXPAND             = 0x800B,                        
		MMCN_HELP               = 0x800C,   // NOT USED          
		MMCN_MENU_BTNCLICK      = 0x800D,                        
		MMCN_MINIMIZED          = 0x800E,                        
		MMCN_PASTE              = 0x800F,                        
		MMCN_PROPERTY_CHANGE    = 0x8010,                        
		MMCN_QUERY_PASTE        = 0x8011,                        
		MMCN_REFRESH            = 0x8012,                        
		MMCN_REMOVE_CHILDREN    = 0x8013,                        
		MMCN_RENAME             = 0x8014,                        
		MMCN_SELECT             = 0x8015,                        
		MMCN_SHOW               = 0x8016,                        
		MMCN_VIEW_CHANGE        = 0x8017,                        
		MMCN_SNAPINHELP         = 0x8018,                        
		MMCN_CONTEXTHELP        = 0x8019,                        
		MMCN_INITOCX            = 0x801A,                        
#	if (MMC_VER >= 0x0110)                                      
		MMCN_FILTER_CHANGE      = 0x801B,                        
		MMCN_FILTERBTN_CLICK    = 0x801C,                        
		MMCN_RESTORE_VIEW       = 0x801D,                        
		MMCN_PRINT              = 0x801E,                        
		MMCN_PRELOAD            = 0x801F,                        
		MMCN_LISTPAD            = 0x8020,                        
		MMCN_EXPANDSYNC         = 0x8021,                        
#		if (MMC_VER >= 0x0120)                                      
	MMCN_COLUMNS_CHANGED    = 0x8022,                        
#			if (MMC_VER >= 0x0200)                                      
	MMCN_CANPASTE_OUTOFPROC = 0x8023,                        
#			endif // MMC_VER >= 0x0200                                  
#		endif // MMC_VER >= 0x0120                                  
#	endif // MMC_VER >= 0x0110                                  
	} MMC_NOTIFY_TYPE;                                           

	//--------------------------------------------------------------------------------
	typedef struct _RESULTDATAITEM
    {
		unsigned long mask;
		int bScopeItem;
		Cmp_long_ptr itemID;
		int nIndex;
		int nCol;
		wchar_t* str;
		int nImage;
		unsigned int nState;
		Cmp_long_ptr lParam;
		int iIndent;
    } RESULTDATAITEM;

	//--------------------------------------------------------------------------------
	typedef enum _DATA_OBJECT_TYPES
	{
		CCT_SCOPE	= 0x8000,
		CCT_RESULT	= 0x8001,
		CCT_SNAPIN_MANAGER	= 0x8002,
		CCT_UNINITIALIZED	= 0xffff
	} 	DATA_OBJECT_TYPES;

	//--------------------------------------------------------------------------------
	typedef enum _MMC_CONSOLE_VERB                               
	{
		MMC_VERB_NONE            = 0x0000,                       
		MMC_VERB_OPEN            = 0x8000,                       
		MMC_VERB_COPY            = 0x8001,                       
		MMC_VERB_PASTE           = 0x8002,                       
		MMC_VERB_DELETE          = 0x8003,                       
		MMC_VERB_PROPERTIES      = 0x8004,                       
		MMC_VERB_RENAME          = 0x8005,                       
		MMC_VERB_REFRESH         = 0x8006,                       
		MMC_VERB_PRINT           = 0x8007,                       
#	if (MMC_VER >= 0x0110)                                      
		MMC_VERB_CUT             = 0x8008,  // Used only to explicitly disable/hide
											// the cut verb, when copy & paste are enabled.
		// must be last                                          
		MMC_VERB_MAX,                                            
		MMC_VERB_FIRST           = MMC_VERB_OPEN,                
		MMC_VERB_LAST            = MMC_VERB_MAX - 1              
#	endif // MMC_VER >= 0x0110                                  
	} MMC_CONSOLE_VERB;                                          

	//--------------------------------------------------------------------------------
	typedef enum _MMC_BUTTON_STATE
    {
        ENABLED	= 0x1,
        CHECKED	= 0x2,
        HIDDEN	= 0x4,
        INDETERMINATE	= 0x8,
        BUTTONPRESSED	= 0x10
    } MMC_BUTTON_STATE;

#if ! (defined(lint) || defined(RC_INVOKED))
#	if ( _MSC_VER >= 800 && !defined(_M_I86)) || defined(_PUSHPOP_SUPPORTED)
#		pragma warning(disable:4103)
#		if !(defined( MIDL_PASS )) || defined( __midl )
#			pragma pack(push,8)
#		else
#			pragma pack(8)
#		endif
#	else
#		pragma pack(8)
#	endif
#endif /* ! (defined(lint) || defined(RC_INVOKED)) */

	typedef struct _MMCButton
    {
		int nBitmap;
		int idCommand;
		byte fsState;
		byte fsType;
		TCHAR* lpButtonText;
		TCHAR* lpTooltipText;
    } MMCBUTTON;

#if ! (defined(lint) || defined(RC_INVOKED))
#	if ( _MSC_VER >= 800 && !defined(_M_I86)) || defined(_PUSHPOP_SUPPORTED)
#		pragma warning(disable:4103)
#		if !(defined( MIDL_PASS )) || defined( __midl )
#			pragma pack(pop)
#		else
#			pragma pack()
#		endif
#	else
#		pragma pack()
#	endif
#endif /* ! (defined(lint) || defined(RC_INVOKED)) */


	//--------------------------------------------------------------------------------
	typedef struct _SCOPEDATAITEM
    {
		unsigned long mask;
		wchar_t* displayname;
		int nImage;
		int nOpenImage;
		unsigned int nState;
		int cChildren;
		Cmp_long_ptr lParam;
		Cmp_long_ptr relativeID;
		Cmp_long_ptr ID;
    } 	SCOPEDATAITEM;

	//--------------------------------------------------------------------------------
	struct CalDateTime 
	{
		unsigned long CalId;
		unsigned int  Era;
		unsigned int  Year;
		unsigned int  Month;
		unsigned int  Day;
		unsigned int  DayOfWeek;
		unsigned int  Hour;
		unsigned int  Minute;
		unsigned int  Second;
		unsigned long Tick;
	};

	//--------------------------------------------------------------------------------
	struct NLSVersionInfo
	{
		unsigned long dwNLSVersionInfoSize;
		unsigned long dwNLSVersion;
		unsigned long dwDefinedVersion;
	};

	//--------------------------------------------------------------------------------
	struct NLSVersionInfoEx
	{
		unsigned long dwNLSVersionInfoSize;     // sizeof(NLSVersionInfoEx) == 32 bytes
		unsigned long dwNLSVersion;
		unsigned long dwDefinedVersion;
		unsigned long dwEffectiveId;            // Use NLSVersionInfo instead
		GUID guidCustomVersion;
	};

	//--------------------------------------------------------------------------------
	struct CPInfo 
	{
		unsigned int    MaxCharSize;                    // max length (in bytes) of a char
		unsigned char   DefaultChar[ Max_DefaultChar ];   // 
		unsigned char   LeadByte[ Max_LeadBytes ];        // 
	};

	//--------------------------------------------------------------------------------
	struct CPInfoEx
	{
		unsigned int    MaxCharSize;                    // max length (in bytes) of a char
		unsigned char   DefaultChar[ Max_DefaultChar ];   // default character (MB)
		unsigned char   LeadByte[ Max_LeadBytes ];        // lead byte ranges
		wchar_t			UnicodeDefaultChar;             // default character (Unicode)
		unsigned int    CodePage;                       // code page id
		TCHAR			CodePageName[ Max_Path ];         // code page name (Unicode)
	};

	//--------------------------------------------------------------------------------
	typedef struct _currencyfmt
	{
		unsigned int    NumDigits;                 // number of decimal digits
		unsigned int    LeadingZero;               // if leading zero in decimal fields
		unsigned int    Grouping;                  // group size left of decimal
		TCHAR*   lpDecimalSep;              // ptr to decimal separator string
		TCHAR*   lpThousandSep;             // ptr to thousand separator string
		unsigned int    NegativeOrder;             // negative currency ordering
		unsigned int    PositiveOrder;             // positive currency ordering
		TCHAR*   lpCurrencySymbol;          // ptr to currency symbol string
	} CURRENCYFMT, *LPCURRENCYFMT;

	//--------------------------------------------------------------------------------
	typedef struct _currencyfmtw
	{
		unsigned int    NumDigits;                 // number of decimal digits
		unsigned int    LeadingZero;               // if leading zero in decimal fields
		unsigned int    Grouping;                  // group size left of decimal
		wchar_t*   lpDecimalSep;              // ptr to decimal separator string
		wchar_t*   lpThousandSep;             // ptr to thousand separator string
		unsigned int    NegativeOrder;             // negative currency ordering
		unsigned int    PositiveOrder;             // positive currency ordering
		wchar_t*   lpCurrencySymbol;          // ptr to currency symbol string
	} CURRENCYFMTW, *LPCURRENCYFMTW;

	//--------------------------------------------------------------------------------
	typedef struct _numberfmt
	{
		unsigned int NumDigits;                 // number of decimal digits
		unsigned int LeadingZero;               // if leading zero in decimal fields
		unsigned int Grouping;                  // group size left of decimal
		TCHAR* lpDecimalSep;              // ptr to decimal separator string
		TCHAR* lpThousandSep;             // ptr to thousand separator string
		unsigned int NegativeOrder;             // negative number ordering
	} NUMBERFMT, *LPNUMBERFMT;

	//--------------------------------------------------------------------------------
	typedef struct _numberfmtw
	{
		unsigned int NumDigits;                 // number of decimal digits
		unsigned int LeadingZero;               // if leading zero in decimal fields
		unsigned int Grouping;                  // group size left of decimal
		wchar_t* lpDecimalSep;              // ptr to decimal separator string
		wchar_t* lpThousandSep;             // ptr to thousand separator string
		unsigned int NegativeOrder;             // negative number ordering
	} NUMBERFMTW, *LPNUMBERFMTW;

	typedef void ( __QCMP_STDCALLCONVENTION *LPSERVICE_MAIN_FUNCTION )( unsigned long ulNumServicesArgs, TCHAR** lpServiceArgVectors );
	
	//Prototypes for the Service Control Handler Function
	typedef void __QCMP_STDCALLCONVENTION HANDLER_FUNCTION( unsigned long ulControl );

	typedef unsigned long __QCMP_STDCALLCONVENTION HANDLER_FUNCTION_EX( unsigned long ulControl, unsigned long ulEventType, void* lpEventData, void* lpContext);
	typedef void ( __QCMP_STDCALLCONVENTION *LPHANDLER_FUNCTION )( unsigned long ulControl );
	typedef unsigned long ( __QCMP_STDCALLCONVENTION *LPHANDLER_FUNCTION_EX )( unsigned long ulControl, unsigned long ulEventType, void* lpEventData, void* lpContext );

	//--------------------------------------------------------------------------------
	typedef struct _SERVICE_TABLE_ENTRY 
	{
		TCHAR*						lpServiceName;
		LPSERVICE_MAIN_FUNCTION		lpServiceProc;
	}SERVICE_TABLE_ENTRY, *LPSERVICE_TABLE_ENTRY;

	//--------------------------------------------------------------------------------
	typedef struct _SERVICE_STATUS 
	{
		unsigned long dwServiceType;
		unsigned long dwCurrentState;
		unsigned long dwControlsAccepted;
		unsigned long dwWin32ExitCode;
		unsigned long dwServiceSpecificExitCode;
		unsigned long dwCheckPoint;
		unsigned long dwWaitHint;
	} SERVICE_STATUS, *LPSERVICE_STATUS;

	//--------------------------------------------------------------------------------
	typedef struct _SERVICE_STATUS_PROCESS 
	{
		unsigned long dwServiceType;
		unsigned long dwCurrentState;
		unsigned long dwControlsAccepted;
		unsigned long dwWin32ExitCode;
		unsigned long dwServiceSpecificExitCode;
		unsigned long dwCheckPoint;
		unsigned long dwWaitHint;
		unsigned long dwProcessId;
		unsigned long dwServiceFlags;
	} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;

	//--------------------------------------------------------------------------------
	typedef struct _ENUM_SERVICE_STATUS
	{
		TCHAR*			lpServiceName;
		TCHAR*			lpDisplayName;
		SERVICE_STATUS    ServiceStatus;
	} ENUM_SERVICE_STATUS, *LPENUM_SERVICE_STATUS;

	//--------------------------------------------------------------------------------
	//Info levels for QueryServiceStatusEx
	typedef enum _SC_STATUS_TYPE 
	{
		SC_STATUS_PROCESS_INFO      = 0
	} SC_STATUS_TYPE;

	//--------------------------------------------------------------------------------
	// Info levels for EnumServicesStatusEx
	typedef enum _SC_ENUM_TYPE 
	{
		SC_ENUM_PROCESS_INFO        = 0
	} SC_ENUM_TYPE;

	//--------------------------------------------------------------------------------
	typedef struct _QUERY_SERVICE_LOCK_STATUS
	{
		unsigned long	fIsLocked;
		TCHAR*			lpLockOwner;
		unsigned long   dwLockDuration;
	} QUERY_SERVICE_LOCK_STATUS, *LPQUERY_SERVICE_LOCK_STATUS;

	typedef void( __QCMP_STDCALLCONVENTION * PFN_SC_NOTIFY_CALLBACK ) ( void* pParameter );

	//--------------------------------------------------------------------------------
	typedef struct _SERVICE_NOTIFY
	{
		unsigned long			dwVersion;
		PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
		void*                   pContext;
		unsigned long           dwNotificationStatus;
		SERVICE_STATUS_PROCESS  ServiceStatus;
		unsigned long			dwNotificationTriggered;
		TCHAR*					pszServiceNames;
	} SERVICE_NOTIFY, *PSERVICE_NOTIFY;

	//--------------------------------------------------------------------------------
	typedef struct _QUERY_SERVICE_CONFIG
	{
		unsigned long		dwServiceType;
		unsigned long		dwStartType;
		unsigned long		dwErrorControl;
		TCHAR*				lpBinaryPathName;
		TCHAR*				lpLoadOrderGroup;
		unsigned long		dwTagId;
		TCHAR*				lpDependencies;
		TCHAR*				lpServiceStartName;
		TCHAR*				lpDisplayName;
	} QUERY_SERVICE_CONFIG, *LPQUERY_SERVICE_CONFIG;


	//--------------------------------------------------------------------------------
	typedef struct DXGI_RATIONAL 
	{
		unsigned int Numerator;
		unsigned int Denominator;
	} DXGI_RATIONAL;

	//--------------------------------------------------------------------------------
	typedef struct _DCOMPOSITION_FRAME_STATISTICS 
	{
		LARGE_INTEGER lastFrameTime;
		DXGI_RATIONAL currentCompositionRate;
		LARGE_INTEGER currentTime;
		LARGE_INTEGER timeFrequency;
		LARGE_INTEGER nextEstimatedFrameTime;
	} DCOMPOSITION_FRAME_STATISTICS, *PDCOMPOSITION_FRAME_STATISTICS;

	//--------------------------------------------------------------------------------
	typedef struct D2D_MATRIX_3X2_F
	{
		float _11;
		float _12;
		float _21;
		float _22;
		float _31;
		float _32;
	} D2D_MATRIX_3X2_F;

	//--------------------------------------------------------------------------------
	__QCMP_WARNING_PUSH
	__QCMP_WARNING_DISABLE(__QCMP_WARN_NAMELESS_STRUCTUNION, "Deliberate use of Microsoft extension")

	typedef struct _D3DMATRIX 
	{
		union 
		{
			struct 
			{
				float        _11, _12, _13, _14;
				float        _21, _22, _23, _24;
				float        _31, _32, _33, _34;
				float        _41, _42, _43, _44;

			};
			float m[4][4];
		};
	} D3DMATRIX;

	__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	typedef struct D2D_RECT_F
	{
		float left;
		float top;
		float right;
		float bottom;

	} D2D_RECT_F;

}//nsWin32

#endif//_QSYS_WINDOWS_WWL_DATA_H_3
