//Char8.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//8-bit Character type

#include "CodeQOR/Text/Char16.h"
#include "CodeQOR/Text/Char32.h"
#include "CodeQOR/Text/Char8.h"
#include "AppocritaQOR/Event.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CChar8::CChar8() : CChar()
	{
	}

	//--------------------------------------------------------------------------------
	CChar8::CChar8( byte c ) : CChar( c )
	{
	}

	//--------------------------------------------------------------------------------
	CChar8::CChar8( char c ) 
	{
		m = ( static_cast< byte >( c ) );
	}

	//--------------------------------------------------------------------------------
	CChar8::CChar8( CChar16 ch )
	{
		m = ( ch.m > 0xff ? '\0' : static_cast< byte >( ch.m ) );
	}

	//--------------------------------------------------------------------------------
	CChar8::CChar8( CChar32 ch )
	{
		m = ( ch.m > 0xff ? '\0' : static_cast< byte >( ch.m ) );
	}

	//--------------------------------------------------------------------------------
	CChar8::CChar8( CChar8::eSpecialCharacter sc )
	{
		m = ( static_cast< byte >( sc ) );
	}


	//--------------------------------------------------------------------------------
	CChar8 CChar8::MirroredChar() const
	{
		return CChar8( CChar16( static_cast< unsigned short >( static_cast< unsigned short >( m ) + UnicodeGetProp( static_cast< ULookupType >( m ) )->mirrorDiff ) ) );
	}

	//--------------------------------------------------------------------------------
	CChar8 CChar8::ToLower() const
	{
		const nsUnicodeTables::Properties* p = UnicodeGetProp( static_cast< ULookupType >( m ) );
		if( !p->lowerCaseSpecial )
		{
			return CChar8( CChar16( static_cast< unsigned short >( static_cast< unsigned short >( m ) + p->lowerCaseDiff ) ) );
		}
		return m;
	}

	//--------------------------------------------------------------------------------
	CChar8 CChar8::ToUpper() const
	{
		const nsUnicodeTables::Properties* p = UnicodeGetProp( static_cast< ULookupType >( m ) );
		if( !p->upperCaseSpecial )
		{
			return CChar8( CChar16( static_cast< unsigned short >( static_cast< unsigned short >( m ) + p->upperCaseDiff ) ) );
		}
		return m;
	}

	//--------------------------------------------------------------------------------
	CChar8 CChar8::ToTitleCase() const
	{
		const nsUnicodeTables::Properties* p = UnicodeGetProp( static_cast< ULookupType >( m ) );
		if( !p->titleCaseSpecial )
		{
			return CChar8( CChar16( static_cast< unsigned short >( static_cast< unsigned short >( m ) + p->titleCaseDiff ) ) );
		}
		return m;
	}

	//--------------------------------------------------------------------------------
	CChar8 CChar8::ToCaseFolded() const
	{
		return CChar8( CChar16( static_cast< unsigned short >( static_cast< unsigned short >( m ) + UnicodeGetProp( static_cast< ULookupType >( m ) )->caseFoldDiff ) ) );
	}

	//--------------------------------------------------------------------------------
	const char CChar8::ToAscii() const
	{
		return m;
	}

	//--------------------------------------------------------------------------------
	inline const unsigned short CChar8::Widen() const
	{
		return static_cast< unsigned short >( ( m ) );
	}

	//--------------------------------------------------------------------------------
	CChar8 CChar8::FromAscii( char c )
	{
		return CChar8( static_cast< unsigned char >( c ) );
	}

	//------------------------------------------------------------------------------
	const unsigned short CChar8::Unicode() const 
	{ 
		/*
#ifndef QT_NO_CODEC_FOR_C_STRINGS
    if (QTextCodec::codecForCStrings())
        // #####
        return QTextCodec::codecForCStrings()->toUnicode(&c, 1).at(0).unicode();
#endif
		*/
		return static_cast< unsigned short >( m );
	}

	//------------------------------------------------------------------------------
	CChar8 CChar8::ToLocal8Bit( void ) const
	{
		return *this;
	}

	//--------------------------------------------------------------------------------
    __QOR_INTERFACE( __CODEQOR ) bool operator == ( const CChar8& x0, const CChar8& x1 )
	{
		return x0.m == x1.m;
	}

	//--------------------------------------------------------------------------------
    __QOR_INTERFACE( __CODEQOR ) bool operator != ( const CChar8& x0, const CChar8& x1 )
	{
		return x0.m != x1.m;
	}

	//--------------------------------------------------------------------------------
    __QOR_INTERFACE( __CODEQOR ) bool operator != ( const CChar8& x0, const int x1 )
	{
		return x0.m != x1;
	}

	//--------------------------------------------------------------------------------
	__QOR_INTERFACE( __CODEQOR ) bool operator <= ( const CChar8& x0, const CChar8& x1 )
	{
		return x0.m <= x1.m;
	}

	//--------------------------------------------------------------------------------
	__QOR_INTERFACE( __CODEQOR ) bool operator >= ( const CChar8& x0, const CChar8& x1 )
	{
		return x0.m >= x1.m;
	}

	//--------------------------------------------------------------------------------
	__QOR_INTERFACE( __CODEQOR ) bool operator < ( const CChar8& x0, const CChar8& x1 )
	{
		return x0.m < x1.m;
	}

	//--------------------------------------------------------------------------------
	__QOR_INTERFACE( __CODEQOR ) bool operator > ( const CChar8& x0, const CChar8& x1 )
	{
		return x0.m > x1.m;
	}

}//nsCodeQOR


