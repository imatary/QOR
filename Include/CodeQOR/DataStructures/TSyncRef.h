//TSyncRef.h

// Copyright Querysoft Limited 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef CODEQOR_DATASTRUCTS_TSYNCREF_H_1
#define CODEQOR_DATASTRUCTS_TSYNCREF_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Traits/MemoryTraits.h"
#include "CodeQOR/MemoryManagement/DefaultAllocator.h"

#define QOR_PP_SYNCHRONIZE )(
//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	template< class T, class P = CPolicy  > class CTSyncRef;

	//--------------------------------------------------------------------------------	
	template< class T, class P = CPolicy > class CTSyncAdaptor
	{
		friend class CTSyncRef< T, P >;

	public:

		//--------------------------------------------------------------------------------
		template< typename... _p >
		CTSyncAdaptor(_p... p1) : m_p(nullptr)
		{
			T* pT = nsCodeQOR::mem_traits< T >::CTAllocator::RawAllocate();
			m_p = new (pT)T(p1...);
		}

		//--------------------------------------------------------------------------------
		CTSyncAdaptor() : m_p(nsCodeQOR::mem_traits< T >::CTAllocator::Allocate())
		{
		}

		CTSyncAdaptor(const CTSyncAdaptor< T >& Src) = delete;
		CTSyncAdaptor& operator = (const CTSyncAdaptor< T >& Src) = delete;

		//--------------------------------------------------------------------------------
		~CTSyncAdaptor()
		{
			nsCodeQOR::mem_traits< T >::CTAllocator::Free(m_p);
			m_p = 0;
		}

		//--------------------------------------------------------------------------------
		bool IsNull(void) const
		{
			return m_p == 0;
		}

		//--------------------------------------------------------------------------------
		CTSyncRef<T, P> operator()(void)
		{
			return CTSyncRef<T, P>(this);
		}

	private:

		//--------------------------------------------------------------------------------
		void Acquire(void) const
		{
			m_Sync.Acquire();
		}

		//--------------------------------------------------------------------------------
		void Release(void) const
		{
			m_Sync.Release();
		}

		T* m_p;
		mutable CPolicy::TThreadSyncSinglePrimitive m_Sync;
	};

	//--------------------------------------------------------------------------------
	template< class T, class P /*= CPolicy */> class CTSyncRef
	{
		friend class CTSyncAdaptor<T, P>;

	public:

		//--------------------------------------------------------------------------------
		CTSyncRef(const CTSyncAdaptor<T, P>* pt) : m_p(pt)
		{
			m_p->Acquire();
		}	

		//--------------------------------------------------------------------------------
		CTSyncRef() : m_p( nullptr)
		{
		}

		//--------------------------------------------------------------------------------
		CTSyncRef(const CTSyncRef< T, P >& Src)
		{
			m_p = Src.m_p;
			m_p->Acquire();
		}

		//--------------------------------------------------------------------------------
		CTSyncRef(CTSyncRef< T, P >&& Src)
		{
			m_p = Src.m_p;
			Src.m_p = nullptr;
		}

		//--------------------------------------------------------------------------------
		CTSyncRef& operator = (const CTSyncRef< T, P >& Src)
		{
			if (this != &Src)
			{
				m_p = Src.m_p;
				m_p->Acquire();
			}
			return *this;
		}

		//--------------------------------------------------------------------------------
		CTSyncRef& operator = (CTSyncRef< T, P >&& Src)
		{
			if (this != &Src)
			{
				m_p = Src.m_p;
				Src.m_p = nullptr;
			}
			return *this;
		}

		//--------------------------------------------------------------------------------
		//Two references are equal if they refer to the same object
		bool operator == (const CTSyncRef< T, P >& Cmp) const
		{
			return (m_p == Cmp.m_p);
		}

		//--------------------------------------------------------------------------------
		operator T* (void) const
		{
			return m_p->m_p;
		}

		//--------------------------------------------------------------------------------
		T& operator() (void) const
		{
			if (m_p == nullptr)
			{
				//TODO Raise NULL reference exception
			}
			return *(m_p->m_p);
		}

		//--------------------------------------------------------------------------------
		T* operator -> () const
		{
			if (m_p == 0)
			{
				//TODO: Raise a null reference exception here
			}
			return m_p->m_p;
		}

		//--------------------------------------------------------------------------------
		~CTSyncRef()
		{
			if (m_p)
			{
				m_p->Release();
			}
		}

		//--------------------------------------------------------------------------------
		template< class TDerived >
		TDerived* As(void)
		{
			return dynamic_cast< TDerived* >(m_p->m_p);
		}

		//--------------------------------------------------------------------------------
		bool IsNull(void) const
		{
			return m_p == nullptr || (m_p->IsNull());
		}

		//--------------------------------------------------------------------------------
		bool IsOwner(void) const
		{
			return true;
		}

	protected:

		const CTSyncAdaptor<T, P>* m_p;
	};

}//nsCodeQOR

#endif//CODEQOR_DATASTRUCTS_TSYNCREF_H_1
