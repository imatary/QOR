//assert.cpp

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Generic assert implementation

#include <assert.h>
#include <errno.h>
#include <stdlib.h>
#include "SystemQOR.h"
#include QOR_SYS_PLATFORMHEADER(assert.h)
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include "CQOR.h"

//--------------------------------------------------------------------------------
namespace
{
	nsPlatform::Cassert _assertInstance;
}//anonymous

__QCMP_STARTLINKAGE_C

//--------------------------------------------------------------------------------
// This prints an "Assertion failed" message and aborts.
//Call the system specific implementation to print an "Asserion failed" message
__QCMP_DECLARE_NORETURN __QOR_INTERFACE( __CQOR ) void __assert_fail( __const char *__assertion, __const char *__file, unsigned int __line, __const char *__function ) __QCMP_THROW
{
    __QCS_FCONTEXT( "__assert_fail" );
    __QCS_PROTECT
    {
		_assertInstance.__assert_fail( __assertion, __file, __line, __function );
	}__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
// Likewise, but prints the error text for ERRNUM.
//Call the system specific implementation to print an assertion with ERRNUM
__QCMP_DECLARE_NORETURN __QOR_INTERFACE( __CQOR ) void __assert_perror_fail( int __errnum, __const char *__file, unsigned int __line, __const char *__function ) __QCMP_THROW
{
    __QCS_FCONTEXT( "__assert_perror_fail" );
    __QCS_PROTECT
    {
	    _assertInstance.__assert_perror_fail( __errnum, __file, __line, __function );
	}__QCS_ENDPROTECT
}

//--------------------------------------------------------------------------------
//TODO: Consider reflecting this implementation back onto the Error system
__QCMP_DECLARE_NORETURN __QOR_INTERFACE( __CQOR ) void __assert( const char* __assertion, const char* __file, int __line ) __QCMP_THROW
{
    __QCS_FCONTEXT( "__assert" );
    __QCS_PROTECT
    {
	    _assertInstance.__assert( __assertion, __file, __line );
	}__QCS_ENDPROTECT
}

__QCMP_ENDLINKAGE_C

