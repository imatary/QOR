//WinQLViewObject2Impl.h

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_COM_VIEWOBJECT2IMPL_H_3
#define WINQL_COM_VIEWOBJECT2IMPL_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/Definitions/Interfaces.h"
#include "WinQL/COM/Server/BaseParts/WinQLTInterfaceMember.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CViewObjectImpl : public CInterfaceImplBase< IViewObject >
	{
	public:

		__QOR_DECLARE_COMCLASS_ID( CViewObjectImpl );

		CViewObjectImpl( CIUnknownImplBase<>* pImpl );
		virtual ~CViewObjectImpl();
		virtual long __QCMP_STDCALLCONVENTION Draw( unsigned long dwDrawAspect, long lindex, void* pvAspect, DVTargetDevice* ptd, void* phdcTargetDev, void* phdcDraw, const RECT* lprcBounds, const RECT* lprcWBounds, int ( __QCMP_STDCALLCONVENTION *pfnContinue )( Cmp_ulong_ptr dwContinue ), Cmp_ulong_ptr dwContinue );
		virtual long __QCMP_STDCALLCONVENTION GetColorSet( unsigned long dwDrawAspect, long lindex, void* pvAspect, DVTargetDevice* ptd, void* phicTargetDev, LOGPALETTE** ppColorSet );
		virtual long __QCMP_STDCALLCONVENTION Freeze( unsigned long dwDrawAspect, long lindex, void* pvAspect, unsigned long* pdwFreeze );
		virtual long __QCMP_STDCALLCONVENTION Unfreeze( unsigned long dwFreeze );
		virtual long __QCMP_STDCALLCONVENTION SetAdvise( unsigned long aspects, unsigned long advf, IAdviseSink* pAdvSink );
		virtual long __QCMP_STDCALLCONVENTION GetAdvise( unsigned long* pAspects, unsigned long* pAdvf, IAdviseSink** ppAdvSink );

	private:

		CViewObjectImpl();
		CViewObjectImpl( const CViewObjectImpl& );
		CViewObjectImpl& operator = ( const CViewObjectImpl& );
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CViewObject2Impl : public CInterfaceImplBase< IViewObject2, CViewObjectImpl >
	{
	public:

		__QOR_DECLARE_COMCLASS_ID( CViewObject2Impl );

		CViewObject2Impl( CIUnknownImplBase<>* pImpl );
		virtual ~CViewObject2Impl();
		virtual long __QCMP_STDCALLCONVENTION GetExtent( unsigned long dwDrawAspect, long lindex, DVTargetDevice* ptd, SIZE* lpsizel );

	private:

		CViewObject2Impl();
		CViewObject2Impl( const CViewObject2Impl& );
		CViewObject2Impl& operator = ( const CViewObject2Impl& );
	};

}//nsWin32

#endif//WINQL_COM_VIEWOBJECT2IMPL_H_3

