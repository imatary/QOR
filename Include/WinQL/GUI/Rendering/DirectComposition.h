//DirectComposition.h

// Copyright Querysoft Limited 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_OSGUI_RENDERING_DIRECTCOMPOSITION_H_3
#define WINQL_OSGUI_RENDERING_DIRECTCOMPOSITION_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Definitions/Interfaces.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/COM/Client/WinQLClientBase.h"
#include "WinQL/System/Security/WinQLSecAttributes.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE(__WINQAPI) CDComp;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE(__WINQL_GUI) CDCompositionVisual : public CComPtr< IDCompositionVisual >
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CDCompositionVisual);

		CDCompositionVisual();
		virtual ~CDCompositionVisual();

		/*
		long AttachMouseDragToHwnd(IDCompositionVisual* visual, HWND hwnd, BOOL enable);
		long AttachMouseWheelToHwnd(IDCompositionVisual* visual, HWND hwnd, BOOL enable);
		*/

	private:

		CDCompositionVisual(const CDCompositionVisual&);
		CDCompositionVisual& operator = (const CDCompositionVisual&);
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE(__WINQL_GUI) CDCompositionDevice : public CComPtr< IDCompositionDevice >
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CDCompositionDevice);

		//CDCompositionDevice(CComPtr<IDXGIDevice>& dxgiDevice);
		CDCompositionDevice(CComPtr<IUnknown>& dxgiDevice);
		virtual ~CDCompositionDevice();

	protected:

		nsWinQAPI::CDComp& m_DComp;

	private:

		CDCompositionDevice(const CDCompositionDevice&);
		CDCompositionDevice& operator = (const CDCompositionDevice&);
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE(__WINQL_GUI) CDirectCompositionSurface
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CDirectCompositionSurface);

		CDirectCompositionSurface(unsigned long ulDesiredAccess, CSecurityAttributes* securityAttributes);
		~CDirectCompositionSurface();

	protected:

		void* m_Handle;

	private:

		CDirectCompositionSurface();
		nsWinQAPI::CDComp& m_DComp;
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE(__WINQL_GUI) CDirectComposition
	{
	public:

		__QOR_DECLARE_OCLASS_ID(CDirectComposition);

		CDirectComposition();
		CDirectComposition(const CDirectComposition&);
		~CDirectComposition();

		CDirectComposition& operator = (CDirectComposition& src);

		nsCodeQOR::reference_type<CDirectCompositionSurface>::type CreateSurface(unsigned long ulDesiredAccess, CSecurityAttributes* securityAttributes);
		/*
		long CreateSurfaceHandle(DWORD desiredAccess, SECURITY_ATTRIBUTES* securityAttributes, HANDLE* surfaceHandle);
		long GetFrameStatistics(DCOMPOSITION_FRAME_STATISTICS* statistics, D3D_FEATURE_LEVEL* minSafeFeaturelLevel, D3D_FEATURE_LEVEL* maxHardwareFeaturelLevel);
		*/

	protected:

		nsWinQAPI::CDComp& m_DComp;
	};

}//nsWin32

#endif//WINQL_OSGUI_RENDERING_DIRECTCOMPOSITION_H_3
