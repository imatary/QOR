//WinQLPointerController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/Parts/PointerController.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CPointerController );

	//--------------------------------------------------------------------------------
	CPointerController::CPointerController( nsMammut::CModel* pModelItem, nsQOR::CController::ref_type Parent ) : CBaseWindowPartController( pModelItem, Parent )
	{
		_WINQ_FCONTEXT( "CPointerController::CPointerController" );
	}

	//--------------------------------------------------------------------------------
	CPointerController::~CPointerController()
	{
		_WINQ_FCONTEXT( "CPointerController::~CPointerController" );
	}

	//--------------------------------------------------------------------------------
	bool CPointerController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::ProcessMessage" );

		bool bProcessed = ProcessHook( Window, lResult, uMsg, wParam, lParam );

		switch ( uMsg )
		{
		case COSWindow::wmMouseMove:
			{
				OnMouseMove( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmLButtonDown:
			{
				OnLButtonDown( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmLButtonUp:
			{
				OnLButtonUp( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmLButtonDblClk:
			{
				OnLButtonDblClk( Window, wParam, lParam );
				lResult = 0;
				bProcessed= true;
			}
			break;
		case COSWindow::wmRButtonDown:
			{
				OnRButtonDown( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmRButtonUp:
			{
				OnRButtonUp( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmRButtonDblClk:
			{
				OnRButtonDblClk( Window, wParam, lParam );
				lResult = 0;
				bProcessed= true;
			}
			break;
		case COSWindow::wmMButtonDown:
			{
				OnMButtonDown( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmMButtonUp:
			{
				OnMButtonUp( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmMButtonDblClk:
			{
				OnMButtonDblClk( Window, wParam, lParam );
				lResult = 0;
				bProcessed= true;
			}
			break;
#if (_WIN32_WINNT >= 0x0400) || (_WIN32_WINDOWS > 0x0400)
		case COSWindow::wmMouseWheel:
			{
				OnMouseWheel( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
#endif
		case COSWindow::wmCaptureChanged:
			{
				COSWindow::refType refWindow = COSWindow::FromHandle( CWindowHandle( 0, (void*)(lParam) ).Ref() );
				OnCaptureChanged( Window, refWindow );
				lResult = 0;
				bProcessed = true;
			}
			break;

#if((_WIN32_WINNT >= 0x0400) || (WINVER >= 0x0500))
		case COSWindow::wmMouseHover:
			{
				OnMouseHover( Window, wParam, lParam );
				lResult = 0;
				bProcessed = true;
			}
			break;
		case COSWindow::wmMouseLeave:
			{
				OnMouseLeave( Window );
				lResult = 0;
				bProcessed = true;
			}
			break;
#endif
		}

		return bProcessed;
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnMouseMove( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnMouseMove" );
		Window.DefProc( COSWindow::wmMouseLeave, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnLButtonDown( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnLButtonDown" );
		Window.DefProc( COSWindow::wmLButtonDown, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnLButtonUp( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnLButtonUp" );
		Window.DefProc( COSWindow::wmLButtonUp, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnLButtonDblClk( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnLButtonDblClk" );
		Window.DefProc( COSWindow::wmLButtonDblClk, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnRButtonDown( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnRButtonDown" );
		Window.DefProc( COSWindow::wmRButtonDown, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnRButtonUp( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnRButtonUp" );
		Window.DefProc( COSWindow::wmRButtonUp, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnRButtonDblClk( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnRButtonDblClk" );
		Window.DefProc( COSWindow::wmRButtonDblClk, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnMButtonDown( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnMButtonDown" );
		Window.DefProc( COSWindow::wmMButtonDown, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnMButtonUp( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnMButtonUp" );
		Window.DefProc( COSWindow::wmMButtonUp, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnMButtonDblClk( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnMButtonDblClk" );
		Window.DefProc( COSWindow::wmMButtonDblClk, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnMouseWheel( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnMouseWheel" );
#if (_WIN32_WINNT >= 0x0400) || (_WIN32_WINDOWS > 0x0400)
		Window.DefProc( COSWindow::wmMouseWheel, wParam, lParam );
#endif
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnCaptureChanged( COSWindow& Window, COSWindow::refType Wnd )
	{
		_WINQ_FCONTEXT( "CPointerController::OnCaptureChanged" );
		Window.DefProc( COSWindow::wmCaptureChanged, 0, reinterpret_cast< Cmp_long_ptr >( Wnd->Handle()->Use() ) );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnMouseHover( COSWindow& Window, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CPointerController::OnMouseHover" );
		Window.DefProc( COSWindow::wmMouseHover, wParam, lParam );
	}

	//--------------------------------------------------------------------------------
	void CPointerController::OnMouseLeave( COSWindow& Window )
	{
		_WINQ_FCONTEXT( "CPointerController::OnMouseLeave" );
		Window.DefProc( COSWindow::wmMouseLeave, 0, 0 );
	}

}//nsWin32

