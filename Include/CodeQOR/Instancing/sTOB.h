//sTOB.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Static Template Object Block

#ifndef CODEQOR_STOB_H_1
#define CODEQOR_STOB_H_1

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include <new>

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
    //Use these macros in place of 'static' for instances
    //that must be statically allocated but only constructed 
    //on first use
    //The resulting sTOB is used as a pointer to the static instance
#	define __QCS_DECLARE_PSTATIC( _I ) static sTOB< _I >
#	define __QCS_IMPL_PSTATIC( _I ) template<> sTOB< _I >

    //The _Kick macro ensures that the real T is 
    //created in the statically allocated memory
    //This is the per call overhead but it only 
    //inserts a handful of assembler instructions

    //_Kick uses the in-place new operator to construct
    //the T in the memory already reserved in the 
    //runtime image for the array.

#	define _Kick				                                                    \
    if( !m_bInitialised )								                            \
    {                                                                               \
        /*Set initialized to true first to*/										\
        /*allow codependent constructions*/											\
        m_bInitialised = true;														\
        /*T() is called indirectly here*/											\
        m_pThis = new( &m_InternalData[ 0 ] ) T;									\
        m_bInitialised = true;														\
    }

    //--------------------------------------------------------------------------------
    template< typename T >
    struct sTOB
    {

	public:

        //We need to override all these operators
        //The client code may use any of them to 
        //access the sTOB the first time so each must _Kick

        //--------------------------------------------------------------------------------
        //The sTOB may be assigned from a real T
        T& operator = ( const T& _t )
        {
            _Kick
            *m_pThis = _t;
            return *m_pThis;
        }

        //--------------------------------------------------------------------------------
        //To convert the sTOB into a simple T*
        operator T*()
        {
            _Kick
            return m_pThis;
        }

        //--------------------------------------------------------------------------------
        //A function may take a T& and a sTOB< T > be passed
        operator T&()
        {
            _Kick
            return *m_pThis;
        }

        //--------------------------------------------------------------------------------
        //The address of a smart T* should be a T** right
        T** operator &()
        {
            _Kick
            return &m_pThis;
        }

        //--------------------------------------------------------------------------------
        //This allows client code to call through the sTOB
        //e.g mysTOB->GetCmdLine();
        T* operator ->()
        {
            _Kick
            return m_pThis;
        }

        //--------------------------------------------------------------------------------
        //Construct the sTOB at static initialization time      
        sTOB() 
        {
            m_bInitialised = false;
            //This sets up the correct actual value for m_pThis             
            //but it won't be valid until after construction
            m_pThis = reinterpret_cast< T* >( m_InternalData );
        }

		//--------------------------------------------------------------------------------
		explicit sTOB( void* )
		{
			m_bInitialised = false;
            //This sets up the correct actual value for m_pThis             
            //but it won't be valid until after construction
            m_pThis = reinterpret_cast< T* >( m_InternalData );			
		}

        //--------------------------------------------------------------------------------
        //Destruct the sTOB at static tear-down time
        //Be aware that everything including some of the runtime
        //may have disappeared by the time this is called
        ~sTOB()
        {               
            if( m_bInitialised )
            {
                //T destructor called here
                m_pThis->~T();
            }
        }

	private:

        union __QCMP_NAMELESS_STRUCT
        {
            T* m_pThis;										//A real T pointer which points to start of the memory array
            double dStuffing;                               // to force alignment of "m_InternalData"
		};

        char m_InternalData[ sizeof( T ) ];					//Memory array large enough to contain a T
        bool m_bInitialised;								//Switch to record the first call having been made

    };

}//nsCodeQOR

#endif //CODEQOR_STOB_H_1
