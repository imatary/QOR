//WinQLTerminalServices.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/System/TerminalServices/WinQLTerminalServices.h"
#include "WinQL/GUI/Window.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/WTSAPI32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CTermServHelper );

	//--------------------------------------------------------------------------------
	CTermServHelper::CTermServHelper()
	{
		_WINQ_FCONTEXT( "CTermServHelper::CTermServHelper" );
	}

	//--------------------------------------------------------------------------------
	CTermServHelper::CTermServHelper( const CTermServHelper& src )
	{
		_WINQ_FCONTEXT( "CTermServHelper::CTermServHelper" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CTermServHelper& CTermServHelper::operator = ( const CTermServHelper& src )
	{
		_WINQ_FCONTEXT( "CTermServHelper::operator =" );
		if( &src != this )
		{
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTermServHelper::~CTermServHelper()
	{
		_WINQ_FCONTEXT( "CTermServHelper::~CTermServHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CTermServHelper::ProcessIdToSessionId( unsigned long dwProcessId, unsigned long* pSessionId )
	{
		_WINQ_FCONTEXT( "CTermServHelper::ProcessIdToSessionId" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ProcessIdToSessionId( dwProcessId, pSessionId ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}	

	//--------------------------------------------------------------------------------
	bool CTermServHelper::AppInstallMode()
	{
		_WINQ_FCONTEXT( "CTermServHelper::AppInstallMode" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::TermsrvAppInstallMode() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CTermServHelper::GetActiveConsoleSessionId()
	{			
		_WINQ_FCONTEXT( "CTermServHelper::GetActiveConsoleSessionId" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::WTSGetActiveConsoleSessionId();
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CTerminalServices );

	//--------------------------------------------------------------------------------
	CTerminalServices::CTerminalServices() : CTermServHelper()
	,	m_pWTSAPI( nsWinQAPI::CWTSAPI32::Instance() )
	{
		_WINQ_FCONTEXT( "CTerminalServices::CTerminalServices" );
	}

	//--------------------------------------------------------------------------------
	CTerminalServices::~CTerminalServices()
	{
		_WINQ_FCONTEXT( "CTerminalServices::~CTerminalServices" );
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServices::EnumerateServers( CTString& strDomain, nsCodeQOR::CTArray< CTString >& ServerNames )
	{
		_WINQ_FCONTEXT( "CTerminalServices::EnumerateServers" );
		bool bResult = false;
		::PWTS_SERVER_INFO* ppServerInfo = 0;
		unsigned long ulCount = 0;
		__QOR_PROTECT
		{
			CTObjectLock< CTerminalServices > Lock( this );
			bResult = m_pWTSAPI && m_pWTSAPI->WTSEnumerateServers( strDomain.GetNullableBuffer(), 0, 1, ppServerInfo, &ulCount );
			strDomain.ReleaseBuffer();
			if( bResult )
			{
				for( unsigned long ulServer = 0; ulServer < ulCount; ulServer++ )
				{
					CTString strServerName( ppServerInfo[ ulServer ]->pServerName );
					ServerNames.Append( strServerName );
				}				
			}
		}__QOR_ENDPROTECT
		m_pWTSAPI->WTSFreeMemory( ppServerInfo );		
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServices::ConnectSession( unsigned long LogonId, unsigned long TargetLogonId, CTString strPassword, bool bWait )
	{
		_WINQ_FCONTEXT( "CTerminalServices::ConnectSession" );
		bool bResult = false;
		__QOR_PROTECT
		{
			CTObjectLock< CTerminalServices > ObjectLock( this );
			bResult = m_pWTSAPI && m_pWTSAPI->WTSConnectSession( LogonId, TargetLogonId, strPassword.GetBuffer(), bWait ? 1 : 0 ) ? true : false;
			strPassword.ReleaseBuffer();
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServices::EnableChildSessions( bool bEnable )
	{
		_WINQ_FCONTEXT( "CTerminalServices::EnableChildSessions" );
		bool bResult = false;
		__QOR_PROTECT
		{
			CTObjectLock< CTerminalServices > ObjectLock( this );
			bResult = m_pWTSAPI && m_pWTSAPI->WTSEnableChildSessions( bEnable ? 1 : 0 );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServices::IsChildSessionsEnabled( void )
	{
		_WINQ_FCONTEXT( "CTerminalServices::IsChildSessionsEnabled" );
		int bEnabled = 0;
		bool bResult = false;
		__QOR_PROTECT
		{
			CTObjectLock< CTerminalServices > ObjectLock( this );
			bResult = m_pWTSAPI && m_pWTSAPI->WTSIsChildSessionsEnabled( &bEnabled );
		}__QOR_ENDPROTECT
		bResult &= ( bEnabled ? true : false );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTSLocalServer::refType CTerminalServices::LocalServer( void )
	{
		_WINQ_FCONTEXT( "CTerminalServices::LocalServer" );
		return m_LocalServer.Ref();
	}

	//--------------------------------------------------------------------------------
	CTerminalServices::CRemoteControlSession::refType CTerminalServices::CreateRemoteControlSession( CTString& strTargetServer, unsigned long ulTargetLogonId, unsigned char HotkeyVk, unsigned short ushotkeyModifiers )
	{
		_WINQ_FCONTEXT( "CTerminalServices::CreateRemoteControlSession" );
		return CTerminalServices::CRemoteControlSession::refType( new CTerminalServices::CRemoteControlSession( strTargetServer, ulTargetLogonId, HotkeyVk, ushotkeyModifiers ), true );
	}

	//--------------------------------------------------------------------------------
	CTSRemoteServer::refType CTerminalServices::RemoteServer( const CTString& strName )
	{
		_WINQ_FCONTEXT( "CTerminalServices::RemoteServer" );
		return CTSRemoteServer::refType( new CTSRemoteServer( strName ), true );
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CTerminalServices::CRemoteControlSession );

	//--------------------------------------------------------------------------------
	CTerminalServices::CRemoteControlSession::CRemoteControlSession( CTString& strTargetServerName, unsigned long ulTargetLogonId, unsigned char HotkeyVk, unsigned short usHotkeyModifiers ) : m_pWTSAPI( nsWinQAPI::CWTSAPI32::Instance() )
	{
		_WINQ_FCONTEXT( "CTerminalServices::CRemoteControlSession::CRemoteControlSession" );
		m_bStatus = m_pWTSAPI->WTSStartRemoteControlSession( strTargetServerName.GetBuffer(), ulTargetLogonId, HotkeyVk, usHotkeyModifiers ) ? true : false;
		strTargetServerName.ReleaseBuffer();
		m_ulLogonId = ulTargetLogonId;
	}

	//--------------------------------------------------------------------------------
	CTerminalServices::CRemoteControlSession::~CRemoteControlSession()
	{
		_WINQ_FCONTEXT( "CTerminalServices::CRemoteControlSession::~CRemoteControlSession" );
		if( m_bStatus )
		{
			m_pWTSAPI->WTSStopRemoteControlSession( m_ulLogonId );
		}
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CTerminalServer );

	CTerminalServer::CTerminalServer( const CTString& strName ) : m_pWTSAPI( nsWinQAPI::CWTSAPI32::Instance() )
	,	m_strName( strName )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CTerminalServer" );
	}

	//--------------------------------------------------------------------------------
	CTerminalServer::~CTerminalServer()
	{
		_WINQ_FCONTEXT( "CTerminalServer::~CTerminalServer" );
		delete m_pWTSAPI;
	}

	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CTSLocalServer );

	//--------------------------------------------------------------------------------
	CTSLocalServer::CTSLocalServer() : CTerminalServer( CTString( WTS_CURRENT_SERVER_NAME ) )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CTSLocalServer" );
		m_Handle = WTS_CURRENT_SERVER_HANDLE;
	}

	//--------------------------------------------------------------------------------
	CTSLocalServer::~CTSLocalServer()
	{
		_WINQ_FCONTEXT( "CTSLocalServer::~CTSLocalServer" );
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::CSession::QueryInformation( CTerminalServer::eINFOCLASS WTSInfoClass, TCHAR** ppBuffer, unsigned long* pBytesReturned )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CSession::QueryInformation" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSQuerySessionInformation( m_Server.m_Handle, m_ulID, static_cast< ::WTS_INFO_CLASS >( WTSInfoClass ), ppBuffer, pBytesReturned );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTerminalServer::CSessionNotification::refType CTerminalServer::CreateSessionNotification( COSWindow& Window, bool bAllSessions )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CreateSessionNotification" );
		return CTSLocalServer::CSessionNotification::refType( new CTSLocalServer::CSessionNotification( *this, Window, bAllSessions ), true );
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::CSession::SendMessageT( CTString strTitle, CTString strMessage, unsigned long Style, unsigned long Timeout, unsigned long* pResponse, bool bWait )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CSession::SendMessageT" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSSendMessage( m_Server.m_Handle, m_ulID, strTitle.GetBuffer(), static_cast< unsigned long >( strTitle.Len() ), strMessage.GetBuffer(), 
				static_cast< unsigned long >( strMessage.Len() ), Style, Timeout, pResponse, bWait ? 1 : 0 ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::EnumerateSessions( nsCodeQOR::CTArray< CTSLocalServer::SessionInfo >& Sessions )
	{
		_WINQ_FCONTEXT( "CTerminalServer::EnumerateSessions" );
		bool bResult = false;
		unsigned long ulCount = 0;
		::PWTS_SESSION_INFO* ppSessionInfo = 0;
		__QOR_PROTECT
		{
			bResult = m_pWTSAPI && m_pWTSAPI->WTSEnumerateSessions( m_Handle,0, 1, ppSessionInfo,&ulCount );

			if( bResult )
			{
				for( unsigned long ulIndex = 0; ulIndex < ulCount; ulIndex++ )
				{
					CTSLocalServer::SessionInfo Info;
					Info.SessionId = ppSessionInfo[ ulIndex ]->SessionId;
					Info.State = static_cast< CTSLocalServer::eConnectStateClass >( ppSessionInfo[ ulIndex ]->State );
					Info.strWinStationName = CTString( ppSessionInfo[ ulIndex ]->pWinStationName );
					Sessions.Append( Info );
				}				
			}
		}__QOR_ENDPROTECT
		m_pWTSAPI->WTSFreeMemory( ppSessionInfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::TerminateProcess( unsigned long ulProcessId, unsigned long ulExitCode )
	{
		_WINQ_FCONTEXT( "CTerminalServer::TerminateProcess" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_pWTSAPI && m_pWTSAPI->WTSTerminateProcess( m_Handle, ulProcessId, ulExitCode ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::EnumerateProcesses( nsCodeQOR::CTArray< CTSLocalServer::ProcessInfo >& Processes )
	{
		_WINQ_FCONTEXT( "CTerminalServer::EnumerateProcesses" );
		bool bResult = false;
		unsigned long ulCount = 0;
		::PWTS_PROCESS_INFO* ppProcessInfo = 0;
		__QOR_PROTECT
		{
			bResult = m_pWTSAPI && m_pWTSAPI->WTSEnumerateProcesses( m_Handle, 0, 1, ppProcessInfo, &ulCount );

			if( bResult )
			{
				for( unsigned long ulIndex = 0; ulIndex < ulCount; ulIndex++ )
				{
					CTSLocalServer::ProcessInfo Info;
					Info.ProcessId = ppProcessInfo[ ulIndex ]->ProcessId;
					Info.SessionId = ppProcessInfo[ ulIndex ]->SessionId;
					Info.strProcessName = CTString( ppProcessInfo[ ulIndex ]->pProcessName );
					Processes.Append( Info );
				}				
			}
		}__QOR_ENDPROTECT
		m_pWTSAPI->WTSFreeMemory( ppProcessInfo );
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::ShutdownSystem( unsigned long ShutdownFlag )
	{
		_WINQ_FCONTEXT( "CTerminalServer::ShutdownSystem" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_pWTSAPI && m_pWTSAPI->WTSShutdownSystem( m_Handle, ShutdownFlag );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::SetUserConfig( CTString& strUserName, eCONFIGCLASS ConfigClass, CTString& strBuffer, unsigned long ulDataLength )
	{
		_WINQ_FCONTEXT( "CTerminalServer::SetUserConfig" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_pWTSAPI && m_pWTSAPI->WTSSetUserConfig( m_strName.GetBuffer(), strUserName.GetBuffer(), static_cast< ::WTS_CONFIG_CLASS >( ConfigClass ), strBuffer.GetBuffer(), strBuffer.Len() ) ? true : false;
			m_strName.ReleaseBuffer();
			strUserName.ReleaseBuffer();
			strBuffer.ReleaseBuffer();
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::QueryUserConfig( CTString& strUserName, eCONFIGCLASS ConfigClass, nsCodeQOR::CTLRef< byte >& refData )
	{
		_WINQ_FCONTEXT( "CTerminalServer::QueryUserConfig" );
		bool bResult = false;
		TCHAR** ppBuffer = 0;
		unsigned long ulBytesReturned = 0;
		__QOR_PROTECT
		{
			bResult = m_pWTSAPI && m_pWTSAPI->WTSQueryUserConfig( m_strName.GetBuffer(), strUserName.GetBuffer(), static_cast< ::WTS_CONFIG_CLASS >( ConfigClass ), ppBuffer, &ulBytesReturned );
			if( bResult )
			{
				refData.Attach( new byte[ ulBytesReturned ], true );
				memcpy( refData.operator byte *(), *ppBuffer, ulBytesReturned );
				m_pWTSAPI->WTSFreeMemory( ppBuffer );
			}
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::WaitSystemEvent( unsigned long EventMask, unsigned long* pEventFlags )
	{
		_WINQ_FCONTEXT( "CTerminalServer::WaitSystemEvent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_pWTSAPI && m_pWTSAPI->WTSWaitSystemEvent( m_Handle, EventMask, pEventFlags );
		}__QOR_ENDPROTECT
		return bResult;
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CTerminalServer::CVirtualChannel );

	//--------------------------------------------------------------------------------
	CTerminalServer::CVirtualChannel::CVirtualChannel( CTerminalServer& Server, CTerminalServer::CSession& Session, CAString& strName ) : m_Server( Server )
	,	m_strName( strName )
	,	m_hChannelHandle( 0 )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CVirtualChannel::CVirtualChannel" );
		m_hChannelHandle = m_Server.m_pWTSAPI->WTSVirtualChannelOpen( m_Server.m_Handle, Session.ID(), m_strName.GetBuffer() );
		m_strName.ReleaseBuffer();
	}
	
	//--------------------------------------------------------------------------------
	CTerminalServer::CVirtualChannel::CVirtualChannel( CTerminalServer& Server, CTerminalServer::CSession& Session, CAString& strName, unsigned long ulFlags ) : m_Server( Server )
	,	m_strName( strName )
	,	m_hChannelHandle( 0 )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CVirtualChannel::CVirtualChannel" );
		m_hChannelHandle = m_Server.m_pWTSAPI->WTSVirtualChannelOpenEx( Session.ID(), m_strName.GetBuffer(), ulFlags );
		m_strName.ReleaseBuffer();
	}

	//--------------------------------------------------------------------------------
	CTerminalServer::CVirtualChannel::~CVirtualChannel()
	{
		_WINQ_FCONTEXT( "CTerminalServer::CVirtualChannel::~CVirtualChannel" );
		m_Server.m_pWTSAPI->WTSVirtualChannelClose( m_hChannelHandle );
	}

	
	//--------------------------------------------------------------------------------
	bool CTerminalServer::CVirtualChannel::PurgeInput()
	{
		_WINQ_FCONTEXT( "CTerminalServer::CVirtualChannel::PurgeInput" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSVirtualChannelPurgeInput( m_hChannelHandle );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::CVirtualChannel::PurgeOutput()
	{
		_WINQ_FCONTEXT( "CTerminalServer::CVirtualChannel::PurgeOutput" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSVirtualChannelPurgeOutput( m_hChannelHandle );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::CVirtualChannel::Query( CTerminalServer::CVirtualChannel::eVIRTUALCLASS WtsVirtualClass, void** ppBuffer, unsigned long* pBytesReturned )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CVirtualChannel::Query" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSVirtualChannelQuery( m_hChannelHandle, static_cast< ::WTS_VIRTUAL_CLASS >( WtsVirtualClass ), ppBuffer, pBytesReturned );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::CVirtualChannel::Read( unsigned long TimeOut, char* Buffer, unsigned long BufferSize, unsigned long* pBytesRead )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CVirtualChannel::Read" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSVirtualChannelRead( m_hChannelHandle, TimeOut, Buffer, BufferSize, pBytesRead );
		}__QOR_ENDPROTECT
		return bResult;
	}

	
	//--------------------------------------------------------------------------------
	bool CTerminalServer::CVirtualChannel::Write( char* Buffer, unsigned long Length, unsigned long* pBytesWritten )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CVirtualChannel::Write" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSVirtualChannelWrite( m_hChannelHandle, Buffer, Length, pBytesWritten );
		}__QOR_ENDPROTECT
		return bResult;
	}


	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CTerminalServer::CSession );

	//--------------------------------------------------------------------------------
	CTerminalServer::CSession::CSession( CTerminalServer& Server, unsigned long ulId ) : m_Server( Server )
	,	m_ulID( ulId )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CSession::CSession" );
	}

	//--------------------------------------------------------------------------------
	CTerminalServer::CSession::CSession( const CSession& src ) : m_Server( src.m_Server )
	,	m_ulID( src.m_ulID )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CSession::CSession" );
	}

	//--------------------------------------------------------------------------------
	CTerminalServer::CSession::~CSession()
	{
		_WINQ_FCONTEXT( "CTerminalServer::CSession::~CSession" );
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::CSession::Disconnect( bool bWait )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CSession::Disconnect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSDisconnectSession( m_Server.m_Handle, m_ulID, bWait );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::CSession::Logoff( bool bWait )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CSession::Logoff" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSLogoffSession( m_Server.m_Handle, m_ulID, bWait ? 1 : 0 ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTerminalServer::CSession::QueryUserToken( CRAIISessionHandle::refType& refHandle )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CSession::QueryUserToken" );
		bool bResult = false;
		__QOR_PROTECT
		{
			HANDLE hToken = 0;
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSQueryUserToken( m_ulID, &hToken );
			if( bResult )
			{
				refHandle->AsHandle().operator=( CHandle( hToken ) );
			}
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTSLocalServer::GetChildSessionId( unsigned long& ulSessionId )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::GetChildSessionId" );
		bool bResult = false;
		__QOR_PROTECT
		{
			CTObjectLock< CTSLocalServer > Lock( this );
			bResult = m_pWTSAPI && m_pWTSAPI->WTSGetChildSessionId( &ulSessionId );
		}__QOR_ENDPROTECT
		return bResult;
	}


	//--------------------------------------------------------------------------------
	bool CTSLocalServer::EnumerateListeners( nsCodeQOR::CTArray< CTSLocalServer::CListener::refType >& Listeners )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::EnumerateListeners" );
		bool bResult = false;
		unsigned long ulCount = 0;
		::PWTSLISTENERNAME pListeners = 0;

		__QOR_PROTECT
		{
			CTObjectLock< CTSLocalServer > ObjectLock( this );
			bResult = m_pWTSAPI && m_pWTSAPI->WTSEnumerateListeners( m_Handle, 0, 0, pListeners, &ulCount );

			if( ulCount > 0 )
			{
				pListeners = new ::WTSLISTENERNAME[ ulCount ];
				bResult = m_pWTSAPI->WTSEnumerateListeners( m_Handle, 0, 0, pListeners, &ulCount ) ? true : false;
				if( bResult )
				{
					for( unsigned long ulIndex = 0; ulIndex < ulCount; ulIndex++ )
					{
						CTString strListener( pListeners[ ulIndex ] );
						CTSLocalServer::CListener::refType refListener( new  CTSLocalServer::CListener( *this, strListener ), true );
						Listeners.Append( refListener );
					}
				}
			}
		}__QOR_ENDPROTECT

		delete [] pListeners;
		pListeners = 0;
		return bResult;
	}

	
	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CTSLocalServer::CListener );

	//--------------------------------------------------------------------------------
	CTSLocalServer::CListener::CListener( CTSLocalServer& Server, CTString& strName ) : m_Server( Server )
	,	m_strName( strName )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::CListener" );
	}

	//--------------------------------------------------------------------------------
	CTSLocalServer::CListener::CListener( const CTSLocalServer::CListener& src ) : m_Server( src.m_Server )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::CListener" );
		if( &src != this )
		{
			*this = dynamic_cast< const CTSLocalServer::CListenerConfig& >( src );
		}
	}

	//--------------------------------------------------------------------------------
	CTSLocalServer::CListener::CListener( CTSLocalServer& Server, const CTSLocalServer::CListenerConfig& src ) : m_Server( Server )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::CListener" );
		if( &src != this )
		{
			*this = src;
		}
	}

	//--------------------------------------------------------------------------------
	CTSLocalServer::CListener& CTSLocalServer::CListener::operator = ( const CTSLocalServer::CListenerConfig& src )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::operator =" );
		if( &src != this )
		{
			version = src.version;
			fEnableListener = src.fEnableListener;
			MaxConnectionCount = src.MaxConnectionCount;
			fPromptForPassword = src.fPromptForPassword;
			fInheritColorDepth = src.fInheritColorDepth;
			ColorDepth = src.ColorDepth;
			fInheritBrokenTimeoutSettings = src.fInheritBrokenTimeoutSettings;
			BrokenTimeoutSettings = src.BrokenTimeoutSettings;
			fDisablePrinterRedirection = src.fDisablePrinterRedirection;
			fDisableDriveRedirection = src.fDisableDriveRedirection;
			fDisableComPortRedirection = src.fDisableComPortRedirection;
			fDisableLPTPortRedirection = src.fDisableLPTPortRedirection;
			fDisableClipboardRedirection = src.fDisableClipboardRedirection;
			fDisableAudioRedirection = src.fDisableAudioRedirection;
			fDisablePNPRedirection = src.fDisablePNPRedirection;
			fDisableDefaultMainClientPrinter = src.fDisableDefaultMainClientPrinter;
			LanAdapter = src.LanAdapter;
			PortNumber = src.PortNumber;
			fInheritShadowSettings = src.fInheritShadowSettings;
			ShadowSettings = src.ShadowSettings;
			TimeoutSettingsConnection = src.TimeoutSettingsConnection;
			TimeoutSettingsDisconnection = src.TimeoutSettingsDisconnection;
			TimeoutSettingsIdle = src.TimeoutSettingsIdle;   
			SecurityLayer = src.SecurityLayer;
			MinEncryptionLevel = src.MinEncryptionLevel;   
			UserAuthentication = src.UserAuthentication;
			m_strComment = src.m_strComment;
			m_strLogonUserName = src.m_strLogonUserName;
			m_strLogonDomain = src.m_strLogonDomain;
			m_strWorkDirectory = src.m_strWorkDirectory;
			m_strInitialProgram = src.m_strInitialProgram;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CTSLocalServer::CListener::~CListener()
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::~CListener" );
	}

	//--------------------------------------------------------------------------------
	bool CTSLocalServer::CListener::GetSecurity( unsigned long ulSecurityInformation, CSecurityDescriptor** ppDescriptor )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::GetSecurity" );
		bool bResult = false;

		if( ppDescriptor && !*ppDescriptor )
		{
			unsigned long ulNeeded = 0;
			::PSECURITY_DESCRIPTOR pDescriptor = 0;
			__QOR_PROTECT
			{
				bResult = m_Server.m_pWTSAPI->WTSGetListenerSecurity( m_Server.m_Handle, 0, 0, m_strName.GetBuffer(), static_cast< ::SECURITY_INFORMATION >( ulSecurityInformation ), pDescriptor, 0, &ulNeeded ) ? true : false;
				m_strName.ReleaseBuffer();

				if( ulNeeded > 0 )
				{
					pDescriptor = new byte[ ulNeeded ];
					bResult = m_Server.m_pWTSAPI->WTSGetListenerSecurity( m_Server.m_Handle, 0, 0, m_strName.GetBuffer(), static_cast< ::SECURITY_INFORMATION >( ulSecurityInformation ), pDescriptor, ulNeeded, &ulNeeded ) ? true : false;
					m_strName.ReleaseBuffer();
		
					*ppDescriptor = new CSecurityDescriptor( pDescriptor );
				}
			}__QOR_ENDPROTECT
		}

		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTSLocalServer::CListener::SetSecurity( unsigned long ulSecurityInformation, CSecurityDescriptor& SecurityDescriptor )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::SetSecurity" );
		bool bResult = false;

		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI->WTSSetListenerSecurity( m_Server.m_Handle, 0, 0, m_strName.GetBuffer(), static_cast< ::SECURITY_INFORMATION >( ulSecurityInformation ), reinterpret_cast< ::PSECURITY_DESCRIPTOR >( SecurityDescriptor.GetDescriptor() ) ) ? true : false;
		}__QOR_ENDPROTECT

		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CTSLocalServer::CListener::AssignFromConfig( void* pConfigData )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::CListeneAssignFromConfig" );
		::PWTSLISTENERCONFIG pConfig = reinterpret_cast< ::PWTSLISTENERCONFIG >( pConfigData );
		version = pConfig->version;
		fEnableListener = pConfig->fEnableListener;
		MaxConnectionCount = pConfig->MaxConnectionCount;
		fPromptForPassword = pConfig->fPromptForPassword;
		fInheritColorDepth = pConfig->fInheritColorDepth;
		ColorDepth = pConfig->ColorDepth;
		fInheritBrokenTimeoutSettings = pConfig->fInheritBrokenTimeoutSettings;
		BrokenTimeoutSettings = pConfig->BrokenTimeoutSettings;
		fDisablePrinterRedirection = pConfig->fDisablePrinterRedirection;
		fDisableDriveRedirection = pConfig->fDisableDriveRedirection;
		fDisableComPortRedirection = pConfig->fDisableComPortRedirection;
		fDisableLPTPortRedirection = pConfig->fDisableLPTPortRedirection;
		fDisableClipboardRedirection = pConfig->fDisableClipboardRedirection;
		fDisableAudioRedirection = pConfig->fDisableAudioRedirection;
		fDisablePNPRedirection = pConfig->fDisablePNPRedirection;
		fDisableDefaultMainClientPrinter = pConfig->fDisableDefaultMainClientPrinter;
		LanAdapter = pConfig->LanAdapter;
		PortNumber = pConfig->PortNumber;
		fInheritShadowSettings = pConfig->fInheritShadowSettings;
		ShadowSettings = pConfig->ShadowSettings;
		TimeoutSettingsConnection = pConfig->TimeoutSettingsConnection;
		TimeoutSettingsDisconnection = pConfig->TimeoutSettingsDisconnection;
		TimeoutSettingsIdle = pConfig->TimeoutSettingsIdle;   
		SecurityLayer = pConfig->SecurityLayer;
		MinEncryptionLevel = pConfig->MinEncryptionLevel;   
		UserAuthentication = pConfig->UserAuthentication;
		m_strComment = CWString( (const wchar_t*)(pConfig->Comment), static_cast< unsigned short >( 61 ) ).toTString();
		m_strLogonUserName = CWString( (const wchar_t*)( pConfig->LogonUserName ), static_cast< unsigned short >( 21 ) ).toTString();;
		m_strLogonDomain = CWString( (const wchar_t*)( pConfig->LogonDomain ), static_cast< unsigned short >( 18 ) ).toTString();
		CWString tmp( (const wchar_t*)( pConfig->WorkDirectory ), static_cast<unsigned short>( MAX_PATH + 1 ) );
		m_strWorkDirectory = tmp.toTString();
		CWString tmp2( (const wchar_t*)( pConfig->InitialProgram ), static_cast<unsigned short>( MAX_PATH + 1 ) );
		m_strInitialProgram = tmp2.toTString();
	}

	//--------------------------------------------------------------------------------
	void CTSLocalServer::CListener::AssignToConfig( void* pConfigData )
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::AssignToConfig" );
		::PWTSLISTENERCONFIG pConfig = reinterpret_cast< ::PWTSLISTENERCONFIG >( pConfigData );
		pConfig->version = version;
		pConfig->fEnableListener = fEnableListener;
		pConfig->MaxConnectionCount = MaxConnectionCount;
		pConfig->fPromptForPassword = fPromptForPassword;
		pConfig->fInheritColorDepth = fInheritColorDepth;
		pConfig->ColorDepth = ColorDepth;
		pConfig->fInheritBrokenTimeoutSettings = fInheritBrokenTimeoutSettings;
		pConfig->BrokenTimeoutSettings = BrokenTimeoutSettings;
		pConfig->fDisablePrinterRedirection = fDisablePrinterRedirection;
		pConfig->fDisableDriveRedirection = fDisableDriveRedirection;
		pConfig->fDisableDriveRedirection = fDisableDriveRedirection;
		pConfig->fDisableLPTPortRedirection = fDisableLPTPortRedirection;
		pConfig->fDisableClipboardRedirection = fDisableClipboardRedirection;
		pConfig->fDisableAudioRedirection = fDisableAudioRedirection;
		pConfig->fDisablePNPRedirection = fDisablePNPRedirection;
		pConfig->fDisableDefaultMainClientPrinter = fDisableDefaultMainClientPrinter;
		pConfig->LanAdapter = LanAdapter;
		pConfig->PortNumber = PortNumber;
		pConfig->fInheritShadowSettings = fInheritShadowSettings;
		pConfig->ShadowSettings = ShadowSettings;
		pConfig->TimeoutSettingsConnection = TimeoutSettingsConnection;
		pConfig->TimeoutSettingsDisconnection = TimeoutSettingsDisconnection;
		pConfig->TimeoutSettingsIdle = TimeoutSettingsIdle;   
		pConfig->SecurityLayer = SecurityLayer;
		pConfig->MinEncryptionLevel = MinEncryptionLevel;   
		pConfig->UserAuthentication = UserAuthentication;
		memcpy( pConfig->Comment, m_strComment.GetBuffer(), min( 61, m_strComment.Len() ) * sizeof( TCHAR ) );
		m_strComment.ReleaseBuffer();
		memcpy( pConfig->LogonUserName, m_strLogonUserName.GetBuffer(), min( 21, m_strLogonUserName.Len() ) * sizeof( TCHAR ) );
		m_strLogonUserName.ReleaseBuffer();
		memcpy( pConfig->LogonDomain, m_strLogonDomain.GetBuffer(), min( 18, m_strLogonDomain.Len() ) * sizeof( TCHAR ) );
		m_strLogonDomain.ReleaseBuffer();
		memcpy( pConfig->WorkDirectory, m_strWorkDirectory.GetBuffer(), min( 261, m_strWorkDirectory.Len() ) * sizeof( TCHAR ) );
		m_strWorkDirectory.ReleaseBuffer();
		memcpy( pConfig->InitialProgram, m_strInitialProgram.GetBuffer(), min( 261, m_strInitialProgram.Len() ) * sizeof( TCHAR ) );
		m_strInitialProgram.ReleaseBuffer();
	}

	//--------------------------------------------------------------------------------
	bool CTSLocalServer::CListener::QueryConfig()
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::QueryConfig" );
		bool bResult = false;
		::WTSLISTENERCONFIG Config;

		__QOR_PROTECT
		{
			bResult = m_Server.m_pWTSAPI->WTSQueryListenerConfig( m_Server.m_Handle, 0, 0, m_strName.GetBuffer(), &Config ) ? true : false;
			m_strName.ReleaseBuffer();
			if( bResult )
			{
				AssignFromConfig( &Config );
			}
		}__QOR_ENDPROTECT

		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTSLocalServer::CListener::Create()
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::Create" );
		bool bResult = false;
		::WTSLISTENERCONFIG Config;
		__QOR_PROTECT
		{
			AssignToConfig( &Config );
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSCreateListener( m_Server.m_Handle, 0, 0, m_strName.GetBuffer(), &Config, 1 ) ? true : false;
			m_strName.ReleaseBuffer();
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CTSLocalServer::CListener::Update()
	{
		_WINQ_FCONTEXT( "CTSLocalServer::CListener::Update" );
		bool bResult = false;
		::WTSLISTENERCONFIG Config;
		__QOR_PROTECT
		{
			AssignToConfig( &Config );
			bResult = m_Server.m_pWTSAPI && m_Server.m_pWTSAPI->WTSCreateListener( m_Server.m_Handle, 0, 0, m_strName.GetBuffer(), &Config, 0 ) ? true : false;
			m_strName.ReleaseBuffer();
		}__QOR_ENDPROTECT
		return bResult;
	}


	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CTerminalServer::CSessionNotification );

	//--------------------------------------------------------------------------------
	CTerminalServer::CSessionNotification::CSessionNotification( CTerminalServer& Server, COSWindow& Window, bool bAllSessions ) : m_Server( Server )
	,	m_Window( Window )
	{
		_WINQ_FCONTEXT( "CTerminalServer::CSessionNotification::CSessionNotification" );
		m_bStatus = m_Server.m_pWTSAPI->WTSRegisterSessionNotification( reinterpret_cast< ::HWND >( m_Window.Handle()->Use() ), bAllSessions ? 1 : 0 ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	CTerminalServer::CSessionNotification::~CSessionNotification()
	{
		_WINQ_FCONTEXT( "CTerminalServer::CSessionNotification::~CSessionNotification" );
		if( m_bStatus )
		{
			m_Server.m_pWTSAPI->WTSUnRegisterSessionNotification( reinterpret_cast< ::HWND >( m_Window.Handle()->Use() ) );
		}
	}



	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CTSRemoteServer );

	//--------------------------------------------------------------------------------
	CTSRemoteServer::CTSRemoteServer( const CTString& strName ) : CTerminalServer( strName )
	{
		_WINQ_FCONTEXT( "CTSRemoteServer::CTSRemoteServer" );
		m_Handle = m_pWTSAPI->WTSOpenServerEx( m_strName.GetBuffer() );
		m_strName.ReleaseBuffer();
	}

	//--------------------------------------------------------------------------------
	CTSRemoteServer::~CTSRemoteServer()
	{
		_WINQ_FCONTEXT( "CTSRemoteServer::~CTSRemoteServer" );
		m_pWTSAPI->WTSCloseServer( m_Handle );
		m_Handle = 0;
	}

}//nsWin32
