//WinQLModuleBootStrap.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implements .dll startup and shutdown code

#include "WinQL/WinQL.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "SystemQOR.h"
#include "WinQL/Bootstrap/WinQLModuleBootStrap.h"
#include "WinQL/Application/Process/WinQLProcess.h"
#include "WinQL/System/Performance/WinQLPerformanceHelper.h"
#include "WinQL/System/Clock/WinQLTime.h"
#include "WinQL/Application/Threading/WinQLThread.h"

//The module global security cookie from the Compiler C++ support library.
//The name __security_cookie is built in to the MSVC compiler.
__QCMP_STARTLINKAGE_C

extern Cmp_uint_ptr __security_cookie;
extern Cmp_uint_ptr __security_cookie_complement;

__QCMP_ENDLINKAGE_C

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	//Construct the object which represents the shared QOR library
	CModuleBootStrap::CModuleBootStrap()
	{
		InitializeSecurityCookie( __security_cookie, __security_cookie_complement );

		m_bStaticInitialised = false;
		m_apAtExit[ 0 ] = 0;
		m_pAtExit = m_apAtExit;
		m_iAtExitIndex = 0;

	}

	//--------------------------------------------------------------------------------
	//Deconstruct the bootstrap to clean up at the end of the process
	CModuleBootStrap::~CModuleBootStrap()
	{
		m_bStaticInitialised = false;
		doexit();
	}

	//--------------------------------------------------------------------------------
	int CModuleBootStrap::atexit( void (*pFunc)(void) )
	{
		*m_pAtExit++ = reinterpret_cast< void* >( pFunc );
		m_iAtExitIndex++;
		if( m_iAtExitIndex == ( scui_AtExitPageSize - 1 ) )
		{
			void** pEndPage = m_pAtExit;
			*m_pAtExit = new void*[ scui_AtExitPageSize ];
			m_pAtExit = (void**)(*m_pAtExit);
			*m_pAtExit++ = pEndPage;
			m_iAtExitIndex = 1;
		}
		return m_iAtExitIndex;
	}

	//--------------------------------------------------------------------------------
	void CModuleBootStrap::doexit( void )
	{
		while( m_pAtExit != m_apAtExit )
		{
			while( --m_iAtExitIndex > 0 )
			{
				void(*pFunc)(void) = (void(*)(void)) ( *(--m_pAtExit) );
				if( pFunc != 0 )
				{
					( *pFunc )();
					*m_pAtExit = 0;
				}
			}
			void** pPage = --m_pAtExit;
			if( m_pAtExit != m_apAtExit )
			{
				m_pAtExit = (void**)( *m_pAtExit );
				m_iAtExitIndex = scui_AtExitPageSize - 1;
				delete [] pPage;
			}
		}
	}

	//--------------------------------------------------------------------------------
	//Walk an initialization/termination list of C or C++ objects
	void CModuleBootStrap::InitTerm( InitFunc* pfbegin, InitFunc* pfend )
	{
		while ( pfbegin < pfend )
		{
			if ( *pfbegin != 0 )
			{
				( **pfbegin )();
			}
			++pfbegin;
		}
	}

	//--------------------------------------------------------------------------------
	bool CModuleBootStrap::Booted()
	{
		return m_bStaticInitialised;
	}

	//--------------------------------------------------------------------------------
	void CModuleBootStrap::InitStatic( void )
	{
	}

	//--------------------------------------------------------------------------------
	//Set up the stack security Cookie to keep exception handling stack unwinding happy
	void CModuleBootStrap::InitializeSecurityCookie( Cmp_uint_ptr& __security_cookie, Cmp_uint_ptr& __security_cookie_complement )
	{
		//Union to facilitate converting from FILETIME to unsigned __int64
		typedef union
		{
			Cmp_unsigned__int64 ft_scalar;
			nsWin32::FILETIME ft_struct;
		} FT;

		Cmp_uint_ptr Cookie;
		FT systime={0};
		nsWin32::LARGE_INTEGER perfctr;

		if ( __security_cookie != DEFAULT_SECURITY_COOKIE
#	if defined (_X86_)
			&& ( __security_cookie & 0xFFFF0000 ) != 0
#	endif
		   )
		{
			__security_cookie_complement = ~__security_cookie;
			return;
		}

		//Initialize the global cookie with a per module random value

		nsWin32::CTimeHelper TimeHelper;

		TimeHelper.GetSystemTimeAsFileTime( &systime.ft_struct );

#	if defined (_WIN64)
		Cookie = systime.ft_scalar;
#	else
		Cookie = systime.ft_struct.dwLowDateTime;
		Cookie ^= systime.ft_struct.dwHighDateTime;
#	endif

		Cookie ^= nsWin32::CProcess::GetCurrentId();
		Cookie ^= nsWin32::CThread::GetCurrentId();
		Cookie ^= TimeHelper.GetTickCount();

		nsWin32::CPerformanceHelper Performance;
		Performance.QueryCounter(perfctr);

#	if defined (_WIN64)
		Cookie ^= perfctr.QuadPart;
#	else
		Cookie ^= perfctr.u.LowPart;
		Cookie ^= perfctr.u.HighPart;
#	endif

#	if defined (_WIN64)
		Cookie &= 0x0000FFFFffffFFFFi64;
#	endif

		if( Cookie == DEFAULT_SECURITY_COOKIE )
		{
			Cookie = DEFAULT_SECURITY_COOKIE + 1;
		}
#	if defined (_X86_)
		else if( ( Cookie & 0xFFFF0000 ) == 0 )
		{
			Cookie |= Cookie << 16;
		}
#	endif

		__security_cookie = Cookie;
		__security_cookie_complement = ~Cookie;
	}

}//nsWin32
