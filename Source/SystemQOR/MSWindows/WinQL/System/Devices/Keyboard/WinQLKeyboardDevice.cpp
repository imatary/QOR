//WinQLKeyboardDevice.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/Keyboard/WinQLKeyboardDevice.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterfaceClass.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{	
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_GUID( CKeyboard, 0x884b96c3, 0x56ef, 0x11d1, 0xbc, 0x8c, 0x00, 0xa0, 0xc9, 0x14, 0x05, 0xdd );

	nsCodeQOR::CTExternalRegEntry< CKeyboard > CKeyboard::RegEntry;

	//--------------------------------------------------------------------------------
	CKeyboard::CKeyboard() : CDeviceInterface(), m_bOpen(false), m_Library(CUser32::Instance())
	{
		_WINQ_FCONTEXT("CKeyboard::CKeyboard");		
		CTString strLayoutName;
		m_Library.GetKeyboardLayoutName(strLayoutName.GetBufferSetLength(KL_NAMELENGTH));
		//Layouts.CreateKeyboardLayout(CKeyboardLayout::KLF_Activate | CKeyboardLayout::KLF_NoTellShell | CKeyboardLayout::KLF_Substitute | CKeyboardLayout::KLF_SetForProcess, strLayoutName);
	}

	//--------------------------------------------------------------------------------
	CKeyboard::CKeyboard(const CKeyboard& src) : CDeviceInterface(src), m_Library(CUser32::Instance())
	{
		_WINQ_FCONTEXT("CKeyboard::CKeyboard");
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CKeyboard& CKeyboard::operator = (const CKeyboard& src)
	{
		_WINQ_FCONTEXT("CKeyboard::operator =");
		if (&src != this)
		{
			CDeviceInterface::operator=(src);
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CKeyboard::~CKeyboard()
	{
		_WINQ_FCONTEXT("CKeyboard::~CKeyboard");
		//Close();
	}

	//--------------------------------------------------------------------------------
	void CKeyboard::ActivateLayout(CKeyboardLayout& KeyboardLayout, unsigned int Flags)
	{
		_WINQ_FCONTEXT("CKeyboard::ActivateLayout");
		__QOR_PROTECT
		{
			KeyboardLayout.Activate(Flags);
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CKeyboard::BlockInput(bool fBlockIt)
	{
		_WINQ_FCONTEXT("CKeyboard::BlockInput");
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Library.BlockInput(fBlockIt ? TRUE : FALSE) ? true : false;
		}__QOR_ENDPROTECT
			return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CKeyboard::EnableWindow(COSWindow::refType Wnd, bool bEnable)
	{
		_WINQ_FCONTEXT("CKeyboard::EnableWindow");
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Library.EnableWindow(reinterpret_cast< ::HWND >(Wnd->Handle()->Use()), bEnable ? TRUE : FALSE) ? true : false;
		}__QOR_ENDPROTECT
			return bResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CKeyboard::GetActiveWindow()
	{
		_WINQ_FCONTEXT("CKeyboard::GetActiveWindow");
		__QOR_PROTECT
		{
			return COSWindow::FromHandle(CWindowHandle(0, (void*)(m_Library.GetActiveWindow())).Ref());
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	short CKeyboard::GetAsyncKeyState(int vKey)
	{
		_WINQ_FCONTEXT("CKeyboard::GetAsyncKeyState");
		short sResult = 0;
		__QOR_PROTECT
		{
			sResult = m_Library.GetAsyncKeyState(vKey);
		}__QOR_ENDPROTECT
		return sResult;
	}

	//--------------------------------------------------------------------------------
	short CKeyboard::GetKeyState(int nVirtKey)
	{
		_WINQ_FCONTEXT("CKeyboard::GetKeyState");
		short sResult = 0;
		__QOR_PROTECT
		{
			sResult = m_Library.GetKeyState(nVirtKey);
		}__QOR_ENDPROTECT
		return sResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CKeyboard::MapVKey(unsigned int uCode, unsigned uMapType)
	{
		_WINQ_FCONTEXT("CKeyboard::MapVirtualKey");
		unsigned int uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_Library.MapVirtualKey(uCode, uMapType);
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CKeyboard::GetFocus()
	{
		_WINQ_FCONTEXT("CKeyboard::GetFocus");
		__QOR_PROTECT
		{
			return COSWindow::FromHandle(CWindowHandle(0, (void*)(m_Library.GetFocus())).Ref());
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	unsigned int CKeyboard::GetCodePage()
	{
		_WINQ_FCONTEXT("CKeyboard::GetCodePage");
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_Library.GetKBCodePage();
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	void CKeyboard::Open()
	{
		m_Session = CDeviceInterface::Open(Generic_Read | Generic_Write, File_Share_Read | File_Share_Write, File_Attribute_Normal);
		m_bOpen = true;
	}

	//--------------------------------------------------------------------------------
	void CKeyboard::QueryAttributes()
	{
		unsigned long ulWait = 0;
		if (!m_bOpen)
		{
			Open();
		}
		m_Session->Control(__WINQL_DEVICE_CONTROL_CODE(File_Device_Keyboard, Query_Attributes, Method_Buffered, File_Any_Access), &ulWait, sizeof(ulWait), &m_Attributes, sizeof(Keyboard_Attributes), 0, 0);
	}

	//--------------------------------------------------------------------------------
	void CKeyboard::QueryIndicators()
	{
		unsigned long ulWait = 0;
		if (!m_bOpen)
		{
			Open();
		}
		m_Session->Control(__WINQL_DEVICE_CONTROL_CODE(File_Device_Keyboard, Query_Indicators, Method_Buffered, File_Any_Access), &ulWait, sizeof(ulWait), &m_Indicators, sizeof(Keyboard_Indicators), 0, 0);
	}
}//nsWin32
