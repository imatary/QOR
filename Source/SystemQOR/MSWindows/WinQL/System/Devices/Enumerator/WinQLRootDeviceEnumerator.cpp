//WinQLRootDeviceEnumerator.cpp

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR/System.h"
#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQL/System/Devices/Enumerator/WinQLRootDeviceEnumerator.h"
#include "WinQAPI/SetupAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;
	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CRootDeviceEnumerator );

	//--------------------------------------------------------------------------------
	CRootDeviceEnumerator::CRootDeviceEnumerator() : m_Library( CSetupAPI::Instance() )
	{
		_WINQ_FCONTEXT( "CRootDeviceEnumerator::CRootDeviceEnumerator" );
		Enumerate();
	}

	//--------------------------------------------------------------------------------
	unsigned int CRootDeviceEnumerator::Enumerate( void )
	{
		unsigned long ulEnumIndex = 0;
		CTString strEnumerator( _TXT( "ROOT" ) );
		unsigned long ulInitLength = 256;		
		unsigned long ulResult = 0;
		CDeviceEnumerator* pEnumerator = new CDeviceEnumerator( strEnumerator );
		TheSystem().As< nsWin32::CSystem >()->Devices( QOR_PP_SHARED_OBJECT_ACCESS ).RegisterEnumerator( strEnumerator, pEnumerator );
		do
		{
			unsigned long ulLength = ulInitLength;
			ulResult = m_Library.CM_Enumerate_Enumerators( ulEnumIndex, strEnumerator.GetBufferSetLength( static_cast< unsigned short >( ulLength ) ), &ulLength, 0 );

			if( ulResult == CR_BUFFER_SMALL )
			{
				ulInitLength = ulLength + 1;
			}
			else
			{
				if( ulResult == CR_SUCCESS )
				{
					strEnumerator.ValidateBuffer( static_cast< unsigned short >( ulLength ) );
					pEnumerator = new CDeviceEnumerator( strEnumerator );
					TheSystem().As< nsWin32::CSystem >()->Devices( QOR_PP_SHARED_OBJECT_ACCESS ).RegisterEnumerator( strEnumerator, pEnumerator );
				}
				else
				{
					//TODO: Handle wierdness
				}
				ulEnumIndex++;
			}
		}while( ulResult != CR_NO_SUCH_VALUE );		
		return ulEnumIndex;
	}

	//--------------------------------------------------------------------------------
	CRootDeviceEnumerator::CRootDeviceEnumerator( const CRootDeviceEnumerator& src ) : m_Library( CSetupAPI::Instance() )
	{
		_WINQ_FCONTEXT( "CRootDeviceEnumerator::CRootDeviceEnumerator" );

		*this = src;
	}

	//--------------------------------------------------------------------------------
	CRootDeviceEnumerator& CRootDeviceEnumerator::operator = ( const CRootDeviceEnumerator& src )
	{
		_WINQ_FCONTEXT( "CRootDeviceEnumerator::operator =" );

		if( &src != this )
		{
			//m_EnumeratorMap = src.m_EnumeratorMap;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CRootDeviceEnumerator::~CRootDeviceEnumerator()
	{
		_WINQ_FCONTEXT( "CRootDeviceEnumerator::~CRootDeviceEnumerator" );
		//TODO: check that all enumerators are in fact deleted here
	}
	/*
	//--------------------------------------------------------------------------------
	CRootDeviceEnumerator::CIterator CRootDeviceEnumerator::begin( void )
	{
		CRootDeviceEnumerator::CIterator it( *this );
		return it;
	}

	//--------------------------------------------------------------------------------
	CRootDeviceEnumerator::CIterator CRootDeviceEnumerator::end( void )
	{
		CRootDeviceEnumerator::CIterator it( *this, m_EnumeratorMap.Size() );
		return it;
	}
	*/
}//nsWin32
