//MSW_stat.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include "SystemQOR/MSWindows/sys/MSW_stat.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	Cstat::Cstat()
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::Cstat" );
	}

	//--------------------------------------------------------------------------------
	Cstat::~Cstat()
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::~Cstat" );
	}

	//--------------------------------------------------------------------------------
	int Cstat::chmod( const char*, mode_t )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::chmod" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::fchmod( int, mode_t )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::fchmod" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::fchmodat( int, const char*, mode_t, int )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::fchmodat" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::fstat( int, nsWin32::file_stat* )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::fstat" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::fstatat( int, const char* __QCMP_RESTRICT, nsWin32::file_stat* __QCMP_RESTRICT, int )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::fstatat" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::futimens( int, const timespec[ 2 ] )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::futimens" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::lstat( const char* __QCMP_RESTRICT, nsWin32::file_stat* __QCMP_RESTRICT )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::lstat" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::mkdir( const char*, mode_t )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::mkdir" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::mkdirat( int, const char*, mode_t )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::mkdirat" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::mkfifo( const char*, mode_t )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::mkfifo" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::mkfifoat( int, const char*, mode_t )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::mkfifoat" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::mknod( const char*, mode_t, dev_t )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::mknod" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::mknodat( int, const char*, mode_t, dev_t )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::mknodat" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::stat( const char* __QCMP_RESTRICT, nsWin32::file_stat* __QCMP_RESTRICT )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::stat" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	mode_t Cstat::umask( mode_t )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::umask" );
		mode_t Result = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	int Cstat::utimensat( int, const char*, const timespec[ 2 ], int )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::utimensat" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::_umask( int pmode )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::_umask" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	errno_t Cstat::_umask_s( int mode, int* pOldMode )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::_umask_s" );
		errno_t Result = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	int Cstat::_stat( const char* path, sstat* buffer )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::_stat" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::_stat64( const char* path, sstat64* buffer )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::_stat64" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int Cstat::_stati64( const char* path, sstati64* buffer )
	{
		__QCS_MEMBER_FCONTEXT( "Cstat::_stati64" );
		int iResult = 0;
		__QOR_PROTECT
		{
		}__QOR_ENDPROTECT
		return iResult;
	}

}//nsWin32

#endif	//(QOR_SYS_OS == QOR_SYS_MSW)
