//WinQLVariant.h

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_COM_VARIANT_H_3
#define WINQL_COM_VARIANT_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/Definitions/IO.h"
#include "WinQL/Definitions/Interfaces.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	struct VARIANT
    {
    union 
        {
        struct __tagVARIANT
            {
            unsigned short vt;
            short wReserved1;
            short wReserved2;
            short wReserved3;
            union 
                {
                Cmp__int64 llVal;
                long lVal;
                byte bVal;
                short iVal;
                float fltVal;
                double dblVal;
                short boolVal;
                short _bool;
                long scode;
                CY cyVal;
                double date;
                wchar_t* bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                byte* pbVal;
                short* piVal;
                long* plVal;
                Cmp__int64 *pllVal;
                float* pfltVal;
                double* pdblVal;
                short* pboolVal;
                short* pbool;
                long* pscode;
                CY *pcyVal;
                double *pdate;
                wchar_t** pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                void* byref;
                char cVal;
                unsigned short uiVal;
                unsigned long ulVal;
                Cmp_unsigned__int64 ullVal;
                int intVal;
                unsigned int uintVal;
                DECIMAL *pdecVal;
                char* pcVal;
                unsigned short* puiVal;
                unsigned long* pulVal;
                Cmp_unsigned__int64* pullVal;
                int* pintVal;
                unsigned int* puintVal;
                struct __tagBRECORD
                    {
                    void* pvRecord;
                    IRecordInfo* pRecInfo;
                    } 	__VARIANT_NAME_4;
                } 	__VARIANT_NAME_3;
            } 	__VARIANT_NAME_2;
        DECIMAL decVal;
        } 	__VARIANT_NAME_1;
    };

}//nsWin32

#endif//WINQL_COM_VARIANT_H_3
