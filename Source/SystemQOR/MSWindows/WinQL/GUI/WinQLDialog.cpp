//WinQLDialog.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
#include "WinQL/GUI/Dialog.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/UXTheme.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--Dialog------------------------------------------------------------------------

	__QCMP_DECLARE_PERTHREAD CDialogHandleMap* p_tDialogHandleMap = 0;

	__QOR_IMPLEMENT_OCLASS_LUID( CDialog );

	//--------------------------------------------------------------------------------
	CDlgItem::CDlgItem()
	{
		m_ItemTemplate.cx = 0;
		m_ItemTemplate.cy = 0;
		m_ItemTemplate.dwExtendedStyle = 0;
		m_ItemTemplate.id = 0;
		m_ItemTemplate.style = 0;
		m_ItemTemplate.x = 0;
		m_ItemTemplate.y = 0;
	}

	//--------------------------------------------------------------------------------
	void CDlgItem::SetStyle( unsigned long ulStyle )
	{
		m_ItemTemplate.style = ulStyle;
	}

	//--------------------------------------------------------------------------------
	void CDlgItem::SetExtendedStyle( unsigned long ulExtendedStyle )
	{
		m_ItemTemplate.dwExtendedStyle = ulExtendedStyle;
	}

	//--------------------------------------------------------------------------------
	void CDlgItem::SetPosition( short x, short y )
	{
		m_ItemTemplate.x = x;
		m_ItemTemplate.y = y;
	}

	//--------------------------------------------------------------------------------
	void CDlgItem::SetSize( short cx, short cy )
	{
		m_ItemTemplate.cx = cx;
		m_ItemTemplate.cy = cy;
	}

	//--------------------------------------------------------------------------------
	void CDlgItem::SetId( unsigned short usId )
	{
		m_ItemTemplate.id = usId;
	}

	//--------------------------------------------------------------------------------
	void CDlgItem::SetControlType( CDlgItem::eCtrlType ctrlType, const wchar_t* wszClass )
	{
		__QOR_PROTECT
		{
			if( ctrlType == CDlgItem::eCustom )
			{
				m_ClassNameBuffer = wszClass;
			}

			m_CtrlType = ctrlType;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CDlgItem::eCtrlType CDlgItem::GetControlType()
	{
		return m_CtrlType;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDlgItem::GetExtraDataLen()
	{
		return 0;
	}

	__QOR_IMPLEMENT_OCLASS_LUID( CDialogInitializer );

	//--------------------------------------------------------------------------------
	void CDialogInitializer::SetStyle( unsigned long ulStyle )
	{
		_WINQ_FCONTEXT( "CDialogInitializer::SetStyle" );
		m_RootTemplate.style = ulStyle;
	}

	//--------------------------------------------------------------------------------
	void CDialogInitializer::SetExtendedStyle( unsigned long ulExtendedStyle )
	{
		_WINQ_FCONTEXT( "CDialogInitializer::SetExtendedStyle" );
		m_RootTemplate.dwExtendedStyle = ulExtendedStyle;
	}

	//--------------------------------------------------------------------------------
	void CDialogInitializer::SetPosition( short x, short y )
	{
		_WINQ_FCONTEXT( "CDialogInitializer::SetPosition" );
		m_RootTemplate.x = x;
		m_RootTemplate.y = y;
	}

	//--------------------------------------------------------------------------------
	void CDialogInitializer::SetSize( short cx, short cy )
	{
		_WINQ_FCONTEXT( "CDialogInitializer::SetSize" );
		m_RootTemplate.cx = cx;
		m_RootTemplate.cy = cy;
	}

	//--------------------------------------------------------------------------------
	void CDialogInitializer::SetMenu( unsigned short usMenu )
	{
		_WINQ_FCONTEXT( "CDialogInitializer::SetMenu" );
		m_usMenu = usMenu;
	}

	//--------------------------------------------------------------------------------
	void CDialogInitializer::SetClass( unsigned short usClass )
	{
		_WINQ_FCONTEXT( "CDialogInitializer::SetClass" );
		m_usClass = usClass;
	}

	//--------------------------------------------------------------------------------
	bool CDialogInitializer::AddItem( CDlgItem* pItem )
	{
		_WINQ_FCONTEXT( "CDialogInitializer::AddItem" );
		bool bResult = false;
		__QOR_PROTECT
		{
			m_ItemList.Append( pItem );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	DLGTEMPLATE* CDialogInitializer::GenerateTemplate( void )
	{
		_WINQ_FCONTEXT( "CDialogInitializer::GenerateTemplate" );
		DLGTEMPLATE* pTemplate = 0;

		__QOR_PROTECT
		{
			//Calculate the size of Buffer required
			unsigned long ulBufferSize = sizeof( DLGTEMPLATE ) + ( 2 * sizeof( unsigned short ) ) + ( ( m_TitleBuffer.Len() + 1 ) * sizeof( TCHAR ) );
			ulBufferSize = ( ( ulBufferSize + 3 ) & ~3 );

			m_RootTemplate.cdit = static_cast< unsigned short >( m_ItemList.GetCount() );

			for( unsigned int i = 1; i <= m_ItemList.GetCount(); i++ )
			{
				CDlgItem* pItem = m_ItemList.GetItem( i );
				
				if( pItem->GetControlType() != CDlgItem::eCustom )
				{
					ulBufferSize += ( sizeof( DLGITEMTEMPLATE ) + ( 3 * sizeof( unsigned short ) ) + ( ( pItem->m_CaptionBuffer.Len() + 1 ) * sizeof( TCHAR ) ) );
				}
				else
				{
					ulBufferSize += ( sizeof( DLGITEMTEMPLATE ) + ( 2 * sizeof( unsigned short ) ) + ( ( pItem->m_CaptionBuffer.Len() + 1 ) * sizeof( TCHAR ) ) + ( ( pItem->m_ClassNameBuffer.Len() + 1 ) * sizeof( wchar_t ) ) );
				}

				if( i < m_ItemList.GetCount() )
				{
					ulBufferSize = ( ( ulBufferSize + 3 ) & ~3 );
				}
			}

			//Allocate the Buffer
			unsigned char* pBuffer = new unsigned char[ ulBufferSize ];
			memset( pBuffer, 0, ulBufferSize );
			
			//Write aligned structures into the Buffer
			unsigned char* pData = pBuffer;
			memcpy( pData, &m_RootTemplate, sizeof( DLGTEMPLATE ) );
			pData += sizeof( DLGTEMPLATE );
			
			unsigned short* pMenu = reinterpret_cast< unsigned short* >( pData );
			*pMenu = m_usMenu;
			pData += sizeof( unsigned short );

			unsigned short* pClass = reinterpret_cast< unsigned short* >( pData );
			*pClass = m_usClass;
			pData += sizeof( unsigned short );

			TCHAR* pTitle = m_TitleBuffer.GetBuffer();
			memcpy( pData, pTitle, m_TitleBuffer.Len() * sizeof( TCHAR ) );
			pData += ( sizeof( TCHAR ) * m_TitleBuffer.Len() );

			*pData = 0;
			pData += sizeof( TCHAR );
			
			for( unsigned int i = 1; i <= m_ItemList.GetCount(); i++ )
			{
				CDlgItem* pItem = m_ItemList.GetItem( i );
				pData = (unsigned char*)( ( ( Cmp_ulong_ptr )pData + 3 ) & ~3 );
				memcpy( pData, pItem->GetTemplate(), sizeof( DLGITEMTEMPLATE ) );
				pData += sizeof( DLGITEMTEMPLATE );

				unsigned short* pIndicator = reinterpret_cast< unsigned short* >( pData );
				*pIndicator = 0xFFFF;
				pData += sizeof( unsigned short );

				unsigned short* pAtom = reinterpret_cast< unsigned short* >( pData );
				*pAtom = static_cast< unsigned short >( pItem->GetControlType() );
				pData += sizeof( unsigned short );

				TCHAR* pCaption = pItem->m_CaptionBuffer.GetBuffer();
				memcpy( pData, pCaption, pItem->m_CaptionBuffer.Len() * sizeof( TCHAR ) );
				pData += ( sizeof( TCHAR ) * pItem->m_CaptionBuffer.Len() );

				*pData = 0;
				pData += sizeof( TCHAR );

				unsigned short* pExtra = reinterpret_cast< unsigned short* >( pData );
				*pExtra = static_cast< unsigned short >( pItem->GetExtraDataLen() );
				pData += sizeof( unsigned short );
			}

			pTemplate = reinterpret_cast< DLGTEMPLATE* >( pBuffer );

		}__QOR_ENDPROTECT

		return pTemplate;
	}

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use." )
	//--------------------------------------------------------------------------------
	CDialog::CDialog( CDialogHandle::refType hDlg ) : m_User32Library( CUser32::Instance() ), m_UxTheme( CUXTheme::Instance() )
	,	m_DlgHandle( this, hDlg->AsHandle().ptr() )
	{
		_WINQ_FCONTEXT( "CDialog::CDialog" );
		m_pDialogFunc = 0;
		m_dwInitParam = 0;
		m_bEnded = false;
		Init();
	}

	//--------------------------------------------------------------------------------
	CDialog::CDialog() : m_User32Library( CUser32::Instance() ), m_UxTheme( CUXTheme::Instance() )
	,	m_DlgHandle( this, 0 )
	{
		_WINQ_FCONTEXT( "CDialog::CDialog" );
		m_pDialogFunc = 0;
		m_dwInitParam = 0;
		m_bEnded = false;
	}

	//--------------------------------------------------------------------------------
	/*
	CDialog::CDialog( InstanceHandle hInstance, const TCHAR* lpTemplateName, COSWindow::refType WndParent, nsWin32::DLGPROC lpDialogFunc, Cmp_long_ptr dwInitParam ) : m_User32Library( CUser32::Instance() ), m_UxTheme( CUXTheme::Instance() )
	,	m_DlgHandle( this, 0 )
	{
		_WINQ_FCONTEXT( "CDialog::CDialog" );
		m_pDialogFunc = lpDialogFunc;
		m_dwInitParam = dwInitParam;
		m_bEnded = false;
		__QOR_PROTECT
		{
			m_DlgHandle = ( m_User32Library.CreateDialogParam( reinterpret_cast< ::HINSTANCE >( hInstance ), lpTemplateName, reinterpret_cast< ::HWND >( WndParent->Handle()->Use() ), (::DLGPROC)&CDialog::StaticCallback, reinterpret_cast< LPARAM >( this ) ) );
			Init();
		}__QOR_ENDPROTECT
	}
	*/
	//--------------------------------------------------------------------------------
	CDialog::CDialog( InstanceHandle hInstance, const nsWin32::DLGTEMPLATE* lpTemplate, COSWindow::refType WndParent, nsWin32::DLGPROC lpDialogFunc, Cmp_long_ptr lParamInit ) : m_User32Library( CUser32::Instance() ), m_UxTheme( CUXTheme::Instance() )
	,	m_DlgHandle( this, 0 )
	{
		_WINQ_FCONTEXT( "CDialog::CDialog" );
		m_pDialogFunc = lpDialogFunc;
		m_dwInitParam = lParamInit;
		m_bEnded = false;
		__QOR_PROTECT
		{
			m_DlgHandle = ( m_User32Library.CreateDialogIndirectParam( reinterpret_cast< ::HINSTANCE >( hInstance ), reinterpret_cast< ::LPCDLGTEMPLATE >( lpTemplate ), reinterpret_cast< ::HWND >( WndParent->Handle()->Use() ), (::DLGPROC)&CDialog::StaticCallback, reinterpret_cast< LPARAM >( this ) ) );
			Init();
		}__QOR_ENDPROTECT
	}

__QCMP_WARNING_POP

	//--------------------------------------------------------------------------------
	Cmp_long_ptr CDialog::DefaultProc( unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CDialog::DefaultProc" );
		LRESULT Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.DefDlgProc( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), Msg, wParam, lParam );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	Cmp_int_ptr __QCMP_STDCALLCONVENTION CDialog::StaticCallback( void* phwndDlg, unsigned int uMsg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{
		_WINQ_SFCONTEXT( "CDialog::StaticCallback" );
		INT_PTR iResult = 0;
		__QOR_PROTECT
		{

			CDialogHandle DlgHandle( 0, phwndDlg );

			if( p_tDialogHandleMap != 0 )
			{
				refType DlgRef = p_tDialogHandleMap->FindHandle( DlgHandle.Ref() );
				
				if( DlgRef.IsNull() )
				{
					CDialog* pDialog = p_tDialogHandleMap->Pending();

					if( pDialog )
					{
						(*pDialog->Handle()) = phwndDlg;
						p_tDialogHandleMap->Add( pDialog->Handle()->Ref(), pDialog );
						DlgRef = refType( pDialog, false );
					}
				}

				if( !DlgRef.IsNull() )
				{
					DlgRef->InstanceCallback( uMsg, wParam );
				}
			}
						
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_int_ptr CDialog::InstanceCallback( unsigned int uMsg, Cmp_uint_ptr wParam )
	{
		_WINQ_FCONTEXT( "CDialog::InstanceCallback" );
		INT_PTR iResult = 0;
		__QOR_PROTECT
		{
			if( m_pDialogFunc != 0 )
			{
				iResult = (m_pDialogFunc)( this, uMsg, wParam, m_dwInitParam );
			}
			else
			{
				iResult = DefaultProc( uMsg, wParam, m_dwInitParam );
			}
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_int_ptr CDialog::Run( InstanceHandle hInstance, const nsWin32::DLGTEMPLATE* hDialogTemplate, COSWindow::refType WndParent, nsWin32::DLGPROC lpDialogFunc, Cmp_long_ptr dwInitParam )
	{
		_WINQ_FCONTEXT( "CDialog::Run" );
		m_pDialogFunc = lpDialogFunc;
		m_dwInitParam = dwInitParam;
		INT_PTR Result = 0;
		m_bEnded = false;
		__QOR_PROTECT
		{
			if( p_tDialogHandleMap == 0 )
			{
				p_tDialogHandleMap = new CDialogHandleMap;
			}
			p_tDialogHandleMap->PendingAdd( this );
			Result = m_User32Library.DialogBoxIndirectParam( reinterpret_cast< ::HINSTANCE >( hInstance ), reinterpret_cast< ::LPCDLGTEMPLATE >( hDialogTemplate ), WndParent.IsNull() ? 0 : reinterpret_cast< ::HWND >( WndParent->Handle()->Use() ), (::DLGPROC)&CDialog::StaticCallback, reinterpret_cast< LPARAM >( this ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	Cmp_int_ptr CDialog::Run( InstanceHandle hInstance, const TCHAR* lpTemplateName, COSWindow::refType WndParent, nsWin32::DLGPROC lpDialogFunc, Cmp_long_ptr dwInitParam )
	{
		_WINQ_FCONTEXT( "CDialog::Run" );
		m_pDialogFunc = lpDialogFunc;
		m_dwInitParam = dwInitParam;
		INT_PTR Result = 0;
		m_bEnded = false;
		__QOR_PROTECT
		{
			if( p_tDialogHandleMap == 0 )
			{
				p_tDialogHandleMap = new CDialogHandleMap;
			}
			p_tDialogHandleMap->PendingAdd( this );
			Result = m_User32Library.DialogBoxParam ( reinterpret_cast< ::HINSTANCE >( hInstance ), lpTemplateName, WndParent.IsNull() ? 0 : reinterpret_cast< ::HWND >( WndParent->Handle()->Use() ), (::DLGPROC)&CDialog::StaticCallback, reinterpret_cast< LPARAM >( this ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	long CDialog::GetBaseUnits()
	{	
		_WINQ_FCONTEXT( "CDialog::GetBaseUnits" );
		LONG Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.GetDialogBaseUnits();
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	int CDialog::GetCtrlID( COSWindow::refType WndCtl )
	{
		_WINQ_FCONTEXT( "CDialog::GetCtrlID" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.GetDlgCtrlID( reinterpret_cast< ::HWND >( WndCtl->Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CDialog::GetItem( int nIDDlgItem )
	{
		_WINQ_FCONTEXT( "CDialog::GetItem" );
		__QOR_PROTECT
		{
			return COSWindow::FromHandle( CWindowHandle( 0, (void*)(m_User32Library.GetDlgItem( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), nIDDlgItem )) ).Ref() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	unsigned int CDialog::GetItemInt( int nIDDlgItem, int* lpTranslated, bool bSigned )
	{
		_WINQ_FCONTEXT( "CDialog::GetItemInt" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.GetDlgItemInt( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), nIDDlgItem, lpTranslated, bSigned ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CDialog::GetItemText( int nIDDlgItem, TCHAR* lpString, int nMaxCount )
	{
		_WINQ_FCONTEXT( "CDialog::GetItemText" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.GetDlgItemText( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), nIDDlgItem, lpString, nMaxCount );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CDialog::GetNextGroupItem( COSWindow::refType Ctl, bool bPrevious )
	{
		_WINQ_FCONTEXT( "CDialog::GetNextGroupItem" );
		__QOR_PROTECT
		{
			return COSWindow::FromHandle( CWindowHandle( 0, (void*)(m_User32Library.GetNextDlgGroupItem( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), reinterpret_cast< ::HWND >( Ctl->Handle()->Use() ), bPrevious ? TRUE : FALSE )) ).Ref() );			
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CDialog::GetNextTabItem( COSWindow::refType Ctl, bool bPrevious )
	{
		_WINQ_FCONTEXT( "CDialog::GetNextTabItem" );
		__QOR_PROTECT
		{
			return COSWindow::FromHandle( CWindowHandle( 0, (void*)(m_User32Library.GetNextDlgTabItem( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), reinterpret_cast< ::HWND >( Ctl->Handle()->Use() ), bPrevious ? TRUE : FALSE ) )).Ref() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CDialog::IsDialogMessageT( nsWin32::LPMSG lpMsg )
	{
		_WINQ_FCONTEXT( "CDialog::IsDialogMessageT" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsDialogMessage( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), reinterpret_cast< ::LPMSG >( lpMsg ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDialog::MapRect( CRectangle* pRect )
	{
		_WINQ_FCONTEXT( "CDialog::MapRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.MapDialogRect( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), reinterpret_cast< ::LPRECT >( pRect ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	Cmp_long_ptr CDialog::SendItemMessage( int nIDDlgItem, unsigned int Msg, Cmp_uint_ptr wParam, Cmp_long_ptr lParam )
	{	
		_WINQ_FCONTEXT( "CDialog::SendItemMessage" );
		LRESULT lResult = 0;
		__QOR_PROTECT
		{
			lResult = m_User32Library.SendDlgItemMessage( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), nIDDlgItem, Msg, wParam, lParam );
		}__QOR_ENDPROTECT
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CDialog::SetItemInt( int nIDDlgItem, unsigned int uValue, bool bSigned )
	{
		_WINQ_FCONTEXT( "CDialog::SetItemInt" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.SetDlgItemInt( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), nIDDlgItem, uValue, bSigned ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CDialog::DirList( TCHAR* lpPathSpec, int nIDListBox, int nIDStaticPath, unsigned int uFileType )
	{
		_WINQ_FCONTEXT( "CDialog::DirList" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.DlgDirList( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), lpPathSpec, nIDListBox, nIDStaticPath, uFileType );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CDialog::DirSelect( TCHAR* lpString, int nCount, int nIDListBox )
	{
		_WINQ_FCONTEXT( "CDialog::DirSelect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DlgDirSelectEx( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), lpString, nCount, nIDListBox ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CDialog::DirListComboBox( TCHAR* lpPathSpec, int nIDComboBox, int nIDStaticPath, unsigned int uFiletype )
	{
		_WINQ_FCONTEXT( "CDialog::DirListComboBox" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.DlgDirListComboBox( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), lpPathSpec, nIDComboBox, nIDStaticPath, uFiletype );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CDialog::DirSelectComboBox( TCHAR* lpString, int nCount, int nIDComboBox )
	{
		_WINQ_FCONTEXT( "CDialog::DirSelectComboBox" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.DlgDirSelectComboBoxEx( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), lpString, nCount, nIDComboBox ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDialog::CheckButton( int nIDButton, unsigned int uCheck )
	{
		_WINQ_FCONTEXT( "CDialog::CheckButton" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.CheckDlgButton( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), nIDButton, uCheck ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDialog::CheckRadioButton( int nIDFirstButton, int nIDLastButton, int nIDCheckButton )
	{
		_WINQ_FCONTEXT( "CDialog::CheckRadioButton" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.CheckRadioButton( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), nIDFirstButton, nIDLastButton, nIDCheckButton ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CDialog::IsButtonChecked( int nIDButton )
	{
		_WINQ_FCONTEXT( "CDialog::IsButtonChecked" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.IsDlgButtonChecked( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), nIDButton );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	CDialogHandle::refType CDialog::Handle()
	{
		_WINQ_FCONTEXT( "CDialog::Handle" );
		return m_DlgHandle.Ref();
	}

	//--------------------------------------------------------------------------------
	CDialog::refType CDialog::FromHandle( CDialogHandle::refType hWnd )
	{
		_WINQ_SFCONTEXT( "CDialog::FromHandle" );
		CDialog* pDialog = 0;
		bool bOwningRef = false;
		__QOR_PROTECT
		{
			pDialog = hWnd->Object< CDialog >();

			if( pDialog == 0 && p_tDialogHandleMap != 0 )
			{
				pDialog = p_tDialogHandleMap->FindHandle( hWnd );
			}

			if( pDialog == 0 )
			{
				pDialog = new CDialog( hWnd );
				bOwningRef = true;
			}
		}__QOR_ENDPROTECT
		return refType( pDialog, bOwningRef );
	}

	//--------------------------------------------------------------------------------
	bool CDialog::End( Cmp_int_ptr nResult )
	{
		_WINQ_FCONTEXT( "CDialog::End" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.EndDialog( reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), nResult ) ? true : false;
			m_bEnded = bResult;
			Uninit();
			m_DlgHandle.AsHandle().Drop();
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDialog::IsEnded()
	{
		return m_bEnded;
	}

	//--------------------------------------------------------------------------------
	long CDialog::EnableThemeTexture( unsigned long dwFlags )
	{
		long lResult = m_UxTheme.EnableThemeDialogTexture( 
			reinterpret_cast< ::HWND >( m_DlgHandle.Use() ), dwFlags );
		return lResult;
	}

	//--------------------------------------------------------------------------------
	bool CDialog::IsThemeTextureEnabled( void )
	{
		bool bResult = m_UxTheme.IsThemeDialogTextureEnabled( 
			reinterpret_cast< ::HWND >( m_DlgHandle.Use() ) ) ? true : false;
		return bResult;
	}

	//--------------------------------------------------------------------------------
	//Protected destructor to prevent deletion out of line with Dlg Window destruction
	CDialog::~CDialog()
	{
		_WINQ_FCONTEXT( "CDialog::~CDialog" );			
		m_bEnded = true;
	}

	//--------------------------------------------------------------------------------
	void CDialog::Uninit()
	{
		_WINQ_FCONTEXT( "CDialog::Uninit" );

		CDialogHandleMap* pMap = p_tDialogHandleMap;

		if( pMap && !( m_DlgHandle.IsNull() ) )
		{
			pMap->Remove( m_DlgHandle.Ref() );
		}
	}

	//--------------------------------------------------------------------------------
	void CDialog::Init()
	{
		_WINQ_FCONTEXT( "CDialog::Init" );

		CDialogHandleMap* pMap = p_tDialogHandleMap;

		if( pMap == 0 )
		{
			pMap = new CDialogHandleMap;
		}

		if( !( m_DlgHandle.IsNull() ) )
		{
			pMap->Add( m_DlgHandle.Ref(), this );
		}

		if( p_tDialogHandleMap == 0 )
		{
			p_tDialogHandleMap = pMap;
		}
	}

}//nsWin32
