//WinQLNCController.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/GUI/Controllers/Parts/NCController.h"
#include "WinQL/GUI/Window.h"
__QCMP_WARNING_POP

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_LUID( CNCController );

	//--------------------------------------------------------------------------------
	CNCController::CNCController( nsMammut::CModel* pModelItem, nsQOR::CController::ref_type Parent ) : CBaseWindowPartController( pModelItem, Parent )
	{
		_WINQ_FCONTEXT( "CNCController::CNCController" );
	}

	//--------------------------------------------------------------------------------
	CNCController::~CNCController()
	{
		_WINQ_FCONTEXT( "CNCController::~CNCController" );
	}

	//--------------------------------------------------------------------------------
	void CNCController::SetModel( nsMammut::CModel* pModelItem )
	{
		_WINQ_FCONTEXT( "CNCController::SetModel" );
		NCRenderer().SetModel( pModelItem );
		CController::SetModel( pModelItem );
	}

	//--------------------------------------------------------------------------------
	bool CNCController::ProcessMessage( COSWindow& Window, Cmp_long_ptr& lResult, unsigned int uMsg, Cmp_uint_ptr Cmp_uint_ptr, Cmp_long_ptr Cmp_long_ptr )
	{
		_WINQ_FCONTEXT( "CNCController::ProcessMessage" );

		bool bProcessed = ProcessHook( Window, lResult, uMsg, Cmp_uint_ptr, Cmp_long_ptr );

        if( bProcessed )
        {
            return true;
        }

		switch ( uMsg )
		{
		case COSWindow::wmNCCreate:
			{
				OnNCCreate( Window, lResult, Cmp_uint_ptr, Cmp_long_ptr );
				bProcessed = true;
			}
			break;

		case COSWindow::wmNCActivate:
			{
				OnNCActivate( Window, lResult, Cmp_uint_ptr, Cmp_long_ptr );
				bProcessed = true;
			}
			break;

		case COSWindow::wmNCDestroy:
			{
				OnNCDestroy( Window, lResult, Cmp_uint_ptr, Cmp_long_ptr );
				bProcessed = false;//The top level window must see this to clean up
			}
			break;
		}

		return bProcessed;
	}

	//--------------------------------------------------------------------------------
	void CNCController::OnNCCreate( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr Cmp_uint_ptr, Cmp_long_ptr Cmp_long_ptr )
	{
		_WINQ_FCONTEXT( "CNCController::OnNCCreate" );
		lResult = Window.DefProc( COSWindow::wmNCCreate, Cmp_uint_ptr, Cmp_long_ptr );
	}

	//--------------------------------------------------------------------------------
	void CNCController::OnNCActivate( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr Cmp_uint_ptr, Cmp_long_ptr Cmp_long_ptr )
	{						
		_WINQ_FCONTEXT( "CNCController::OnNCActivate" );
		lResult = Window.DefProc( COSWindow::wmNCActivate, Cmp_uint_ptr, Cmp_long_ptr );			
	}

	//--------------------------------------------------------------------------------
	void CNCController::OnNCDestroy( COSWindow& Window, Cmp_long_ptr& lResult, Cmp_uint_ptr Cmp_uint_ptr, Cmp_long_ptr Cmp_long_ptr )
	{			
		_WINQ_FCONTEXT( "CNCController::OnNCDestroy" );
		lResult = Window.DefProc( COSWindow::wmNCDestroy, Cmp_uint_ptr, Cmp_long_ptr );	
	}

}//nsWin32


