//PosumStream.h

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Posum Stream object

#ifndef POSUMQOR_STREAM_H_3
#define POSUMQOR_STREAM_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include <stdio.h>
#include "CodeQOR/DataStructures/TCRef.h"

//--------------------------------------------------------------------------------
namespace nsPosum
{
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __POSUMQOR ) CStream
	{
		friend class nsCodeQOR::CTCRef< CStream >;

	public:

		typedef nsCodeQOR::CTCRef< CStream > refType;

		CStream( int fd );
		CStream( FILE* pFile );
		virtual ~CStream();
		CStream& operator = ( const CStream& src );
		FILE* GetFILE( void );

		//--------------------------------------------------------------------------------
		refType Ref( void )
		{
			return refType( this );
		}

		static refType _stdin( void );
		static refType _stdout( void );
		static refType _stderr( void );
		static refType fopen( const char* filename, const char* mode );
		static refType fdopen( int, const char* );
		static refType _fdopen( int fd, const char* mode );
		static refType fmemopen( void*, size_t, const char* );
		static errno_t fopen_s( refType& ppFile, const char* szFilename, const char* szMode );
		virtual refType freopen( const char* filename, const char* mode );
		errno_t freopen_s( refType& ppFile, const char* szFilename, const char* szMode );
		static refType open_memstream( char**, size_t* );
		static refType popen( const char*, const char* );
		static refType _popen( const char* command, const char* mode );
		static refType tmpfile( void );
		static errno_t tmpfile_s( refType& ppFile );
		static refType _fsopen( const char* filename, const char* mode, int shflag );
		static refType open_wmemstream( wchar_t**, size_t* );
		static refType _wpopen( const wchar_t* pCommand, const wchar_t* pMode );
		static refType _wfsopen( const wchar_t* pFilename, const wchar_t* pMode );
		refType _wfreopen( const wchar_t* pFilename, const wchar_t* pMode );
		errno_t _wfreopen_s( refType& pFile, const wchar_t* pFilename, const wchar_t* pMode );
		static refType _wfopen( const wchar_t* pFilename, const wchar_t* pMode );
		static errno_t _wfopen_s( refType& ppFile, const wchar_t* pFilename, const wchar_t* pMode );

		virtual void clearerr( void );
		virtual errno_t clearerr_s( void );
		virtual int fclose( void );
		virtual int feof( void );
		virtual int ferror( void );
		virtual int fflush( void );
		virtual int fgetc( void );
		virtual int fgetpos( fpos_t* pos );
		virtual char* fgets( char* s, int n );
		virtual int fileno( void );
		virtual int _fileno( void );
		virtual void flockfile( void );
		virtual int fprintf( const char* format, ... );
		virtual int fprintf_s( const char* format, ... );
		virtual int fputc( int c );
		virtual int fputs( const char* s );
		virtual size_t fread( void* ptr, size_t size, size_t nmemb );
		virtual size_t fread_s( void* ptr, size_t DstSize, size_t ElementSize, size_t Count );		
		virtual void rewind( void );
		virtual int fscanf( const char* format, ... );
		virtual int fscanf_s( const char* format, ... );
		virtual int fseek( long int offset, int whence );
		virtual int fseeko( off_t, int );
		virtual void setbuf( char* buf );
		virtual int setvbuf( char* buf, int mode, size_t size );
		virtual int fsetpos( const fpos_t* pos );
		virtual long int ftell( void );
		virtual off_t ftello( void );
		virtual int ftrylockfile( void );
		virtual void funlockfile( void );
		virtual size_t fwrite( const void* ptr, size_t size, size_t nmemb );
		virtual int getc( void );
		virtual int getc_unlocked( void );
		virtual ssize_t getdelim( char**, size_t*, int );
		virtual ssize_t getline( char**, size_t* );
		virtual int pclose( void );
		virtual int putc( int c );
		virtual int putc_unlocked( int );
		virtual int ungetc( int c );
		virtual int vfprintf( const char* format, va_list arg );
		virtual int vfprintf_s( const char* format, va_list arg );
		virtual int vfscanf( const char* format, va_list arg );
		virtual int _putw( int binint );
		virtual int _getw( void );
		virtual int _fwprintf_l( const wchar_t* format, locale_t locale, ... );
		virtual int _fwprintf_p( const wchar_t* format, ...);
		virtual int _fwprintf_p_l( const wchar_t* format, locale_t locale, ... );
		virtual int _fwprintf_s_l( const wchar_t* format, locale_t locale, ... );
		virtual int _fwscanf_l( const wchar_t* format, locale_t locale, ... );
		virtual int _fwscanf_s_l( const wchar_t* format, locale_t locale, ... );
		virtual int _fscanf_l( const char* format, locale_t locale, ... );
		virtual int _fscanf_s_l( const char* format, locale_t locale, ... );
		virtual int _fseeki64( Cmp__int64 offset, int origin );
		virtual int _fprintf_l( const char* format, locale_t locale, ... );
		virtual int _fprintf_p( const char* format, ... );
		virtual int _fprintf_p_l( const char* format, locale_t locale, ... );
		virtual int _fprintf_s_l( const char* format, locale_t locale, ... );
		virtual wint_t fgetwc();
		virtual wchar_t* fgetws( wchar_t* s, int n );
		virtual wint_t fputwc( wchar_t c );
		virtual int fputws( const wchar_t* s );
		virtual int fwide( int mode );
		virtual int fwprintf( const wchar_t* format, ... );
		virtual int fwscanf( const wchar_t* format, ... );
		virtual wint_t getwc();		
		virtual wint_t putwc( wchar_t c );
		virtual wint_t ungetwc( wint_t c );
		virtual int vfwprintf( const wchar_t* format, va_list arg );
		virtual int vfwscanf( const wchar_t* format, va_list arg );
		virtual int fwprintf_s( const wchar_t* format, ... );
		virtual int fwscanf_s( const wchar_t* format, ... );
		virtual int vfwprintf_s( const wchar_t* format, va_list arg );
		virtual int _vfprintf_l( const char* format, locale_t locale, va_list argptr );
		virtual int _vfprintf_p( const char* format, va_list argptr );
		virtual int _vfprintf_p_l( const char* format, locale_t locale, va_list argptr );
		virtual int _vfprintf_s_l( const char* format, locale_t locale, va_list argptr );
		virtual int _vfwprintf_l( const wchar_t* format, locale_t locale, va_list argptr );
		virtual int _vfwprintf_p( const wchar_t* format, va_list argptr );
		virtual int _vfwprintf_p_l( const wchar_t* format, locale_t locale, va_list argptr );
		virtual int _vfwprintf_s_l( const wchar_t* format, locale_t locale, va_list argptr );
		
	private:

		void AddRef( void );
		void Release( void );

		FILE* m_pFILE;
	};

}//nsPosum

#endif//POSUMQOR_STREAM_H_3
