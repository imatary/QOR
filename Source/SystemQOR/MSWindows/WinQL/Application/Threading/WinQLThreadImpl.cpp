//WinQLThreadImpl.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Microsoft Windows compatible implementation of generic Thread class

#include "WinQL/WinQL.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "SystemQOR.h"
#include "WinQL/Application/Threading/WinQLThreadImpl.h"
#include "CodeQOR/Modules/ProcessBase.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	/*
	//--------------------------------------------------------------------------------
	CThreadImpl::CThreadImpl()
	{

	}

	//--------------------------------------------------------------------------------
	CThreadImpl::~CThreadImpl()
	{
	}

#if     ( ( __QCMP_COMPILER != __QCMP_MSVC ) && ( __QCMP_COMPILER != __QCMP_INTEL ) )
	//--------------------------------------------------------------------------------
	void* CThreadImpl::CurrentException( void )
	{
		return 0;
	}
#else
	//--------------------------------------------------------------------------------
	nsCompiler::EH::ExceptData& CThreadImpl::CurrentException( void )
	{
		return m_ExceptData;
	}
#endif//( __QCMP_COMPILER != __QCMP_MSVC )

	//--------------------------------------------------------------------------------
	int& CThreadImpl::ProcessingThrow()
	{
		return m_iProcessingThrow;
	}

	//--------------------------------------------------------------------------------
	void*& CThreadImpl::FrameInfoChain()
	{
		return m_pFrameInfoChain;
	}
	*/
}//nsWin32



