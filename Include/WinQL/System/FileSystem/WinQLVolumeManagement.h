//WinQLVolumeManagement.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_FILESYSTEM_VOLUMEMANAGEMENT_H_3
#define WINQL_FILESYSTEM_VOLUMEMANAGEMENT_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/CodeServices/Handles/WinQLRAIISessionHandle.h"
#include "WinQL/System/FileSystem/WinQLVolume.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	class __QOR_INTERFACE( __WINQL ) CFile;

	//--------------------------------------------------------------------------------
	//Stateless helper for DOS Device functions
	class __QOR_INTERFACE( __WINQL ) CDosDeviceHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CDosDeviceHelper );

		CDosDeviceHelper();
		CDosDeviceHelper( const CDosDeviceHelper& src );
		CDosDeviceHelper& operator = ( const CDosDeviceHelper& src );
		~CDosDeviceHelper();
		bool Define( unsigned long dwFlags, const TCHAR* lpDeviceName, const TCHAR* lpTargetPath );
		unsigned long Query( const TCHAR* lpDeviceName, CTString& strTargetPath );
	};

	//--------------------------------------------------------------------------------
	//Stateless helper for Drive functions
	class __QOR_INTERFACE( __WINQL ) CDriveHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CDriveHelper );

		CDriveHelper();
		CDriveHelper( const CDriveHelper& );
		CDriveHelper& operator = ( const CDriveHelper& src );
		~CDriveHelper();
		unsigned int GetType( const CTString& strRootPathName );
		unsigned long GetDrives();
		unsigned long GetDriveCount();
		unsigned long GetDriveStrings( CTStringRef strBuffer );
		unsigned long GetDriveList( nsCodeQOR::CTLinkedList< CTString >& ListDriveStrings );
	};

	//--------------------------------------------------------------------------------
	//Stateless helper for Mount Point functions
	class __QOR_INTERFACE( __WINQL ) CMountPointHelper
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CMountPointHelper );

		CMountPointHelper();
		CMountPointHelper( const CMountPointHelper& );
		CMountPointHelper& operator = ( const CMountPointHelper& src );
		~CMountPointHelper();
		bool Delete( const TCHAR* lpszVolumeMountPoint );
		bool Set( const TCHAR* lpszVolumeMountPoint, const TCHAR* lpszVolumeName );
		bool GetVolumeName( const TCHAR* lpszVolumeMountPoint, CTStringRef strVolumeName );
	};

	//--------------------------------------------------------------------------------
	//Session class which iterates over Volumes
	class __QOR_INTERFACE( __WINQL ) CFindVolume
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CFindVolume );

		CFindVolume();
		virtual ~CFindVolume();
		bool Next();
		CVolume::ref_type Volume(void);

	protected:

		CRAIISessionHandle m_Handle;
		CTString m_strVolume;

	private:

		CFindVolume( const CFindVolume& );
		CFindVolume& operator = ( const CFindVolume& );
	};

	//--------------------------------------------------------------------------------
	//Session class which iterates over Mount Points
	class __QOR_INTERFACE( __WINQL ) CFindMountPoint
	{			
	public:

		__QOR_DECLARE_OCLASS_ID( CFindMountPoint );

		CFindMountPoint( const CTString& strRootPathName );
		virtual ~CFindMountPoint();
		bool Next();
		CTString MountPoint(void);
		bool IsValid(void);

	protected:

		CTString m_strVolumeMountPoint;
		CRAIISessionHandle m_Handle;
		unsigned long m_ulStatus;

	private:

		CFindMountPoint();
		CFindMountPoint( const CFindMountPoint& );
		CFindMountPoint& operator = ( const CFindMountPoint& );
	};

}//nsWin32

#endif//WINQL_FILESYSTEM_VOLUMEMANAGEMENT_H_3
