//SocketSource.cpp

// Copyright Querysoft Limited 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implementation of Socket based Bluefoot Source

#include "BluefootQOR/Sources/SocketSource.h"
#include <iostream>

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID(CSocketSource);
	//------------------------------------------------------------------------------
	CSocketSource::CSocketSource(CSocketConnector* pSocketConnector) : CIOSource(pSocketConnector)
	{
		__QCS_MEMBER_FCONTEXT("CSocketSource::CSocketSouce");
	}

	//------------------------------------------------------------------------------
	CSocketSource::~CSocketSource()
	{
		__QCS_MEMBER_FCONTEXT("CSocketSource::~CSocketSouce");
	}

	//------------------------------------------------------------------------------
	bool CSocketSource::Read(unsigned long& ulNumberOfUnitsRead, unsigned long ulNumberOfUnitsToRead)
	{
		__QCS_MEMBER_FCONTEXT("CSocketSource::Read");
		bool bResult = false;
		CSocketConnector* pConnector = dynamic_cast< CSocketConnector* >(m_pIOSourceConnector);
		if (pConnector && pConnector->IsConnected())
		{
			byte* pBuffer = GetBuffer()->WriteRequest(ulNumberOfUnitsToRead);

			if (pConnector->AsyncConnection())
			{
				bResult = pConnector->Socket()->AsyncReceive((char*)pBuffer, ulNumberOfUnitsToRead * GetBuffer()->GetUnitSize(), pConnector->GetSyncObject()) ? true : false;
				ulNumberOfUnitsRead = 0;

				if (!bResult)
				{
					OnReadError(pConnector->Socket()->GetLastError(), ulNumberOfUnitsRead);
				}
			}
			else
			{
				if (pConnector->Socket()->Receive((char*)pBuffer, ulNumberOfUnitsToRead * GetBuffer()->GetUnitSize(), 0) > 0)
				{
					ulNumberOfUnitsRead = ulNumberOfUnitsToRead;
					GetBuffer()->WriteAcknowledge(ulNumberOfUnitsRead);
					bResult = true;
				}

				if (bResult && ulNumberOfUnitsRead == 0)
				{
					OnEndOfData();
				}
				else
				{
					if (bResult)
					{
						OnReadSuccess(ulNumberOfUnitsRead);
					}
					else
					{
						OnReadError(pConnector->Socket()->GetLastError(), ulNumberOfUnitsRead);
					}
				}
			}
		}
		return bResult;
	}

	//------------------------------------------------------------------------------
	bool CSocketSource::IsAtEnd(void)
	{
		__QCS_MEMBER_FCONTEXT("CSocketSource::IsAtEnd");
		bool bResult = false;
		return bResult;
	}

}//nsBluefoot

