//WinQLMouse.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/System/Devices/Mouse/WinQLMouse.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_GUID( CMouse, 0x378de44c, 0x56ef, 0x11d1, 0xbc, 0x8c, 0x00, 0xa0, 0xc9, 0x14, 0x05, 0xdd );

	nsCodeQOR::CTExternalRegEntry< CMouse > CMouse::RegEntry;

	//--------------------------------------------------------------------------------
	CMouse::CMouse() : m_Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CMouse::CMouse" );
	}

	//--------------------------------------------------------------------------------
	CMouse::~CMouse()
	{
		_WINQ_FCONTEXT( "CMouse::~CMouse" );
	}
		
	//--------------------------------------------------------------------------------
	bool CMouse::DragDetect( COSWindow::refType Wnd, nsWin32::POINT pt )
	{				
		_WINQ_FCONTEXT( "CMouse::DragDetect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Library.DragDetect( reinterpret_cast< ::HWND >( Wnd->Handle()->Use() ), *( reinterpret_cast< ::POINT* >( &pt ) ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CMouse::GetCapture()
	{
		_WINQ_FCONTEXT( "CMouse::GetCapture" );
		__QOR_PROTECT
		{
			return COSWindow::FromHandle( CWindowHandle( 0, (void*)( m_Library.GetCapture() ) ).Ref() );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	unsigned int CMouse::GetDoubleClickTime()
	{
		_WINQ_FCONTEXT( "CMouse::GetDoubleClickTime" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_Library.GetDoubleClickTime();
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CMouse::GetMovePointsEx( unsigned int cbSize, nsWin32::LPMOUSEMOVEPOINT lppt, nsWin32::LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, unsigned long resolution )
	{
		_WINQ_FCONTEXT( "CMouse::GetMovePointsEx" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_Library.GetMouseMovePointsEx( cbSize, reinterpret_cast< ::LPMOUSEMOVEPOINT >( lppt ), reinterpret_cast< ::LPMOUSEMOVEPOINT >( lpptBuf ), nBufPoints, resolution );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	void CMouse::event( unsigned long dwFlags, unsigned long dx, unsigned long dy, unsigned long dwData, Cmp_ulong_ptr dwExtraInfo )
	{
		_WINQ_FCONTEXT( "CMouse::event" );
		__QOR_PROTECT
		{
			m_Library.mouse_event( dwFlags, dx, dy, dwData, dwExtraInfo );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CMouse::ReleaseCapture()
	{				
		_WINQ_FCONTEXT( "CMouse::ReleaseCapture" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Library.ReleaseCapture() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CMouse::SetCapture( COSWindow::refType Wnd )
	{				
		_WINQ_FCONTEXT( "CMouse::SetCapture" );
		
		__QOR_PROTECT
		{
			return COSWindow::FromHandle( CWindowHandle( 0, (void*)( m_Library.SetCapture( reinterpret_cast< ::HWND >( Wnd->Handle()->Use() ) ) ) ).Ref() );
		}__QOR_ENDPROTECT
		
	}

	//--------------------------------------------------------------------------------
	bool CMouse::SetDoubleClickTime( unsigned int uInterval )
	{				
		_WINQ_FCONTEXT( "CMouse::SetDoubleClickTime" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Library.SetDoubleClickTime( uInterval ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMouse::SwapButton( bool fSwap )
	{
		_WINQ_FCONTEXT( "CMouse::SwapButton" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Library.SwapMouseButton( fSwap ? TRUE : FALSE ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CMouse::TrackEvent( nsWin32::LPTRACKMOUSEEVENT lpEventTrack )
	{
		_WINQ_FCONTEXT( "CMouse::TrackEvent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_Library.TrackMouseEvent( reinterpret_cast< ::LPTRACKMOUSEEVENT >( lpEventTrack ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
