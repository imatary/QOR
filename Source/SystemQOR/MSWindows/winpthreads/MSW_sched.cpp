//MSW_sched.cpp

/*
   Copyright (c) 2011 mingw-w64 project

   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
   DEALINGS IN THE SOFTWARE.
*/

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"

#if		(QOR_SYS_OS == QOR_SYS_MSW)

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Application/ErrorSystem/WinQLErrorHandling.h"
#include "WinQL/Application/Process/WinQLProcess.h"
#include "WinQL/Application/Threading/WinQLThread.h"
#include "WinQL/Application/Process/WinQLProcessHelper.h"
#include "WinQL/CodeServices/Handles/WinQLHandle.h"
#include <errno.h>
#include <stdio.h>
#include "SystemQOR/MSWindows/types/pthread_types.h"
#include "SystemQOR/MSWindows/MSW_pthread.h"
#include "../Source/SystemQOR/MSWindows/Winpthreads/details/thread.h"
#include "../Source/SystemQOR/MSWindows/Winpthreads/details/misc.h"

//----------------------------------------------------------------------
namespace nsWin32
{
	//----------------------------------------------------------------------
	int sched_get_priority_min(int pol)
	{
		if( pol < SCHED_MIN || pol > SCHED_MAX ) 
		{
			errno = EINVAL;
			return -1;
		}

		return nsWin32::CThread::Thread_Priority_Idle;
	}

	//----------------------------------------------------------------------
	int sched_get_priority_max(int pol)
	{
		if (pol < SCHED_MIN || pol > SCHED_MAX) 
		{
			errno = EINVAL;
			return -1;
		}

		return nsWin32::CThread::Thread_Priority_Time_Critical;
	}

	//----------------------------------------------------------------------
	int Cpthread::attr_setschedparam( pthread_attr_t * attr, const sched_param* p )
	{
		int r = 0;

		if (attr == NULL || p == NULL) 
		{
			return EINVAL;
		}
		memcpy( &( attr->param ), p, sizeof(*p) );
		return r;
	}

	//----------------------------------------------------------------------
	int Cpthread::attr_getschedparam( const pthread_attr_t const * attr, sched_param* p )
	{
		int r = 0;

		if (attr == NULL || p == NULL) 
		{
			return EINVAL;
		}
		memcpy(p, &( attr->param ), sizeof (*p));
		return r;
	}

	//----------------------------------------------------------------------
	int Cpthread::check( pthread_t t )
	{
		_pthread_v* pv;
		unsigned long dwFlags;
		if( !t )
		{
			return ESRCH;
		}
		pv = __pth_gpointer_locked (t);

		if( !(pv->h) || pv->h->Handle() == Invalid_Handle_Value )
		{
			if( pv->ended == 0 )
			{
				return 0;
			}
			return ESRCH;
		}
		else //if( ( !GetHandleInformation( pv->h, &dwFlags ) && pv->ended ) )
		{			
			if( pv->h->Handle()->GetInformation( &dwFlags ) == 0 && pv->ended )
			{
				return ESRCH;
			}
		}
		return 0;
	}

	//----------------------------------------------------------------------
	int Cpthread::getschedparam( pthread_t t, int* pol, sched_param* p )
	{
		int r;
		//if (!t)
		//  t = pthread_self();

		if( (r = check( t ) ) != 0)
		{
			return r;
		}

		if (!p || !pol)
		{
			return EINVAL;
		}
		*pol = __pth_gpointer_locked (t)->sched_pol;
		p->sched_priority = __pth_gpointer_locked (t)->sched.sched_priority;

		return 0;
	}
	
	//----------------------------------------------------------------------
	int Cpthread::setschedparam( pthread_t t, int pol, const sched_param* p )
	{
		_pthread_v* pv;
		int r, pr = 0;
		//if (!t.p) t = pthread_self();

		if( ( r = check( t ) ) != 0 )
		{
			return r;
		}

		if( pol < SCHED_MIN || pol > SCHED_MAX || p == NULL )
		{
			return EINVAL;
		}

		if( pol != SCHED_OTHER )
		{
			return ENOTSUP;
		}

		pr = p->sched_priority;
		if( pr < sched_get_priority_min( pol ) || pr > sched_get_priority_max( pol ) )
		{
			return EINVAL;
		}

		/* See msdn: there are actually 7 priorities:
		THREAD_PRIORITY_IDLE    -      -15
		THREAD_PRIORITY_LOWEST          -2
		THREAD_PRIORITY_BELOW_NORMAL    -1
		THREAD_PRIORITY_NORMAL           0
		THREAD_PRIORITY_ABOVE_NORMAL     1
		THREAD_PRIORITY_HIGHEST          2
		THREAD_PRIORITY_TIME_CRITICAL   15
		*/
		if( pr <= nsWin32::CThread::Thread_Priority_Idle ) 
		{
			pr = nsWin32::CThread::Thread_Priority_Idle;
		} 
		else if( pr <= nsWin32::CThread::Thread_Priority_Lowest ) 
		{
			pr = nsWin32::CThread::Thread_Priority_Lowest;
		} 
		else if( pr >= nsWin32::CThread::Thread_Priority_Time_Critical ) 
		{
			pr = nsWin32::CThread::Thread_Priority_Time_Critical;
		} 
		else if( pr >= nsWin32::CThread::Thread_Priority_Highest ) 
		{
			pr = nsWin32::CThread::Thread_Priority_Highest;
		}

		pv = __pth_gpointer_locked (t);
		if( pv->h->SetPriority( pr ) ) 
		{
			pv->sched_pol = pol;
			pv->sched.sched_priority = p->sched_priority;
		} 
		else
		{
			r = EINVAL;
		}
		return r;
	}

	//----------------------------------------------------------------------
	int sched_getscheduler( pid_t pid )
	{
		if (pid != 0)
		{
			int selfPid = (int) nsWin32::CProcess::GetCurrentId();

			if( pid != (pid_t)selfPid )
			{
				nsWin32::CErrorHelper ErrorHelper;
				nsWin32::CRemoteProcess h( nsWin32::Process_Query_Information, 0, (unsigned long)pid );			
				errno = ( ErrorHelper.GetLastError() == ( 0xFF & nsWin32::ErrorAccessDenied ) ) ? EPERM : ESRCH;
				return -1;
			}
		}
		return SCHED_OTHER;
	}

	//----------------------------------------------------------------------
	int sched_setscheduler( pid_t pid, int pol )
	{
		if (pid != 0)
		{
			int selfPid = (int) nsWin32::CProcess::GetCurrentId();

			if( pid != (pid_t)selfPid )//&& ( h = OpenProcess( PROCESS_SET_INFORMATION, 0, (unsigned long) pid ) ) == NULL )
			{
				nsWin32::CErrorHelper ErrorHelper;
				nsWin32::CRemoteProcess h( nsWin32::Process_Set_Information, 0, (unsigned long)pid );
				errno = ( ErrorHelper.GetLastError() == ( 0xFF & nsWin32::ErrorAccessDenied ) ) ? EPERM : ESRCH;
				return -1;
			}
		}

	  if (pol != SCHED_OTHER)
	  {
		  errno = ENOSYS;
		  return -1;
	  }
	  return SCHED_OTHER;
	}

	//----------------------------------------------------------------------
	int sched_yield(void)
	{
		CThread::GetCurrent()->Sleep( 0 );
		return 0;
	}

	//----------------------------------------------------------------------
	int Cpthread::attr_setschedpolicy( pthread_attr_t* attr, int policy )
	{
		return ENOTSUP;
	}

	//----------------------------------------------------------------------
	int Cpthread::attr_getschedpolicy( const pthread_attr_t*, int* )
	{
		return ENOTSUP;
	}

}//nsWin32

#endif//(QOR_SYS_OS == QOR_SYS_MSW)
