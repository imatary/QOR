//WinQLClipboard.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/DataStructures/TLRef.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/System/Clipboard/WinQLClipboard.h"
__QCMP_WARNING_POP
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/User32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_LUID( CClipboardFormatHelper );

	//--------------------------------------------------------------------------------
	CClipboardFormatHelper::CClipboardFormatHelper() : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CClipboardFormatHelper::CClipboardFormatHelper" );
	}

	//--------------------------------------------------------------------------------
	CClipboardFormatHelper::~CClipboardFormatHelper()
	{
		_WINQ_FCONTEXT( "CClipboardFormatHelper::~CClipboardFormatHelper" );
	}

	//--------------------------------------------------------------------------------
	unsigned int CClipboardFormatHelper::Register( const TCHAR* lpszFormat )
	{
		_WINQ_FCONTEXT( "CClipboardFormatHelper::Register" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.RegisterClipboardFormat( lpszFormat );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	bool CClipboardFormatHelper::IsAvailable( unsigned int format )
	{
		_WINQ_FCONTEXT( "CClipboardFormatHelper::IsAvailable" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.IsClipboardFormatAvailable( format ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CClipboardFormatHelper::GetUpdated( unsigned int* lpuiFormats, unsigned int cFormats, unsigned int* pcFormatsOut )
	{
		_WINQ_FCONTEXT( "CClipboardFormatHelper::GetUpdated" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.GetUpdatedClipboardFormats( lpuiFormats, cFormats, pcFormatsOut ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CClipboardFormatHelper::GetPriority( unsigned int* paFormatPriorityList, int cFormats )
	{
		_WINQ_FCONTEXT( "CClipboardFormatHelper::GetPriority" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.GetPriorityClipboardFormat( paFormatPriorityList, cFormats );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CClipboardFormatHelper::GetName( unsigned int format, TCHAR* lpszFormatName, int cchMaxCount )
	{
		_WINQ_FCONTEXT( "CClipboardFormatHelper::GetPriority" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.GetClipboardFormatName( format, lpszFormatName, cchMaxCount );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CClipboardFormatHelper::Enum( unsigned int format )
	{
		_WINQ_FCONTEXT( "CClipboardFormatHelper::Enum" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_User32Library.EnumClipboardFormats( format );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CClipboardFormatHelper::Count()
	{
		_WINQ_FCONTEXT( "CClipboardFormatHelper::Count" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_User32Library.CountClipboardFormats();				
		}__QOR_ENDPROTECT
		return iResult;
	}

		//--Clipboard Format Listener-----------------------------------------------------

		__QOR_IMPLEMENT_OCLASS_LUID( CClipboardFormatHelper::CListener );

		//--------------------------------------------------------------------------------
		CClipboardFormatHelper::CListener::CListener( COSWindow& Wnd, int* pbResult ) : m_Wnd( Wnd ), m_User32Library( CUser32::Instance() )
		{
			_WINQ_FCONTEXT( "CClipboardFormatHelper::CListener::CListener" );
			__QOR_PROTECT
			{
				m_pResult = pbResult;
				BOOL bResult = m_User32Library.AddClipboardFormatListener( reinterpret_cast< ::HWND >( Wnd.Handle()->Use() ) );
				if( m_pResult != 0 )
				{
					*m_pResult = bResult;
				}
			}__QOR_ENDPROTECT
		}

		//--------------------------------------------------------------------------------
		CClipboardFormatHelper::CListener::~CListener()
		{
			_WINQ_FCONTEXT( "CClipboardFormatHelper::CListener::~CListener" );					
			__QOR_PROTECT
			{
				BOOL bResult = m_User32Library.RemoveClipboardFormatListener( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ) );
				if( m_pResult != 0 )
				{
					*m_pResult = bResult;
				}
			}__QOR_ENDPROTECT
		}


	//--Clipboard Helper--------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CClipboardHelper );

	//--------------------------------------------------------------------------------
	CClipboardHelper::CClipboardHelper() : m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CClipboardHelper::CClipboardHelper" );
	}

	//--------------------------------------------------------------------------------
	CClipboardHelper::~CClipboardHelper()
	{
		_WINQ_FCONTEXT( "CClipboardHelper::~CClipboardHelper" );
	}

	//--------------------------------------------------------------------------------
	unsigned long CClipboardHelper::GetSequenceNumber()
	{
		_WINQ_FCONTEXT( "CClipboardHelper::GetSequenceNumber" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_User32Library.GetClipboardSequenceNumber();				
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CClipboardHelper::GetViewer()
	{
		_WINQ_FCONTEXT( "CClipboardHelper::GetViewer" );
		__QOR_PROTECT
		{
			CWindowHandle WindowHandle( 0, (void*)( m_User32Library.GetClipboardViewer() ) );
			CWindowHandle::refType refHandle( &WindowHandle, false );
			return COSWindow::FromHandle( refHandle );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	COSWindow::refType CClipboardHelper::GetOpenClipboardWindow()
	{
		_WINQ_FCONTEXT( "CClipboardHelper::GetOpenClipboardWindow" );		
		__QOR_PROTECT
		{
			CWindowHandle WindowHandle( 0, (void*)( m_User32Library.GetOpenClipboardWindow() ) );
			CWindowHandle::refType refHandle( &WindowHandle, false );
			return COSWindow::FromHandle( refHandle );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CClipboardFormatHelper::refType CClipboardHelper::Format()
	{
		_WINQ_FCONTEXT( "CClipboardHelper::Format" );
		CClipboardFormatHelper::refType Result( &m_FormatHelper, false );
		return Result;
	}						


	//--Clipboard Session-------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CClipboardSession );

	//--------------------------------------------------------------------------------
	CClipboardSession::CClipboardSession( COSWindow& Wnd, int* pbResult ) : m_Wnd( Wnd ), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CClipboardSession::CClipboardSession" );
		__QOR_PROTECT
		{
			m_pResult = pbResult;
			BOOL bResult = m_User32Library.OpenClipboard( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ) );
			if( m_pResult != 0 )
			{
				*m_pResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CClipboardSession::~CClipboardSession()
	{
		_WINQ_FCONTEXT( "CClipboardSession::~CClipboardSession" );
		__QOR_PROTECT
		{
			BOOL bResult = m_User32Library.CloseClipboard();	
			if( m_pResult != 0 )
			{
				*m_pResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CClipboardSession::Empty()
	{
		_WINQ_FCONTEXT( "CClipboardSession::Empty" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_User32Library.EmptyClipboard() ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	void* CClipboardSession::GetData( unsigned int uFormat )
	{
		_WINQ_FCONTEXT( "CClipboardSession::GetData" );
		HANDLE Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.GetClipboardData( uFormat );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	void* CClipboardSession::SetData( unsigned int uFormat, void* hMem )
	{
		_WINQ_FCONTEXT( "CClipboardSession::SetData" );
		HANDLE Result = 0;
		__QOR_PROTECT
		{
			Result = m_User32Library.SetClipboardData( uFormat, hMem );
		}__QOR_ENDPROTECT
		return Result;
	}


	//--Clipboard Viewer Session------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CClipboardViewerSession );

	//--------------------------------------------------------------------------------
	CClipboardViewerSession::CClipboardViewerSession( COSWindow& Wnd, int* pbResult ) : m_Wnd( Wnd ), m_User32Library( CUser32::Instance() )
	{
		_WINQ_FCONTEXT( "CClipboardViewerSession::CClipboardViewerSession" );
		__QOR_PROTECT
		{
			m_pResult = pbResult;
			CWindowHandle WindowHandle( 0, (void*)m_User32Library.SetClipboardViewer( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ) ) );
			CWindowHandle::refType refHandle( &WindowHandle, 0 );
			m_Next = COSWindow::FromHandle( refHandle );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CClipboardViewerSession::~CClipboardViewerSession()
	{
		_WINQ_FCONTEXT( "CClipboardViewerSession::~CClipboardViewerSession" );				
		__QOR_PROTECT
		{
			BOOL bResult = m_User32Library.ChangeClipboardChain( reinterpret_cast< ::HWND >( m_Wnd.Handle()->Use() ), reinterpret_cast< ::HWND >( m_Next->Handle()->Use() ) );
			if( m_pResult != 0 )
			{
				*m_pResult = bResult;
			}
		}__QOR_ENDPROTECT				
	}


	//--Clipboard--------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CClipboard );

	//--Clipboard--------------------------------------------------------------------
	CClipboard::CClipboard()
	{
		_WINQ_FCONTEXT( "CClipboard::CClipboard" );
	}

	//------------------------------------------------------------------------------
	CClipboard::~CClipboard()
	{
		_WINQ_FCONTEXT( "CClipboard::~CClipboard" );
	}

	//------------------------------------------------------------------------------
	CClipboard::refType CClipboard::Ref( void )
	{
		_WINQ_FCONTEXT( "CClipboard::Ref" );
		return refType( this );
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CClipboardViewerSession > CClipboard::ViewerSession( COSWindow::refType refWindow )
	{
		_WINQ_FCONTEXT( "CClipboard::ViewerSession" );
		return nsCodeQOR::CTLRef< CClipboardViewerSession >( new CClipboardViewerSession( *refWindow ), true );
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CClipboardSession > CClipboard::Session( COSWindow::refType refWindow )
	{
		_WINQ_FCONTEXT( "CClipboard::Session" );
		return nsCodeQOR::CTLRef< CClipboardSession >( new CClipboardSession( *refWindow ), true );
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CClipboard::CFormatListener > CClipboard::Listener( COSWindow::refType refWindow )
	{
		_WINQ_FCONTEXT( "CCLipboard::Listener" );
		return nsCodeQOR::CTLRef< CClipboard::CFormatListener >( new CClipboardFormatHelper::CListener( *refWindow ), true );
	}

}//nsWin32
