//TRef.h

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef CODEQOR_DATASTRUCTS_TREF_H_1
#define CODEQOR_DATASTRUCTS_TREF_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/Traits/MemoryTraits.h"

#define _new_shared_ref( _T, _NAME ) nsCodeQOR::CTRef< _T > _NAME( (new nsCodeQOR::CTCSharedRef< _T >())->Ref() );

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	template< class T > class CTRef;

	//--------------------------------------------------------------------------------	
	template< class T > class CTCSharedRef
	{
		friend class CTRef< T >;

	public:

		//--------------------------------------------------------------------------------
		CTCSharedRef() : m_p( _new( T ) ), m_ulRefCount( 0 )
		{			
		}

		CTCSharedRef( const CTCSharedRef< T >& Src ) = delete;
		CTCSharedRef& operator = ( const CTCSharedRef< T >& Src ) = delete;

		//--------------------------------------------------------------------------------
		CTRef< T > Ref( void ) const
		{
			return CTRef< T >( this );
		}

		//--------------------------------------------------------------------------------
		~CTCSharedRef()
		{
			if( m_p )
			{				
				//Throw because the contained item still exists
			}
			m_p = 0;
		}

		//--------------------------------------------------------------------------------
		bool IsNull( void ) const
		{
			return m_p == 0;
		}

		//--------------------------------------------------------------------------------
		unsigned long AddRef( void ) const
		{
			return ++m_ulRefCount;
		}

		//--------------------------------------------------------------------------------
		unsigned long Release( void ) const
		{
			unsigned long ulResult = --m_ulRefCount;
			if( ulResult <= 0 )
			{
				delete m_p;
				m_p = 0;
			}
			return ulResult;
		}

	private:

		T* ptr( void ) const
		{
			return m_p;
		}

	protected:

		mutable T* m_p;
		mutable unsigned long m_ulRefCount;
	};

	//--------------------------------------------------------------------------------
	template< class T > class CTRef
	{
	public:

		//--------------------------------------------------------------------------------
		CTRef() : m_p( 0 )
		{
		}

		//--------------------------------------------------------------------------------
		CTRef( const CTCSharedRef<T>* pt ) : m_p( pt )
		{
			m_p->AddRef();
		}

		//--------------------------------------------------------------------------------
		CTRef( const CTRef< T >& Src )
		{
			m_p = Src.m_p;
			m_p->AddRef();
		}

		//--------------------------------------------------------------------------------
		CTRef& operator = ( const CTLRef< T >& Src )
		{
			Dispose();
			m_p = Src.m_p;
			m_p->AddRef();
			return *this;
		}

		//--------------------------------------------------------------------------------
		//Two references are equal if they refer to the same object
		bool operator == ( const CTRef< T >& Cmp ) const
		{
			return ( m_p == Cmp.m_p );
		}

		//--------------------------------------------------------------------------------
		operator T* ( void ) const
		{
			return m_p->ptr();
		}

		//--------------------------------------------------------------------------------
		T& operator() ( void ) const
		{
			if( m_p == nullptr )
			{
				//TODO Raise NULL reference excpetion
			}
			return *( m_p->ptr());
		}

		//--------------------------------------------------------------------------------
		T* operator -> () const
		{
			if( m_p == 0 )
			{
				//TODO: Raise a null reference exception here
			}
			return m_p->ptr();
		}

		//--------------------------------------------------------------------------------
		~CTRef()
		{
			Dispose();
		}

		//--------------------------------------------------------------------------------
		void Dispose( void )
		{
			if( m_p )
			{
				m_p->Release();
			}
			m_p = 0;
		}

		//--------------------------------------------------------------------------------
		void Attach( CTCSharedRef<T>* p, bool bTemp = true )
		{
			Dispose();
			m_p = p;
		}

		//--------------------------------------------------------------------------------
		template< class TDerived >
		TDerived* As( void )
		{
			return dynamic_cast< TDerived* >( m_p->ptr() );
		}

		//--------------------------------------------------------------------------------
		bool IsNull( void ) const
		{
			return m_p == nullptr || ( m_p->IsNull() );
		}

		//--------------------------------------------------------------------------------
		bool IsOwner( void ) const
		{
			return ( m_p && m_p->m_ulRefCount == 1 ) ? true : false;
		}

	protected:

		const CTCSharedRef<T>* m_p;
	};

}//nsCodeQOR

#endif//CODEQOR_DATASTRUCTS_TCREF_H_1
