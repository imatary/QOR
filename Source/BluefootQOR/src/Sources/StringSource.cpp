//StringSource.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implementation of String based Bluefoot Source

#include "BluefootQOR/Sources/StringSource.h"
#include "CodeQOR/Text/Char.h"
#include "BluefootQOR/BfSink.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	CUCS2StringSource::CUCS2StringSource() : m_usPos( 0 )
	{
	}

	//------------------------------------------------------------------------------
	CUCS2StringSource::CUCS2StringSource( nsCodeQOR::CUCS2String& strSource ) : m_strSource( strSource ), m_usPos( 0 )
	{
	}

	//------------------------------------------------------------------------------
	CUCS2StringSource::~CUCS2StringSource()
	{
	}

	//------------------------------------------------------------------------------
	CUCS2StringSource::CUCS2StringSource( const CUCS2StringSource& src )
	{
		*this = src;
	}

	//------------------------------------------------------------------------------
	CUCS2StringSource& CUCS2StringSource::operator = ( const CUCS2StringSource& src )
	{
		if( &src != this )
		{
			m_strSource = src.m_strSource;
			m_usPos = src.m_usPos;
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	bool CUCS2StringSource::Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead )
	{
		bool bResult = false;
		byte* pBuffer = GetBuffer()->WriteRequest( ulUnitsToRead );

		for( ulUnitsRead = 0; ulUnitsRead < ulUnitsToRead && m_usPos <= m_strSource.Len(); ulUnitsRead++, m_usPos++ )
		{
			nsCodeQOR::CChar16 tmpChar = m_strSource.At( m_usPos );
			memcpy( pBuffer + ( ulUnitsRead * GetBuffer()->GetUnitSize() ), &tmpChar, GetBuffer()->GetUnitSize() );
		}

		GetBuffer()->WriteAcknowledge( ulUnitsRead );

		bResult = ulUnitsRead > 0 ? true : false;

		if( bResult && GetMode() == ePush )
		{
			unsigned long ulNumberOfUnitsWritten = 0;
			m_pSink->Write( ulNumberOfUnitsWritten, ulUnitsRead );
			bResult = ulNumberOfUnitsWritten > 0  ? true : false;
		}

		return bResult;
	}

	//------------------------------------------------------------------------------
	void CUCS2StringSource::SetData( nsCodeQOR::CUCS2String& strSource )
	{
		m_strSource = strSource;
		m_usPos = 0;
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CUCS2String& CUCS2StringSource::GetData( void )
	{
		return m_strSource;
	}

}//nsBluefoot

