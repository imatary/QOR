//TraceFlyer.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/Tracing/TraceFlyer.h"
#include "CodeQOR/ErrorSystem/BaseErrorDomain.h"
#include "CodeQOR/Traits/Policy.h"
#include "CodeQOR/Instancing/TInstancePtr.h"
#include "AppocritaQOR/SubSystems/Thread.h"

const char* CCodeQORPolicy::Name = "Default CodeQOR Policy";

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CTraceFlyerBase::CTraceFlyerBase()
	{
	}

	//--------------------------------------------------------------------------------
	CTraceFlyerBase::~CTraceFlyerBase()
	{
	}

	//--------------------------------------------------------------------------------
	CTraceFlyer::CTraceFlyer() : m_pRegisteredTraceProvider( 0 )
	{
		nsQOR::IThread::ref_type pCurrentThread = nsQOR::CThread::GetCurrent();
		if( pCurrentThread )
		{
			pCurrentThread->SetTraceEnabled( true );
		}
	}

	//--------------------------------------------------------------------------------
	CTraceFlyer::~CTraceFlyer()
	{
		nsQOR::IThread::ref_type pCurrentThread = nsQOR::CThread::GetCurrent();
		if( pCurrentThread )
		{
			pCurrentThread->SetTraceEnabled( false );
		}
	}

	//--------------------------------------------------------------------------------
	const mxGUID* CTraceFlyer::ClassID()
	{
		static const nsCodeQOR::mxGUID classID = { 0x505d415e, 0xe737, 0x42ba, { 0xb0, 0xa3, 0x7d, 0x3c, 0x7f, 0x59, 0x2b, 0xf1 } };
		return &classID;
	}

	//--------------------------------------------------------------------------------
	const char* CTraceFlyer::TypeName(void)
	{
		return "CTraceFlyer";
	}

	//--------------------------------------------------------------------------------
	void CTraceFlyer::RegisterTraceProvider( CTraceFlyerBase* pTraceProvider )
	{
		m_pRegisteredTraceProvider = pTraceProvider;
	}

	//--------------------------------------------------------------------------------
	void CTraceFlyer::UnRegisterTraceProvider( CTraceFlyerBase* pTraceProvider )
	{
		if( m_pRegisteredTraceProvider == pTraceProvider )
		{
			m_pRegisteredTraceProvider = 0;
		}
	}

	//--------------------------------------------------------------------------------
	void CTraceFlyer::Trace( const char* szTrace )
	{
		if( m_pRegisteredTraceProvider != 0 )
		{
			m_pRegisteredTraceProvider->Trace( szTrace );
		}
	}
}//nsCodeQOR
