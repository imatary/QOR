//WinQLDeviceContext

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: saved in member for later use" );
#include "WinQL/Application/Graphics/WinQLDeviceContext.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/GDI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--------------------------------------------------------------------------------
	CSelectedDIB::CSelectedDIB()
	{
		_WINQ_FCONTEXT( "CSelectedDIB::CSelectedDIB" );
	}

	//--------------------------------------------------------------------------------
	CSelectedDIB::~CSelectedDIB()
	{
		_WINQ_FCONTEXT( "CSelectedDIB::~CSelectedDIB" );
	}

	//--------------------------------------------------------------------------------
	CDCInternal* CSelectedDIB::SetContext( CDCInternal* pDC )
	{
		_WINQ_FCONTEXT( "CSelectedDIB::SetContext" );
		CDCInternal* pOldDC = m_pDC;
		m_pDC = pDC;
		return pOldDC;
	}

	//--------------------------------------------------------------------------------
	unsigned int CSelectedDIB::GetColourTable( unsigned int uStartIndex, unsigned int cEntries, nsWin32::RGBQUAD* pColors )
	{
		_WINQ_FCONTEXT( "CSelectedDIB::GetColourTable" );
		UINT uiResult = 0;
		if( m_pDC != 0 )
		{
			__QOR_PROTECT
			{
				uiResult = m_GDI32Library.GetDIBColorTable( reinterpret_cast< ::HDC >( m_pDC->Handle()->Use() ), uStartIndex, cEntries, reinterpret_cast< ::RGBQUAD* >( pColors ) );
			}__QOR_ENDPROTECT
		}
		return uiResult;
	}

	//--------------------------------------------------------------------------------				
	unsigned int CSelectedDIB::SetColourTable( unsigned int uStartIndex, unsigned int cEntries, const nsWin32::RGBQUAD* pColours )
	{
		_WINQ_FCONTEXT( "CSelectedDIB::SetColourTable" );
		UINT uiResult = 0;
		if( m_pDC != 0 )
		{
			__QOR_PROTECT
			{
				uiResult = m_GDI32Library.SetDIBColorTable( reinterpret_cast< ::HDC >( m_pDC->Handle()->Use() ), uStartIndex, cEntries, reinterpret_cast< const ::RGBQUAD* >( pColours ) );
			}__QOR_ENDPROTECT
		}
		return uiResult;
	}



	//-- XForm------------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CXForm );

	//--------------------------------------------------------------------------------
	CXForm::CXForm() : m_GDI32Library( CGDI32::Instance() )
	{
		_WINQ_FCONTEXT( "CXForm::CXForm" );
	}

	//--------------------------------------------------------------------------------
	CXForm::CXForm( const nsWin32::XFORM* lpxform1, const nsWin32::XFORM* lpxform2, int& bResult ) : m_GDI32Library( CGDI32::Instance() )
	{
		_WINQ_FCONTEXT( "CXForm::CXForm" );
		bResult = FALSE;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.CombineTransform( reinterpret_cast< ::XFORM* >( this ), reinterpret_cast< const ::XFORM* >( lpxform1 ), reinterpret_cast< const ::XFORM* >( lpxform2 ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CXForm::~CXForm()
	{
		_WINQ_FCONTEXT( "CXForm::~CXForm" );
	}



	//-- Device Context
	//A temporary macro to ensure consistent initialisation of member parts
#	define INITPARTS GraphicsMode(*this), MapMode(*this), Viewport(*this),		\
					Window(*this), WorldTransform(*this), Draw(*this),			\
					SelectedBrush(*this), Fonts(*this), SelectedFont(*this),	\
					Text(*this), PixelFormat(*this), Path(*this),				\
					PrintDoc(*this), Clipping(*this)

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage" )

    //--------------------------------------------------------------------------------
	CDeviceContext::CDeviceContext() : CDCInternal(), INITPARTS, m_GDI32Library( CGDI32::Instance() )
    {
        _WINQ_FCONTEXT( "CDeviceContext::CDeviceContext" );
    }

	//--------------------------------------------------------------------------------
	CDeviceContext::CDeviceContext( const CDeviceContext& src ) : CDCInternal(), INITPARTS, m_GDI32Library( CGDI32::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDeviceContext" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CDeviceContext( CWindowHandle::refType hWnd ) : CDCInternal( hWnd ), INITPARTS, m_GDI32Library( CGDI32::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDeviceContext" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CDeviceContext( CWindowHandle::refType hWnd, CRegion::refType rgnClip, unsigned long flags ) : CDCInternal( hWnd, rgnClip, flags ), INITPARTS, m_GDI32Library( CGDI32::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDeviceContext" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CDeviceContext( CDCHandle::refType hdc, int iMode  ) : CDCInternal( hdc, iMode ) , INITPARTS, m_GDI32Library( CGDI32::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDeviceContext" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CDeviceContext( const TCHAR* lpszDriver, const TCHAR* lpszDevice, const TCHAR* lpszOutput, const nsWin32::DEVMODE* lpInitData ) : CDCInternal( lpszDriver, lpszDevice, lpszOutput, lpInitData ), INITPARTS, m_GDI32Library( CGDI32::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDeviceContext" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::~CDeviceContext()
	{
		_WINQ_FCONTEXT( "CDeviceContext::~CDeviceContext" );
	}

	//protected:

	//--------------------------------------------------------------------------------
	CDeviceContext::CDeviceContext( CDCHandle::refType hdc ) : CDCInternal( *hdc ), INITPARTS, m_GDI32Library( CGDI32::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDeviceContext" );
	}

__QCMP_WARNING_POP//( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST )
#	undef INITPARTS

	//--------------------------------------------------------------------------------
	CDCHandle::refType CDeviceContext::BeginPaint( CWindowHandle::refType hWnd, PAINTSTRUCT* lpPaint )
	{
		static CUser32 User32Library;
		CDCHandle::refType Ref( new CDCHandle( 0, (void*)(User32Library.BeginPaint( reinterpret_cast< ::HWND >( hWnd->Use() ), reinterpret_cast< ::PAINTSTRUCT* >( lpPaint ) ) ) ) );
		return Ref;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::EndPaint( CWindowHandle::refType hWnd, const PAINTSTRUCT* lpPaint )
	{
		static CUser32 User32Library;
		return User32Library.EndPaint( reinterpret_cast< ::HWND >( hWnd->Use() ), reinterpret_cast< const ::PAINTSTRUCT* >( lpPaint ) );
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::AlphaBlendTo( int xoriginDest, int yoriginDest, int wDest, int hDest, CDeviceContext& Src, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn )
	{
		CGDI32 GDI32Library;
		return GDI32Library.AlphaBlend( reinterpret_cast< ::HDC >( Handle()->Use() ), xoriginDest, yoriginDest, wDest, hDest, reinterpret_cast< ::HDC >( Src.Handle()->Use() ), xoriginSrc, yoriginSrc, wSrc, hSrc, 
			*( reinterpret_cast< ::BLENDFUNCTION* >( &ftn ) ) );
	}

	//-- DC Properties----------------------------------------------------------------

	//-- DC Integer Property----------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CDCIntegerProperty );

	//--------------------------------------------------------------------------------
	CDeviceContext::CDCIntegerProperty::CDCIntegerProperty( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDCIntegerProperty::CDCIntegerProperty" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CDCIntegerProperty::~CDCIntegerProperty()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDCIntegerProperty::~CDCIntegerProperty" );
	}


	//--Map Mode----------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	CDeviceContext::CMapMode::CMapMode( CDeviceContext& DC ) : CDCIntegerProperty( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CMapMode::CMapMode" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CMapMode::~CMapMode()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CMapMode::~CMapMode" );
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CMapMode::Get()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CMapMode::Get" );
		return m_DC.m_GDI32Library.GetMapMode( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CMapMode::Set( int iMode )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CMapMode::Set" );
		return m_DC.m_GDI32Library.SetMapMode( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), iMode );
	}


	//--Graphics Mode-----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	CDeviceContext::CGraphicsMode::CGraphicsMode( CDeviceContext& DC ) : CDCIntegerProperty( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CGraphicsMode::CGraphicsMode" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CGraphicsMode::~CGraphicsMode()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CGraphicsMode::~CGraphicsMode" );
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CGraphicsMode::Get()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CGraphicsMode::Get" );
		return m_DC.m_GDI32Library.GetGraphicsMode( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CGraphicsMode::Set( int iMode )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CGraphicsMode::Set" );
		return m_DC.m_GDI32Library.SetGraphicsMode( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), iMode );
	}



	//-- Paint DC---------------------------------------------------------------------

	//--------------------------------------------------------------------------------
	CPaintDC::CPaintDC( CWindowHandle::refType hWnd ) : CDeviceContext()
	{
		_WINQ_FCONTEXT( "CPaintDC::CPaintDC" );
		m_hWnd = hWnd;
		__QOR_PROTECT
		{
			m_PS.hdc = reinterpret_cast< ::HDC >( m_Handle.Use() );
			SetHandle( m_User32Library.BeginPaint( reinterpret_cast< ::HWND >( m_hWnd->Use() ), reinterpret_cast< ::PAINTSTRUCT* >( &m_PS ) ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CPaintDC::~CPaintDC()
	{		
		_WINQ_FCONTEXT( "CPaintDC::~CPaintDC" );
		__QOR_PROTECT
		{			
			m_User32Library.EndPaint( reinterpret_cast< ::HWND >( m_hWnd->Use() ), reinterpret_cast< ::PAINTSTRUCT* >( &m_PS ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	bool CPaintDC::IsSessionErase( void )
	{
		return m_PS.fErase;
	}

	//--------------------------------------------------------------------------------
	CRectangle CPaintDC::PaintingRectangle( void )
	{
		CRectangle rc( m_PS.rcPaint.left, m_PS.rcPaint.top, m_PS.rcPaint.right, m_PS.rcPaint.bottom );
		return rc;
	}

	//--------------------------------------------------------------------------------
	bool CPaintDC::IsSessionRestore( void )
	{
		return m_PS.fRestore;
	}

	//--------------------------------------------------------------------------------
	bool CPaintDC::IsSessionIncUpdate( void )
	{
		return m_PS.fIncUpdate;
	}

	//DC Text

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CText );

	//--------------------------------------------------------------------------------
	CDeviceContext::CText::CText( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::CText" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CText::~CText()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::~CText" );
	}

	//--------------------------------------------------------------------------------				
	unsigned int CDeviceContext::CText::GetAlignment()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetAlignment" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_DC.m_GDI32Library.GetTextAlign( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CText::GetCharacterExtra()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetExtraCharacter" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.GetTextCharacterExtra( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CText::GetCharset()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetCharset" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.GetTextCharset( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CText::GetCharsetInfo( nsWin32::LPFONTSIGNATURE lpSig, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetCharSetInfo" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.GetTextCharsetInfo( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPFONTSIGNATURE >( lpSig ), dwFlags );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceContext::CText::GetColour()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetColour" );
		COLORREF Result = 0;
		__QOR_PROTECT
		{
			Result = m_DC.m_GDI32Library.GetTextColor( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CText::GetExtentExPoint( const TCHAR* lpszStr, int cchString, int nMaxExtent, int* lpnFit, int* alpDx, nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetExtentExPoint" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetTextExtentExPoint( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), lpszStr, cchString, nMaxExtent, lpnFit, alpDx, reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CText::GetExtentExPointI( unsigned short* pgiIn, int cgi, int nMaxExtent, int* lpnFit, int* alpDx, nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetExtentExPointI" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetTextExtentExPointI( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), pgiIn, cgi, nMaxExtent, lpnFit, alpDx, reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CText::GetExtentPoint( const TCHAR* lpString, int cbString, nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetExtentPoint" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetTextExtentPoint( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), lpString, cbString, reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CText::GetExtentPoint32( const TCHAR* lpString, int c, nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetExtentPoint32" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetTextExtentPoint32( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), lpString, c, reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CText::GetExtentPointI( unsigned short* pgiIn, int cgi, nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetExtentPointI" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetTextExtentPointI( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), pgiIn, cgi, reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CText::GetFace( int nCount, TCHAR* lpFaceName )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetFace" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.GetTextFace( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nCount, lpFaceName );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CText::GetMetrics( nsWin32::LPTEXTMETRIC lptm )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::GetMetrics" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetTextMetrics( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPTEXTMETRIC >( lptm ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CText::PolyOut( const nsWin32::POLYTEXT* pptxt, int cStrings )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::PolyOut" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.PolyTextOut( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::POLYTEXT* >( pptxt ), cStrings ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CDeviceContext::CText::SetAlignment( unsigned int fMode )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::SetAlignment" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_DC.m_GDI32Library.SetTextAlign( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), fMode );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CText::SetCharacterExtra( int nCharExtra )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::SetCharacterExtra" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.SetTextCharacterExtra( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nCharExtra );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceContext::CText::SetColour( unsigned long crColour )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::SetColour" );
		COLORREF Result = 0;
		__QOR_PROTECT
		{
			Result = m_DC.m_GDI32Library.SetTextColor( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), crColour );
		}__QOR_ENDPROTECT
		return Result;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CText::SetJustification( int nBreakExtra, int nBreakCount )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::SetJustification" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.SetTextJustification( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nBreakExtra, nBreakCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CText::Output( int nXStart, int nYStart, const TCHAR* lpString, int cbString )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CText::Output" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.TextOut( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nXStart, nYStart, lpString, cbString ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}


	//--DC Selected Font

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CSelectedFont );
	//--------------------------------------------------------------------------------
	CDeviceContext::CSelectedFont::CSelectedFont( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedFont::CSelectedFont" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CSelectedFont::~CSelectedFont()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedFont::~CSelectedFont" );
	}

	//--------------------------------------------------------------------------------				
	unsigned long CDeviceContext::CSelectedFont::GetData( unsigned long dwTable, unsigned long dwOffset, void* lpvBuffer, unsigned long cbData )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedFont::GetData" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_DC.m_GDI32Library.GetFontData( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), dwTable, dwOffset, lpvBuffer, cbData );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceContext::CSelectedFont::GetLanguageInfo()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedFont::GetLanguageInfo" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_DC.m_GDI32Library.GetFontLanguageInfo( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------				
	unsigned long CDeviceContext::CSelectedFont::GetUnicodeRanges( nsWin32::LPGLYPHSET lpgs )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedFont::GetUnicodeRanges" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_DC.m_GDI32Library.GetFontUnicodeRanges( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPGLYPHSET >( lpgs ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceContext::CSelectedFont::GetGlyphIndicesT( const TCHAR* lpstr, int c, unsigned short* pgi, unsigned long fl )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedFont::GetGlyphIndices" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_DC.m_GDI32Library.GetGlyphIndices( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), lpstr, c, pgi, fl );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceContext::CSelectedFont::GetGlyphOutlineT( unsigned int uChar, unsigned int uFormat, nsWin32::LPGLYPHMETRICS lpgm, unsigned long cbBuffer, void* lpvBuffer, const nsWin32::MAT2* lpmat2 )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedFont::GetGlyphOutline" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_DC.m_GDI32Library.GetGlyphOutline( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), uChar, uFormat, reinterpret_cast< ::LPGLYPHMETRICS >( lpgm ), cbBuffer, lpvBuffer, reinterpret_cast< const ::MAT2* >( lpmat2 ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceContext::CSelectedFont::GetKerningPairsT( unsigned long nNumPairs, nsWin32::LPKERNINGPAIR lpkrnpair )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedFont::GetKerningPairs" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = m_DC.m_GDI32Library.GetKerningPairs( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nNumPairs, reinterpret_cast< ::LPKERNINGPAIR >( lpkrnpair ) );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CDeviceContext::CSelectedFont::GetOutlineTextMetricsT( unsigned int cbData, nsWin32::LPOUTLINETEXTMETRIC lpOTM )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedFont::GetOutlineTextMetrics" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_DC.m_GDI32Library.GetOutlineTextMetrics( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), cbData, reinterpret_cast< ::LPOUTLINETEXTMETRIC >( lpOTM ) );
		}__QOR_ENDPROTECT
		return uiResult;
	}



	//--DC Fonts----------------------------------------------------------------------				

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CFonts );

	//--------------------------------------------------------------------------------				
	CDeviceContext::CFonts::CFonts( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CFonts::CFonts" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CFonts::~CFonts()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CFonts::~CFonts" );
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CFonts::EnumFamilies( const TCHAR* lpszFamily, nsWin32::FONTENUMPROC lpEnumFontFamProc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CFonts::EnumFamilies" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.EnumFontFamilies( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), lpszFamily, reinterpret_cast< ::FONTENUMPROC >( lpEnumFontFamProc ), lParam );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CFonts::EnumFamilies( nsWin32::LPLOGFONT lpLogfont, nsWin32::FONTENUMPROC lpEnumFontFamExProc, Cmp_long_ptr lParam, unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CFonts::EnumFamilies" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.EnumFontFamiliesEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPLOGFONT >( lpLogfont ), reinterpret_cast< ::FONTENUMPROC >( lpEnumFontFamExProc ), lParam, dwFlags );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------				
	int CDeviceContext::CFonts::Enum( const TCHAR* lpFaceName, nsWin32::FONTENUMPROC lpFontFunc, Cmp_long_ptr lParam )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CFonts::Enum" );
		int iResult = 0;
		__QOR_PROTECT
		{
			m_DC.m_GDI32Library.EnumFonts( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), lpFaceName, reinterpret_cast< ::FONTENUMPROC >( lpFontFunc ), lParam );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CDeviceContext::CFonts::SetMapperFlags( unsigned long dwFlag )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CFonts::SetMapperFlags" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			m_DC.m_GDI32Library.SetMapperFlags( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), dwFlag );
		}__QOR_ENDPROTECT
		return dwResult;
	}


	//--DC Selected Brush-------------------------------------------------------------				

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CSelectedBrush );

	//--------------------------------------------------------------------------------				
	CDeviceContext::CSelectedBrush::CSelectedBrush( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedBrush::CSelectedBrush" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CSelectedBrush::~CSelectedBrush()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedBrush::~CSelectedBrush" );
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CSelectedBrush::GetOrigin( nsWin32::POINT* lppt )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedBrush::GetOrigin" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetBrushOrgEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPPOINT >( lppt ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------			
	bool CDeviceContext::CSelectedBrush::SetOrigin( int nXOrg, int nYOrg, nsWin32::POINT* lppt )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedBrush::SetOrigin" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.SetBrushOrgEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nXOrg, nYOrg, reinterpret_cast< ::LPPOINT >( lppt ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CSelectedBrush::PatBlt( int nXLeft, int nYLeft, int nWidth, int nHeight, unsigned long dwRop )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CSelectedBrush::PatBlt" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.PatBlt( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nXLeft, nYLeft, nWidth, nHeight, dwRop ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}



	//--DC World Transform

	//--------------------------------------------------------------------------------
	CDeviceContext::CWorldTransform::CWorldTransform( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWorldTransform::CWorldTransform" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CWorldTransform::CWorldTransform( CDeviceContext& DC, const nsWin32::XFORM* lpxform1, const nsWin32::XFORM* lpxform2, int& bResult ) : CXForm( lpxform1, lpxform2, bResult ), m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWorldTransform::CWorldTransform" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CWorldTransform::~CWorldTransform()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWorldTransform::~CWorldTransform" );
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CWorldTransform::Get( nsWin32::XFORM* lpXform )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWorldTransform::Get" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.GetWorldTransform( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPXFORM >( dynamic_cast< nsWin32::XFORM* >( this ) ) ) ? true : false;
			*lpXform = *( dynamic_cast< nsWin32::XFORM* >( this ) );
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CWorldTransform::Modify( const nsWin32::XFORM* lpXform, unsigned long iMode )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWorldTransform::Modify" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.ModifyWorldTransform( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::XFORM* >( lpXform ), iMode ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CWorldTransform::Set( const nsWin32::XFORM* lpXform )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWorldTransform::Set" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.SetWorldTransform( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::XFORM* >( lpXform ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}



	//--DC Window---------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CWindow );

	//--------------------------------------------------------------------------------
	CDeviceContext::CWindow::CWindow( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWindow::CWindow" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CWindow::~CWindow()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWindow::~CWindow" );
	}				

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CWindow::GetExtent( nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWindow::GetExtent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetWindowExtEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDeviceContext::CWindow::GetOrigin( nsWin32::POINT* lpPoint )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWindow::GetOrigin" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetWindowOrgEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) , reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDeviceContext::CWindow::OffsetOrigin( int nXOffset, int nYOffset, nsWin32::POINT* lpPoint )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWindow::OffsetOrigin" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.OffsetWindowOrgEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nXOffset, nYOffset, reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDeviceContext::CWindow::Scale( int Xnum, int Xdenom, int Ynum, int Ydenom, nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWindow::Scale" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.ScaleWindowExtEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), Xnum, Xdenom, Ynum, Ydenom, reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CWindow::SetExtent( int nXExtent, int nYExtent, nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWindow::SetExtent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.SetWindowExtEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nXExtent, nYExtent, reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDeviceContext::CWindow::SetOrigin( int X, int Y, nsWin32::POINT* lpPoint )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CWindow::SetOrigin" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.SetWindowOrgEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), X, Y, reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}



	//--Viewport----------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CViewport );

	//--------------------------------------------------------------------------------
	CDeviceContext::CViewport::CViewport( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CViewport::CViewport" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CViewport::~CViewport()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CViewport::~CViewport" );
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CViewport::GetExtent( nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CViewport::GetExtent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetViewportExtEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------
	bool CDeviceContext::CViewport::SetExtent( int nXExtent, int nYExtent, nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CViewport::SetExtent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.SetViewportExtEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nXExtent, nYExtent, reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CViewport::GetOrigin( nsWin32::POINT* lpPoint )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CViewport::GetOrigin" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetViewportOrgEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CViewport::SetOrigin( int X, int Y, nsWin32::POINT* lpPoint )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CViewport::SetOrigin" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.SetViewportOrgEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), X, Y, reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}
		
	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CViewport::OffsetOrigin( int nXOffset, int nYOffset, nsWin32::POINT* lpPoint )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CViewport::OffsetOrigin" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.OffsetViewportOrgEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nXOffset, nYOffset, reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CViewport::Scale( int Xnum, int Xdenom, int Ynum, int Ydenom, nsWin32::SIZE* lpSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CViewport::Scale" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.ScaleViewportExtEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), Xnum, Xdenom, Ynum, Ydenom, reinterpret_cast< ::LPSIZE >( lpSize ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}



	//--Clipping----------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CClipping );

	//--------------------------------------------------------------------------------
	CDeviceContext::CClipping::CClipping( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::CClipping" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CClipping::~CClipping()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::~CClipping" );
	}

	//--------------------------------------------------------------------------------				
	int CDeviceContext::CClipping::ExcludeRect( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::ExcludeRect" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.ExcludeClipRect( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nLeftRect, nTopRect, nRightRect, nBottomRect );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------				
	int CDeviceContext::CClipping::SelectRegion( CRegion& Rgn, int fnMode )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::SelectRegion" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.ExtSelectClipRgn( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::HRGN >( Rgn.Handle()->Use() ), fnMode );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CClipping::GetBox( nsWin32::RECT* lprc )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::GetBox" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.GetClipBox( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPRECT >( lprc ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CClipping::GetRegion( CRegion& Rgn )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::GetRegion" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.GetClipRgn( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::HRGN >( Rgn.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CClipping::UseSystemClippingRegion( CRegion& Rgn )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::UseSystemClippingRegion" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.GetRandomRgn( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::HRGN >( Rgn.Handle()->Use() ), SYSRGN );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CClipping::IntersectRect( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::IntersectRect" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.IntersectClipRect( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nLeftRect, nTopRect, nRightRect, nBottomRect );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CClipping::OffsetRgn( int nXOffset, int nYOffset )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::OffsetRgn" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.OffsetClipRgn( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nXOffset, nYOffset );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CClipping::PtVisible( int X, int Y )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::PtVisible" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.PtVisible( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), X, Y ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CClipping::RectVisible( const nsWin32::RECT* lprc )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::RectVisible" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.RectVisible( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::RECT* >( lprc ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CClipping::SelectPath( int iMode )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::SelectPath" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.SelectClipPath( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), iMode ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CClipping::SelectRegion( CRegion& Rgn )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CClipping::SelectRegion" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.SelectClipRgn( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::HRGN >( Rgn.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}



	//-- Print Doc--------------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CPrintDoc );

	//--------------------------------------------------------------------------------
	CDeviceContext::CPrintDoc::CPrintDoc( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPrintDoc::CPrintDoc" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CPrintDoc::~CPrintDoc()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPrintDoc::~CPrintDoc" );
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPrintDoc::Abort()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPrintDoc::Abort" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.AbortDoc( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPrintDoc::End()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPrintDoc::End" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.EndDoc( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPrintDoc::EndPage()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPrintDoc::EndPage" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.EndPage( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPrintDoc::Escape( int nEscape, int cbInput, const char* lpvInData, void* lpvOutData )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPrintDoc::Escape" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.Escape( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nEscape, cbInput, lpvInData, lpvOutData );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPrintDoc::ExtEscape( int nEscape, int cbInput, const char* lpszInData, int cbOutput, char* lpszOutData )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPrintDoc::ExtEscape" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.ExtEscape( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nEscape, cbInput, lpszInData, cbOutput, lpszOutData );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPrintDoc::SetAbortProc( nsWin32::ABORTPROC lpAbortProc )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPrintDoc::SetAbortProc" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.SetAbortProc( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::ABORTPROC >( lpAbortProc ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPrintDoc::Start( const nsWin32::DOCINFO* lpdi )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPrintDoc::Start" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.StartDoc( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::DOCINFO* >( lpdi ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPrintDoc::StartPage()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPrintDoc::StartPage" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.StartPage( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}



	//--Path

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CPath );

	//--------------------------------------------------------------------------------
	CDeviceContext::CPath::CPath( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::CPath" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CPath::~CPath()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::~CPath" );
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::Abort()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::Abort" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.AbortPath( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::Begin()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::Begin" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.BeginPath( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::CloseFigure()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::CloseFigure" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.CloseFigure( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::End()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::End" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.EndPath( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::Fill()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::Fill" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.FillPath( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::Flatten()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::Flatten" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.FlattenPath( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::GetMiterLimit( float* peLimit )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::GetMiterLimit" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.GetMiterLimit( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), peLimit ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPath::GetData( nsWin32::POINT* lpPoints, unsigned char* lpTypes, int nSize )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::GetData" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.GetPath( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< ::LPPOINT >( lpPoints ), lpTypes, nSize );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::SetMiterLimit( float eNewLimit, float* peOldLimit )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::SetMiterLimit" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.SetMiterLimit( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), eNewLimit, peOldLimit ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::StrokeAndFill()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::StrokeAndFill" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.StrokeAndFillPath( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::Stroke()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::Stroke" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.StrokePath( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPath::Widen()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPath::Widen" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.WidenPath( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}



	//-- Pixel Format

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CPixelFormat );

	//--------------------------------------------------------------------------------
	CDeviceContext::CPixelFormat::CPixelFormat( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPixelFormat::CPixelFormat" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CPixelFormat::~CPixelFormat()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPixelFormat::~CPixelFormat" );
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPixelFormat::Choose( const nsWin32::PIXELFORMATDESCRIPTOR* ppfd )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPixelFormat::Choose" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.ChoosePixelFormat( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::PIXELFORMATDESCRIPTOR* >( ppfd ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPixelFormat::Describe( int iPixelFormat, unsigned int nBytes, nsWin32::LPPIXELFORMATDESCRIPTOR ppfd )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPixelFormat::Describe" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.DescribePixelFormat( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), iPixelFormat, nBytes, reinterpret_cast< ::LPPIXELFORMATDESCRIPTOR >( ppfd ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	int CDeviceContext::CPixelFormat::Get()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPixelFormat::Get" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.GetPixelFormat( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CPixelFormat::Set( int iPixelFormat, const nsWin32::PIXELFORMATDESCRIPTOR* ppfd )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CPixelFormat::Set" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.SetPixelFormat( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), iPixelFormat, reinterpret_cast< const ::PIXELFORMATDESCRIPTOR* >( ppfd ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}



	//-- Draw

	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceContext::CDraw );

	//--------------------------------------------------------------------------------
	CDeviceContext::CDraw::CDraw( CDeviceContext& DC ) : m_DC( DC )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::CDraw" );
	}

	//--------------------------------------------------------------------------------
	CDeviceContext::CDraw::~CDraw()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::~CDraw" );
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CDraw::AngleArc( int X, int Y, unsigned long dwRadius, float eStartAngle, float eSweepAngle )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::AngleArc" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.AngleArc( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), X, Y, dwRadius, eStartAngle, eSweepAngle ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CDraw::Arc( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXStartArc, int nYStartArc, int nXEndArc, int nYEndArc )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::Arc" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.Arc( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nLeftRect, nTopRect, nRightRect, nBottomRect, nXStartArc, nYStartArc, nXEndArc, nYEndArc ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CDraw::ArcTo( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXRadial1, int nYRadial1, int nXRadial2, int nYRadial2 )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::ArcTo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.ArcTo( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nLeftRect, nTopRect, nRightRect, nBottomRect, nXRadial1, nYRadial1, nXRadial2, nYRadial2 ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	int CDeviceContext::CDraw::GetArcDirection()
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::GetArcDirection" );
		int iResult = 0;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.GetArcDirection( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ) );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CDraw::LineDDA( int nXStart, int nYStart, int nXEnd, int nYEnd, nsWin32::LINEDDAPROC lpLineFunc, Cmp_long_ptr lpData )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::LineDDA" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.LineDDA( nXStart, nYStart, nXEnd, nYEnd, reinterpret_cast< ::LINEDDAPROC >( lpLineFunc ), lpData ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CDraw::LineTo( int nXEnd, int nYEnd )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::LineTo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.LineTo( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nXEnd, nYEnd ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CDraw::MoveToEx( int X, int Y, nsWin32::POINT* lpPoint )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::MoveToEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.MoveToEx( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), X, Y, reinterpret_cast< ::LPPOINT >( lpPoint ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CDraw::PolyBezier( const nsWin32::POINT* lppt, unsigned long cPoints )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::PolyBezier" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.PolyBezier( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::POINT* >( lppt ), cPoints ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CDraw::PolyBezierTo( const nsWin32::POINT* lppt, unsigned long cCount )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::PolyBezierTo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.PolyBezierTo( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::POINT* >( lppt ), cCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CDraw::PolyDraw( const nsWin32::POINT* lppt, const unsigned char* lpbTypes, int cCount )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::PolyDraw" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.PolyDraw( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::POINT* >( lppt ), lpbTypes, cCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CDraw::Polyline( const nsWin32::POINT* lppt, int cPoints )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::Polyline" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.Polyline( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::POINT* >( lppt ), cPoints ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CDraw::PolylineTo( const nsWin32::POINT* lppt, unsigned long cCount )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::PolylineTo" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.PolylineTo( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::POINT* >( lppt ), cCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CDraw::PolyPolyline( const nsWin32::POINT* lppt, const unsigned long* lpdwPolyPoints, unsigned long cCount )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::PolyPolyline" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.PolyPolyline( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::POINT* >( lppt ), lpdwPolyPoints, cCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	int CDeviceContext::CDraw::SetArcDirection( int ArcDirection )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::SetArcDirection" );
		int iResult = FALSE;
		__QOR_PROTECT
		{
			iResult = m_DC.m_GDI32Library.SetArcDirection( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), ArcDirection );
		}__QOR_ENDPROTECT
		return iResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CDraw::Chord( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXRadial1, int nYRadial1, int nXRadial2, int nYRadial2 )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::Chord" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.Chord( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nLeftRect, nTopRect, nRightRect, nBottomRect, nXRadial1, nYRadial1, nXRadial2, nYRadial2 ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CDraw::Ellipse( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::Ellipse" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.Ellipse( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nLeftRect, nTopRect, nRightRect, nBottomRect ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CDraw::Pie( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXRadial1, int nYRadial1, int nXRadial2, int nYRadial2 )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::Pie" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.Pie( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nLeftRect, nTopRect, nRightRect, nBottomRect, nXRadial1, nYRadial1, nXRadial2, nYRadial2 ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------				
	bool CDeviceContext::CDraw::Polygon( const nsWin32::POINT* lpPoints, int nCount )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::Polygon" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.Polygon( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::POINT* >( lpPoints ), nCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CDraw::PolyPolygon( const nsWin32::POINT* lpPoints, const int* lpPolyCounts, int nCount )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::PolyPolygon" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.PolyPolygon( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), reinterpret_cast< const ::POINT* >( lpPoints ), lpPolyCounts, nCount ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CDraw::Rectangle( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::Rectangle" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.Rectangle( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nLeftRect, nTopRect, nRightRect, nBottomRect ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CDeviceContext::CDraw::RoundRect( int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidth, int nHeight )
	{
		_WINQ_FCONTEXT( "CDeviceContext::CDraw::RoundRect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_DC.m_GDI32Library.RoundRect( reinterpret_cast< ::HDC >( m_DC.Handle()->Use() ), nLeftRect, nTopRect, nRightRect, nBottomRect, nWidth, nHeight ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
