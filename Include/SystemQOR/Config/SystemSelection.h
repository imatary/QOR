//SystemSelection.h

// Copyright Querysoft Limited 2015, 2016, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Set the include paths to the ones for the selected operating system
//Note: THIS FILE AND EVERYTHING IT INCLUDES MUST BE PURE PRE-PROCESSOR CODE

#ifndef SYSTEMQOR_SYSTEMSELECTION_H_1
#define SYSTEMQOR_SYSTEMSELECTION_H_1

#include "SystemQOR/Config/SupportedOSList.h"

#ifdef QOR_OS
#	undef QOR_SYS_OS		//TODO: Make this unnecessary by removing the preprocessor definition of QOR_SYS_OS in favor of QOR_OS
#	define QOR_SYS_OS QOR_PP_CAT(QOR_SYS_,QOR_OS)
#else
#	include "SystemQOR/Config/OSDetection.h"
#endif

#	if		( QOR_SYS_OS==QOR_SYS_MSW )

#		define nsPlatform						nsWin32
#		define QOR_SYS_PLATFORMFOLDER			MSWindows
#		define QOR_SYS_PLATFORMABBR				MSW_
#		define QOR_SYS_OSABBR					Win

#		define OS_EXPORTS_UNISTD_GETHOSTNAME 1

#		define QOR_CONFIG_DEFINES_OS1 QOR_PP_LIST_APPEND( QOR_CONFIG_DEFINES, ("QOR_SYS_OS=QOR_SYS_MSW") )
#		define QOR_CONFIG_DEFINES_OS2 QOR_PP_LIST_APPEND( QOR_CONFIG_DEFINES_OS1, ("WIN32") )
/*#		ifndef _CONSOLE
#			define QOR_CONFIG_DEFINES_OS3 QOR_PP_LIST_APPEND( QOR_CONFIG_DEFINES_OS2, ("_WINDOWS") )
#		else
#			define QOR_CONFIG_DEFINES_OS3 QOR_CONFIG_DEFINES_OS2
#		endif*/
#		ifndef _LIB
#			define QOR_CONFIG_DEFINES_OS4 QOR_PP_LIST_APPEND( QOR_CONFIG_DEFINES_OS3, ("_USRDLL") )
#			define QOR_CONFIG_DEFINES_OS QOR_PP_LIST_APPEND( QOR_CONFIG_DEFINES_OS4, ("_WINDLL") )
#		else
#			define QOR_CONFIG_DEFINES_OS QOR_CONFIG_DEFINES_OS3
#		endif

#	elif	( QOR_SYS_OS == QOR_SYS_LINUX )

#		define nsPlatform                       nsLinux
#		define QOR_SYS_PLATFORMFOLDER			Linux
#		define QOR_SYS_PLATFORMABBR				LIN_
#		define QOR_SYS_OSABBR					Lin

#	elif	( QOR_SYS_OS == QOR_SYS_SANOS )

#		define nsPlatform						nsSanOS
#		define QOR_SYS_PLATFORMFOLDER			SanOS
#		define QOR_SYS_PLATFORMABBR				SAN_
#		define QOR_SYS_OSABBR					San

#	elif	( QOR_SYS_OS == QOR_SYS_AIX )

#		define nsPlatform						nsAIX
#		define QOR_SYS_PLATFORMFOLDER			AIX
#		define QOR_SYS_PLATFORMABBR				AIX_
#		define QOR_SYS_OSABBR					AIX

#	elif	( QOR_SYS_OS == QOR_SYS_AMIGAOS )

#		define nsPlatform						nsAmigaOS
#		define QOR_SYS_PLATFORMFOLDER			AmigaOS
#		define QOR_SYS_PLATFORMABBR				AMG_
#		define QOR_SYS_OSABBR					Amg

#	elif	( QOR_SYS_OS == QOR_SYS_ANDROID )

#		define nsPlatform						nsAndroid
#		define QOR_SYS_PLATFORMFOLDER			Android
#		define QOR_SYS_PLATFORMABBR				AND_
#		define QOR_SYS_OSABBR					And

#	elif	( QOR_SYS_OS == QOR_SYS_BEOS )

#		define nsPlatform						nsBeos
#		define QOR_SYS_PLATFORMFOLDER			Beos
#		define QOR_SYS_PLATFORMABBR				BEO_
#		define QOR_SYS_OSABBR					Beo

#	elif	( QOR_SYS_OS == QOR_SYS_BSD )

#		define nsPlatform						nsBSD
#		define QOR_SYS_PLATFORMFOLDER			BSD
#		define QOR_SYS_PLATFORMABBR				BSD_
#		define QOR_SYS_OSABBR					BSD

#	elif	( QOR_SYS_OS == QOR_SYS_CHROMEOS )

#		define nsPlatform						nsChromeOS
#		define QOR_SYS_PLATFORMFOLDER			ChromeOS
#		define QOR_SYS_PLATFORMABBR				CHR_
#		define QOR_SYS_OSABBR					Chr

#	elif	( QOR_SYS_OS == QOR_SYS_CYGWIN )

#		define nsPlatform						nsCygwin
#		define QOR_SYS_PLATFORMFOLDER			Cygwin
#		define QOR_SYS_PLATFORMABBR				CYG_
#		define QOR_SYS_OSABBR					CYG

#	elif	( QOR_SYS_OS == QOR_SYS_HAIKU )

#		define nsPlatform						nsHaiku
#		define QOR_SYS_PLATFORMFOLDER			Haiku
#		define QOR_SYS_PLATFORMABBR				HAK_
#		define QOR_SYS_OSABBR					HAK

#	elif	( QOR_SYS_OS == QOR_SYS_HPUX )

#		define nsPlatform						nsHPUX
#		define QOR_SYS_PLATFORMFOLDER			HPUX
#		define QOR_SYS_PLATFORMABBR				HPU_
#		define QOR_SYS_OSABBR					HPU

#	elif	( QOR_SYS_OS == QOR_SYS_INFERNO )

#		define nsPlatform						nsInferno
#		define QOR_SYS_PLATFORMFOLDER			Inferno
#		define QOR_SYS_PLATFORMABBR				INO_
#		define QOR_SYS_OSABBR					INO

#	elif	( QOR_SYS_OS == QOR_SYS_IOS )

#		define nsPlatform						nsIOS
#		define QOR_SYS_PLATFORMFOLDER			IOS
#		define QOR_SYS_PLATFORMABBR				IOS_
#		define QOR_SYS_OSABBR					IOS

#	elif	( QOR_SYS_OS == QOR_SYS_IRIX )

#		define nsPlatform						nsIRIX
#		define QOR_SYS_PLATFORMFOLDER			IRIX
#		define QOR_SYS_PLATFORMABBR				IRX_
#		define QOR_SYS_OSABBR					IRX

#	elif	( QOR_SYS_OS == QOR_SYS_KOLIBRIOS )

#		define nsPlatform						nsKolibrios
#		define QOR_SYS_PLATFORMFOLDER			Kolibrios
#		define QOR_SYS_PLATFORMABBR				KOL_
#		define QOR_SYS_OSABBR					KOL

#	elif	( QOR_SYS_OS == QOR_SYS_MACOS )

#		define nsPlatform						nsMacOS
#		define QOR_SYS_PLATFORMFOLDER			MacOS
#		define QOR_SYS_PLATFORMABBR				MAC_
#		define QOR_SYS_OSABBR					MAC

#	elif	( QOR_SYS_OS == QOR_SYS_MINIX )

#		define nsPlatform						nsMinix
#		define QOR_SYS_PLATFORMFOLDER			Minix
#		define QOR_SYS_PLATFORMABBR				MNX_
#		define QOR_SYS_OSABBR					Min

#	elif	( QOR_SYS_OS == QOR_SYS_OS400 )

#		define nsPlatform						nsOS400
#		define QOR_SYS_PLATFORMFOLDER			OS400
#		define QOR_SYS_PLATFORMABBR				OS4_
#		define QOR_SYS_OSABBR					OS4

#	elif	( QOR_SYS_OS == QOR_SYS_OSX )

#		define nsPlatform						nsOSX
#		define QOR_SYS_PLATFORMFOLDER			OSX
#		define QOR_SYS_PLATFORMABBR				OSX_
#		define QOR_SYS_OSABBR					OSX

#	elif	( QOR_SYS_OS == QOR_SYS_PLAN9 )

#		define nsPlatform						nsPlan9
#		define QOR_SYS_PLATFORMFOLDER			Plan9
#		define QOR_SYS_PLATFORMABBR				PL9_
#		define QOR_SYS_OSABBR					PL9

#	elif	( QOR_SYS_OS == QOR_SYS_POSIX )

#		define nsPlatform						nsPosix
#		define QOR_SYS_PLATFORMFOLDER			Posix
#		define QOR_SYS_PLATFORMABBR				PSX_
#		define QOR_SYS_OSABBR					PSX

#	elif	( QOR_SYS_OS == QOR_SYS_QNXNTO )

#		define nsPlatform						nsQNXNTO
#		define QOR_SYS_PLATFORMFOLDER			QNXNTO
#		define QOR_SYS_PLATFORMABBR				QNX_
#		define QOR_SYS_OSABBR					QNX

#	elif	( QOR_SYS_OS == QOR_SYS_SKYOS )

#		define nsPlatform						nsSkyOS
#		define QOR_SYS_PLATFORMFOLDER			SkyOS
#		define QOR_SYS_PLATFORMABBR				SKY_
#		define QOR_SYS_OSABBR					SKY

#	elif	( QOR_SYS_OS == QOR_SYS_SOLARIS )

#		define nsPlatform						nsSolaris
#		define QOR_SYS_PLATFORMFOLDER			Solaris
#		define QOR_SYS_PLATFORMABBR				SOL_
#		define QOR_SYS_OSABBR					Sol

#	elif	( QOR_SYS_OS == QOR_SYS_SYLLABLE )

#		define nsPlatform						nsSyllable
#		define QOR_SYS_PLATFORMFOLDER			Syllable
#		define QOR_SYS_PLATFORMABBR				SYL_
#		define QOR_SYS_OSABBR					Syl

#	elif	( QOR_SYS_OS == QOR_SYS_UNIX )

#		define nsPlatform						nsUnix
#		define QOR_SYS_PLATFORMFOLDER			Unix
#		define QOR_SYS_PLATFORMABBR				UNX_
#		define QOR_SYS_OSABBR					Unx

#	elif	( QOR_SYS_OS == QOR_SYS_VMS )

#		define nsPlatform						nsVMS
#		define QOR_SYS_PLATFORMFOLDER			VMS
#		define QOR_SYS_PLATFORMABBR				VMS_
#		define QOR_SYS_OSABBR					VMS

#	else

#		error "No Operating System Selected! #define QOR_OS preprocessor symbol e.g QOR_OS=UNIX"

#	endif

#		define QOR_SYS_SYSTEMPATH					QOR_PP_CAT(SystemQOR/,QOR_PP_CAT(QOR_SYS_PLATFORMFOLDER,/))
#       define QOR_SYS_HEADER						QOR_PP_CAT(QOR_SYS_PLATFORMFOLDER,.h)
#		define QOR_SYS_PLATFORMHEADER( _X )			__QCMP_PATHIFY3( SystemQOR,QOR_SYS_PLATFORMFOLDER, QOR_PP_CAT(QOR_SYS_PLATFORMABBR,_X) )
#		define QOR_SYS_PLATFORMTYPES( _X )			__QCMP_PATHIFY5( SystemQOR,QOR_SYS_PLATFORMFOLDER,types,sys,sys_types.h )
#		define QOR_SYS_PLATFORMSYSTYPES( _X )		__QCMP_PATHIFY5( SystemQOR,QOR_SYS_PLATFORMFOLDER,types,sys,sys_types.h )
#		define QOR_SYS_PLATFORMNETINETTYPES( _X )	__QCMP_PATHIFY5( SystemQOR,QOR_SYS_PLATFORMFOLDER,types,sys,sys_types.h )
#		define QOR_SYS_PLATFORMNETTYPES( _X )		__QCMP_PATHIFY5( SystemQOR,QOR_SYS_PLATFORMFOLDER,types,sys,sys_types.h )
#		define QOR_SYS_PLATFORMARPATYPES( _X )		__QCMP_PATHIFY5( SystemQOR,QOR_SYS_PLATFORMFOLDER,types,sys,sys_types.h )
#		define QOR_SYS_PLATFORMSYSHEADER( _X )		__QCMP_PATHIFY4( SystemQOR,QOR_SYS_PLATFORMFOLDER,sys,QOR_PP_CAT( QOR_SYS_PLATFORMABBR, _X ) )
#		define QOR_SYS_PLATFORMARPAHEADER( _X )		__QCMP_PATHIFY4( SystemQOR,QOR_SYS_PLATFORMFOLDER,arpa,QOR_PP_CAT( QOR_SYS_PLATFORMABBR, _X ) )
#		define QOR_SYS_PLATFORMNETHEADER( _X )		__QCMP_PATHIFY4( SystemQOR,QOR_SYS_PLATFORMFOLDER,net,QOR_PP_CAT( QOR_SYS_PLATFORMABBR, _X ) )
#		define QOR_SYS_PLATFORMNETINETHEADER( _X )	__QCMP_PATHIFY4( SystemQOR,QOR_SYS_PLATFORMFOLDER,netinet,QOR_PP_CAT( QOR_SYS_PLATFORMABBR, _X ) )
#       define QOR_SYS_ARCHHEADER( _X )				__QCMP_PATHIFY4( SystemQOR,QOR_SYS_PLATFORMFOLDER,QOR_ARCH_ROOT_FOLDER, _X )
#		define QOR_SYS_SYSTEMHEADER					__QCMP_PATHIFY3( SystemQOR,QOR_SYS_PLATFORMFOLDER,QOR_SYS_HEADER)
#		define QOR_SYS_QLABBR						QOR_PP_CAT( QOR_SYS_OSABBR, QL )
#		define QOR_SYS_QORHEADER( _X )				__QCMP_PATHIFY(QOR_SYS_QLABBR, QOR_PP_CAT( QOR_SYS_QLABBR, _X.h ) )
#		define QOR_SYS_QORHEADER1( _PATH, _X )		__QCMP_PATHIFY3(QOR_SYS_QLABBR, _PATH, QOR_PP_CAT( QOR_SYS_QLABBR, _X.h ) )
#		define QOR_SYS_POSUMABBR					QOR_PP_CAT( QOR_SYS_OSABBR, Posum )
#		define QOR_SYS_POSUMHEADER( _X )			__QCMP_PATHIFY( QOR_SYS_POSUMABBR, QOR_PP_CAT( QOR_SYS_OSABBR, _X.h ) )

#endif//SYSTEMQOR_SYSTEMSELECTION_H_1
