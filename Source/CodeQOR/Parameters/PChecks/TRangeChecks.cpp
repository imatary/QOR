//TRangeChecks.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
#include "CodeQOR/Parameters/ParamChecking.h"
#include "CodeQOR/Parameters/PChecks/TRangeChecks.h"
#include "CodeQOR/ErrorSystem/ParamErrorDomain.h"
#include "AppocritaQOR/Event.h"

//--------------------------------------------------------------------------------
namespace nsParamChecking
{
	//--------------------------------------------------------------------------------
	//Parameter range check implementations

	//--------------------------------------------------------------------------------	
	//Ensure that the int value is larger than the minimum specified
	void CLargerCheck::Check( int iValue, int iMin )
	{
		if( !( iValue > iMin ) )
		{
			nsCodeQOR::CError::CBaseErrorParams Params( nsCodeQOR::CBaseErrorDomain::RANGE_ERROR, "Range error" );
			nsCodeQOR::CError::Raise( __FILE__, __LINE__, __QCMP_FUNCSIG__( "CLargerCheck::Check" ), nsCodeQOR::CObjectContextBase::nullContext,
				Params, &(nsCodeQOR::ParamErrorDomain()), nsCodeQOR::CError::ERR_LVL_CONTINUE );				
		}
	}

	//--------------------------------------------------------------------------------	
	//Ensure that the long value is larger than the minimum specified
	void CLargerCheck::Check( long lValue, long lMin )
	{
		if( !( lValue > lMin ) )
		{
			nsCodeQOR::CError::CBaseErrorParams Params( nsCodeQOR::CBaseErrorDomain::RANGE_ERROR, "Range error" );
			nsCodeQOR::CError::Raise( __FILE__, __LINE__, __QCMP_FUNCSIG__( "CLargerCheck::Check" ), nsCodeQOR::CObjectContextBase::nullContext,
				Params, &(nsCodeQOR::ParamErrorDomain()), nsCodeQOR::CError::ERR_LVL_CONTINUE );				
		}
	}

	//--------------------------------------------------------------------------------	
	//Ensure that the int value is larger than or equal to the minimum specified
	void CLargerEqualCheck::Check( int iValue, int iMin )
	{
		if( !( iValue >= iMin ) )
		{
			nsCodeQOR::CError::CBaseErrorParams Params( nsCodeQOR::CBaseErrorDomain::RANGE_ERROR, "Range error" );
			nsCodeQOR::CError::Raise( __FILE__, __LINE__, __QCMP_FUNCSIG__( "CLargerEqualCheck::Check" ), nsCodeQOR::CObjectContextBase::nullContext,
				Params, &(nsCodeQOR::ParamErrorDomain()), nsCodeQOR::CError::ERR_LVL_CONTINUE );				
		}
	}

	//--------------------------------------------------------------------------------	
	//Ensure that the int value is smaller than or equal to the maximum specified
	void CSmallerEqualCheck::Check( int iValue, int iMax )
	{
		if( !( iValue <= iMax ) )
		{
			nsCodeQOR::CError::CBaseErrorParams Params( nsCodeQOR::CBaseErrorDomain::RANGE_ERROR, "Range error" );
			nsCodeQOR::CError::Raise( __FILE__, __LINE__, __QCMP_FUNCSIG__( "CSmallerEqualCheck::Check" ), nsCodeQOR::CObjectContextBase::nullContext,
				Params, &(nsCodeQOR::ParamErrorDomain()), nsCodeQOR::CError::ERR_LVL_CONTINUE );				
		}
	}

	//--------------------------------------------------------------------------------	
	//Ensure that the long value is larger than or equal to the minimum specified
	void CLargerEqualCheck::Check( long lValue, long lMin )
	{
		if( !( lValue >= lMin ) )
		{
			nsCodeQOR::CError::CBaseErrorParams Params( nsCodeQOR::CBaseErrorDomain::RANGE_ERROR, "Range error" );
			nsCodeQOR::CError::Raise( __FILE__, __LINE__, __QCMP_FUNCSIG__( "CLargerEqualCheck::Check" ), nsCodeQOR::CObjectContextBase::nullContext,
				Params, &(nsCodeQOR::ParamErrorDomain()), nsCodeQOR::CError::ERR_LVL_CONTINUE );				
		}
	}

	//--------------------------------------------------------------------------------	
	//Ensure that the long value is smaller than or equal to the maximum specified
	void CSmallerEqualCheck::Check( long lValue, long lMax )
	{
		if( !( lValue <= lMax ) )
		{
			nsCodeQOR::CError::CBaseErrorParams Params( nsCodeQOR::CBaseErrorDomain::RANGE_ERROR, "Range error" );
			nsCodeQOR::CError::Raise( __FILE__, __LINE__, __QCMP_FUNCSIG__( "CSmallerEqualCheck::Check" ), nsCodeQOR::CObjectContextBase::nullContext,
				Params, &(nsCodeQOR::ParamErrorDomain()), nsCodeQOR::CError::ERR_LVL_CONTINUE );				
		}
	}

	//--------------------------------------------------------------------------------	
	//Ensure that the long value is equal to the check value
	void CEqualCheck::Check( long lValue, long lCheck )
	{
		if( !( lValue == lCheck ) )
		{
			nsCodeQOR::CError::CBaseErrorParams Params( nsCodeQOR::CBaseErrorDomain::RANGE_ERROR, "Value error" );
			nsCodeQOR::CError::Raise( __FILE__, __LINE__, __QCMP_FUNCSIG__( "CEqualCheck::Check" ), nsCodeQOR::CObjectContextBase::nullContext,
				Params, &(nsCodeQOR::ParamErrorDomain()), nsCodeQOR::CError::ERR_LVL_CONTINUE );				
		}
	}

}//nsParamChecking
