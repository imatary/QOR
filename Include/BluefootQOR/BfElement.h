//BfElement.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Defines an element of a Bluefoot pipeline

#ifndef BLUEFOOT_ELEMENT_H_3
#define BLUEFOOT_ELEMENT_H_3

#include "CompilerQOR.h"
//#include <vector>
#include "BfBuffer.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CSource;
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CSink;

	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CElement
	{
	public:

		//------------------------------------------------------------------------------
		enum eFlowMode
		{
			ePull,
			ePush
		};

		CElement();
		virtual ~CElement();
		CElement(const CElement& src);
		CElement& operator = (const CElement& src);

		CElement* GetParent(void);
		void SetParent(CElement* pParent);

		//------------------------------------------------------------------------------
		virtual bool IsBuffered(void)
		{
			return m_pBuffer != 0;
		}

		//------------------------------------------------------------------------------
		virtual bool IsSource( void )
		{
			return false;
		}

		//------------------------------------------------------------------------------
		virtual bool IsSink( void )
		{
			return false;
		}

		//--------------------------------------------------------------------------------
		void SetBuffer( CBuffer* pIOBuffer )
		{
			m_pBuffer = pIOBuffer;
		}

		//--------------------------------------------------------------------------------
		virtual CBuffer* GetBuffer( void )
		{
			return m_pBuffer;
		}

		//--------------------------------------------------------------------------------
		virtual void SetSource( CSource* pSource )
		{
		}

		//--------------------------------------------------------------------------------
		virtual CSource* GetSource( void )
		{
			return nullptr;
		}

		//--------------------------------------------------------------------------------
		virtual void SetSink( CSink* pSink )
		{
		}

		//--------------------------------------------------------------------------------
		virtual CSink* GetSink( void )
		{
			return nullptr;
		}

		//------------------------------------------------------------------------------
		virtual eFlowMode GetMode(void)
		{
			return ePull;
		}

	protected:

		CElement* m_pParent;//The owning element or pipeline
		CBuffer* m_pBuffer;

	};

}//nsBluefoot

#endif//BLUEFOOT_ELEMENT_H_3
