//ParamErrorDomain.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"
#include "CodeQOR/ErrorSystem/ParamErrorDomain.h"
#include "CodeQOR/Text/CodeString.h"
#include "AppocritaQOR/Event.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	CParamErrorDomain TheParamErrorDomain;

	//--------------------------------------------------------------------------------
	CParamErrorDomain::CParamErrorDomain() : CBaseErrorDomain( _TXT("CodeQOR parameter errors") )
	{
		
	}

	//--------------------------------------------------------------------------------
	CParamErrorDomain::~CParamErrorDomain()
	{
	}

	//--------------------------------------------------------------------------------
	__QOR_INTERFACE( __CODEQOR ) CParamErrorDomain& ParamErrorDomain( void )
	{
		return TheParamErrorDomain;
	}
	
	//--------------------------------------------------------------------------------
	const CBaseErrorDomain::s_BaseError CParamErrorDomain::m_PENotes[ 1 ] = 
	{
		{ _TXT(""), { 0 } }
	};

	//--------------------------------------------------------------------------------
	const CBaseErrorDomain::s_BaseError CParamErrorDomain::m_PEWarnings[ CParamErrorDomain::MAX_PEWARNS - CBaseErrorDomain::MAX_WARNS ] = 
	{
		{ _TXT("Unknown warning"), { 0 } },
		{ _TXT("Return value not initialized."), { 0 } },
	};

	//--------------------------------------------------------------------------------
	const CBaseErrorDomain::s_BaseError CParamErrorDomain::m_PEErrors[ CParamErrorDomain::MAX_PEERRORS - CBaseErrorDomain::MAX_ERRORS ] =
	{
		{ _TXT("Unknown parameter error"), { 0 } },
		{ _TXT("Parameter failed NULL pointer check."), { 0 } },
		{ _TXT("Pointer parameter does not reference enough or any readable memory."), { 0 } },
		{ _TXT("String parameter exceeds maximum length."), { 0 } },
		{ _TXT("String contains too many delimited parts."), { 0 } },
		{ _TXT("Pointer parameter does not reference enough or any writable memory."), { 0 } },
		{ _TXT("Parameter check failure."), { 0 } }
	};

	//--------------------------------------------------------------------------------
    const CBaseErrorDomain::s_BaseError* CParamErrorDomain::NoteTemplate( unsigned int uiCode )
	{
        if( uiCode < CBaseErrorDomain::MAX_NOTES )
        {
			return CBaseErrorDomain::NoteTemplate( uiCode );			
        }
        else
        {
			return &m_PENotes[ uiCode - CBaseErrorDomain::MAX_NOTES ];
        }
	}

	//--------------------------------------------------------------------------------
    const CBaseErrorDomain::s_BaseError* CParamErrorDomain::WarningTemplate( unsigned int uiCode )
	{
		if( uiCode < CBaseErrorDomain::MAX_WARNS )
        {
			return CBaseErrorDomain::WarningTemplate( uiCode );			
        }
        else
        {
			return &m_PEWarnings[ uiCode - CBaseErrorDomain::MAX_WARNS ];
        }
	}

	//--------------------------------------------------------------------------------
    const CBaseErrorDomain::s_BaseError* CParamErrorDomain::ErrorTemplate( unsigned int uiCode )
	{
		if( uiCode < CBaseErrorDomain::MAX_ERRORS )
        {
			return CBaseErrorDomain::ErrorTemplate( uiCode );			
        }
        else
        {
			return &m_PEErrors[ uiCode - CBaseErrorDomain::MAX_ERRORS ];
        }
	}

}//nsCodeQOR
