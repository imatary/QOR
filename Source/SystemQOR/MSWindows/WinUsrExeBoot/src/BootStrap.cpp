//BootStrap.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "../Source/SystemQOR/MSWindows/WinUsrExeBoot/include/BootStrap.h"

//The application code entry point will match one of these two names dependent on it being a GUI or Console application
#ifdef  _WINDOWS
	int __stdcall _tWinMain( void* hInstance, void* prevInstance, TCHAR* cmdLine, int nShowCmd );
#else
	int __cdecl _tmain( int _Argc, TCHAR** _Argv, TCHAR** _Env );
#endif


//Ensure reserved space for static initializers is allocated at compile time and zeroed so static initialization can find the end of the list

// C initializers
#pragma __QCMP_DATA_SEGMENT(".CRT$XIA")
CBootStrap::InitFunc CBootStrap::CInit_a[] __attribute__((section (".CRT$XIA" ))) = { 0 };
#pragma __QCMP_DATA_SEGMENT(".CRT$XIZ")
CBootStrap::InitFunc CBootStrap::CInit_z[] __attribute__((section (".CRT$XIZ" ))) = { 0 };

// C++ initializers
#pragma __QCMP_DATA_SEGMENT(".CRT$XCA")
CBootStrap::InitFunc CBootStrap::CppInit_a[] __attribute__((section (".CRT$XCA" ))) = { 0 };
#pragma __QCMP_DATA_SEGMENT(".CRT$XCZ")
CBootStrap::InitFunc CBootStrap::CppInit_z[] __attribute__((section (".CRT$XCZ" ))) = { 0 };

#pragma __QCMP_DATA_SEGMENT()

//Tell the compiler to merge the reserved data sections above into the general read only data section for Win64 or the data section for Win32
//We need the Win32 statics to be in writable memory so we can make some modifications on startup to allow nice things like per thread data
//and structured exception handling later on.

#ifdef _M_IA64
	#pragma comment(linker, "/merge:.CRT=.rdata")
#else
	#pragma comment(linker, "/merge:.CRT=.data")
#endif

//The executable bootstrap static library is represented by a library object
nsCodeQOR::CLibraryBase WindowsExecutableBootstrapLibrary( "Windows Executable Bootstrap library", false );

//The module global pointer to the module bootstrap object
CBootStrap* g_pBootStrap;

//--------------------------------------------------------------------------------
//Construct a Windows process bootstrap
CBootStrap::CBootStrap() : nsWin32::CProcessBootStrap()
{
	g_pBootStrap = this;
	InitTerm( CInit_a, CInit_z );		//Initialize 'C' statics so the process can use 'C' code if desired
	InitTerm( CppInit_a, CppInit_z );	//Initialize C++ statics belonging to this process module
	ParseCommandLine();					//Get the command line parameters to pass to the user code entry point
}

//--------------------------------------------------------------------------------
int CBootStrap::Execute( void )
{
	int iResult = -1;

	__QCMP_TRY
	{
#ifdef  _WINDOWS
		iResult = _tWinMain( const_cast< nsWin32::ImageDOSHeader *>( &nsWin32::__ImageBase ), 0, (TCHAR*)m_szCommandLine, m_StartupInfo.dwFlags & nsWin32::StartF_UseShowWindow ? m_StartupInfo.wShowWindow : 10 );
#else
		iResult = _tmain( m_iArgCount, m_pArgsList, m_pEnvList );
#endif
	}
	__QCMP_FINALLY
	{
	}

	return iResult;
}

//--------------------------------------------------------------------------------
CBootStrap::~CBootStrap()
{
}

//--------------------------------------------------------------------------------
//The Process is neither a static library nor a shared library so we must provide access to a 'Module' Context which is in fact the Process object
nsCodeQOR::CLoadableModuleBase& ThisModule( void )
{
	nsCodeQOR::CLoadableModuleBase& Module( *( nsWin32::CProcess::ThisProcess() ) );
	return Module;
}

//------------------------------------------------------------------------------
const char* __QCMP_LOCAL ThisModuleVersion( void )
{
	return QOR_PP_STRINGIZE(__DATE__:__TIME__);
}

//--------------------------------------------------------------------------------
int atexit( void (*pFunc)( void ) )
{
	
	return g_pBootStrap->atexit( pFunc );
}
