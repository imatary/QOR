//DefaultInstancer.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A Default unrestricted instancer that simply gets a new instance from the Source each time

#ifndef CODEQOR_DEFAULTINSTANCER_H_1
#define CODEQOR_DEFAULTINSTANCER_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "../Traits/MemoryTraits.h"
#include "../MemoryManagement/DefaultSource.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	template< typename TSource, typename T >
	class CDefaultInstancer
	{

	public:

		typedef TSource CTSource;

		//--------------------------------------------------------------------------------
		T* Instance()
		{
			byte* pMemory = m_Source.Source( sizeof( T ) );
			T* pT = new( pMemory )( T );
			return pT;
		}

		//--------------------------------------------------------------------------------
		template< typename _P >
		T* Instance( _P p1 )
		{
			byte* pMemory = m_Source.Source(sizeof(T));
			T* pT = new(pMemory)(T(p1));
			return pT;
		}

		//--------------------------------------------------------------------------------
		void Release( T* pT )
		{
			pT->~T();
			m_Source.Free( reinterpret_cast< byte* >( pT ), sizeof( T ) );
		}

		//--------------------------------------------------------------------------------
		CDefaultInstancer(){}

		//--------------------------------------------------------------------------------
		~CDefaultInstancer(){}

		//--------------------------------------------------------------------------------
		CDefaultInstancer( const CDefaultInstancer& src )
		{
			*this = src;
		}

		//--------------------------------------------------------------------------------
		CDefaultInstancer& operator = ( const CDefaultInstancer& src )
		{
			if( &src != this )
			{
				m_Source = src.m_Source;
			}
			return *this;
		}

		//--------------------------------------------------------------------------------
		CTSource& Source( void )
		{
			return m_Source;
		}

	private:

		CTSource m_Source;
	};

}//nsCodeQOR

#endif//CODEQOR_DEFAULTINSTANCER_H_1

