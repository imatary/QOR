// Utils.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Tiny things that serve a reusable purpose and are completely portable on top of CompilerQOR

#ifndef CODEQOR_UTILS_H_1
#define CODEQOR_UTILS_H_1

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{	
	//--------------------------------------------------------------------------------
	//tag structs for specific constructor overrides
	//--------------------------------------------------------------------------------
	struct __QCMP_LOCAL _DontInitialize 
	{
	};

	//--------------------------------------------------------------------------------
	struct __QCMP_LOCAL _Initialize 
	{
	};

	//--------------------------------------------------------------------------------
	// Returns true if a given integer x is signed 8-bit integer
	static inline bool isInt8( Cmp_int_ptr x ) __QCMP_THROW 
	{ 
		return x >= -128 && x <= 127; 
	}
	
	//--------------------------------------------------------------------------------
	// Returns true if a given integer x is unsigned 8-bit integer
	static inline bool isUInt8( Cmp_int_ptr x ) __QCMP_THROW 
	{ 
		return x >= 0 && x <= 255; 
	}

	//--------------------------------------------------------------------------------
	// Returns true if a given integer x is signed 16-bit integer
	static inline bool isInt16( Cmp_int_ptr x ) __QCMP_THROW 
	{ 
		return x >= -32768 && x <= 32767; 
	}
	
	//--------------------------------------------------------------------------------
	// Returns true if a given integer x is unsigned 16-bit integer
	static inline bool isUInt16( Cmp_int_ptr x ) __QCMP_THROW 
	{ 
		return x >= 0 && x <= 65535; 
	}

	//--------------------------------------------------------------------------------
	// Returns true if a given integer x is signed 32-bit integer
	static inline bool isInt32( Cmp_int_ptr x ) __QCMP_THROW
	{
#if	( QOR_ARCH_WORDSIZE == 32 )
		return true;
#else
		return x >= __QCMP_i64_SUFFIX( -2147483648 ) && x <= __QCMP_i64_SUFFIX( 2147483647 );
#endif
	}

	//--------------------------------------------------------------------------------
	// Returns true if a given integer x is unsigned 32-bit integer
	static inline bool isUInt32( Cmp_int_ptr x ) __QCMP_THROW
	{
#if	( QOR_ARCH_WORDSIZE == 32 )
		return x >= 0;
#else
		return x >= 0 && x <= __QCMP_i64_SUFFIX(4294967295);
#endif
	}

	//--------------------------------------------------------------------------------
	// [Bit Utils]
	static inline Cmp_unsigned__int32 maskFromIndex( Cmp_unsigned__int32 x )
	{
		return ( 1U << x );
	}

	//--------------------------------------------------------------------------------
	static inline Cmp_unsigned__int32 maskUpToIndex( Cmp_unsigned__int32 x )
	{
		return x >= 32 ? 0xFFFFFFFF : ( 1U << x ) - 1;
	}

	//--------------------------------------------------------------------------------
	// From http://graphics.stanford.edu/~seander/bithacks.html .
	static inline Cmp_unsigned__int32 bitCount( Cmp_unsigned__int32 x )
	{
		x = x - ( ( x >> 1 ) & 0x55555555 );
		x = ( x & 0x33333333 ) + ( ( x >> 2 ) & 0x33333333 );
		return ( ( x + ( x >> 4 ) & 0xF0F0F0F ) * 0x1010101 ) >> 24;
	}

	//--------------------------------------------------------------------------------
	static inline Cmp_unsigned__int32 findFirstBit( Cmp_unsigned__int32 mask ) __QCMP_THROW
	{
		for( Cmp_unsigned__int32 i = 0, bit = 1; i < sizeof( Cmp_unsigned__int32 ) * 8; i++, bit <<= 1 )
		{
			if( mask & bit )
			{
				return i;
			}
		}

		// INVALID_VALUE.
		return 0xFFFFFFFF;
	}

	//--------------------------------------------------------------------------------
	// [Alignment]

	//--------------------------------------------------------------------------------
	// Align variable x to 16-bytes.
	template< typename T >
	static inline T alignTo16( const T& x )
	{
		return ( x + ( T )15 ) & ( T )~15;
	}

	//--------------------------------------------------------------------------------
	// Return the size needed to align variable x to 16-bytes.
	template< typename T >
	static inline T deltaTo16( const T& x )
	{
		T aligned = alignTo16( x );
		return aligned - x;
	}

	//--------------------------------------------------------------------------------
	static inline void memset32( Cmp_unsigned__int32* p, Cmp_unsigned__int32 c, Cmp_uint_ptr len ) __QCMP_THROW
	{
		Cmp_uint_ptr i;
		for( i = 0; i < len; i++ ) 
		{
			p[ i ] = c;
		}
	}

	__QOR_INTERFACE( __CODEQOR ) char* mycpy( char* dst, const char* src, Cmp_uint_ptr len = (Cmp_uint_ptr)-1) __QCMP_THROW;
	__QOR_INTERFACE( __CODEQOR ) char* myutoa( char* dst, Cmp_uint_ptr i, Cmp_uint_ptr base = 10 ) __QCMP_THROW;
	__QOR_INTERFACE( __CODEQOR ) char* myitoa( char* dst, Cmp_int_ptr i, Cmp_uint_ptr base = 10 ) __QCMP_THROW;
	__QOR_INTERFACE( __CODEQOR ) char* myfill( char* dst, const int c, Cmp_uint_ptr len) __QCMP_THROW;
	__QOR_INTERFACE( __CODEQOR ) char* myhex(char* dst, const Cmp_unsigned__int8* src, Cmp_uint_ptr len) __QCMP_THROW;

}//nsCodeQOR

#endif//CODEQOR_UTILS_H_1
