//BfFilter.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_FILTER_H_3
#define BLUEFOOT_FILTER_H_3

//Defines a filter pipeline element

#include "BfSource.h"
#include "BFSink.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CFilter : public CElement
	{
	public:

		CFilter();
		virtual ~CFilter();
		CFilter(const CFilter& src);
		CFilter& operator = (const CFilter& src);

		void SetSink( CSink* pSink );
		CSink* GetSink( void );
		void SetSource( CSource* pSource );
		CSource* GetSource( void );

		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead = 1 );
		virtual bool Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite = 1 );//Get the units from the source and output them

		//------------------------------------------------------------------------------
		virtual bool IsSouce( void )
		{
			return true;
		}

		//------------------------------------------------------------------------------
		virtual bool IsSink( void )
		{
			return true;
		}

		//------------------------------------------------------------------------------
		virtual eFlowMode GetMode(void)
		{
			return m_pParent->GetMode();
		}

		//------------------------------------------------------------------------------
		virtual CBuffer* GetSourceBuffer( void )
		{
			return m_pBuffer;
		}

		CSource* AsSource( void );
		CSink* AsSink( void );

	protected:

		CSinkProxy< CFilter > m_SinkProxy;
		CSourceProxy< CFilter > m_SourceProxy;
	};

}//nsBluefoot

#endif//BLUEFOOT_FILTER_H_3
