//WinQLDeviceInterfaceClassCollection.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterfaceClassCollection.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterfaceClass.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/GUI/Window.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/SetupAPI.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;
		
	//--------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CDeviceInterfaceClassCollection );

	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::BUS1394_CLASS_GUID						= { 0x6BDD1FC1, 0x810F, 0x11d0, { 0xBE, 0xC7, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_61883_CLASS							= { 0x7EBEFBC0, 0x3200, 0x11d2, { 0xB4, 0xC2, 0x00, 0xA0, 0xC9, 0x69, 0x7D, 0x07 } };

	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVICE_APPLICATIONLAUNCH_BUTTON		= { 0x629758EE, 0x986E, 0x4D9E, { 0x8E, 0x47, 0xDE, 0x27, 0xF8, 0xAB, 0x05, 0x4D } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVICE_BATTERY						= { 0x72631E54, 0x78A4, 0x11D0, { 0xBC, 0xF7, 0x00, 0xAA, 0x00, 0xB7, 0xB3, 0x2A } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVICE_LID							= { 0x4AFA3D52, 0x74A7, 0x11d0, { 0xbe, 0x5e, 0x00, 0xA0, 0xC9, 0x06, 0x28, 0x57 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVICE_MEMORY						= { 0x3FD0F03D, 0x92E0, 0x45FB, { 0xB7, 0x5C, 0x5E, 0xD8, 0xFF, 0xB0, 0x10, 0x21 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVICE_MESSAGE_INDICATOR			= { 0xCD48A365, 0xFA94, 0x4CE2, { 0xA2, 0x32, 0xA1, 0xB7, 0x64, 0xE5, 0xD8, 0xB4 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVICE_PROCESSOR					= { 0x97FADB10, 0x4E33, 0x40AE, { 0x35, 0x9C, 0x8B, 0xEF, 0x02, 0x9D, 0xBD, 0xD0 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVICE_SYS_BUTTON					= { 0x4AFA3D53, 0x74A7, 0x11d0, { 0xbe, 0x5e, 0x00, 0xA0, 0xC9, 0x06, 0x28, 0x57 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVICE_THERMAL_ZONE					= { 0x4AFA3D51, 0x74A7, 0x11d0, { 0xbe, 0x5e, 0x00, 0xA0, 0xC9, 0x06, 0x28, 0x57 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_BTHPORT_DEVICE_INTERFACE			= { 0x0850302A, 0xB344, 0x4fda, { 0x9B, 0xE9, 0x90, 0x57, 0x6B, 0x8D, 0x46, 0xF0 } };

	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVINTERFACE_BRIGHTNESS				= { 0xFDE5BBA4, 0xB3F9, 0x46FB, { 0xBD, 0xAA, 0x07, 0x28, 0xCE, 0x31, 0x00, 0xB4 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVINTERFACE_DISPLAY_ADAPTER		= { 0x5B45201D, 0xF2F2, 0x4F3B, { 0x85, 0xBB, 0x30, 0xFF, 0x1F, 0x95, 0x35, 0x99 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVINTERFACE_I2C					= { 0x2564AA4F, 0xDDDB, 0x4495, { 0xB4, 0x97, 0x6A, 0xD4, 0xA8, 0x41, 0x63, 0xD7 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVINTERFACE_IMAGE					= { 0x6BDD1FC6, 0x810F, 0x11D0, { 0xBE, 0xC7, 0x08, 0x00, 0x2B, 0xE2, 0x09, 0x2F } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVINTERFACE_MONITOR				= { 0xE6F07B5F, 0xEE97, 0x4a90, { 0xB0, 0x76, 0x33, 0xF5, 0x7B, 0xF4, 0xEA, 0xA7 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVINTERFACE_OPM					= { 0xBF4672DE, 0x6B4E, 0x4BE4, { 0xA3, 0x25, 0x68, 0xA9, 0x1E, 0xA4, 0x9C, 0x09 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVINTERFACE_VIDEO_OUTPUT_ARRIVAL	= { 0x1AD9E4F0, 0xF88D, 0x4360, { 0xBA, 0xB9, 0x4C, 0x2D, 0x55, 0xE5, 0x64, 0xCD } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DISPLAY_DEVICE_ARRIVAL				= { 0x1CA05180, 0xA699, 0x450A, { 0x9A, 0x0C, 0xDE, 0x4F, 0xBE, 0x3D, 0xDD, 0x89 } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVINTERFACE_KEYBOARD				= { 0x884b96c3, 0x56ef, 0x11d1, { 0xbc, 0x8c, 0x00, 0xa0, 0xc9, 0x14, 0x05, 0xdd } };
	nsCodeQOR::__mxGUID CDeviceInterfaceClassCollection::GUID_DEVINTERFACE_MOUSE					= { 0x378de44c, 0x56ef, 0x11d1, { 0xbc, 0x8c, 0x00, 0xa0, 0xc9, 0x14, 0x05, 0xdd } };

	//--------------------------------------------------------------------------------
	CDeviceInterfaceClassCollection::CDeviceInterfaceClassCollection( const mxTCHAR* szMachine ) : std::map< nsCodeQOR::__mxGUID*, CDeviceInterfaceClass* >(), m_Library( CSetupAPI::Instance() )
	,	m_szMachine( szMachine )
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceClassCollection::CDeviceInterfaceClassCollection" );

		RegisterInterfaceClass( &BUS1394_CLASS_GUID );
		RegisterInterfaceClass( &GUID_61883_CLASS );
		
		RegisterInterfaceClass( &GUID_DEVICE_APPLICATIONLAUNCH_BUTTON );
		RegisterInterfaceClass( &GUID_DEVICE_BATTERY );
		RegisterInterfaceClass( &GUID_DEVICE_LID );
		RegisterInterfaceClass( &GUID_DEVICE_MEMORY );
		RegisterInterfaceClass( &GUID_DEVICE_MESSAGE_INDICATOR );
		RegisterInterfaceClass( &GUID_DEVICE_PROCESSOR );
		RegisterInterfaceClass( &GUID_DEVICE_SYS_BUTTON );
		RegisterInterfaceClass( &GUID_DEVICE_THERMAL_ZONE );
		RegisterInterfaceClass( &GUID_BTHPORT_DEVICE_INTERFACE );
		RegisterInterfaceClass( &GUID_DEVINTERFACE_KEYBOARD );
		RegisterInterfaceClass( &GUID_DEVINTERFACE_MOUSE );

		RegisterInterfaceClass( &GUID_DEVINTERFACE_BRIGHTNESS );
		RegisterInterfaceClass( &GUID_DEVINTERFACE_DISPLAY_ADAPTER );
		RegisterInterfaceClass( &GUID_DEVINTERFACE_I2C );
		RegisterInterfaceClass( &GUID_DEVINTERFACE_IMAGE );
		RegisterInterfaceClass( &GUID_DEVINTERFACE_MONITOR );
		RegisterInterfaceClass( &GUID_DEVINTERFACE_OPM );
		RegisterInterfaceClass( &GUID_DEVINTERFACE_VIDEO_OUTPUT_ARRIVAL );
		RegisterInterfaceClass( &GUID_DISPLAY_DEVICE_ARRIVAL );

	}

	//--------------------------------------------------------------------------------
	CDeviceInterfaceClassCollection::CDeviceInterfaceClassCollection( const CDeviceInterfaceClassCollection& src ) : m_Library( CSetupAPI::Instance() )
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceClassCollection::CDeviceInterfaceClassCollection" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CDeviceInterfaceClassCollection& CDeviceInterfaceClassCollection::operator = ( const CDeviceInterfaceClassCollection& src )
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceClassCollection::operator =" );
		if( &src != this )
		{
			m_szMachine = src.m_szMachine;
			BaseType::operator=(src);
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CDeviceInterfaceClassCollection::~CDeviceInterfaceClassCollection()
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceClassCollection::~CDeviceInterfaceClassCollection" );
	}

	//--------------------------------------------------------------------------------
	nsCodeQOR::CTLRef< CDeviceInterfaceClass > CDeviceInterfaceClassCollection::RegisterInterfaceClass( nsCodeQOR::__mxGUID* pGUID )
	{
		_WINQ_FCONTEXT( "CDeviceInterfaceClassCollection::RegisterInterfaceClass" );
		CDeviceInterfaceClass* pDeviceInterfaceClass = new CDeviceInterfaceClass( *pGUID, m_szMachine );

		insert( std::make_pair( pGUID, pDeviceInterfaceClass ) );
		
		nsCodeQOR::CTLRef< CDeviceInterfaceClass > Result( pDeviceInterfaceClass, false );
		return Result;
	}

}//nsWin32
