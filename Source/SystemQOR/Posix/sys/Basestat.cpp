//Basestat.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR/Posix/sys/Basestat.h"
#include <errno.h>
#include "CodeQOR/Tracing/FunctionContextBase.h"

//--------------------------------------------------------------------------------
namespace nsBaseCRT
{
	__QOR_IMPLEMENT_OCLASS_LUID( Csys_stat );

	//--------------------------------------------------------------------------------
	Csys_stat::Csys_stat()
	{
		__QCS_FCONTEXT("Csys_stat::Csys_stat");
	}

	//--------------------------------------------------------------------------------
	Csys_stat::~Csys_stat()
	{
		__QCS_FCONTEXT("Csys_stat::~Csys_stat");
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::chmod( const char*, mode_t )
	{
		__QCS_FCONTEXT("Csys_stat::chmod");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::fchmod( int, mode_t )
	{
		__QCS_FCONTEXT("Csys_stat::fchmod");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::fchmodat( int, const char*, mode_t, int )
	{
		__QCS_FCONTEXT("Csys_stat::fchmodat");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::fstat( int, nsPlatform::file_stat* )
	{
		__QCS_FCONTEXT("Csys_stat::fstat");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::fstatat( int, const char* __QCMP_RESTRICT, nsPlatform::file_stat* __QCMP_RESTRICT, int )
	{
		__QCS_FCONTEXT("Csys_stat::fstatat");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::futimens( int, const timespec[ 2 ] )
	{
		__QCS_FCONTEXT("Csys_stat::futimens");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::lstat( const char* __QCMP_RESTRICT, nsPlatform::file_stat* __QCMP_RESTRICT )
	{
		__QCS_FCONTEXT("Csys_stat::lstat");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::mkdir( const char*, mode_t )
	{
		__QCS_FCONTEXT("Csys_stat::mkdir");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::mkdirat( int, const char*, mode_t )
	{
		__QCS_FCONTEXT("Csys_stat::mkdirat");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::mkfifo( const char*, mode_t )
	{
		__QCS_FCONTEXT("Csys_stat::mkfifo");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::mkfifoat( int, const char*, mode_t )
	{
		__QCS_FCONTEXT("Csys_stat::mkfifoat");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::mknod( const char*, mode_t, dev_t )
	{
		__QCS_FCONTEXT("Csys_stat::mknod");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::mknodat( int, const char*, mode_t, dev_t )
	{
		__QCS_FCONTEXT("Csys_stat::mknodat");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::stat( const char* __QCMP_RESTRICT, nsPlatform::file_stat* __QCMP_RESTRICT )
	{
		__QCS_FCONTEXT("Csys_stat::stat");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	mode_t Csys_stat::umask( mode_t )
	{
		__QCS_FCONTEXT("Csys_stat::umask");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::utimensat( int, const char*, const timespec[ 2 ], int )
	{
		__QCS_FCONTEXT("Csys_stat::utimensat");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::_umask( int pmode )
	{
		__QCS_FCONTEXT("Csys_stat::_umask");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	errno_t Csys_stat::_umask_s( int mode, int* pOldMode )
	{
		__QCS_FCONTEXT("Csys_stat::_umask_s");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::_stat( const char* path, sstat* buffer )
	{
		__QCS_FCONTEXT("Csys_stat::_stat");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::_stat64( const char* path, sstat64* buffer )
	{
		__QCS_FCONTEXT("Csys_stat::_stat64");
		errno = ENOSYS;
		return 0;
	}

	//--------------------------------------------------------------------------------
	int Csys_stat::_stati64( const char* path, sstati64* buffer )
	{
		__QCS_FCONTEXT("Csys_stat::_stati64");
		errno = ENOSYS;
		return 0;
	}

}//nsBaseCRT
