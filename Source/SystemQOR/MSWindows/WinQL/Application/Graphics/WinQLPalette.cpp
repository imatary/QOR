//WinQLPalette.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "CompilerQOR.h"
__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_THIS_USED_IN_BASE_INIT_LIST, "Safe usage: stored in member for later use" )
#include "WinQL/Application/Graphics/WinQLPalette.h"
#include "WinQL/Application/Graphics/DeviceContext/WinQLDCInternal.h"
__QCMP_WARNING_POP
#include "WinQAPI/User32.h"
#include "WinQAPI/GDI32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--Colour Space -----------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CColourSpace );

	__QCMP_DECLARE_PERTHREAD CColourSpaceHandleMap* p_tColourSpaceHandleMap = 0;

	//--------------------------------------------------------------------------------
	CColourSpaceHandleMap& CColourSpace::HandleMap( void )
	{
		_WINQ_SFCONTEXT( "CColourSpace::HandleMap" );
		if( p_tColourSpaceHandleMap == 0 )
		{
			p_tColourSpaceHandleMap = new CColourSpaceHandleMap;
		}

		return *p_tColourSpaceHandleMap;
	}

	//--------------------------------------------------------------------------------
	CColourSpace::CColourSpace( nsWin32::LPLOGCOLORSPACE lpLogColourSpace, int* pbResult ) : CGDIObject< CColourSpace >()
	{	
		_WINQ_FCONTEXT( "CColourSpace::CColourSpace" );
		__QOR_PROTECT
		{
			m_pResult = pbResult;
			SetHandle( m_GDI32Library.CreateColorSpace( reinterpret_cast< ::LPLOGCOLORSPACE >( lpLogColourSpace ) ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CColourSpace::CColourSpace( CDCInternal& DC, int* pbResult ) : CGDIObject< CColourSpace >()
	{	
		_WINQ_FCONTEXT( "CColourSpace::CColourSpace" );
		__QOR_PROTECT
		{
			m_pResult = pbResult;
			m_bOwner = false;
			SetHandle( m_GDI32Library.GetColorSpace( reinterpret_cast< ::HDC >( DC.Handle()->Use() ) ) );
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CColourSpace::~CColourSpace()
	{				
		_WINQ_FCONTEXT( "CColourSpace::CColourSpace" );
		bool bResult = !m_bOwner;
		__QOR_PROTECT
		{
			if( m_bOwner )
			{
				bResult = m_GDI32Library.DeleteColorSpace( reinterpret_cast< ::HCOLORSPACE >( Handle()->Use() ) ) ? true : false;
			}
			if( m_pResult != 0 )
			{
				*m_pResult = bResult;
			}
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------			
	nsWin32::LOGCOLORSPACE CColourSpace::GetData( void )
	{
		_WINQ_FCONTEXT( "CColourSpace::CColourSpace" );
		nsWin32::LOGCOLORSPACE aSpace;
		bool bResult = false;
		__QOR_PROTECT
		{
			memset( &aSpace, 0, sizeof( nsWin32::LOGCOLORSPACE ) );
			bResult = m_GDI32Library.GetLogColorSpace( reinterpret_cast< ::HCOLORSPACE >( Handle()->Use() ), reinterpret_cast< ::LPLOGCOLORSPACE >( &aSpace ), sizeof( nsWin32::LOGCOLORSPACE ) ) ? true : false;
		}__QOR_ENDPROTECT
		return aSpace;
	}

	//-- Palette

	__QOR_IMPLEMENT_OCLASS_LUID( CPalette );

	__QCMP_DECLARE_PERTHREAD CPaletteHandleMap* p_tPaletteHandleMap = 0;

	//--------------------------------------------------------------------------------
	CPaletteHandleMap& CPalette::HandleMap( void )
	{
		_WINQ_SFCONTEXT( "CPalette::HandleMap" );
		if( p_tPaletteHandleMap == 0 )
		{
			p_tPaletteHandleMap = new CPaletteHandleMap;
		}

		return *p_tPaletteHandleMap;
	}

	//--------------------------------------------------------------------------------			
	CPalette::CPalette( CDCHandle::refType hdc ) : CGDIObject< CPalette >()
	{
		_WINQ_FCONTEXT( "CPalette::CPalette" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreateHalftonePalette( reinterpret_cast< ::HDC >( hdc->Use() ) ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}
					
	//--------------------------------------------------------------------------------
	CPalette::CPalette( const nsWin32::LOGPALETTE& logPalette ) : CGDIObject< CPalette >()
	{
		_WINQ_FCONTEXT( "CPalette::CPalette" );
		__QOR_PROTECT
		{
			SetHandle( m_GDI32Library.CreatePalette( reinterpret_cast< const ::LOGPALETTE* >( &logPalette ) ) );
			m_bOwner = true;
		}__QOR_ENDPROTECT
	}

	//--------------------------------------------------------------------------------
	CPalette::~CPalette()
	{
		_WINQ_FCONTEXT( "CPalette::~CPalette" );
		if( m_bOwner && Handle() != 0 )
		{
			m_GDI32Library.DeleteObject( Handle() );
		}
	}

	//--------------------------------------------------------------------------------
	bool CPalette::Animate( unsigned int iStartIndex, unsigned int cEntries, const nsWin32::PALETTEENTRY* ppe )
	{
		_WINQ_FCONTEXT( "CPalette::Animate" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.AnimatePalette( reinterpret_cast< ::HPALETTE >( Handle()->Use() ), iStartIndex, cEntries, reinterpret_cast< const ::PALETTEENTRY* >( ppe ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------			
	unsigned int CPalette::GetNearestIndex( unsigned long crColour )
	{
		_WINQ_FCONTEXT( "CPalette::GetNearestIndex" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.GetNearestPaletteIndex( reinterpret_cast< ::HPALETTE >( Handle()->Use() ), crColour );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------						
	unsigned int CPalette::GetEntries( unsigned int iStartIndex, unsigned int nEntries, nsWin32::LPPALETTEENTRY lppe )
	{
		_WINQ_FCONTEXT( "CPalette::GetEntries" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.GetPaletteEntries( reinterpret_cast< ::HPALETTE >( Handle()->Use() ), iStartIndex, nEntries, reinterpret_cast< ::LPPALETTEENTRY >( lppe ) );
		}__QOR_ENDPROTECT
		return uiResult;
	}
		
	//--------------------------------------------------------------------------------						
	unsigned int CPalette::Realize( CDCHandle::refType hdc )
	{
		_WINQ_FCONTEXT( "CPalette::Realize" );
		unsigned int uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.RealizePalette( reinterpret_cast< ::HDC >( hdc->Use() ) );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------						
	bool CPalette::Resize( unsigned int nEntries )
	{
		_WINQ_FCONTEXT( "CPalette::Resize" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.ResizePalette( reinterpret_cast< ::HPALETTE >( Handle()->Use() ) , nEntries ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------			
	unsigned int CPalette::SetEntries( unsigned int iStart, unsigned int cEntries, const nsWin32::PALETTEENTRY* lppe )
	{
		_WINQ_FCONTEXT( "CPalette::SetEntries" );
		UINT uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = m_GDI32Library.SetPaletteEntries( reinterpret_cast< ::HPALETTE >( Handle()->Use() ), iStart, cEntries, reinterpret_cast< const ::PALETTEENTRY* >( lppe ) );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------			
	bool CPalette::Unrealize()
	{
		_WINQ_FCONTEXT( "CPalette::Unrealize" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.UnrealizeObject( reinterpret_cast< HGDIOBJ >( Handle()->Use() ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------			
	bool CPalette::ColourCorrect( CDCHandle::refType hDC, unsigned long dwFirstEntry, unsigned long dwNumOfEntries )
	{
		_WINQ_FCONTEXT( "CPalette::ColourCorrect" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_GDI32Library.ColorCorrectPalette( reinterpret_cast< ::HDC >( hDC->Use() ), reinterpret_cast< ::HPALETTE >( Handle()->Use() ), dwFirstEntry, dwNumOfEntries ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32
