//WinQLOleObject.cpp

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/COM/Server/OLE/WinQLOleObjectImpl.h"
#include "WinQAPI/OLE32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_COMCLASS_ID( COleObjectImpl, IOleObject, 0x00000112,0x0000,0x0000,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46 );

	//--------------------------------------------------------------------------------
	COleObjectImpl::COleObjectImpl( CIUnknownImplBase<>* pImpl ) : CInterfaceImplBase( pImpl )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::COleObjectImpl" );
	}

	//--------------------------------------------------------------------------------
	COleObjectImpl::~COleObjectImpl()
	{
		_WINQ_FCONTEXT( "COleObjectImpl::~COleObjectImpl" );
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::SetClientSite( IOleClientSite* pClientSite )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::SetClientSite" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::GetClientSite( IOleClientSite** ppClientSite )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::GetClientSite" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::SetHostNames( const wchar_t* szContainerApp, const wchar_t* szContainerObj )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::SetHostNames" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::Close( unsigned long dwSaveOption )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::Close" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::SetMoniker( unsigned long dwWhichMoniker, IMoniker* pmk )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::SetMoniker" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::GetMoniker( unsigned long dwAssign, unsigned long dwWhichMoniker, IMoniker** ppmk )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::GetMoniker" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::InitFromData( IDataObject* pDataObject, int fCreation, unsigned long dwReserved )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::InitFromData" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::GetClipboardData( unsigned long dwReserved, IDataObject** ppDataObject )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::GetClipboardData" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::DoVerb( long iVerb, MSG* lpmsg, IOleClientSite* pActiveSite, long lindex, void* hwndParent, const RECT* lprcPosRect )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::DoVerb" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::EnumVerbs( IEnumOLEVERB** ppEnumOleVerb )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::EnumVerbs" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::Update( void )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::Update" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::IsUpToDate( void )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::IsUpToDate" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::GetUserClassID( GUID* pClsid )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::GetUserClassID" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::GetUserType( unsigned long dwFormOfType, wchar_t** ppszUserType )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::GetUserType" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::SetExtent( unsigned long dwDrawAspect, SIZE* psizel )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::SetExtent" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::GetExtent( unsigned long dwDrawAspect, SIZE* psizel )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::GetExtent" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::Advise( IAdviseSink* pAdvSink, unsigned long* pdwConnection )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::Advise" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::Unadvise( unsigned long dwConnection )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::Unadvise" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::EnumAdvise( IEnumSTATDATA** ppenumAdvise )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::EnumAdvise" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::GetMiscStatus( unsigned long dwAspect, unsigned long* pdwStatus )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::GetMiscStatus" );
		return E_NotImpl;
	}

	//--------------------------------------------------------------------------------
	long __QCMP_STDCALLCONVENTION COleObjectImpl::SetColorScheme( LOGPALETTE* pLogpal )
	{
		_WINQ_FCONTEXT( "COleObjectImpl::SetColorScheme" );
		return E_NotImpl;
	}

}//nsWin32



