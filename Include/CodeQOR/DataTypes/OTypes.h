//OTypes.h

// Copyright Querysoft Limited 2012 - . All rights reserved.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Declare full blown C++ objects for use in direct replacement of the built in C++ types

#ifndef _CODEQOR_OTYPES_H_
#define _CODEQOR_OTYPES_H_

#include "CompilerQOR.h"

#ifdef  __QCMP_OPTIMIZEINCLUDE
#pragma __QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

__QCMP_WARNING_PUSH
__QCMP_WARNING_DISABLE( __QCMP_WARN_UNARY_MINUS_APPLIED_TO_UNSIGNED, _QCMP_TXT("") )

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Void
    {
    public:
		Void();
    };

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Bool
    {
    public:

        Bool();
        explicit Bool(const bool& x);
        Bool(const Bool& x);

        void operator=(const Bool& x);
        void operator=(const bool& x);
                
        operator Cmp_bool();
        friend __QOR_INTERFACE( __CODEQOR ) Bool operator||(const Bool& x0, const Bool& x1);
        friend __QOR_INTERFACE( __CODEQOR ) Bool operator&&(const Bool& x0, const Bool& x1);
        friend __QOR_INTERFACE( __CODEQOR ) Bool operator==(const Bool& x0, const Bool& x1);
        friend __QOR_INTERFACE( __CODEQOR ) Bool operator!=(const Bool& x0, const Bool& x1);
        Bool operator!();

	protected:

        Bool opOr(const Bool& x) const;
        Bool opAnd(const Bool& x) const;
        Bool opEquals(const Bool& x) const;
        Bool opNotEquals(const Bool& x) const;
        Bool opNot() const;
        Cmp_bool ToPrimitive() const;

        Cmp_bool m_Data;
    };  

    __QOR_INTERFACE( __CODEQOR ) Bool operator || ( const Bool& x0, const Bool& x1 );
    __QOR_INTERFACE( __CODEQOR ) Bool operator && ( const Bool& x0, const Bool& x1 );
    __QOR_INTERFACE( __CODEQOR ) Bool operator == ( const Bool& x0, const Bool& x1 );
    __QOR_INTERFACE( __CODEQOR ) Bool operator != ( const Bool& x0, const Bool& x1 );

    //--------------------------------------------------------------------------------
    template< typename Object_T, typename Primitive_T > 
    struct PrimitiveNumber 
    {
        Object_T operator+() const { return m; }
        Object_T operator-() const { return -m; }
        void operator= (const Object_T& x) { opAssign(x); } 
        void operator= (const Primitive_T& x) { opAssign(x); }
        void operator+= (const Object_T& x) { opPlusAssign(x); }
        void operator-= (const Object_T& x) { opMinusAssign(x); }
        void operator*= (const Object_T& x) { opStarAssign(x); }
        void operator/= (const Object_T& x) { opDivAssign(x); }
		
        friend Object_T operator+(const Object_T& x0, const Object_T& x1);
        friend Object_T operator-(const Object_T& x0, const Object_T& x1);
        friend Object_T operator*(const Object_T& x0, const Object_T& x1);
        friend __QOR_INTERFACE( __CODEQOR ) Object_T operator / (const Object_T& x0, const Object_T& x1);
        friend Bool operator > (const Object_T& x0, const Object_T& x1);
        friend Bool operator < (const Object_T& x0, const Object_T& x1);
        friend Bool operator >= (const Object_T& x0, const Object_T& x1);
        friend Bool operator <= (const Object_T& x0, const Object_T& x1);
        friend Bool operator == ( const Object_T& x0, const Object_T& x1);
        //friend Bool operator != (const Object_T& x0, const Object_T& x1);
		
	protected:

        void opAssign(const Object_T& x) { m = x.m; }
        void opAssign(const Primitive_T& x) { m = x; }
        void opPlusAssign(const Object_T& x) { m += x.m; }
        void opMinusAssign(const Object_T& x) { m -= x.m; }
        void opStarAssign(const Object_T& x) { m *= x.m; }
        void opDivAssign(const Object_T& x) { m /= x.m; }
        const Primitive_T& ToPrimitive() const { return m; }
        Primitive_T& ToPrimitive() { return m; }

        Primitive_T m;
    };

    template< typename Object_T > Object_T operator+(const Object_T& x0, const Object_T& x1);// { Object_T ret(x0); ret += x1; return ret; } 
    template< typename Object_T > Object_T operator-(const Object_T& x0, const Object_T& x1);// { Object_T ret(x0); ret -= x1; return ret; } 
    template< typename Object_T > Object_T operator*(const Object_T& x0, const Object_T& x1);// { Object_T ret(x0); ret *= x1; return ret; } 
    //template< typename Object_T > Object_T operator/(const Object_T& x0, const Object_T& x1){ Object_T ret(x0); ret /= x1; return ret; } 
    template< typename Object_T, typename Primitive_T >
		Bool operator > ( const PrimitiveNumber< Object_T, Primitive_T >& x0, const PrimitiveNumber< Object_T, Primitive_T >& x1)
	{ 
		return ( dynamic_cast< const Object_T& >(x0).Compare( dynamic_cast< const Object_T& >( x1 ) ) ) > 0; 
	} 

    template< typename Object_T, typename Primitive_T > 
		Bool operator < ( const PrimitiveNumber< Object_T, Primitive_T >& x0, const PrimitiveNumber< Object_T, Primitive_T >& x1)
	{ 
		return ( dynamic_cast< const Object_T& >(x0).Compare( dynamic_cast< const Object_T& >( x1 ) ) ) < 0; 
	} 

    template< typename Object_T > Bool operator>=(const typename Object_T& x0, const typename Object_T& x1);/// { return x0.Compare(x1) >= 0; } 
    template< typename Object_T > Bool operator<=(const typename Object_T& x0, const typename Object_T& x1);// { return x0.Compare(x1) <= 0; } 
    
	template< typename Object_T, typename Primitive_T >
		Bool operator == ( const PrimitiveNumber< Object_T, Primitive_T >& x0, const PrimitiveNumber< Object_T, Primitive_T >& x1)
	{ 
		return ( dynamic_cast< const Object_T& >(x0).Compare( dynamic_cast< const Object_T& >( x1 ) ) ) == 0; 
	} 
    /*
	//--------------------------------------------------------------------------------
	template< typename Object_T, typename Primitive_T > 
		Bool operator != ( const PrimitiveNumber< Object_T, Primitive_T >& x0, const PrimitiveNumber< Object_T, Primitive_T >& x1)
	{ 
		return ( dynamic_cast< const Object_T& >(x0).Compare( dynamic_cast< const Object_T& >( x1 ) ) ) != 0; 
	} 
	*/
    //--------------------------------------------------------------------------------
    template< typename Object_T, typename Primitive_T >
    struct PrimitiveInt : public PrimitiveNumber< PrimitiveInt< Object_T, Primitive_T >, Primitive_T >
    {
		typedef PrimitiveNumber< PrimitiveInt< Object_T, Primitive_T >, Primitive_T > BaseName;

	public:
	
		__QCMP_USING_BASE( m );

		PrimitiveInt(){ m = 0; }
		//PrimitiveInt( const Object_T& x ){ m = x.m; }
		PrimitiveInt( const PrimitiveInt& x ) { m = x.m; }
		PrimitiveInt( const Primitive_T& x ) { m = x; }

		PrimitiveInt& operator = ( const PrimitiveInt& src )
		{
			m = src.m;
			return *this;
		}

        void operator %= (const Object_T& x) { opModAssign(x); }
        Object_T operator++ () { return opPostInc(); }
        Object_T operator++ (int) { return opPreInc(); }
        Object_T operator-- () { return opPostDec(); }
        Object_T operator-- (int) { return opPreDec(); }
		friend Object_T operator%(const Object_T& x0, const Object_T& x1) ;

		friend Bool operator == ( const Object_T& x0, const Object_T& x1)
		{
			return Bool( x0.Compare( x1 ) == 0 );
		}

	protected:

		void opModAssign(const Object_T& x) { m %= x.m; }
        Object_T opPreInc() { return ++m; }
        Object_T opPreDec() { return --m; }
        Object_T opPostInc() { return m++; }
        Object_T opPostDec() { return m--; }

        Primitive_T Compare(const Object_T& x) const 
        { 
			return m - x.m; 
        }            
    };  
	/*
	template< typename Object_T, typename Primitive_T >
		Bool operator == ( const PrimitiveInt< Object_T, Primitive_T >& x0, const PrimitiveInt< Object_T, Primitive_T >& x1)
	{ 
		return ( x0.Compare( x1 ) == 0 ); 
	} 
		*/
	template< typename Object_T > Object_T operator%( const Object_T& x0, const Object_T& x1 ) 
    { 
        Object_T ret( x0 );
        ret %= x1;
        return ret; 
    } 

    //--------------------------------------------------------------------------------
    template< typename Object_T, typename Primitive_T >
    struct PrimitiveReal : public PrimitiveNumber< PrimitiveReal< Object_T, Primitive_T >, Primitive_T > 
    {
		typedef PrimitiveNumber< PrimitiveReal< Object_T, Primitive_T >, Primitive_T > BaseName;

	public:

		__QCMP_USING_BASE( m );

		PrimitiveReal() { m = 0; }
		PrimitiveReal( const PrimitiveReal& x ) { m = x.m; }
		PrimitiveReal( const Primitive_T& x ) { m = x; }
			
		PrimitiveReal& operator = ( const PrimitiveReal& src )
		{
			m = src.m;
			return *this;
		}

		int Compare( const Object_T& x ) const 
        { 
                return m > x.m ? +1 
                : ( m < x.m ? -1 : 0 ); 
        }
    };

    //--------------------------------------------------------------------------------
    template< typename OType, typename TType >
    struct BaseChar : public PrimitiveInt< BaseChar< OType, TType >, TType > 
    {       
		typedef PrimitiveInt< BaseChar< OType, TType >, TType > BaseName;

	public:

		__QCMP_USING_BASE( m );

		BaseChar() { m = 0; }
        BaseChar(const BaseChar& x) { m = x.m; }
        BaseChar(const TType& x) { m = x; }
		BaseChar& operator = ( const BaseChar& src )
		{
			m = src.m;
			return *this;
		}
    }; 

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) PrimitiveChar : public PrimitiveInt< PrimitiveChar, Cmp_char > 
    {      
		typedef PrimitiveInt< PrimitiveChar, Cmp_char > BaseName;

	public:

		__QCMP_USING_BASE( m );

        PrimitiveChar();
        PrimitiveChar(const PrimitiveChar& x);
        PrimitiveChar(Cmp_C_char& x);
		PrimitiveChar& operator = ( const PrimitiveChar& );
    }; 

    template struct PrimitiveInt< PrimitiveChar, Cmp_char >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) PrimitiveWideChar : public PrimitiveInt< PrimitiveWideChar, Cmp_wchar_t > 
    {   
		typedef PrimitiveInt< PrimitiveWideChar, Cmp_wchar_t > BaseName;

	public:

		__QCMP_USING_BASE( m );

        PrimitiveWideChar();
        PrimitiveWideChar( const PrimitiveWideChar& x );
        PrimitiveWideChar( Cmp_C_wchar_t& x );
		PrimitiveWideChar& operator = ( const PrimitiveWideChar& );
    }; 

    template struct PrimitiveInt< PrimitiveWideChar, Cmp_wchar_t >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) SPrimitiveChar : PrimitiveInt< SPrimitiveChar, Cmp_signed_char > 
    {       
		typedef PrimitiveInt< SPrimitiveChar, Cmp_signed_char > BaseName;

	public:

		__QCMP_USING_BASE( m );

        SPrimitiveChar();
        SPrimitiveChar( const SPrimitiveChar& x );
        SPrimitiveChar( Cmp_C_signed_char& x );
		SPrimitiveChar& operator = ( const SPrimitiveChar& );
    }; 

    template struct PrimitiveInt< SPrimitiveChar, Cmp_signed_char >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) UPrimitiveChar : PrimitiveInt< UPrimitiveChar, Cmp_unsigned_char > 
    {
		typedef PrimitiveInt< UPrimitiveChar, Cmp_unsigned_char > BaseName;

	public:

		__QCMP_USING_BASE( m );

        UPrimitiveChar();
        UPrimitiveChar( const UPrimitiveChar& x );
        UPrimitiveChar( Cmp_C_unsigned_char& x );    
		UPrimitiveChar& operator = ( const UPrimitiveChar& );
    }; 

    template struct PrimitiveInt< UPrimitiveChar, Cmp_unsigned_char >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Int3264 : public PrimitiveInt< Int3264, Cmp__int3264 > 
    {
        
        Int3264();
        Int3264( const Int3264& x );
        Int3264( const Cmp__int3264& x );
		Int3264& operator = ( const Int3264& );
    }; 
    template struct PrimitiveInt< Int3264, Cmp__int3264 >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) IntPtr : public PrimitiveInt< IntPtr, Cmp_int_ptr > 
    {
        
        IntPtr();
        IntPtr( const IntPtr& x );
        IntPtr( const Cmp_int_ptr& x );
		IntPtr& operator = ( const IntPtr& );
    }; 
    template struct PrimitiveInt< IntPtr, Cmp_int_ptr >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) UIntPtr : public PrimitiveInt< UIntPtr, Cmp_uint_ptr > 
    {
        
        UIntPtr();
        UIntPtr( const UIntPtr& x );
        UIntPtr( const Cmp_uint_ptr& x );
		UIntPtr& operator = ( const UIntPtr& );
    }; 
    template struct PrimitiveInt< UIntPtr, Cmp_uint_ptr >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) LongPtr : public PrimitiveInt< LongPtr, Cmp_long_ptr > 
    {
        
        LongPtr();
        LongPtr( const LongPtr& x );
        LongPtr( const Cmp_long_ptr& x );
		LongPtr& operator = ( const LongPtr& );
    }; 
    template struct PrimitiveInt< LongPtr, Cmp_long_ptr > ;
    typedef LongPtr SSizeT;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) ULongPtr : public PrimitiveInt< ULongPtr, Cmp_ulong_ptr > 
    {
        
        ULongPtr();
        ULongPtr( const ULongPtr& x );
        ULongPtr( const Cmp_ulong_ptr& x );
		ULongPtr& operator = ( const ULongPtr& );
    }; 
    template struct PrimitiveInt< ULongPtr, Cmp_ulong_ptr >;
    typedef ULongPtr SizeT;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) UShort : public PrimitiveInt< UShort, Cmp_unsigned_short > 
    {
        
        UShort();
		UShort( const PrimitiveInt< UShort, Cmp_unsigned_short >& x );
        UShort( const UShort& x );
        UShort( Cmp_C_unsigned_short& x );
		UShort& operator = ( const UShort& );
    };  
    template struct PrimitiveInt< UShort, Cmp_unsigned_short >;     

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) SShort : public PrimitiveInt< SShort, Cmp_signed_short >
    {
        
        SShort();
        SShort( const SShort& x );
        SShort( Cmp_C_signed_short& x );
		SShort& operator = ( const SShort& );
    };
    template struct PrimitiveInt< SShort, Cmp_signed_short >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Short : public PrimitiveInt< Short, Cmp_short > 
    {
        
        Short();
        Short( const Short& x );
        Short( Cmp_C_short& x );
		Short& operator = ( const Short& );
    };
    template struct PrimitiveInt< Short, Cmp_short >;       

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) ULong : public PrimitiveInt< ULong, Cmp_unsigned_long > 
    {
        
        ULong();
        ULong( const ULong& x );
        ULong( Cmp_C_unsigned_long& x );
		ULong& operator = ( const ULong& );
    };  
    template struct PrimitiveInt< ULong, Cmp_unsigned_long >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Int : public PrimitiveInt< Int, Cmp_int > 
    {
        
        Int();
        Int( const Int& x );
        Int( const Cmp_int& x );
		Int& operator = ( const Int& );
    };
    template struct PrimitiveInt< Int, Cmp_int >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Int8 : public PrimitiveInt< Int8, Cmp__int8 > 
    {
        
        Int8();
        Int8( const Int8& x );
        Int8( const Cmp__int8& x );
		Int8& operator = ( const Int8& );
    };
    template struct PrimitiveInt< Int8, Cmp__int8 >;        

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Int16 : public PrimitiveInt< Int16, Cmp__int16 > 
    {
        
        Int16();
        Int16( const Int16& x );
        Int16( const Cmp__int16& x );
		Int16& operator = ( const Int16& );
    };
    template struct PrimitiveInt< Int16, Cmp__int16 >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Int32 : public PrimitiveInt< Int32, Cmp__int32 > 
    {
        
        Int32();
        Int32( const Int32& x );
        Int32( const Cmp__int32& x );
		Int32& operator = ( const Int32& );
    };
    template struct PrimitiveInt< Int32, Cmp__int32 >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Int64 : public PrimitiveInt< Int64, Cmp__int64 > 
    {
        //using PrimitiveInt< Int64, Cmp__int64 >::m;
        Int64();
        Int64( const Int64& x );
        Int64( const Cmp__int64& x );
		Int64& operator = ( const Int64& );
    };
    template struct PrimitiveInt< Int64, Cmp__int64 >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) SInt : public PrimitiveInt< SInt, Cmp_signed_int >
    {
            //using PrimitiveInt< SInt, Cmp_signed_int >::m;
        SInt();
        SInt( const SInt& x );
        SInt( Cmp_C_signed_int& x );
		SInt& operator = ( const SInt& );
    };
    template struct PrimitiveInt< SInt, Cmp_signed_int >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) SInt8 : public PrimitiveInt< SInt8, Cmp_signed__int8 >
    {
            //using PrimitiveInt< SInt8, Cmp_signed__int8 >::m;
        SInt8();
        SInt8( const SInt8& x );
        SInt8( Cmp_C_signed__int8& x );
		SInt8& operator = ( const SInt8& );
    };
    template struct PrimitiveInt< SInt8, Cmp_signed__int8 >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) SInt16 : public PrimitiveInt< SInt16, Cmp_signed__int16 >
    {
            //using PrimitiveInt< SInt16, Cmp_signed__int16 >::m;
        SInt16();
        SInt16( const SInt16& x );
        SInt16( Cmp_C_signed__int16& x );
		SInt16& operator = ( const SInt16& );
    };
    template struct PrimitiveInt< SInt16, Cmp_signed__int16 >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) SInt32 : public PrimitiveInt< SInt32, Cmp_signed__int32 >
    {
        //using PrimitiveInt< SInt32, Cmp_signed__int32 >::m;
        SInt32();
        SInt32( const SInt32& x );
        SInt32( Cmp_C_signed__int32& x );
		SInt32& operator = ( const SInt32& );
    };
    template struct PrimitiveInt< SInt32, Cmp_signed__int32 >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) SInt64 : public PrimitiveInt< SInt64, Cmp_signed__int64 >
    {
        //using PrimitiveInt< SInt64, Cmp_signed__int64 >::m;
        SInt64();
        SInt64( const SInt64& x );
        SInt64( Cmp_C_signed__int64& x );
		SInt64& operator = ( const SInt64& );
    };
    template struct PrimitiveInt< SInt64, Cmp_signed__int64 >;      

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) UInt : public PrimitiveInt< UInt, Cmp_unsigned_int >
    {
        //using PrimitiveInt< UInt, Cmp_unsigned_int >::m;
        UInt();
        UInt( const UInt& x );
        UInt( Cmp_C_unsigned_int& x );
		UInt& operator = ( const UInt& );
    };
    template struct PrimitiveInt< UInt, Cmp_unsigned_int >; 

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) UInt8 : public PrimitiveInt< UInt8, Cmp_unsigned__int8 >
    {
        //using PrimitiveInt< UInt8, Cmp_unsigned__int8 >::m;
        UInt8();
        UInt8( const UInt8& x );
        UInt8( Cmp_C_unsigned__int8& x );
		UInt8& operator = ( const UInt8& );
    };
    template struct PrimitiveInt< UInt8, Cmp_unsigned__int8 >;      

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) UInt16 : public PrimitiveInt< UInt16, Cmp_unsigned__int16 >
    {
        //using PrimitiveInt< UInt16, Cmp_unsigned__int16 >::m;
        UInt16();
        UInt16( const UInt16& x );
        UInt16( Cmp_C_unsigned__int16& x );
		UInt16& operator = ( const UInt16& );
    };
    template struct PrimitiveInt< UInt16, Cmp_unsigned__int16 >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) UInt32 : public PrimitiveInt< UInt32, Cmp_unsigned__int32 >
    {
        //using PrimitiveInt< UInt32, Cmp_unsigned__int32 >::m;
        UInt32();
        UInt32( const UInt32& x );
        UInt32( Cmp_C_unsigned__int32& x );
		UInt32& operator = ( const UInt32& );
    };
    template struct PrimitiveInt< UInt32, Cmp_unsigned__int32 >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) UInt64 : public PrimitiveInt< UInt64, Cmp_unsigned__int64 >
    {
        //using PrimitiveInt< UInt64, Cmp_unsigned__int64 >::m;
        UInt64();
        UInt64( const UInt64& x );
        UInt64( Cmp_C_unsigned__int64& x );
		UInt64& operator = ( const UInt64& );
    };
    template struct PrimitiveInt< UInt64, Cmp_unsigned__int64 >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Long : public PrimitiveInt< Long, Cmp_long > 
    {
        //using PrimitiveInt< Long, Cmp_long >::m;
        Long();
        Long( const Long& x );
        Long( Cmp_C_long& x );
		Long& operator = ( const Long& src );
    };
    template struct PrimitiveInt< Long, Cmp_long >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) SLong : public PrimitiveInt< SLong, Cmp_signed_long > 
    {
        //using PrimitiveInt< SLong, Cmp_signed_long >::m;
        SLong();
        SLong( const SLong& x );
        SLong( Cmp_C_signed_long& x );
		SLong& operator = ( const SLong& );
    };
    template struct PrimitiveInt< SLong, Cmp_signed_long >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) ULongLong : public PrimitiveInt< ULongLong, Cmp_unsigned_long_long > 
    {
        //using PrimitiveInt< ULongLong, Cmp_unsigned_long_long >::m;
        ULongLong();
        ULongLong( const ULongLong& x );
        ULongLong( Cmp_C_unsigned_long_long& x );
		ULongLong& operator = ( const ULongLong& );
    };  
    template struct PrimitiveInt< ULongLong, Cmp_unsigned_long_long >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) LongLong : public PrimitiveInt< LongLong, Cmp_long_long > 
    {
        //using PrimitiveInt< LongLong, Cmp_long_long >::m;
        LongLong();
        LongLong( const LongLong& x );
        LongLong( Cmp_C_long_long& x );
		LongLong& operator = ( const LongLong& );
    };
    template struct PrimitiveInt< LongLong, Cmp_long_long >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Float : public PrimitiveReal< Float, Cmp_float > 
    {
            //using PrimitiveReal< Float, Cmp_float >::m;
        Float();
        Float( const Float& x );
        Float( Cmp_C_float& x );
		Float& operator = ( const Float& );
    };
    template struct PrimitiveReal< Float, Cmp_float >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) Double : public PrimitiveReal< Double, Cmp_double > 
    {
        //using PrimitiveReal< Double, Cmp_double >::m;
        Double();
        Double( const Double& x );
        Double( Cmp_C_double& x );
		Double& operator = ( const Double& );
    };
    template struct PrimitiveReal< Double, Cmp_double >;

    //--------------------------------------------------------------------------------
    struct __QOR_INTERFACE( __CODEQOR ) LongDouble : public PrimitiveReal< LongDouble, Cmp_long_double > 
    {
        //using PrimitiveReal< LongDouble, Cmp_long_double >::m;
        LongDouble();
        LongDouble( const LongDouble& x );
        LongDouble( Cmp_C_long_double& x );
		LongDouble& operator = ( const LongDouble& );
    };

    template struct PrimitiveReal< LongDouble, Cmp_long_double >;

}//nsCodeQOR

__QCMP_WARNING_POP

#endif//_CODEQOR_OTYPES_H_
