//BfXmlSimpleReader.cpp

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/DataStructures/THash.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "BluefootQOR/XML/SAX/BfXmlSimpleReader.h"
#include "BluefootQOR/XML/SAX/BfXmlNamespaceSupport.h"
#include "BluefootQOR/XML/SAX/BfXmlAttributes.h"
#include "BluefootQOR/XML/SAX/BfXmlInputSource.h"
#include "BluefootQOR/XML/SAX/BfXmlParseException.h"
#include <stack>
#include <map>
#include <string>
#include <vector>

// Error strings for the XML reader
#define XMLERR_OK                         "no error occurred"
#define XMLERR_ERRORBYCONSUMER            "error triggered by consumer"
#define XMLERR_UNEXPECTEDEOF              "unexpected end of file"
#define XMLERR_MORETHANONEDOCTYPE         "more than one document type definition"
#define XMLERR_ERRORPARSINGELEMENT        "error occurred while parsing element"
#define XMLERR_TAGMISMATCH                "tag mismatch"
#define XMLERR_ERRORPARSINGCONTENT        "error occurred while parsing content"
#define XMLERR_UNEXPECTEDCHARACTER        "unexpected character"
#define XMLERR_INVALIDNAMEFORPI           "invalid name for processing instruction"
#define XMLERR_VERSIONEXPECTED            "version expected while reading the XML declaration"
#define XMLERR_WRONGVALUEFORSDECL         "wrong value for standalone declaration"
#define XMLERR_EDECLORSDDECLEXPECTED      "encoding declaration or standalone declaration expected while reading the XML declaration"
#define XMLERR_SDDECLEXPECTED             "standalone declaration expected while reading the XML declaration"
#define XMLERR_ERRORPARSINGDOCTYPE        "error occurred while parsing document type definition"
#define XMLERR_LETTEREXPECTED             "letter is expected"
#define XMLERR_ERRORPARSINGCOMMENT        "error occurred while parsing comment"
#define XMLERR_ERRORPARSINGREFERENCE      "error occurred while parsing reference"
#define XMLERR_INTERNALGENERALENTITYINDTD "internal general entity reference not allowed in DTD"
#define XMLERR_EXTERNALGENERALENTITYINAV  "external parsed general entity reference not allowed in attribute value"
#define XMLERR_EXTERNALGENERALENTITYINDTD "external parsed general entity reference not allowed in DTD"
#define XMLERR_UNPARSEDENTITYREFERENCE    "unparsed entity reference in wrong context"
#define XMLERR_RECURSIVEENTITIES          "recursive entities"
#define XMLERR_ERRORINTEXTDECL            "error in the text declaration of an external entity"

//------------------------------------------------------------------------------
namespace nsBluefoot
{

	// the constants for the lookup table
	static const signed char cltWS      =  0; // white space
	static const signed char cltPer     =  1; // %
	static const signed char cltAmp     =  2; // &
	static const signed char cltGt      =  3; // >
	static const signed char cltLt      =  4; // <
	static const signed char cltSlash   =  5; // /
	static const signed char cltQm      =  6; // ?
	static const signed char cltEm      =  7; // !
	static const signed char cltDash    =  8; // -
	static const signed char cltCB      =  9; // ]
	static const signed char cltOB      = 10; // [
	static const signed char cltEq      = 11; // =
	static const signed char cltDq      = 12; // "
	static const signed char cltSq      = 13; // '
	static const signed char cltUnknown = 14;

	// Hack for letting QDom know where the skipped entity occurred
	// ### Qt5: the use of this variable means the code isn't reentrant.
	bool qt_xml_skipped_entity_in_content;

	// character lookup table
	static const signed char charLookupTable[ 256 ] = 
	{
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x00 - 0x07
		cltUnknown, // 0x08
		cltWS,      // 0x09 \t
		cltWS,      // 0x0A \n
		cltUnknown, // 0x0B
		cltUnknown, // 0x0C
		cltWS,      // 0x0D \r
		cltUnknown, // 0x0E
		cltUnknown, // 0x0F
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x17 - 0x16
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x18 - 0x1F
		cltWS,      // 0x20 Space
		cltEm,      // 0x21 !
		cltDq,      // 0x22 "
		cltUnknown, // 0x23
		cltUnknown, // 0x24
		cltPer,     // 0x25 %
		cltAmp,     // 0x26 &
		cltSq,      // 0x27 '
		cltUnknown, // 0x28
		cltUnknown, // 0x29
		cltUnknown, // 0x2A
		cltUnknown, // 0x2B
		cltUnknown, // 0x2C
		cltDash,    // 0x2D -
		cltUnknown, // 0x2E
		cltSlash,   // 0x2F /
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x30 - 0x37
		cltUnknown, // 0x38
		cltUnknown, // 0x39
		cltUnknown, // 0x3A
		cltUnknown, // 0x3B
		cltLt,      // 0x3C <
		cltEq,      // 0x3D =
		cltGt,      // 0x3E >
		cltQm,      // 0x3F ?
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x40 - 0x47
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x48 - 0x4F
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x50 - 0x57
		cltUnknown, // 0x58
		cltUnknown, // 0x59
		cltUnknown, // 0x5A
		cltOB,      // 0x5B [
		cltUnknown, // 0x5C
		cltCB,      // 0x5D]
		cltUnknown, // 0x5E
		cltUnknown, // 0x5F
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x60 - 0x67
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x68 - 0x6F
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x70 - 0x77
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x78 - 0x7F
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x80 - 0x87
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x88 - 0x8F
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x90 - 0x97
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0x98 - 0x9F
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xA0 - 0xA7
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xA8 - 0xAF
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xB0 - 0xB7
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xB8 - 0xBF
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xC0 - 0xC7
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xC8 - 0xCF
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xD0 - 0xD7
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xD8 - 0xDF
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xE0 - 0xE7
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xE8 - 0xEF
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, // 0xF0 - 0xF7
		cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown, cltUnknown  // 0xF8 - 0xFF
	};

	/*This function strips the TextDecl [77] ("<?xml ...?>") from the string \a
	  str. The stripped version is stored in \a str. If this function finds an
	  invalid TextDecl, it returns false, otherwise true.

	  This function is used for external entities since those can include an
	  TextDecl that must be stripped before inserting the entity.*/
	static bool stripTextDecl( nsCodeQOR::CUCS2String& str )
	{
		nsCodeQOR::CUCS2String textDeclStart( _TXT( "<?xml" ) );
		/*TODO:
		if( str.startsWith( textDeclStart ) ) 
		{
			QRegExp textDecl( QString::fromLatin1(
				"^<\\?xml\\s+"
				"(version\\s*=\\s*((['\"])[-a-zA-Z0-9_.:]+\\3))?"
				"\\s*"
				"(encoding\\s*=\\s*((['\"])[A-Za-z][-a-zA-Z0-9_.]*\\6))?"
				"\\s*\\?>"
		   ));
			std::string strTmp = str.replace( textDecl, std::string( "" ) ); 
			if( strTmp.length() != str.length() )
			{
				return false; // external entity has wrong TextDecl
			}
			str = strTmp;
		}
		*/
		return true;
	}
	
	//------------------------------------------------------------------------------
	nsCodeQOR::CUCS2String simplify( const nsCodeQOR::CUCS2String& strSource )
	{
		nsCodeQOR::CUCS2String strResult;
		/*
		std::string::const_iterator it = strSource.cbegin();
		while( isblank( *it ) )
		{
			it++;
		}
		while( it != strSource.cend() )
		{
			if( !isblank( *it ) || ( it != strSource.cbegin() && !isblank( *( it - 1 ) ) ) )
			{
				strResult.append( *it, 1 );
			}
		}
		std::string::reverse_iterator rit = strResult.rbegin();
		while( isblank( *rit ) )
		{
			strResult.erase( *rit, 1 );
		}
		*/
		return strResult;
	}
	/*
	//------------------------------------------------------------------------------
	nsCodeQOR::CUCS2String replace_all( nsCodeQOR::CUCS2String str, const nsCodeQOR::CUCS2String& from, const nsCodeQOR::CUCS2String& to )
	{
		size_t start_pos = 0;
		while( ( start_pos = str.find( from, start_pos ) ) != std::string::npos )
		{
			str.replace( start_pos, from.length(), to );
			start_pos += to.length();
		}
		return str;
	}
	*/
	//------------------------------------------------------------------------------
	class CXmlSimpleReaderPrivate
	{
	public:

		~CXmlSimpleReaderPrivate();

	private:
		
		// functions
		CXmlSimpleReaderPrivate( CXmlSimpleReader* reader );
		void initIncrementalParsing();

		// used to determine if elements are correctly nested
		std::stack< nsCodeQOR::CUCS2String > tags;

		//------------------------------------------------------------------------------
		// used by parseReference() and parsePEReference()
		enum EntityRecognitionContext 
		{ 
			InContent, 
			InAttributeValue, 
			InEntityValue, 
			InDTD 
		};

		//------------------------------------------------------------------------------
		// used for entity declarations
		struct ExternParameterEntity
		{
			ExternParameterEntity() {}
			ExternParameterEntity( const nsCodeQOR::CUCS2String& p, const nsCodeQOR::CUCS2String& s ) : publicId(p), systemId(s) {}
			nsCodeQOR::CUCS2String publicId;
			nsCodeQOR::CUCS2String systemId;

		    bool operator == ( const ExternParameterEntity& ) const 
			{
				//qWarning("ExternParameterEntity::operator==(const ExternParameterEntity&) was called");
				return false;
			}
		};

		//------------------------------------------------------------------------------
		struct ExternEntity
		{
			ExternEntity() {}
			ExternEntity( const nsCodeQOR::CUCS2String& p, const nsCodeQOR::CUCS2String& s, const nsCodeQOR::CUCS2String& n) : publicId(p), systemId(s), notation(n) {}
			nsCodeQOR::CUCS2String publicId;
			nsCodeQOR::CUCS2String systemId;
			nsCodeQOR::CUCS2String notation;

			bool operator == ( const ExternEntity& ) const 
			{
				//qWarning("ExternEntity::operator==(const ExternEntity&) was called");
				return false;
			}
		};

		std::map< const nsCodeQOR::CUCS2String, ExternParameterEntity > externParameterEntities;
		std::map< const nsCodeQOR::CUCS2String, nsCodeQOR::CUCS2String > parameterEntities;
		std::map< const nsCodeQOR::CUCS2String, ExternEntity > externEntities;
		std::map< const nsCodeQOR::CUCS2String, nsCodeQOR::CUCS2String > entities;

		//------------------------------------------------------------------------------
		// used for parsing of entity references
		struct XmlRef 
		{
			XmlRef() : index(0) {}
			XmlRef( const nsCodeQOR::CUCS2String& _name, const nsCodeQOR::CUCS2String& _value ) : name( _name ), value( _value ), index(0) {}
			
			//------------------------------------------------------------------------------
			bool isEmpty() const 
			{ 
				return index == value.Len(); 
			}
			
			//------------------------------------------------------------------------------
			nsCodeQOR::CChar16 next() 
			{ 
				return value.At(index++); 
			}

			nsCodeQOR::CUCS2String name;
			nsCodeQOR::CUCS2String value;
			int index;
		};

		std::stack< XmlRef > xmlRefStack;

		//------------------------------------------------------------------------------
		// used for standalone declaration
		enum Standalone 
		{ 
			Yes, 
			No, 
			Unknown 
		};

		nsCodeQOR::CUCS2String doctype; // only used for the doctype
		nsCodeQOR::CUCS2String xmlVersion; // only used to store the version information
		nsCodeQOR::CUCS2String encoding; // only used to store the encoding
		Standalone standalone; // used to store the value of the standalone declaration

		nsCodeQOR::CUCS2String publicId; // used by parseExternalID() to store the public ID
		nsCodeQOR::CUCS2String systemId; // used by parseExternalID() to store the system ID

		// Since publicId/systemId is used as temporary variables by parseExternalID(), it
		// might overwrite the PUBLIC/SYSTEM for the document we're parsing. In effect, we would
		// possibly send off an QXmlParseException that has the PUBLIC/SYSTEM of a entity declaration
		// instead of those of the current document.
		// Hence we have these two variables for storing the document's data.
		nsCodeQOR::CUCS2String thisPublicId;
		nsCodeQOR::CUCS2String thisSystemId;

		nsCodeQOR::CUCS2String attDeclEName; // use by parseAttlistDecl()
		nsCodeQOR::CUCS2String attDeclAName; // use by parseAttlistDecl()

		// flags for some features support
		bool useNamespaces;
		bool useNamespacePrefixes;
		bool reportWhitespaceCharData;
		bool reportEntities;

		// used to build the attribute list
		CXmlAttributes attList;

		// used in CXmlSimpleReader::parseContent() to decide whether character
		// data was read
		bool contentCharDataRead;

		// helper classes
		nsCodeQOR::CTLRef< CXmlLocator > locator;
		
		CXmlNamespaceSupport namespaceSupport;

		// error string
		nsCodeQOR::CString error;

		// arguments for parse functions (this is needed to allow incremental
		// parsing)
		bool parsePI_xmldecl;
		bool parseName_useRef;
		bool parseReference_charDataRead;
		EntityRecognitionContext parseReference_context;
		bool parseExternalID_allowPublicID;
		EntityRecognitionContext parsePEReference_context;
		nsCodeQOR::CUCS2String parseString_s;

		//------------------------------------------------------------------------------
		// for incremental parsing
		struct ParseState 
		{
			typedef bool (CXmlSimpleReaderPrivate::*ParseFunction)();
			ParseFunction function;
			int state;
		};

		std::stack< ParseState >* parseStack;

		// used in parseProlog()
		bool xmldecl_possible;
		bool doctype_read;

		// used in parseDoctype()
		bool startDTDwasReported;

		// used in parseString()
		signed char Done;


		// variables
		CXmlContentHandler*	contentHnd;
		CXmlErrorHandler*	errorHnd;
		CXmlDTDHandler*		dtdHnd;
		CXmlEntityResolver*	entityRes;
		CXmlLexicalHandler*	lexicalHnd;
		CXmlDeclHandler*	declHnd;

		CBFSource* m_pInputSource;
		//CXmlInputSource*	inputSource;

		nsCodeQOR::CChar16 c; // the character at reading position
		int   lineNr; // number of line
		int   columnNr; // position in line

		nsCodeQOR::CChar16   nameArray[256]; // only used for names
		nsCodeQOR::CUCS2String nameValue; // only used for names
		int     nameArrayPos;
		int     nameValueLen;
		
		nsCodeQOR::CChar16   m_RefArray[256]; // only used for references
		nsCodeQOR::CUCS2String m_RefValue; // only used for references
		int     m_RefArrayPos;
		int     m_RefValueLen;

		nsCodeQOR::CChar16   stringArray[256]; // used for any other strings that are parsed
		nsCodeQOR::CUCS2String stringValue; // used for any other strings that are parsed
		int     stringArrayPos;
		int     stringValueLen;
		nsCodeQOR::CUCS2String emptyStr;

		nsCodeQOR::CTHash< nsCodeQOR::CUCS2String, int> literalEntitySizes;	
		nsCodeQOR::CTHash< nsCodeQOR::CUCS2String, nsCodeQOR::CTHash< nsCodeQOR::CUCS2String, int> > referencesToOtherEntities; // The entity at (QMap<QString,) referenced the entities at (QMap<QString,) (int>) times.
		nsCodeQOR::CTHash< nsCodeQOR::CUCS2String, int> expandedSizes;
    
		static const int dtdRecursionLimit = 2;	// The limit to the amount of times the DTD parsing functions can be called for the DTD currently being parsed.    
		static const int entityCharacterLimit = 1024; // The maximum amount of characters an entity value may contain, after expansion.

		const nsCodeQOR::CUCS2String& string();
		void stringClear();
		void stringAddC( nsCodeQOR::CChar16 );

		inline void stringAddC() 
		{ 
			stringAddC(c); 
		}

		const nsCodeQOR::CUCS2String& name();
		void nameClear();
		void nameAddC( nsCodeQOR::CChar16 );

		inline void nameAddC() 
		{ 
			nameAddC(c); 
		}
		const nsCodeQOR::CUCS2String& ref();
		void refClear();
		void refAddC( nsCodeQOR::CChar16 );

		inline void refAddC() 
		{ 
			refAddC(c); 
		}

		// private functions
		bool eat_ws();
		bool next_eat_ws();

		void __QCMP_FASTCALL next();
		nsCodeQOR::CChar16 NextChar( void );

		bool atEnd();

		void init(const CBFSource* i);
		void initData();

		bool entityExist(const nsCodeQOR::CUCS2String& ) const;

		bool parseBeginOrContinue(int state, bool incremental);

		bool parseProlog();
		bool parseElement();
		bool processElementEmptyTag();
		bool processElementETagBegin2();
		bool processElementAttribute();
		bool parseMisc();
		bool parseContent();

		bool parsePI();
		bool parseDoctype();
		bool parseComment();

		bool parseName();
		bool parseNmtoken();
		bool parseAttribute();
		bool parseReference();
		bool processReference();

		bool parseExternalID();
		bool parsePEReference();
		bool parseMarkupdecl();
		bool parseAttlistDecl();
		bool parseAttType();
		bool parseAttValue();
		bool parseElementDecl();
		bool parseNotationDecl();
		bool parseChoiceSeq();
		bool parseEntityDecl();
		bool parseEntityValue();

		bool parseString();

		bool insertXmlRef( const nsCodeQOR::CUCS2String&, const nsCodeQOR::CUCS2String&, bool);

		bool reportEndEntities();
		void reportParseError( const nsCodeQOR::CString& error );

		typedef bool( CXmlSimpleReaderPrivate::*ParseFunction ) ();
		void unexpectedEof(ParseFunction where, int state);
		void parseFailed(ParseFunction where, int state);
		void pushParseState(ParseFunction function, int state);

		bool isExpandedEntityValueTooLarge( nsCodeQOR::CUCS2String* errorMessage );

		inline CXmlSimpleReader* q_func() { return static_cast< CXmlSimpleReader* >( q_ptr ); }
		inline const CXmlSimpleReader* q_func() const { return static_cast< const CXmlSimpleReader* >( q_ptr ); }
		friend class CXmlSimpleReader;

		CXmlSimpleReader* q_ptr;

		friend class CXmlSimpleReaderLocator;
	};


	//------------------------------------------------------------------------------
	inline bool CXmlSimpleReaderPrivate::atEnd()
	{
		return c == 0xFF;
		//return (c.unicode()|0x0001) == 0xffff;
	}

	//------------------------------------------------------------------------------
	inline void CXmlSimpleReaderPrivate::stringClear()
	{
		stringValueLen = 0; stringArrayPos = 0;
	}

	//------------------------------------------------------------------------------
	inline void CXmlSimpleReaderPrivate::nameClear()
	{
		nameValueLen = 0; nameArrayPos = 0;
	}

	//------------------------------------------------------------------------------
	inline void CXmlSimpleReaderPrivate::refClear()
	{
		m_RefValueLen = 0; m_RefArrayPos = 0;
	}

	//------------------------------------------------------------------------------
	CXmlSimpleReaderPrivate::CXmlSimpleReaderPrivate( CXmlSimpleReader* reader )
	{
		q_ptr = reader;
		parseStack = 0;

		locator.Attach( new CXmlSimpleReaderLocator(reader), true );
		entityRes  = 0;
		dtdHnd     = 0;
		contentHnd = 0;
		errorHnd   = 0;
		lexicalHnd = 0;
		declHnd    = 0;

		// default feature settings
		useNamespaces = true;
		useNamespacePrefixes = false;
		reportWhitespaceCharData = true;
		reportEntities = false;
	}

	//------------------------------------------------------------------------------
	CXmlSimpleReaderPrivate::~CXmlSimpleReaderPrivate()
	{
		delete parseStack;
	}

	//------------------------------------------------------------------------------
	void CXmlSimpleReaderPrivate::initIncrementalParsing()
	{
		if( parseStack )
		{
			while( !parseStack->empty() )
			{
				parseStack->pop();
			}
		}
		else
		{
			parseStack = new std::stack< ParseState >;
		}
	}


	//------------------------------------------------------------------------------
	//CXmlSimpleReaderLocator

	//------------------------------------------------------------------------------
	__QOR_IMPLEMENT_OCLASS_LUID( CXmlSimpleReaderLocator );

	//------------------------------------------------------------------------------
	CXmlSimpleReaderLocator::CXmlSimpleReaderLocator( CXmlSimpleReader* parent ) : CXmlLocator()
	,	m_pReader( parent )
	{
		__QCS_MEMBER_FCONTEXT( "CXmlSimpleReaderLocator::CXmlSimpleReaderLocator" );
	}

	//------------------------------------------------------------------------------
	CXmlSimpleReaderLocator::~CXmlSimpleReaderLocator()
	{
		__QCS_MEMBER_FCONTEXT( "CXmlSimpleReaderLocator::~CXmlSimpleReaderLocator" );
	}

	//------------------------------------------------------------------------------
	int CXmlSimpleReaderLocator::ColumnNumber() const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlSimpleReaderLocator::ColumnNumber" );
		return ( m_pReader->d_ptr->columnNr == -1 ? -1 : m_pReader->d_ptr->columnNr + 1 );
	}

	//------------------------------------------------------------------------------
	int CXmlSimpleReaderLocator::LineNumber() const
	{
		__QCS_MEMBER_FCONTEXT( "CXmlSimpleReaderLocator::LineNumber" );
		return ( m_pReader->d_ptr->lineNr == -1 ? -1 : m_pReader->d_ptr->lineNr + 1 );
	}


	//------------------------------------------------------------------------------
	//CXmlSimpleReader

	/*!
		\class QXmlReader
		\reentrant
		\brief The QXmlReader class provides an interface for XML readers (i.e.
		parsers).

		\inmodule QtXml
		\ingroup xml-tools

		This abstract class provides an interface for all of Qt's XML
		readers. Currently there is only one implementation of a reader
		included in Qt's XML module: CXmlSimpleReader. In future releases
		there might be more readers with different properties available
		(e.g. a validating parser).

		The design of the XML classes follows the \link
		http://www.saxproject.org/ SAX2 Java interface\endlink, with
		the names adapted to fit Qt naming conventions. It should be very
		easy for anybody who has worked with SAX2 to get started with the
		Qt XML classes.

	*/



	/*!
		\class CXmlSimpleReader
		\nonreentrant
		\brief The CXmlSimpleReader class provides an implementation of a
		simple XML parser.


		This XML reader is suitable for a wide range of applications. It
		is able to parse well-formed XML and can report the namespaces of
		elements to a content handler; however, it does not parse any
		external entities. For historical reasons, Attribute Value
		Normalization and End-of-Line Handling as described in the XML 1.0
		specification is not performed.

		The easiest pattern of use for this class is to create a reader
		instance, define an input source, specify the handlers to be used
		by the reader, and parse the data.

		For example, we could use a QFile to supply the input. Here, we
		create a reader, and define an input source to be used by the
		reader:

		\snippet doc/src/snippets/xml/simpleparse/main.cpp 0

		A handler lets us perform actions when the reader encounters
		certain types of content, or if errors in the input are found. The
		reader must be told which handler to use for each type of
		event. For many common applications, we can create a custom
		handler by subclassing QXmlDefaultHandler, and use this to handle
		both error and content events:

		\snippet doc/src/snippets/xml/simpleparse/main.cpp 1

		If you don't set at least the content and error handlers, the
		parser will fall back on its default behavior---and will do
		nothing.

		The most convenient way to handle the input is to read it in a
		single pass using the parse() function with an argument that
		specifies the input source:

		\snippet doc/src/snippets/xml/simpleparse/main.cpp 2

		If you can't parse the entire input in one go (for example, it is
		huge, or is being delivered over a network connection), data can
		be fed to the parser in pieces. This is achieved by telling
		parse() to work incrementally, and making subsequent calls to the
		parseContinue() function, until all the data has been processed.

		A common way to perform incremental parsing is to connect the \c
		readyRead() signal of a \l{QNetworkReply} {network reply} a slot,
		and handle the incoming data there. See QNetworkAccessManager.
    
		Aspects of the parsing behavior can be adapted using setFeature()
		and setProperty().
    
		\snippet doc/src/snippets/code/src_xml_sax_qxml.cpp 0

		CXmlSimpleReader is not reentrant. If you want to use the class
		in threaded code, lock the code using CXmlSimpleReader with a
		locking mechanism, such as a QMutex.
	*/

	//------------------------------------------------------------------------------
	static inline bool is_S( nsCodeQOR::CChar16 ch )
	{
		return( ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r');
	}

	//------------------------------------------------------------------------------
	enum NameChar 
	{ 
		NameBeginning, 
		NameNotBeginning, 
		NotName 
	};

	static const char Begi = (char)NameBeginning;
	static const char NtBg = (char)NameNotBeginning;
	static const char NotN = (char)NotName;

	//------------------------------------------------------------------------------
	static const char nameCharTable[128] =
	{
	// 0x00
		NotN, NotN, NotN, NotN, NotN, NotN, NotN, NotN,
		NotN, NotN, NotN, NotN, NotN, NotN, NotN, NotN,
	// 0x10
		NotN, NotN, NotN, NotN, NotN, NotN, NotN, NotN,
		NotN, NotN, NotN, NotN, NotN, NotN, NotN, NotN,
	// 0x20 (0x2D is '-', 0x2E is '.')
		NotN, NotN, NotN, NotN, NotN, NotN, NotN, NotN,
		NotN, NotN, NotN, NotN, NotN, NtBg, NtBg, NotN,
	// 0x30 (0x30..0x39 are '0'..'9', 0x3A is ':')
		NtBg, NtBg, NtBg, NtBg, NtBg, NtBg, NtBg, NtBg,
		NtBg, NtBg, Begi, NotN, NotN, NotN, NotN, NotN,
	// 0x40 (0x41..0x5A are 'A'..'Z')
		NotN, Begi, Begi, Begi, Begi, Begi, Begi, Begi,
		Begi, Begi, Begi, Begi, Begi, Begi, Begi, Begi,
	// 0x50 (0x5F is '_')
		Begi, Begi, Begi, Begi, Begi, Begi, Begi, Begi,
		Begi, Begi, Begi, NotN, NotN, NotN, NotN, Begi,
	// 0x60 (0x61..0x7A are 'a'..'z')
		NotN, Begi, Begi, Begi, Begi, Begi, Begi, Begi,
		Begi, Begi, Begi, Begi, Begi, Begi, Begi, Begi,
	// 0x70
		Begi, Begi, Begi, Begi, Begi, Begi, Begi, Begi,
		Begi, Begi, Begi, NotN, NotN, NotN, NotN, NotN
	};

	//------------------------------------------------------------------------------
	static inline NameChar fastDetermineNameChar( nsCodeQOR::CChar16 ch )
	{
		unsigned short uc = ch.Unicode();

		if( !( uc & ~0x7f ) ) // uc < 128
		{
			return (NameChar)nameCharTable[ uc ];
		}


		nsCodeQOR::CChar16::eCategory cat = ch.Category();

		if( ( cat >= nsCodeQOR::CChar16::Letter_Uppercase && cat <= nsCodeQOR::CChar16::Letter_Other ) || cat == nsCodeQOR::CChar16::Number_Letter )
		{
			return NameBeginning;
		}

		if( ( cat >= nsCodeQOR::CChar16::Number_DecimalDigit && cat <= nsCodeQOR::CChar16::Number_Other ) || ( cat >= nsCodeQOR::CChar16::Mark_NonSpacing && cat <= nsCodeQOR::CChar16::Mark_Enclosing ) )
		{
			return NameNotBeginning;
		}

		return NotName;
	}

	//------------------------------------------------------------------------------
	static NameChar determineNameChar( nsCodeQOR::CChar16 ch )
	{
		return fastDetermineNameChar( ch );
	}

	//------------------------------------------------------------------------------
	CXmlSimpleReader::CXmlSimpleReader() : d_ptr(new CXmlSimpleReaderPrivate(this))
	{
	}

	//------------------------------------------------------------------------------
	CXmlSimpleReader::~CXmlSimpleReader()
	{
	}

	//------------------------------------------------------------------------------
	bool CXmlSimpleReader::Feature( const nsCodeQOR::CUCS2String& name, bool* ok ) const
	{
		const CXmlSimpleReaderPrivate* d = d_ptr.operator nsBluefoot::CXmlSimpleReaderPrivate *();

		if( ok != 0 )
		{
			*ok = true;
		}

		if( name == nsCodeQOR::CUCS2String( _TXT( "http://xml.org/sax/features/namespaces" ) ) ) 
		{
			return d->useNamespaces;
		} 
		else if( name == nsCodeQOR::CUCS2String( _TXT("http://xml.org/sax/features/namespace-prefixes" ) ) ) 
		{
			return d->useNamespacePrefixes;
		} 
		else if( name == nsCodeQOR::CUCS2String( _TXT( "http://trolltech.com/xml/features/report-whitespace-only-CharData" ) ) || name == nsCodeQOR::CUCS2String( _TXT( "http://qt-project.org/xml/features/report-whitespace-only-CharData") ) ) 
		{ 
			return d->reportWhitespaceCharData;
		} 
		else if( name == nsCodeQOR::CUCS2String( _TXT( "http://trolltech.com/xml/features/report-start-end-entity" ) ) || name == nsCodeQOR::CUCS2String( _TXT( "http://qt-project.org/xml/features/report-start-end-entity" ) )) 
		{
			return d->reportEntities;
		} 
		else 
		{
			//qWarning("Unknown feature %s", name.toLatin1().data());
			if( ok != 0 )
			{
				*ok = false;
			}
		}
		return false;
	}

	/*!
		Turns on the feature \a name if \a enable is true; otherwise turns it off.

		The \a name parameter must be one of the following strings:
		\table
		\header \i Feature \i Default \i Notes
		\row \i \e http://xml.org/sax/features/namespaces
			 \i true
			 \i If enabled, namespaces are reported to the content handler.
		\row \i \e http://xml.org/sax/features/namespace-prefixes
			 \i false
			 \i If enabled, the original prefixed names
				and attributes used for namespace declarations are
				reported.
		\row \i \e http://trolltech.com/xml/features/report-whitespace-only-CharData
			 \i true
			 \i If enabled, CharData that consist of
				only whitespace characters are reported
				using QXmlContentHandler::characters(). If disabled, whitespace is silently
				discarded.
		\row \i \e http://trolltech.com/xml/features/report-start-end-entity
			 \i false
			 \i If enabled, the parser reports
				QXmlContentHandler::startEntity() and
				QXmlContentHandler::endEntity() events, so character data
				might be reported in chunks.
				If disabled, the parser does not report these events, but
				silently substitutes the entities, and reports the character
				data in one chunk.
		\endtable

		\sa feature(), hasFeature(), {SAX2 Features}
	*/
	//------------------------------------------------------------------------------
	void CXmlSimpleReader::SetFeature( const nsCodeQOR::CUCS2String& name, bool enable )
	{
		CXmlSimpleReaderPrivate* const d = d_ptr.operator nsBluefoot::CXmlSimpleReaderPrivate *();

		if( name == nsCodeQOR::CUCS2String( _TXT( "http://xml.org/sax/features/namespaces" ) ) ) 
		{
			d->useNamespaces = enable;
		} 
		else if( name == nsCodeQOR::CUCS2String( _TXT( "http://xml.org/sax/features/namespace-prefixes") ) ) 
		{
			d->useNamespacePrefixes = enable;
		} 
		else if( name == nsCodeQOR::CUCS2String( _TXT( "http://trolltech.com/xml/features/report-whitespace-only-CharData" ) ) || name == nsCodeQOR::CUCS2String( _TXT( "http://qt-project.org/xml/features/report-whitespace-only-CharData" ) ) ) 
		{
			d->reportWhitespaceCharData = enable;
		} 
		else if( name == nsCodeQOR::CUCS2String(  _TXT( "http://trolltech.com/xml/features/report-start-end-entity" ) ) || name == nsCodeQOR::CUCS2String(  _TXT( "http://qt.project.org/xml/features/report-start-end-entity" ) ) ) 
		{
			d->reportEntities = enable;
		} 
		else 
		{
			//TODO:qWarning("Unknown feature %s", name.toLatin1().data());
		}
	}

	//------------------------------------------------------------------------------
	bool CXmlSimpleReader::HasFeature( const nsCodeQOR::CUCS2String& name ) const
	{
		if( name == nsCodeQOR::CUCS2String( _TXT( "http://xml.org/sax/features/namespaces" ) )
			|| name == nsCodeQOR::CUCS2String( _TXT( "http://xml.org/sax/features/namespace-prefixes" ) )
			|| name == nsCodeQOR::CUCS2String( _TXT( "http://trolltech.com/xml/features/report-whitespace-only-CharData" ) )
			|| name == nsCodeQOR::CUCS2String( _TXT( "http://qt-project.org/xml/features/report-whitespace-only-CharData" ) )
			|| name == nsCodeQOR::CUCS2String( _TXT( "http://trolltech.com/xml/features/report-start-end-entity" ) )
			|| name == nsCodeQOR::CUCS2String( _TXT( "http://qt-project.org/xml/features/report-start-end-entity" ) ) ) 
		{
			return true;
		} 
		else 
		{
			return false;
		}
	}


	/*!
		Reads an XML document from \a input and parses it. Returns true
		if the parsing is completed successfully; otherwise returns false,
		indicating that an error occurred.

		If \a incremental is false, this function will return false if the XML
		file is not read completely. The parsing cannot be continued in this
		case.

		If \a incremental is true, the parser does not return false if
		it reaches the end of the \a input before reaching the end
		of the XML file. Instead, it stores the state of the parser so that
		parsing can be continued later when more data is available.
		In such a case, you can use the function parseContinue() to
		continue with parsing. This class stores a pointer to the input
		source \a input and the parseContinue() function tries to read from
		that input source. Therefore, you should not delete the input
		source \a input until you no longer need to call parseContinue().

		If this function is called with \a incremental set to true
		while an incremental parse is in progress, a new parsing
		session will be started, and the previous session will be lost.
	*/
	//------------------------------------------------------------------------------
	bool CXmlSimpleReader::Parse( const CBFSource* input, bool incremental )
	{
		CXmlSimpleReaderPrivate* const d = d_ptr.operator nsBluefoot::CXmlSimpleReaderPrivate *();

		if( incremental ) 
		{
			d->initIncrementalParsing();
		} 
		else 
		{
			delete d->parseStack;
			d->parseStack = 0;
		}
		d->init(input);

		// call the handler
		if( d->contentHnd ) 
		{
			d->contentHnd->SetDocumentLocator( d->locator.operator nsBluefoot::CXmlLocator *() );
			if( !d->contentHnd->StartDocument() ) 
			{
				d->reportParseError( d->contentHnd->ErrorString() );
				while( !d->tags.empty() )
				{
					d->tags.pop();
				}
				return false;
			}
		}
		qt_xml_skipped_entity_in_content = false;
		return d->parseBeginOrContinue( 0, incremental );
	}

	/*!
		Continues incremental parsing, taking input from the
		QXmlInputSource that was specified with the most recent
		call to parse(). To use this function, you \e must have called
		parse() with the incremental argument set to true.

		Returns false if a parsing error occurs; otherwise returns true,
		even if the end of the XML file has not been reached. You can
		continue parsing at a later stage by calling this function again
		when there is more data available to parse.

		Calling this function when there is no data available in the input
		source indicates to the reader that the end of the XML file has
		been reached. If the input supplied up to this point was
		not well-formed then a parsing error occurs, and false is returned.
		If the input supplied was well-formed, true is returned.
		It is important to end the input in this way because it allows you
		to reuse the reader to parse other XML files.

		Calling this function after the end of file has been reached, but
		without available data will cause false to be returned whether the
		previous input was well-formed or not.

		\sa parse(), QXmlInputSource::data(), QXmlInputSource::next()
	*/
	//------------------------------------------------------------------------------
	bool CXmlSimpleReader::ParseContinue()
	{
		CXmlSimpleReaderPrivate* const d = d_ptr.operator nsBluefoot::CXmlSimpleReaderPrivate *();
		if( d->parseStack == 0 || d->parseStack->empty() )
		{
			return false;
		}
		d->initData();
		int state = d->parseStack->top().state;
		d->parseStack->pop();
		return d->parseBeginOrContinue( state, true );
	}

	//------------------------------------------------------------------------------
	//Common part of parse() and parseContinue()
	bool CXmlSimpleReaderPrivate::parseBeginOrContinue( int state, bool incremental )
	{
		bool atEndOrig = atEnd();

		if( state == 0 ) 
		{
			if( !parseProlog() ) 
			{
				if( incremental && error.IsEmpty() ) 
				{
					pushParseState( 0, 0 );
					return true;
				} 
				else 
				{
					while( !tags.empty() )
					{
						tags.pop();
					}
					return false;
				}
			}
			state = 1;
		}

		if( state == 1 ) 
		{
			if( !parseElement() ) 
			{
				if( incremental && error.IsEmpty() ) 
				{
					pushParseState( 0, 1 );
					return true;
				} 
				else 
				{
					while( !tags.empty() )
					{
						tags.pop();
					}
					return false;
				}
			}
			state = 2;
		}
		// parse Misc*
		while( !atEnd() ) 
		{
			if( !parseMisc() ) 
			{
				if( incremental && error.IsEmpty() ) 
				{
					pushParseState( 0, 2 );
					return true;
				} 
				else 
				{
					while( !tags.empty() )
					{
						tags.pop();
					}
					return false;
				}
			}
		}

		if( !atEndOrig && incremental ) 
		{
			// we parsed something at all, so be prepared to come back later
			pushParseState( 0, 2 );
			return true;
		}
		// is stack empty?
		if( !tags.empty() && !error.IsEmpty() ) 
		{
			reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDEOF ) ) );
			while( !tags.empty() )
			{
				tags.pop();
			}
			return false;
		}
		// call the handler
		if( contentHnd ) 
		{
			delete parseStack;
			parseStack = 0;
			if( !contentHnd->EndDocument() ) 
			{
				reportParseError( contentHnd->ErrorString() );
				return false;
			}
		}
		return true;
	}

	//
	// The following private parse functions have another semantics for the return
	// value: They return true iff parsing has finished successfully (i.e. the end
	// of the XML file must be reached!). If one of these functions return false,
	// there is only an error when d->error.isNULL() is also false.
	//

	/*
	  For the incremental parsing, it is very important that the parse...()
	  functions have a certain structure. Since it might be hard to understand how
	  they work, here is a description of the layout of these functions:

		bool CXmlSimpleReader::parse...()
		{
	(1)        const signed char Init             = 0;
			...

	(2)        const signed char Inp...           = 0;
			...

	(3)        static const signed char table[3][2] = {
			...
			};
			signed char state;
			signed char input;

	(4)        if (d->parseStack == 0 || d->parseStack->isEmpty()) {
	(4a)        ...
			} else {
	(4b)        ...
			}

			for (; ;) {
	(5)            switch (state) {
				...
				}

	(6)
	(6a)            if (atEnd()) {
					unexpectedEof(&CXmlSimpleReader::parseNmtoken, state);
					return false;
				}
	(6b)            if (determineNameChar(c) != NotName) {
				...
				}
	(7)            state = table[state][input];

	(8)            switch (state) {
				...
				}
			}
		}

	  Explanation:
	  ad 1: constants for the states (used in the transition table)
	  ad 2: constants for the input (used in the transition table)
	  ad 3: the transition table for the state machine
	  ad 4: test if we are in a parseContinue() step
			a) if no, do inititalizations
			b) if yes, restore the state and call parse functions recursively
	  ad 5: Do some actions according to the state; from the logical execution
			order, this code belongs after 8 (see there for an explanation)
	  ad 6: Check the character that is at the actual "cursor" position:
			a) If we reached the EOF, report either error or push the state (in the
			   case of incremental parsing).
			b) Otherwise, set the input character constant for the transition
			   table.
	  ad 7: Get the new state according to the input that was read.
	  ad 8: Do some actions according to the state. The last line in every case
			statement reads new data (i.e. it move the cursor). This can also be
			done by calling another parse...() function. If you need processing for
			this state after that, you have to put it into the switch statement 5.
			This ensures that you have a well defined re-entry point, when you ran
			out of data.
	*/

	//------------------------------------------------------------------------------
	//Parses the prolog [22].
	bool CXmlSimpleReaderPrivate::parseProlog()
	{
		const signed char Init             = 0;
		const signed char EatWS            = 1; // eat white spaces
		const signed char Lt               = 2; // '<' read
		const signed char Em               = 3; // '!' read
		const signed char DocType          = 4; // read doctype
		const signed char Comment          = 5; // read comment
		const signed char CommentR         = 6; // same as Comment, but already reported
		const signed char PInstr           = 7; // read PI
		const signed char PInstrR          = 8; // same as PInstr, but already reported
		const signed char Done             = 9;

		const signed char InpWs            = 0;
		const signed char InpLt            = 1; // <
		const signed char InpQm            = 2; // ?
		const signed char InpEm            = 3; // !
		const signed char InpD             = 4; // D
		const signed char InpDash          = 5; // -
		const signed char InpUnknown       = 6;

		static const signed char table[ 9 ][ 7 ] = 
		{
		 /*  InpWs   InpLt  InpQm  InpEm  InpD      InpDash  InpUnknown */
			{ EatWS,  Lt,    -1,    -1,    -1,       -1,       -1      }, // Init
			{ -1,     Lt,    -1,    -1,    -1,       -1,       -1      }, // EatWS
			{ -1,     -1,    PInstr,Em,    Done,     -1,       Done    }, // Lt
			{ -1,     -1,    -1,    -1,    DocType,  Comment,  -1      }, // Em
			{ EatWS,  Lt,    -1,    -1,    -1,       -1,       -1      }, // DocType
			{ EatWS,  Lt,    -1,    -1,    -1,       -1,       -1      }, // Comment
			{ EatWS,  Lt,    -1,    -1,    -1,       -1,       -1      }, // CommentR
			{ EatWS,  Lt,    -1,    -1,    -1,       -1,       -1      }, // PInstr
			{ EatWS,  Lt,    -1,    -1,    -1,       -1,       -1      }  // PInstrR
		};

		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			xmldecl_possible = true;
			doctype_read = false;
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseProlog, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case DocType:
					if( doctype_read ) 
					{
						reportParseError( nsCodeQOR::CString( _TXT( XMLERR_MORETHANONEDOCTYPE ) ) );
						return false;
					} 
					else 
					{
						doctype_read = false;
					}
					break;
				case Comment:
					if( lexicalHnd ) 
					{
						if( !lexicalHnd->Comment( string() ) ) 
						{
							reportParseError( lexicalHnd->ErrorString() );
							return false;
						}
					}
					state = CommentR;
					break;
				case PInstr:
					// call the handler
					if( contentHnd ) 
					{
						if( xmldecl_possible && !xmlVersion.IsEmpty() ) 
						{
							nsCodeQOR::CUCS2String value( nsCodeQOR::CUCS2String( _TXT( "version='" ) ) );
							value.Append( xmlVersion );
							value.Append( '\'' );
							if( !encoding.IsEmpty() ) 
							{
								value.Append( nsCodeQOR::CUCS2String( _TXT( " encoding='" ) ) );
								value.Append( encoding );
								value.Append( '\'' );
							}

							if( standalone == CXmlSimpleReaderPrivate::Yes ) 
							{
								value.Append( nsCodeQOR::CUCS2String( _TXT( " standalone='yes'" ) ) );
							} 
							else if( standalone == CXmlSimpleReaderPrivate::No ) 
							{
								value.Append( nsCodeQOR::CUCS2String( _TXT( " standalone='no'" ) ) );
							}
							if( !contentHnd->ProcessingInstruction( nsCodeQOR::CUCS2String( _TXT( "xml" ) ), value ) ) 
							{
								reportParseError( contentHnd->ErrorString() );
								return false;
							}
						} 
						else 
						{
							if( !contentHnd->ProcessingInstruction( name(), string() ) ) 
							{
								reportParseError( contentHnd->ErrorString() );
								return false;
							}
						}
					}
					// XML declaration only on first position possible
					xmldecl_possible = false;
					state = PInstrR;
					break;
				case Done:
					return true;
				case -1:
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_ERRORPARSINGELEMENT ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseProlog, state );
				return false;
			}

			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == '<' ) 
			{
				input = InpLt;
			} 
			else if( c == '?' ) 
			{
				input = InpQm;
			} 
			else if( c == '!' ) 
			{
				input = InpEm;
			} 
			else if( c == 'D' ) 
			{
				input = InpD;
			} 
			else if( c == '-' ) 
			{
				input = InpDash;
			} 
			else 
			{
				input = InpUnknown;
			}

			state = table[ state ][ input ];

			switch( state ) 
			{
				case EatWS:
					// XML declaration only on first position possible
					xmldecl_possible = false;
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseProlog, state );
						return false;
					}
					break;
				case Lt:
					next();
					break;
				case Em:
					// XML declaration only on first position possible
					xmldecl_possible = false;
					next();
					break;
				case DocType:
					if (!parseDoctype()) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseProlog, state );
						return false;
					}
					break;
				case Comment:
				case CommentR:
					if( !parseComment() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseProlog, state );
						return false;
					}
					break;
				case PInstr:
				case PInstrR:
					parsePI_xmldecl = xmldecl_possible;
					if( !parsePI() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseProlog, state );
						return false;
					}
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	//Parse an element [39].
	//Precondition: the opening '<' is already read.
	bool CXmlSimpleReaderPrivate::parseElement()
	{
		const int Init             =  0;
		const int ReadName         =  1;
		const int Ws1              =  2;
		const int STagEnd          =  3;
		const int STagEnd2         =  4;
		const int ETagBegin        =  5;
		const int ETagBegin2       =  6;
		const int Ws2              =  7;
		const int EmptyTag         =  8;
		const int Attrib           =  9;
		const int AttribPro        = 10; // like Attrib, but processAttribute was already called
		const int Ws3              = 11;
		const int Done             = 12;

		const int InpWs            = 0; // whitespace
		const int InpNameBe        = 1; // NameBeginning
		const int InpGt            = 2; // >
		const int InpSlash         = 3; // /
		const int InpUnknown       = 4;

		static const int table[ 12 ][ 5 ] = 
		{
		 /*  InpWs      InpNameBe    InpGt        InpSlash     InpUnknown */
			{ -1,        ReadName,    -1,          -1,          -1        }, // Init
			{ Ws1,       Attrib,      STagEnd,     EmptyTag,    -1        }, // ReadName
			{ -1,        Attrib,      STagEnd,     EmptyTag,    -1        }, // Ws1
			{ STagEnd2,  STagEnd2,    STagEnd2,    STagEnd2,    STagEnd2  }, // STagEnd
			{ -1,        -1,          -1,          ETagBegin,   -1        }, // STagEnd2
			{ -1,        ETagBegin2,  -1,          -1,          -1        }, // ETagBegin
			{ Ws2,       -1,          Done,        -1,          -1        }, // ETagBegin2
			{ -1,        -1,          Done,        -1,          -1        }, // Ws2
			{ -1,        -1,          Done,        -1,          -1        }, // EmptyTag
			{ Ws3,       Attrib,      STagEnd,     EmptyTag,    -1        }, // Attrib
			{ Ws3,       Attrib,      STagEnd,     EmptyTag,    -1        }, // AttribPro
			{ -1,        Attrib,      STagEnd,     EmptyTag,    -1        }  // Ws3
		};
		
		int state;
		int input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseElement, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case ReadName:
					// store it on the stack
					tags.push(name());
					// empty the attributes
					attList.Clear();
					if( useNamespaces )
					{
						namespaceSupport.PushContext();
					}
					break;
				case ETagBegin2:
					if( !processElementETagBegin2() )
					{
						return false;
					}
					break;
				case Attrib:
					if( !processElementAttribute() )
					{
						return false;
					}
					state = AttribPro;
					break;
				case Done:
					return true;
				case -1:
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_ERRORPARSINGELEMENT ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseElement, state );
				return false;
			}

			if( fastDetermineNameChar( c ) == NameBeginning ) 
			{
				input = InpNameBe;
			} 
			else if( c == '>' ) 
			{
				input = InpGt;
			} 
			else if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == '/' ) 
			{
				input = InpSlash;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case ReadName:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseElement, state );
						return false;
					}
					break;
				case Ws1:
				case Ws2:
				case Ws3:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseElement, state );
						return false;
					}
					break;
				case STagEnd:
					// call the handler
					if( contentHnd ) 
					{
						const nsCodeQOR::CUCS2String& tagsTop = tags.top();
						if( useNamespaces ) 
						{
							nsCodeQOR::CUCS2String uri, lname;
							namespaceSupport.ProcessName( tagsTop, false, uri, lname );
							if( !contentHnd->StartElement( uri, lname, tagsTop, attList ) ) 
							{
								reportParseError( contentHnd->ErrorString() );
								return false;
							}
						} 
						else 
						{
							if( !contentHnd->StartElement( nsCodeQOR::CUCS2String(), nsCodeQOR::CUCS2String(), tagsTop, attList ) ) 
							{
								reportParseError( contentHnd->ErrorString() );
								return false;
							}
						}
					}
					next();
					break;
				case STagEnd2:
					if( !parseContent() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseElement, state );
						return false;
					}
					break;
				case ETagBegin:
					next();
					break;
				case ETagBegin2:
					// get the name of the tag
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseElement, state );
						return false;
					}
					break;
				case EmptyTag:
					if( tags.empty() ) 
					{
						reportParseError( nsCodeQOR::CString( _TXT( XMLERR_TAGMISMATCH ) ) );
						return false;
					}
					if( !processElementEmptyTag() )
					{
						return false;
					}
					next();
					break;
				case Attrib:
				case AttribPro:
					// get name and value of attribute
					if( !parseAttribute() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseElement, state );
						return false;
					}
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	//Helper to break down the size of the code in the case statement.Return false on error, otherwise true.
	bool CXmlSimpleReaderPrivate::processElementEmptyTag()
	{
		nsCodeQOR::CUCS2String uri, lname;
		// pop the stack and call the handler
		if( contentHnd ) 
		{
			if( useNamespaces ) 
			{
				// report startElement first...
				namespaceSupport.ProcessName( tags.top(), false, uri, lname );
				if( !contentHnd->StartElement( uri, lname, tags.top(), attList) ) 
				{
					reportParseError( contentHnd->ErrorString() );
					return false;
				}
				// ... followed by endElement...
				if( !contentHnd->EndElement( uri, lname, tags.top() ) ) 
				{
					tags.pop();
					reportParseError( contentHnd->ErrorString() );
					return false;
				}
				else
				{
					tags.pop();
				}

				// ... followed by endPrefixMapping
				std::vector< nsCodeQOR::CUCS2String > prefixesBefore, prefixesAfter;
				
				if( contentHnd ) 
				{
					prefixesBefore = namespaceSupport.Prefixes();
				}

				namespaceSupport.PopContext();
				// call the handler for prefix mapping
				prefixesAfter = namespaceSupport.Prefixes();
				for( std::vector< nsCodeQOR::CUCS2String >::iterator it = prefixesBefore.begin(); it != prefixesBefore.end(); ++it) 
				{
					if( std::find( prefixesAfter.begin(), prefixesAfter.end(), *it ) == prefixesAfter.end() )
					//if( prefixesAfter.find( *it ) == prefixesAfter.end() ) 
					{
						if( !contentHnd->EndPrefixMapping(*it) ) 
						{
							reportParseError( contentHnd->ErrorString() );
							return false;
						}
					}
				}
			} 
			else 
			{
				// report startElement first...
				if( !contentHnd->StartElement( nsCodeQOR::CUCS2String(), nsCodeQOR::CUCS2String(), tags.top(), attList ) ) 
				{
					reportParseError( contentHnd->ErrorString() );
					return false;
				}
				// ... followed by endElement
				if( !contentHnd->EndElement( nsCodeQOR::CUCS2String(), nsCodeQOR::CUCS2String(), tags.top() ) ) 
				{
					tags.pop();
					reportParseError( contentHnd->ErrorString() );
					return false;
				}
				else
				{
					tags.pop();
				}
			}
		} 
		else 
		{
			tags.pop();
			namespaceSupport.PopContext();
		}
		return true;
	}

	//------------------------------------------------------------------------------
	//Helper to break down the size of the code in the case statement. Return false on error, otherwise true.
	bool CXmlSimpleReaderPrivate::processElementETagBegin2()
	{
		const nsCodeQOR::CUCS2String& name = CXmlSimpleReaderPrivate::name();

		// pop the stack and compare it with the name
		if( tags.top() != name ) 
		{
			tags.pop();
			reportParseError( nsCodeQOR::CString( _TXT( XMLERR_TAGMISMATCH ) ) );
			return false;
		}
		else
		{
			tags.pop();
		}

		// call the handler
		if( contentHnd ) 
		{
			nsCodeQOR::CUCS2String uri, lname;

			if( useNamespaces )
			{
				namespaceSupport.ProcessName( name, false, uri, lname );
			}

			if( !contentHnd->EndElement( uri, lname, name ) ) 
			{
				reportParseError( contentHnd->ErrorString() );
				return false;
			}
		}

		if( useNamespaces ) 
		{
			CXmlNamespaceSupport::NamespaceMap prefixesBefore, prefixesAfter;

			if( contentHnd )
			{
				prefixesBefore = namespaceSupport.m_Ns;
			}

			namespaceSupport.PopContext();
			// call the handler for prefix mapping
			if( contentHnd ) 
			{
				prefixesAfter = namespaceSupport.m_Ns;
				if( prefixesBefore.size() != prefixesAfter.size() ) 
				{
					/*TOOD:
					for( NamespaceMap::const_iterator it = prefixesBefore.cbegin(); it != prefixesBefore.cend(); ++it ) 
					{
						if( !it->first.empty() && ( prefixesAfter.find( it->first ) == prefixesAfter.end() ) ) 
						{
							if( !contentHnd->endPrefixMapping( it->first ) ) 
							{
								reportParseError( contentHnd->errorString() );
								return false;
							}
						}
					}
					*/
				}
			}
		}
		return true;
	}
	
	//------------------------------------------------------------------------------
	//Helper to break down the size of the code in the case statement.Return false on error, otherwise true.
	bool CXmlSimpleReaderPrivate::processElementAttribute()
	{
		nsCodeQOR::CUCS2String uri, lname, prefix;
		const nsCodeQOR::CUCS2String& name = CXmlSimpleReaderPrivate::name();
		const nsCodeQOR::CUCS2String& string = CXmlSimpleReaderPrivate::string();

		// add the attribute to the list
		if( useNamespaces ) 
		{
			// is it a namespace declaration?
			namespaceSupport.SplitName( name, prefix, lname );
			if( prefix == nsCodeQOR::CUCS2String( _TXT( "xmlns" ) ) ) 
			{
				// namespace declaration
				namespaceSupport.SetPrefix( lname, string );
				if( useNamespacePrefixes ) 
				{
					// according to http://www.w3.org/2000/xmlns/, the "prefix"
					// xmlns maps to the namespace name
					// http://www.w3.org/2000/xmlns/
					attList.Append(name, nsCodeQOR::CUCS2String( _TXT( "http://www.w3.org/2000/xmlns/" ) ), lname, string );
				}
				// call the handler for prefix mapping
				if( contentHnd ) 
				{
					if( !contentHnd->StartPrefixMapping( lname, string ) ) 
					{
						reportParseError( contentHnd->ErrorString() );
						return false;
					}
				}
			} 
			else 
			{
				// no namespace delcaration
				namespaceSupport.ProcessName( name, true, uri, lname );
				attList.Append( name, uri, lname, string );
			}
		} 
		else 
		{
			// no namespace support
			attList.Append( name, uri, lname, string );
		}
		return true;
	}

	//------------------------------------------------------------------------------
	/*Parse a content [43].
	  A content is only used between tags. If a end tag is found the < is already
	  read and the head stand on the '/' of the end tag '</name>'.
	*/
	bool CXmlSimpleReaderPrivate::parseContent()
	{
		const signed char Init             =  0;
		const signed char ChD              =  1; // CharData
		const signed char ChD1             =  2; // CharData help state
		const signed char ChD2             =  3; // CharData help state
		const signed char Ref              =  4; // Reference
		const signed char Lt               =  5; // '<' read
		const signed char PInstr           =  6; // PI
		const signed char PInstrR          =  7; // same as PInstr, but already reported
		const signed char Elem             =  8; // Element
		const signed char Em               =  9; // '!' read
		const signed char Com              = 10; // Comment
		const signed char ComR             = 11; // same as Com, but already reported
		const signed char CDS              = 12; // CDSect
		const signed char CDS1             = 13; // read a CDSect
		const signed char CDS2             = 14; // read a CDSect (help state)
		const signed char CDS3             = 15; // read a CDSect (help state)
		const signed char Done             = 16; // finished reading content

		const signed char InpLt            = 0; // <
		const signed char InpGt            = 1; // >
		const signed char InpSlash         = 2; // /
		const signed char InpQMark         = 3; // ?
		const signed char InpEMark         = 4; // !
		const signed char InpAmp           = 5; // &
		const signed char InpDash          = 6; // -
		const signed char InpOpenB         = 7; // [
		const signed char InpCloseB        = 8; //]
		const signed char InpUnknown       = 9;

		static const signed char mapCLT2FSMChar[] = 
		{
			InpUnknown, // white space
			InpUnknown, // %
			InpAmp,     // &
			InpGt,      // >
			InpLt,      // <
			InpSlash,   // /
			InpQMark,   // ?
			InpEMark,   // !
			InpDash,    // -
			InpCloseB,  //]
			InpOpenB,   // [
			InpUnknown, // =
			InpUnknown, // "
			InpUnknown, // '
			InpUnknown  // unknown
		};

		static const signed char table[ 16 ][ 10 ] = 
		{
		 /*  InpLt  InpGt  InpSlash  InpQMark  InpEMark  InpAmp  InpDash  InpOpenB  InpCloseB  InpUnknown */
			{ Lt,    ChD,   ChD,      ChD,      ChD,      Ref,    ChD,     ChD,      ChD1,      ChD  }, // Init
			{ Lt,    ChD,   ChD,      ChD,      ChD,      Ref,    ChD,     ChD,      ChD1,      ChD  }, // ChD
			{ Lt,    ChD,   ChD,      ChD,      ChD,      Ref,    ChD,     ChD,      ChD2,      ChD  }, // ChD1
			{ Lt,    -1,    ChD,      ChD,      ChD,      Ref,    ChD,     ChD,      ChD2,      ChD  }, // ChD2
			{ Lt,    ChD,   ChD,      ChD,      ChD,      Ref,    ChD,     ChD,      ChD,       ChD  }, // Ref (same as Init)
			{ -1,    -1,    Done,     PInstr,   Em,       -1,     -1,      -1,       -1,        Elem }, // Lt
			{ Lt,    ChD,   ChD,      ChD,      ChD,      Ref,    ChD,     ChD,      ChD,       ChD  }, // PInstr (same as Init)
			{ Lt,    ChD,   ChD,      ChD,      ChD,      Ref,    ChD,     ChD,      ChD,       ChD  }, // PInstrR
			{ Lt,    ChD,   ChD,      ChD,      ChD,      Ref,    ChD,     ChD,      ChD,       ChD  }, // Elem (same as Init)
			{ -1,    -1,    -1,       -1,       -1,       -1,     Com,     CDS,      -1,        -1   }, // Em
			{ Lt,    ChD,   ChD,      ChD,      ChD,      Ref,    ChD,     ChD,      ChD,       ChD  }, // Com (same as Init)
			{ Lt,    ChD,   ChD,      ChD,      ChD,      Ref,    ChD,     ChD,      ChD,       ChD  }, // ComR
			{ CDS1,  CDS1,  CDS1,     CDS1,     CDS1,     CDS1,   CDS1,    CDS1,     CDS2,      CDS1 }, // CDS
			{ CDS1,  CDS1,  CDS1,     CDS1,     CDS1,     CDS1,   CDS1,    CDS1,     CDS2,      CDS1 }, // CDS1
			{ CDS1,  CDS1,  CDS1,     CDS1,     CDS1,     CDS1,   CDS1,    CDS1,     CDS3,      CDS1 }, // CDS2
			{ CDS1,  Init,  CDS1,     CDS1,     CDS1,     CDS1,   CDS1,    CDS1,     CDS3,      CDS1 }  // CDS3
		};
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			contentCharDataRead = false;
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseContent, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case Ref:
					if( !contentCharDataRead )
					{
						contentCharDataRead = parseReference_charDataRead;
					}
					break;
				case PInstr:
					if( contentHnd ) 
					{
						if( !contentHnd->ProcessingInstruction( name(),string() ) ) 
						{
							reportParseError( contentHnd->ErrorString() );
							return false;
						}
					}
					state = PInstrR;
					break;
				case Com:
					if( lexicalHnd ) 
					{
						if( !lexicalHnd->Comment( string() ) ) 
						{
							reportParseError( lexicalHnd->ErrorString() );
							return false;
						}
					}
					state = ComR;
					break;
				case CDS:
					stringClear();
					break;
				case CDS2:
					if( !atEnd() && c != ']' )
					{
						stringAddC( ']' );
					}
					break;

				case CDS3:
					// test if this skipping was legal
					if( !atEnd() ) 
					{
						if( c == '>' ) 
						{
							// the end of the CDSect
							if( lexicalHnd ) 
							{
								if( !lexicalHnd->StartCDATA() ) 
								{
									reportParseError( lexicalHnd->ErrorString() );
									return false;
								}
							}
							if( contentHnd ) 
							{
								if( !contentHnd->Characters( string() ) ) 
								{
									reportParseError( contentHnd->ErrorString() );
									return false;
								}
							}
							if( lexicalHnd ) 
							{
								if( !lexicalHnd->EndCDATA() ) 
								{
									reportParseError( lexicalHnd->ErrorString() );
									return false;
								}
							}
						} 
						else if( c == ']' ) 
						{
							// three or more ']'
							stringAddC( ']' );
						} 
						else 
						{
							// after ']]' comes another character
							stringAddC( ']' );
							stringAddC( ']' );
						}
					}
					break;
				case Done:
					// call the handler for CharData
					if( contentHnd ) 
					{
						if( contentCharDataRead ) 
						{
							nsCodeQOR::CUCS2String strSimplified = simplify( string() );
							if( reportWhitespaceCharData || !strSimplified.IsEmpty() ) 
							{
								if( !contentHnd->Characters( string() ) ) 
								{
									reportParseError( contentHnd->ErrorString() );
									return false;
								}
							}
						}
					}
					// Done
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_ERRORPARSINGCONTENT ) ) );
					return false;
			}

			// get input (use lookup-table instead of nested ifs for performance
			// reasons)
			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseContent, state );
				return false;
			}

			input = mapCLT2FSMChar[ charLookupTable[ c.Unicode() ] ];
			
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Init:
					// skip the ending '>' of a CDATASection
					next();
					break;
				case ChD:
					// on first call: clear string
					if( !contentCharDataRead ) 
					{
						contentCharDataRead = true;
						stringClear();
					}
					stringAddC();
					if( reportEntities ) 
					{
						if( !reportEndEntities() )
						{
							return false;
						}
					}
					next();
					break;

				case ChD1:
					// on first call: clear string
					if( !contentCharDataRead ) 
					{
						contentCharDataRead = true;
						stringClear();
					}
					stringAddC();
					if( reportEntities ) 
					{
						if( !reportEndEntities() )
						{
							return false;
						}
					}
					next();
					break;
				case ChD2:
					stringAddC();
					if( reportEntities ) 
					{
						if( !reportEndEntities() )
						{
							return false;
						}
					}
					next();
					break;
				case Ref:
					if( !contentCharDataRead ) 
					{
						// reference may be CharData; so clear string to be safe
						stringClear();
						parseReference_context = InContent;
						if( !parseReference() ) 
						{
							parseFailed( &CXmlSimpleReaderPrivate::parseContent, state );
							return false;
						}
					} 
					else 
					{
						if( reportEntities ) 
						{
							// report character data in chunks
							if( contentHnd ) 
							{
								nsCodeQOR::CUCS2String strSimplified = simplify( string() );
								if( reportWhitespaceCharData || !strSimplified.IsEmpty() ) 
								{
									if( !contentHnd->Characters( string() ) ) 
									{
										reportParseError( contentHnd->ErrorString() );
										return false;
									}
								}
							}
							stringClear();
						}
						parseReference_context = InContent;
						if( !parseReference() ) 
						{
							parseFailed( &CXmlSimpleReaderPrivate::parseContent, state );
							return false;
						}
					}
					break;
				case Lt:
					// call the handler for CharData
					if( contentHnd ) 
					{
						if( contentCharDataRead ) 
						{
							nsCodeQOR::CUCS2String strSimplified = simplify( string() );
							if( reportWhitespaceCharData || !strSimplified.IsEmpty() ) 
							{
								if( !contentHnd->Characters( string() ) ) 
								{
									reportParseError( contentHnd->ErrorString() );
									return false;
								}
							}
						}
					}
					contentCharDataRead = false;
					next();
					break;
				case PInstr:
				case PInstrR:
					parsePI_xmldecl = false;
					if( !parsePI() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseContent, state );
						return false;
					}
					break;
				case Elem:
					if( !parseElement() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseContent, state );
						return false;
					}
					break;
				case Em:
					next();
					break;
				case Com:
				case ComR:
					if( !parseComment() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseContent, state );
						return false;
					}
					break;
				case CDS:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "[CDATA[" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseContent, state );
						return false;
					}
					break;
				case CDS1:
					stringAddC();
					next();
					break;
				case CDS2:
					// skip ']'
					next();
					break;
				case CDS3:
					// skip ']'...
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	bool CXmlSimpleReaderPrivate::reportEndEntities()
	{
		int count = (int)xmlRefStack.size();
		while( count != 0 && xmlRefStack.top().isEmpty() ) 
		{
			if( contentHnd ) 
			{
				nsCodeQOR::CUCS2String strSimplified = simplify( string() );
				if( reportWhitespaceCharData || !strSimplified.IsEmpty() ) 
				{
					if( !contentHnd->Characters( string() ) ) 
					{
						reportParseError( contentHnd->ErrorString() );
						return false;
					}
				}
			}
			stringClear();
			if( lexicalHnd ) 
			{
				if( !lexicalHnd->EndEntity( xmlRefStack.top().name ) ) 
				{
					reportParseError( lexicalHnd->ErrorString() );
					return false;
				}
			}
			xmlRefStack.pop();
			count--;
		}
		return true;
	}

	//------------------------------------------------------------------------------
	//Parse Misc [27].
	bool CXmlSimpleReaderPrivate::parseMisc()
	{
		const signed char Init             = 0;
		const signed char Lt               = 1; // '<' was read
		const signed char Comment          = 2; // read comment
		const signed char eatWS            = 3; // eat whitespaces
		const signed char PInstr           = 4; // read PI
		const signed char Comment2         = 5; // read comment

		const signed char InpWs            = 0; // S
		const signed char InpLt            = 1; // <
		const signed char InpQm            = 2; // ?
		const signed char InpEm            = 3; // !
		const signed char InpUnknown       = 4;

		static const signed char table[ 3 ][ 5 ] = 
		{
		 /*  InpWs   InpLt  InpQm  InpEm     InpUnknown */
			{ eatWS,  Lt,    -1,    -1,       -1        }, // Init
			{ -1,     -1,    PInstr,Comment,  -1        }, // Lt
			{ -1,     -1,    -1,    -1,       Comment2  }  // Comment
		};

		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseMisc, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case eatWS:
					return true;

				case PInstr:
					if( contentHnd ) 
					{
						if( !contentHnd->ProcessingInstruction(name(),string()) ) 
						{
							reportParseError( contentHnd->ErrorString() );
							return false;
						}
					}
					return true;

				case Comment2:
					if( lexicalHnd ) 
					{
						if( !lexicalHnd->Comment( string() ) ) 
						{
							reportParseError( lexicalHnd->ErrorString() );
							return false;
						}
					}
					return true;

				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseMisc, state );
				return false;
			}

			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == '<' ) 
			{
				input = InpLt;
			} 
			else if( c == '?' ) 
			{
				input = InpQm;
			} 
			else if( c == '!' ) 
			{
				input = InpEm;
			} 
			else 
			{
				input = InpUnknown;
			}
			
			state = table[ state ][ input ];

			switch( state ) 

			{
				case eatWS:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseMisc, state );
						return false;
					}
					break;
				case Lt:
					next();
					break;
				case PInstr:
					parsePI_xmldecl = false;
					if( !parsePI() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseMisc, state );
						return false;
					}
					break;
				case Comment:
					next();
					break;
				case Comment2:
					if( !parseComment() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseMisc, state );
						return false;
					}
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse a processing instruction [16].

	  If xmldec is true, it tries to parse a PI or a XML declaration [23].

	  Precondition: the beginning '<' of the PI is already read and the head stand
	  on the '?' of '<?'.

	  If this funktion was successful, the head-position is on the first
	  character after the PI.
	*/
	bool CXmlSimpleReaderPrivate::parsePI()
	{
		const signed char Init             =  0;
		const signed char QmI              =  1; // ? was read
		const signed char Name             =  2; // read Name
		const signed char XMLDecl          =  3; // read XMLDecl
		const signed char Ws1              =  4; // eat ws after "xml" of XMLDecl
		const signed char PInstr           =  5; // read PI
		const signed char Ws2              =  6; // eat ws after Name of PI
		const signed char Version          =  7; // read versionInfo
		const signed char Ws3              =  8; // eat ws after versionInfo
		const signed char EorSD            =  9; // read EDecl or SDDecl
		const signed char Ws4              = 10; // eat ws after EDecl or SDDecl
		const signed char SD               = 11; // read SDDecl
		const signed char Ws5              = 12; // eat ws after SDDecl
		const signed char ADone            = 13; // almost done
		const signed char Char             = 14; // Char was read
		const signed char Qm               = 15; // Qm was read
		const signed char Done             = 16; // finished reading content

		const signed char InpWs            = 0; // whitespace
		const signed char InpNameBe        = 1; // NameBeginning
		const signed char InpGt            = 2; // >
		const signed char InpQm            = 3; // ?
		const signed char InpUnknown       = 4;

		static const signed char table[ 16 ][ 5 ] = 
		{
		 /*  InpWs,  InpNameBe  InpGt  InpQm   InpUnknown  */
			{ -1,     -1,        -1,    QmI,    -1     }, // Init
			{ -1,     Name,      -1,    -1,     -1     }, // QmI
			{ -1,     -1,        -1,    -1,     -1     }, // Name (this state is left not through input)
			{ Ws1,    -1,        -1,    -1,     -1     }, // XMLDecl
			{ -1,     Version,   -1,    -1,     -1     }, // Ws1
			{ Ws2,    -1,        -1,    Qm,     -1     }, // PInstr
			{ Char,   Char,      Char,  Qm,     Char   }, // Ws2
			{ Ws3,    -1,        -1,    ADone,  -1     }, // Version
			{ -1,     EorSD,     -1,    ADone,  -1     }, // Ws3
			{ Ws4,    -1,        -1,    ADone,  -1     }, // EorSD
			{ -1,     SD,        -1,    ADone,  -1     }, // Ws4
			{ Ws5,    -1,        -1,    ADone,  -1     }, // SD
			{ -1,     -1,        -1,    ADone,  -1     }, // Ws5
			{ -1,     -1,        Done,  -1,     -1     }, // ADone
			{ Char,   Char,      Char,  Qm,     Char   }, // Char
			{ Char,   Char,      Done,  Qm,     Char   }, // Qm
		};
		
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parsePI, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case Name:
					// test what name was read and determine the next state
					// (not very beautiful, I admit)
					if( name()/*TODO:.toLower()*/ == nsCodeQOR::CUCS2String( _TXT( "xml" ) ) ) 
					{
						if( parsePI_xmldecl && name() == nsCodeQOR::CUCS2String( _TXT( "xml" ) ) ) 
						{
							state = XMLDecl;
						} 
						else 
						{
							reportParseError( nsCodeQOR::CString( _TXT( XMLERR_INVALIDNAMEFORPI ) ) );
							return false;
						}
					} 
					else 
					{
						state = PInstr;
						stringClear();
					}
					break;

				case Version:
					// get version (syntax like an attribute)
					if( name() != nsCodeQOR::CUCS2String( _TXT( "version" ) ) ) 
					{
						reportParseError( nsCodeQOR::CString( _TXT( XMLERR_VERSIONEXPECTED ) ) );
						return false;
					}
					xmlVersion = string();
					break;

				case EorSD:
					// get the EDecl or SDDecl (syntax like an attribute)
					if( name() == nsCodeQOR::CUCS2String( _TXT( "standalone" ) ) ) 
					{
						if( string()== nsCodeQOR::CUCS2String( _TXT( "yes" ) ) ) 
						{
							standalone = CXmlSimpleReaderPrivate::Yes;
						} 
						else if( string() == nsCodeQOR::CUCS2String( _TXT( "no" ) ) ) 
						{
							standalone = CXmlSimpleReaderPrivate::No;
						} 
						else 
						{
							reportParseError( nsCodeQOR::CString( _TXT( XMLERR_WRONGVALUEFORSDECL ) ) );
							return false;
						}
					} 
					else if( name() == nsCodeQOR::CUCS2String( _TXT( "encoding" ) ) ) 
					{
						encoding = string();
					} 
					else 
					{
						reportParseError( nsCodeQOR::CString( _TXT( XMLERR_EDECLORSDDECLEXPECTED ) ) );
						return false;
					}
					break;

				case SD:
					if( name() != nsCodeQOR::CUCS2String( _TXT( "standalone" ) ) ) 
					{
						reportParseError( nsCodeQOR::CString(_TXT( XMLERR_SDDECLEXPECTED ) ) );
						return false;
					}

					if( string() == nsCodeQOR::CUCS2String( _TXT( "yes" ) ) )
					{
						standalone = CXmlSimpleReaderPrivate::Yes;
					} 
					else if(string() == nsCodeQOR::CUCS2String( _TXT( "no" ) ) ) 
					{
						standalone = CXmlSimpleReaderPrivate::No;
					} 
					else 
					{
						reportParseError( nsCodeQOR::CString( _TXT( XMLERR_WRONGVALUEFORSDECL ) ) );
						return false;
					}
					break;

				case Qm:
					// test if the skipping was legal
					if( !atEnd() && c != '>' )
					{
						stringAddC( '?' );
					}
					break;
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parsePI, state );
				return false;
			}

			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( determineNameChar( c ) == NameBeginning ) 
			{
				input = InpNameBe;
			} 
			else if( c == '>' ) 
			{
				input = InpGt;
			} 
			else if( c == '?' ) 
			{
				input = InpQm;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case QmI:
					next();
					break;
				case Name:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parsePI, state );
						return false;
					}
					break;
				case Ws1:
				case Ws2:
				case Ws3:
				case Ws4:
				case Ws5:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parsePI, state );
						return false;
					}
					break;
				case Version:
					if( !parseAttribute() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parsePI, state );
						return false;
					}
					break;
				case EorSD:
					if( !parseAttribute() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parsePI, state );
						return false;
					}
					break;

				case SD:
					// get the SDDecl (syntax like an attribute)
					if( standalone != CXmlSimpleReaderPrivate::Unknown ) 
					{
						// already parsed the standalone declaration
						reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
						return false;
					}

					if( !parseAttribute() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parsePI, state );
						return false;
					}
					break;
				case ADone:
					next();
					break;
				case Char:
					stringAddC();
					next();
					break;
				case Qm:
					// skip the '?'
					next();
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse a document type definition (doctypedecl [28]).

	  Precondition: the beginning '<!' of the doctype is already read the head
	  stands on the 'D' of '<!DOCTYPE'.

	  If this function was successful, the head-position is on the first
	  character after the document type definition.	*/
	bool CXmlSimpleReaderPrivate::parseDoctype()
	{
		const signed char Init             =  0;
		const signed char Doctype          =  1; // read the doctype
		const signed char Ws1              =  2; // eat_ws
		const signed char Doctype2         =  3; // read the doctype, part 2
		const signed char Ws2              =  4; // eat_ws
		const signed char Sys              =  5; // read SYSTEM or PUBLIC
		const signed char Ws3              =  6; // eat_ws
		const signed char MP               =  7; // markupdecl or PEReference
		const signed char MPR              =  8; // same as MP, but already reported
		const signed char PER              =  9; // PERReference
		const signed char Mup              = 10; // markupdecl
		const signed char Ws4              = 11; // eat_ws
		const signed char MPE              = 12; // end of markupdecl or PEReference
		const signed char Done             = 13;

		const signed char InpWs            = 0;
		const signed char InpD             = 1; // 'D'
		const signed char InpS             = 2; // 'S' or 'P'
		const signed char InpOB            = 3; // [
		const signed char InpCB            = 4; //]
		const signed char InpPer           = 5; // %
		const signed char InpGt            = 6; // >
		const signed char InpUnknown       = 7;

		static const signed char table[ 13 ][ 8 ] = 
		{
		 /*  InpWs,  InpD       InpS       InpOB  InpCB  InpPer InpGt  InpUnknown */
			{ -1,     Doctype,   -1,        -1,    -1,    -1,    -1,    -1        }, // Init
			{ Ws1,    -1,        -1,        -1,    -1,    -1,    -1,    -1        }, // Doctype
			{ -1,     Doctype2,  Doctype2,  -1,    -1,    -1,    -1,    Doctype2  }, // Ws1
			{ Ws2,    -1,        Sys,       MP,    -1,    -1,    Done,  -1        }, // Doctype2
			{ -1,     -1,        Sys,       MP,    -1,    -1,    Done,  -1        }, // Ws2
			{ Ws3,    -1,        -1,        MP,    -1,    -1,    Done,  -1        }, // Sys
			{ -1,     -1,        -1,        MP,    -1,    -1,    Done,  -1        }, // Ws3
			{ -1,     -1,        -1,        -1,    MPE,   PER,   -1,    Mup       }, // MP
			{ -1,     -1,        -1,        -1,    MPE,   PER,   -1,    Mup       }, // MPR
			{ Ws4,    -1,        -1,        -1,    MPE,   PER,   -1,    Mup       }, // PER
			{ Ws4,    -1,        -1,        -1,    MPE,   PER,   -1,    Mup       }, // Mup
			{ -1,     -1,        -1,        -1,    MPE,   PER,   -1,    Mup       }, // Ws4
			{ -1,     -1,        -1,        -1,    -1,    -1,    Done,  -1        }  // MPE
		};
		
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			startDTDwasReported = false;
			systemId.Clear();
			publicId.Clear();
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseDoctype, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case Doctype2:
					doctype = name();
					break;
				case MP:
					if( !startDTDwasReported && lexicalHnd ) 
					{
						startDTDwasReported = true;
						if( !lexicalHnd->StartDTD( doctype, publicId, systemId ) ) 
						{
							reportParseError( lexicalHnd->ErrorString() );
							return false;
						}
					}
					state = MPR;
					break;
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_ERRORPARSINGDOCTYPE ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseDoctype, state );
				return false;
			}

			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == 'D' ) 
			{
				input = InpD;
			} 
			else if( c == 'S' ) 
			{
				input = InpS;
			} 
			else if( c == 'P' ) 
			{
				input = InpS;
			} 
			else if( c == '[' ) 
			{
				input = InpOB;
			} 
			else if( c == ']' ) 
			{
				input = InpCB;
			} 
			else if( c == '%' ) 
			{
				input = InpPer;
			} 
			else if( c == '>' ) 
			{
				input = InpGt;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Doctype:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "DOCTYPE" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseDoctype, state );
						return false;
					}
					break;
				case Ws1:
				case Ws2:
				case Ws3:
				case Ws4:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseDoctype, state );
						return false;
					}
					break;
				case Doctype2:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseDoctype, state );
						return false;
					}
					break;
				case Sys:
					parseExternalID_allowPublicID = false;
					if( !parseExternalID() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseDoctype, state );
						return false;
					}
					thisPublicId = publicId;
					thisSystemId = systemId;
					break;
				case MP:
				case MPR:
					if( !next_eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseDoctype, state );
						return false;
					}
					break;
				case PER:
					parsePEReference_context = InDTD;
					if( !parsePEReference() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseDoctype, state );
						return false;
					}
					break;
				case Mup:
					if( !parseMarkupdecl() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseDoctype, state );
						return false;
					}
					break;
				case MPE:
					if( !next_eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseDoctype, state );
						return false;
					}
					break;
				case Done:
					if( lexicalHnd ) 
					{
						if( !startDTDwasReported ) 
						{
							startDTDwasReported = true;
							if( !lexicalHnd->StartDTD( doctype, publicId, systemId ) ) 
							{
								reportParseError( lexicalHnd->ErrorString() );
								return false;
							}
						}
						if( !lexicalHnd->EndDTD() ) 
						{
							reportParseError( lexicalHnd->ErrorString() );
							return false;
						}
					}
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse a ExternalID [75].
	  If allowPublicID is true parse ExternalID [75] or PublicID [83].*/
	bool CXmlSimpleReaderPrivate::parseExternalID()
	{
		const signed char Init             =  0;
		const signed char Sys              =  1; // parse 'SYSTEM'
		const signed char SysWS            =  2; // parse the whitespace after 'SYSTEM'
		const signed char SysSQ            =  3; // parse SystemLiteral with '
		const signed char SysSQ2           =  4; // parse SystemLiteral with '
		const signed char SysDQ            =  5; // parse SystemLiteral with "
		const signed char SysDQ2           =  6; // parse SystemLiteral with "
		const signed char Pub              =  7; // parse 'PUBLIC'
		const signed char PubWS            =  8; // parse the whitespace after 'PUBLIC'
		const signed char PubSQ            =  9; // parse PubidLiteral with '
		const signed char PubSQ2           = 10; // parse PubidLiteral with '
		const signed char PubDQ            = 11; // parse PubidLiteral with "
		const signed char PubDQ2           = 12; // parse PubidLiteral with "
		const signed char PubE             = 13; // finished parsing the PubidLiteral
		const signed char PubWS2           = 14; // parse the whitespace after the PubidLiteral
		const signed char PDone            = 15; // done if allowPublicID is true
		const signed char Done             = 16;

		const signed char InpSQ            = 0; // '
		const signed char InpDQ            = 1; // "
		const signed char InpS             = 2; // S
		const signed char InpP             = 3; // P
		const signed char InpWs            = 4; // white space
		const signed char InpUnknown       = 5;

		static const signed char table[ 15 ][ 6 ] = 
		{
		 /*  InpSQ    InpDQ    InpS     InpP     InpWs     InpUnknown */
			{ -1,      -1,      Sys,     Pub,     -1,       -1      }, // Init
			{ -1,      -1,      -1,      -1,      SysWS,    -1      }, // Sys
			{ SysSQ,   SysDQ,   -1,      -1,      -1,       -1      }, // SysWS
			{ Done,    SysSQ2,  SysSQ2,  SysSQ2,  SysSQ2,   SysSQ2  }, // SysSQ
			{ Done,    SysSQ2,  SysSQ2,  SysSQ2,  SysSQ2,   SysSQ2  }, // SysSQ2
			{ SysDQ2,  Done,    SysDQ2,  SysDQ2,  SysDQ2,   SysDQ2  }, // SysDQ
			{ SysDQ2,  Done,    SysDQ2,  SysDQ2,  SysDQ2,   SysDQ2  }, // SysDQ2
			{ -1,      -1,      -1,      -1,      PubWS,    -1      }, // Pub
			{ PubSQ,   PubDQ,   -1,      -1,      -1,       -1      }, // PubWS
			{ PubE,    -1,      PubSQ2,  PubSQ2,  PubSQ2,   PubSQ2  }, // PubSQ
			{ PubE,    -1,      PubSQ2,  PubSQ2,  PubSQ2,   PubSQ2  }, // PubSQ2
			{ -1,      PubE,    PubDQ2,  PubDQ2,  PubDQ2,   PubDQ2  }, // PubDQ
			{ -1,      PubE,    PubDQ2,  PubDQ2,  PubDQ2,   PubDQ2  }, // PubDQ2
			{ PDone,   PDone,   PDone,   PDone,   PubWS2,   PDone   }, // PubE
			{ SysSQ,   SysDQ,   PDone,   PDone,   PDone,    PDone   }  // PubWS2
		};

		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			systemId.Clear();
			publicId.Clear();
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseExternalID, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case PDone:
					if( parseExternalID_allowPublicID ) 
					{
						publicId = string();
						return true;
					} 
					else 
					{
						reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
						return false;
					}
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseExternalID, state );
				return false;
			}

			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == '\'' ) 
			{
				input = InpSQ;
			} 
			else if( c == '"' ) 
			{
				input = InpDQ;
			} 
			else if( c == 'S' ) 
			{
				input = InpS;
			} 
			else if( c == 'P' ) 
			{
				input = InpP;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Sys:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "SYSTEM" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseExternalID, state );
						return false;
					}
					break;
				case SysWS:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseExternalID, state );
						return false;
					}
					break;
				case SysSQ:
				case SysDQ:
					stringClear();
					next();
					break;
				case SysSQ2:
				case SysDQ2:
					stringAddC();
					next();
					break;
				case Pub:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "PUBLIC" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseExternalID, state );
						return false;
					}
					break;
				case PubWS:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseExternalID, state );
						return false;
					}
					break;
				case PubSQ:
				case PubDQ:
					stringClear();
					next();
					break;
				case PubSQ2:
				case PubDQ2:
					stringAddC();
					next();
					break;
				case PubE:
					next();
					break;
				case PubWS2:
					publicId = string();
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseExternalID, state );
						return false;
					}
					break;
				case Done:
					systemId = string();
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	//Parse a markupdecl [29].
	bool CXmlSimpleReaderPrivate::parseMarkupdecl()
	{
		const signed char Init             = 0;
		const signed char Lt               = 1; // < was read
		const signed char Em               = 2; // ! was read
		const signed char CE               = 3; // E was read
		const signed char Qm               = 4; // ? was read
		const signed char Dash             = 5; // - was read
		const signed char CA               = 6; // A was read
		const signed char CEL              = 7; // EL was read
		const signed char CEN              = 8; // EN was read
		const signed char CN               = 9; // N was read
		const signed char Done             = 10;

		const signed char InpLt            = 0; // <
		const signed char InpQm            = 1; // ?
		const signed char InpEm            = 2; // !
		const signed char InpDash          = 3; // -
		const signed char InpA             = 4; // A
		const signed char InpE             = 5; // E
		const signed char InpL             = 6; // L
		const signed char InpN             = 7; // N
		const signed char InpUnknown       = 8;

		static const signed char table[ 4 ][ 9 ] = 
		{
		 /*  InpLt  InpQm  InpEm  InpDash  InpA   InpE   InpL   InpN   InpUnknown */
			{ Lt,    -1,    -1,    -1,      -1,    -1,    -1,    -1,    -1     }, // Init
			{ -1,    Qm,    Em,    -1,      -1,    -1,    -1,    -1,    -1     }, // Lt
			{ -1,    -1,    -1,    Dash,    CA,    CE,    -1,    CN,    -1     }, // Em
			{ -1,    -1,    -1,    -1,      -1,    -1,    CEL,   CEN,   -1     }  // CE
		};
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseMarkupdecl, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case Qm:
					if( contentHnd ) 
					{
						if( !contentHnd->ProcessingInstruction( name(),string() ) ) 
						{
							reportParseError( contentHnd->ErrorString() );
							return false;
						}
					}
					return true;
				case Dash:
					if( lexicalHnd ) 
					{
						if( !lexicalHnd->Comment( string() ) ) 
						{
							reportParseError( lexicalHnd->ErrorString() );
							return false;
						}
					}
					return true;
				case CA:
					return true;
				case CEL:
					return true;
				case CEN:
					return true;
				case CN:
					return true;
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_LETTEREXPECTED ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseMarkupdecl, state );
				return false;
			}

			if( c == '<' ) 
			{
				input = InpLt;
			} 
			else if( c == '?' ) 
			{
				input = InpQm;
			}
			else if( c == '!' ) 
			{
				input = InpEm;
			} 
			else if( c == '-' ) 
			{
				input = InpDash;
			} 
			else if( c == 'A' ) 
			{
				input = InpA;
			} 
			else if( c == 'E' ) 
			{
				input = InpE;
			} 
			else if( c == 'L' ) 
			{
				input = InpL;
			} 
			else if( c == 'N' ) 
			{
				input = InpN;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Lt:
					next();
					break;
				case Em:
					next();
					break;
				case CE:
					next();
					break;
				case Qm:
					parsePI_xmldecl = false;
					if( !parsePI() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseMarkupdecl, state );
						return false;
					}
					break;
				case Dash:
					if( !parseComment() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseMarkupdecl, state );
						return false;
					}
					break;
				case CA:
					if( !parseAttlistDecl() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseMarkupdecl, state );
						return false;
					}
					break;
				case CEL:
					if( !parseElementDecl() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseMarkupdecl, state );
						return false;
					}
					break;
				case CEN:
					if( !parseEntityDecl() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseMarkupdecl, state );
						return false;
					}
					break;
				case CN:
					if( !parseNotationDecl() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseMarkupdecl, state );
						return false;
					}
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	//Parse a PEReference [69]
	bool CXmlSimpleReaderPrivate::parsePEReference()
	{
		const signed char Init             = 0;
		const signed char Next             = 1;
		const signed char Name             = 2;
		const signed char NameR            = 3; // same as Name, but already reported
		const signed char Done             = 4;

		const signed char InpSemi          = 0; // ;
		const signed char InpPer           = 1; // %
		const signed char InpUnknown       = 2;

		static const signed char table[ 4 ][ 3 ] = 
		{
		 /*  InpSemi  InpPer  InpUnknown */
			{ -1,      Next,   -1    }, // Init
			{ -1,      -1,     Name  }, // Next
			{ Done,    -1,     -1    }, // Name
			{ Done,    -1,     -1    }  // NameR
		};
		
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parsePEReference, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case Name:
					{
						bool skipIt = true;
						nsCodeQOR::CUCS2String xmlRefString;

						std::map< const nsCodeQOR::CUCS2String, nsCodeQOR::CUCS2String >::iterator it;
						it = parameterEntities.find( ref() );
						if( it != parameterEntities.end() ) 
						{
							skipIt = false;
							xmlRefString = it->second;
						} 
						else if( entityRes ) 
						{
							std::map< const nsCodeQOR::CUCS2String, CXmlSimpleReaderPrivate::ExternParameterEntity >::iterator it2;
							it2 = externParameterEntities.find(ref());
							CXmlInputSource* ret = 0;
							if( it2 != externParameterEntities.end() ) 
							{
								if( !entityRes->ResolveEntity((*it2).second.publicId, (*it2).second.systemId, ret ) ) 
								{
									delete ret;
									reportParseError( entityRes->ErrorString() );
									return false;
								}
								if( ret ) 
								{
									xmlRefString = ret->Data();
									delete ret;
									if( !stripTextDecl( xmlRefString ) ) 
									{
										reportParseError( nsCodeQOR::CString( _TXT( XMLERR_ERRORINTEXTDECL ) ) );
										return false;
									}
									skipIt = false;
								}
							}
						}

						if( skipIt ) 
						{
							if( contentHnd ) 
							{
								if( !contentHnd->SkippedEntity( '%' + ref() ) ) 
								{
									reportParseError( contentHnd->ErrorString() );
									return false;
								}
							}
						} 
						else 
						{
							if( parsePEReference_context == InEntityValue ) 
							{
								// Included in literal
								if( !insertXmlRef( xmlRefString, ref(), true ) )
								{
									return false;
								}
							} 
							else if( parsePEReference_context == InDTD ) 
							{
								// Included as PE
								if( !insertXmlRef( ' ' + xmlRefString + ' ', ref(), false ) )
								{
									return false;
								}
							}
						}
					}
					state = NameR;
					break;
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_LETTEREXPECTED ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parsePEReference, state );
				return false;
			}

			if( c == ';' ) 
			{
				input = InpSemi;
			} 
			else if( c == '%' ) 
			{
				input = InpPer;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Next:
					next();
					break;
				case Name:
				case NameR:
					parseName_useRef = true;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parsePEReference, state );
						return false;
					}
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse a AttlistDecl [52].

	  Precondition: the beginning '<!' is already read and the head
	  stands on the 'A' of '<!ATTLIST'
	*/
	bool CXmlSimpleReaderPrivate::parseAttlistDecl()
	{
		const signed char Init             =  0;
		const signed char Attlist          =  1; // parse the string "ATTLIST"
		const signed char Ws               =  2; // whitespace read
		const signed char Name             =  3; // parse name
		const signed char Ws1              =  4; // whitespace read
		const signed char Attdef           =  5; // parse the AttDef
		const signed char Ws2              =  6; // whitespace read
		const signed char Atttype          =  7; // parse the AttType
		const signed char Ws3              =  8; // whitespace read
		const signed char DDecH            =  9; // DefaultDecl with #
		const signed char DefReq           = 10; // parse the string "REQUIRED"
		const signed char DefImp           = 11; // parse the string "IMPLIED"
		const signed char DefFix           = 12; // parse the string "FIXED"
		const signed char Attval           = 13; // parse the AttValue
		const signed char Ws4              = 14; // whitespace read
		const signed char Done             = 15;

		const signed char InpWs            = 0; // white space
		const signed char InpGt            = 1; // >
		const signed char InpHash          = 2; // #
		const signed char InpA             = 3; // A
		const signed char InpI             = 4; // I
		const signed char InpF             = 5; // F
		const signed char InpR             = 6; // R
		const signed char InpUnknown       = 7;

		static const signed char table[ 15 ][ 8 ] = 
		{
		 /*  InpWs    InpGt    InpHash  InpA      InpI     InpF     InpR     InpUnknown */
			{ -1,      -1,      -1,      Attlist,  -1,      -1,      -1,      -1      }, // Init
			{ Ws,      -1,      -1,      -1,       -1,      -1,      -1,      -1      }, // Attlist
			{ -1,      -1,      -1,      Name,     Name,    Name,    Name,    Name    }, // Ws
			{ Ws1,     Done,    Attdef,  Attdef,   Attdef,  Attdef,  Attdef,  Attdef  }, // Name
			{ -1,      Done,    Attdef,  Attdef,   Attdef,  Attdef,  Attdef,  Attdef  }, // Ws1
			{ Ws2,     -1,      -1,      -1,       -1,      -1,      -1,      -1      }, // Attdef
			{ -1,      Atttype, Atttype, Atttype,  Atttype, Atttype, Atttype, Atttype }, // Ws2
			{ Ws3,     -1,      -1,      -1,       -1,      -1,      -1,      -1      }, // Attype
			{ -1,      Attval,  DDecH,   Attval,   Attval,  Attval,  Attval,  Attval  }, // Ws3
			{ -1,      -1,      -1,      -1,       DefImp,  DefFix,  DefReq,  -1      }, // DDecH
			{ Ws4,     Ws4,     -1,      -1,       -1,      -1,      -1,      -1      }, // DefReq
			{ Ws4,     Ws4,     -1,      -1,       -1,      -1,      -1,      -1      }, // DefImp
			{ Ws3,     -1,      -1,      -1,       -1,      -1,      -1,      -1      }, // DefFix
			{ Ws4,     Ws4,     -1,      -1,       -1,      -1,      -1,      -1      }, // Attval
			{ -1,      Done,    Attdef,  Attdef,   Attdef,  Attdef,  Attdef,  Attdef  }  // Ws4
		};

		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case Name:
					attDeclEName = name();
					break;
				case Attdef:
					attDeclAName = name();
					break;
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_LETTEREXPECTED ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
				return false;
			}

			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == '>' ) 
			{
				input = InpGt;
			} 
			else if( c == '#' ) 
			{
				input = InpHash;
			} 
			else if( c == 'A' ) 
			{
				input = InpA;
			} 
			else if( c == 'I' ) 
			{
				input = InpI;
			} 
			else if( c == 'F' ) 
			{
				input = InpF;
			} 
			else if( c == 'R' ) 
			{
				input = InpR;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Attlist:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "ATTLIST" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
						return false;
					}
					break;
				case Ws:
				case Ws1:
				case Ws2:
				case Ws3:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
						return false;
					}
					break;
				case Name:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
						return false;
					}
					break;
				case Attdef:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
						return false;
					}
					break;
				case Atttype:
					if( !parseAttType() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
						return false;
					}
					break;
				case DDecH:
					next();
					break;
				case DefReq:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "REQUIRED" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
						return false;
					}
					break;
				case DefImp:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "IMPLIED" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
						return false;
					}
					break;
				case DefFix:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "FIXED" ) );
					if (!parseString()) {
						parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
						return false;
					}
					break;
				case Attval:
					if( !parseAttValue() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
						return false;
					}
					break;
				case Ws4:
					if( declHnd ) 
					{
						// ### not all values are computed yet...
						if( !declHnd->AttributeDecl( attDeclEName, attDeclAName, nsCodeQOR::CUCS2String(), nsCodeQOR::CUCS2String(), nsCodeQOR::CUCS2String() ) ) 
						{
							reportParseError( declHnd->ErrorString() );
							return false;
						}
					}
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttlistDecl, state );
						return false;
					}
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	//Parse a AttType [54]
	bool CXmlSimpleReaderPrivate::parseAttType()
	{
		const signed char Init             =  0;
		const signed char ST               =  1; // StringType
		const signed char TTI              =  2; // TokenizedType starting with 'I'
		const signed char TTI2             =  3; // TokenizedType helpstate
		const signed char TTI3             =  4; // TokenizedType helpstate
		const signed char TTE              =  5; // TokenizedType starting with 'E'
		const signed char TTEY             =  6; // TokenizedType starting with 'ENTITY'
		const signed char TTEI             =  7; // TokenizedType starting with 'ENTITI'
		const signed char N                =  8; // N read (TokenizedType or Notation)
		const signed char TTNM             =  9; // TokenizedType starting with 'NM'
		const signed char TTNM2            = 10; // TokenizedType helpstate
		const signed char NO               = 11; // Notation
		const signed char NO2              = 12; // Notation helpstate
		const signed char NO3              = 13; // Notation helpstate
		const signed char NOName           = 14; // Notation, read name
		const signed char NO4              = 15; // Notation helpstate
		const signed char EN               = 16; // Enumeration
		const signed char ENNmt            = 17; // Enumeration, read Nmtoken
		const signed char EN2              = 18; // Enumeration helpstate
		const signed char ADone            = 19; // almost done (make next and accept)
		const signed char Done             = 20;

		const signed char InpWs            =  0; // whitespace
		const signed char InpOp            =  1; // (
		const signed char InpCp            =  2; //)
		const signed char InpPipe          =  3; // |
		const signed char InpC             =  4; // C
		const signed char InpE             =  5; // E
		const signed char InpI             =  6; // I
		const signed char InpM             =  7; // M
		const signed char InpN             =  8; // N
		const signed char InpO             =  9; // O
		const signed char InpR             = 10; // R
		const signed char InpS             = 11; // S
		const signed char InpY             = 12; // Y
		const signed char InpUnknown       = 13;

		static const signed char table[ 19 ][ 14 ] = 
		{
		 /*  InpWs    InpOp    InpCp    InpPipe  InpC     InpE     InpI     InpM     InpN     InpO     InpR     InpS     InpY     InpUnknown */
			{ -1,      EN,      -1,      -1,      ST,      TTE,     TTI,     -1,      N,       -1,      -1,      -1,      -1,      -1     }, // Init
			{ Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done   }, // ST
			{ Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    TTI2,    Done,    Done,    Done   }, // TTI
			{ Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    TTI3,    Done,    Done   }, // TTI2
			{ Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done   }, // TTI3
			{ -1,      -1,      -1,      -1,      -1,      -1,      TTEI,    -1,      -1,      -1,      -1,      -1,      TTEY,    -1     }, // TTE
			{ Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done   }, // TTEY
			{ Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done   }, // TTEI
			{ -1,      -1,      -1,      -1,      -1,      -1,      -1,      TTNM,    -1,      NO,      -1,      -1,      -1,      -1     }, // N
			{ Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    TTNM2,   Done,    Done   }, // TTNM
			{ Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done,    Done   }, // TTNM2
			{ NO2,     -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1     }, // NO
			{ -1,      NO3,     -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1     }, // NO2
			{ NOName,  NOName,  NOName,  NOName,  NOName,  NOName,  NOName,  NOName,  NOName,  NOName,  NOName,  NOName,  NOName,  NOName }, // NO3
			{ NO4,     -1,      ADone,   NO3,     -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1     }, // NOName
			{ -1,      -1,      ADone,   NO3,     -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1     }, // NO4
			{ -1,      -1,      ENNmt,   -1,      ENNmt,   ENNmt,   ENNmt,   ENNmt,   ENNmt,   ENNmt,   ENNmt,   ENNmt,   ENNmt,   ENNmt  }, // EN
			{ EN2,     -1,      ADone,   EN,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1     }, // ENNmt
			{ -1,      -1,      ADone,   EN,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1,      -1     }  // EN2
		};
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
					return false;
				}
			}
		}

		for (;;) 
		{
			switch( state ) 
			{
				case ADone:
					return true;
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_LETTEREXPECTED ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseAttType, state );
				return false;
			}

			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == '(' ) 
			{
				input = InpOp;
			} 
			else if( c == ')' ) 
			{
				input = InpCp;
			} 
			else if( c == '|' ) 
			{
				input = InpPipe;
			} 
			else if( c == 'C' ) 
			{
				input = InpC;
			} 
			else if( c == 'E' ) 
			{
				input = InpE;
			} 
			else if( c == 'I' ) 
			{
				input = InpI;
			} 
			else if( c == 'M' ) 
			{
				input = InpM;
			} 
			else if( c == 'N' ) 
			{
				input = InpN;
			} 
			else if( c == 'O' ) 
			{
				input = InpO;
			} 
			else if( c == 'R' ) 
			{
				input = InpR;
			} 
			else if( c == 'S' ) 
			{
				input = InpS;
			} 
			else if( c == 'Y' ) 
			{
				input = InpY;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case ST:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "CDATA" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case TTI:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "ID" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case TTI2:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "REF" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case TTI3:
					next(); // S
					break;
				case TTE:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "ENTIT" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case TTEY:
					next(); // Y
					break;
				case TTEI:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "IES" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case N:
					next(); // N
					break;
				case TTNM:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "MTOKEN" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case TTNM2:
					next(); // S
					break;
				case NO:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "OTATION" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case NO2:
					if( !eat_ws() ) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseAttType, state);
						return false;
					}
					break;
				case NO3:
					if( !next_eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case NOName:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case NO4:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case EN:
					if( !next_eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case ENNmt:
					if( !parseNmtoken() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case EN2:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttType, state );
						return false;
					}
					break;
				case ADone:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse a AttValue [10]

	  Precondition: the head stands on the beginning " or '

	  If this function was successful, the head stands on the first
	  character after the closing " or ' and the value of the attribute
	  is in string().
	*/
	bool CXmlSimpleReaderPrivate::parseAttValue()
	{
		const signed char Init             = 0;
		const signed char Dq               = 1; // double quotes were read
		const signed char DqRef            = 2; // read references in double quotes
		const signed char DqC              = 3; // signed character read in double quotes
		const signed char Sq               = 4; // single quotes were read
		const signed char SqRef            = 5; // read references in single quotes
		const signed char SqC              = 6; // signed character read in single quotes
		const signed char Done             = 7;

		const signed char InpDq            = 0; // "
		const signed char InpSq            = 1; // '
		const signed char InpAmp           = 2; // &
		const signed char InpLt            = 3; // <
		const signed char InpUnknown       = 4;

		static const signed char table[ 7 ][ 5 ] = 
		{
		 /*  InpDq  InpSq  InpAmp  InpLt InpUnknown */
			{ Dq,    Sq,    -1,     -1,   -1    }, // Init
			{ Done,  DqC,   DqRef,  -1,   DqC   }, // Dq
			{ Done,  DqC,   DqRef,  -1,   DqC   }, // DqRef
			{ Done,  DqC,   DqRef,  -1,   DqC   }, // DqC
			{ SqC,   Done,  SqRef,  -1,   SqC   }, // Sq
			{ SqC,   Done,  SqRef,  -1,   SqC   }, // SqRef
			{ SqC,   Done,  SqRef,  -1,   SqC   }  // SqRef
		};
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}

				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseAttValue, state );
					return false;
				}
			}
		}

		for( ;; ) 
		{
			switch( state ) 
			{
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseAttValue, state );
				return false;
			}

			if( c == '"' ) 
			{
				input = InpDq;
			} 
			else if( c == '\'' ) 
			{
				input = InpSq;
			} 
			else if( c == '&' ) 
			{
				input = InpAmp;
			} 
			else if( c == '<' ) 
			{
				input = InpLt;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Dq:
				case Sq:
					stringClear();
					next();
					break;
				case DqRef:
				case SqRef:
					parseReference_context = InAttributeValue;
					if( !parseReference() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttValue, state );
						return false;
					}
					break;
				case DqC:
				case SqC:
					stringAddC();
					next();
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse a elementdecl [45].

	  Precondition: the beginning '<!E' is already read and the head
	  stands on the 'L' of '<!ELEMENT'	*/
	bool CXmlSimpleReaderPrivate::parseElementDecl()
	{
		const signed char Init             =  0;
		const signed char Elem             =  1; // parse the beginning string
		const signed char Ws1              =  2; // whitespace required
		const signed char Nam              =  3; // parse Name
		const signed char Ws2              =  4; // whitespace required
		const signed char Empty            =  5; // read EMPTY
		const signed char Any              =  6; // read ANY
		const signed char Cont             =  7; // read contentspec (except ANY or EMPTY)
		const signed char Mix              =  8; // read Mixed
		const signed char Mix2             =  9; //
		const signed char Mix3             = 10; //
		const signed char MixN1            = 11; //
		const signed char MixN2            = 12; //
		const signed char MixN3            = 13; //
		const signed char MixN4            = 14; //
		const signed char Cp               = 15; // parse cp
		const signed char Cp2              = 16; //
		const signed char WsD              = 17; // eat whitespace before Done
		const signed char Done             = 18;

		const signed char InpWs            =  0;
		const signed char InpGt            =  1; // >
		const signed char InpPipe          =  2; // |
		const signed char InpOp            =  3; // (
		const signed char InpCp            =  4; //)
		const signed char InpHash          =  5; // #
		const signed char InpQm            =  6; // ?
		const signed char InpAst           =  7; // *
		const signed char InpPlus          =  8; // +
		const signed char InpA             =  9; // A
		const signed char InpE             = 10; // E
		const signed char InpL             = 11; // L
		const signed char InpUnknown       = 12;

		static const signed char table[ 18 ][ 13 ] = 
		{
		 /*  InpWs   InpGt  InpPipe  InpOp  InpCp   InpHash  InpQm  InpAst  InpPlus  InpA    InpE    InpL    InpUnknown */
			{ -1,     -1,    -1,      -1,    -1,     -1,      -1,    -1,     -1,      -1,     -1,     Elem,   -1     }, // Init
			{ Ws1,    -1,    -1,      -1,    -1,     -1,      -1,    -1,     -1,      -1,     -1,     -1,     -1     }, // Elem
			{ -1,     -1,    -1,      -1,    -1,     -1,      -1,    -1,     -1,      Nam,    Nam,    Nam,    Nam    }, // Ws1
			{ Ws2,    -1,    -1,      -1,    -1,     -1,      -1,    -1,     -1,      -1,     -1,     -1,     -1     }, // Nam
			{ -1,     -1,    -1,      Cont,  -1,     -1,      -1,    -1,     -1,      Any,    Empty,  -1,     -1     }, // Ws2
			{ WsD,    Done,  -1,      -1,    -1,     -1,      -1,    -1,     -1,      -1,     -1,     -1,     -1     }, // Empty
			{ WsD,    Done,  -1,      -1,    -1,     -1,      -1,    -1,     -1,      -1,     -1,     -1,     -1     }, // Any
			{ -1,     -1,    -1,      Cp,    Cp,     Mix,     -1,    -1,     -1,      Cp,     Cp,     Cp,     Cp     }, // Cont
			{ Mix2,   -1,    MixN1,   -1,    Mix3,   -1,      -1,    -1,     -1,      -1,     -1,     -1,     -1     }, // Mix
			{ -1,     -1,    MixN1,   -1,    Mix3,   -1,      -1,    -1,     -1,      -1,     -1,     -1,     -1     }, // Mix2
			{ WsD,    Done,  -1,      -1,    -1,     -1,      -1,    WsD,    -1,      -1,     -1,     -1,     -1     }, // Mix3
			{ -1,     -1,    -1,      -1,    -1,     -1,      -1,    -1,     -1,      MixN2,  MixN2,  MixN2,  MixN2  }, // MixN1
			{ MixN3,  -1,    MixN1,   -1,    MixN4,  -1,      -1,    -1,     -1,      -1,     -1,     -1,     -1     }, // MixN2
			{ -1,     -1,    MixN1,   -1,    MixN4,  -1,      -1,    -1,     -1,      -1,     -1,     -1,     -1     }, // MixN3
			{ -1,     -1,    -1,      -1,    -1,     -1,      -1,    WsD,    -1,      -1,     -1,     -1,     -1     }, // MixN4
			{ WsD,    Done,  -1,      -1,    -1,     -1,      Cp2,   Cp2,    Cp2,     -1,     -1,     -1,     -1     }, // Cp
			{ WsD,    Done,  -1,      -1,    -1,     -1,      -1,    -1,     -1,      -1,     -1,     -1,     -1     }, // Cp2
			{ -1,     Done,  -1,      -1,    -1,     -1,      -1,    -1,     -1,      -1,     -1,     -1,     -1     }  // WsD
		};
		
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseElementDecl, state );
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case Done:
					return true;
				case -1:
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof(&CXmlSimpleReaderPrivate::parseElementDecl, state);
				return false;
			}

			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == '>' ) 
			{
				input = InpGt;
			} 
			else if( c == '|' ) 
			{
				input = InpPipe;
			} 
			else if( c == '(' ) 
			{
				input = InpOp;
			} 
			else if( c == ')' ) 
			{
				input = InpCp;
			} 
			else if( c == '#' ) 
			{
				input = InpHash;
			} 
			else if( c == '?' ) 
			{
				input = InpQm;
			} 
			else if( c == '*' ) 
			{
				input = InpAst;
			} 
			else if( c == '+' ) 
			{
				input = InpPlus;
			} 
			else if( c == 'A' ) 
			{
				input = InpA;
			} 
			else if( c == 'E' ) 
			{
				input = InpE;
			} 
			else if( c == 'L' ) 
			{
				input = InpL;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[state][input];

			switch( state ) 
			{
				case Elem:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "LEMENT" ) );
					if (!parseString()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Ws1:
					if (!eat_ws()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Nam:
					parseName_useRef = false;
					if (!parseName()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Ws2:
					if (!eat_ws()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Empty:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "EMPTY" ) );
					if (!parseString()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Any:
					parseString_s = nsCodeQOR::CUCS2String( _TXT("ANY") );
					if (!parseString()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Cont:
					if (!next_eat_ws()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Mix:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "#PCDATA" ) );
					if (!parseString()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Mix2:
					if (!eat_ws()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Mix3:
					next();
					break;
				case MixN1:
					if (!next_eat_ws()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case MixN2:
					parseName_useRef = false;
					if (!parseName()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case MixN3:
					if (!eat_ws()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case MixN4:
					next();
					break;
				case Cp:
					if (!parseChoiceSeq()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Cp2:
					next();
					break;
				case WsD:
					if (!next_eat_ws()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseElementDecl, state);
						return false;
					}
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse a NotationDecl [82].

	  Precondition: the beginning '<!' is already read and the head
	  stands on the 'N' of '<!NOTATION'*/
	bool CXmlSimpleReaderPrivate::parseNotationDecl()
	{
		const signed char Init             = 0;
		const signed char Not              = 1; // read NOTATION
		const signed char Ws1              = 2; // eat whitespaces
		const signed char Nam              = 3; // read Name
		const signed char Ws2              = 4; // eat whitespaces
		const signed char ExtID            = 5; // parse ExternalID
		const signed char ExtIDR           = 6; // same as ExtID, but already reported
		const signed char Ws3              = 7; // eat whitespaces
		const signed char Done             = 8;

		const signed char InpWs            = 0;
		const signed char InpGt            = 1; // >
		const signed char InpN             = 2; // N
		const signed char InpUnknown       = 3;

		static const signed char table[ 8 ][ 4 ] = 
		{
		 /*  InpWs   InpGt  InpN    InpUnknown */
			{ -1,     -1,    Not,    -1     }, // Init
			{ Ws1,    -1,    -1,     -1     }, // Not
			{ -1,     -1,    Nam,    Nam    }, // Ws1
			{ Ws2,    Done,  -1,     -1     }, // Nam
			{ -1,     Done,  ExtID,  ExtID  }, // Ws2
			{ Ws3,    Done,  -1,     -1     }, // ExtID
			{ Ws3,    Done,  -1,     -1     }, // ExtIDR
			{ -1,     Done,  -1,     -1     }  // Ws3
		};
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseNotationDecl, state );
					return false;
				}
			}
		}

		for (;;) 
		{
			switch( state ) 
			{
				case ExtID:
					// call the handler
					if (dtdHnd) 
					{
						if( !dtdHnd->NotationDecl( name(), publicId, systemId ) ) 
						{
							reportParseError( dtdHnd->ErrorString() );
							return false;
						}
					}
					state = ExtIDR;
					break;
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof(&CXmlSimpleReaderPrivate::parseNotationDecl, state);
				return false;
			}
			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == '>' ) 
			{
				input = InpGt;
			} 
			else if( c == 'N' ) 
			{
				input = InpN;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Not:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "NOTATION" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseNotationDecl, state );
						return false;
					}
					break;
				case Ws1:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseNotationDecl, state );
						return false;
					}
					break;
				case Nam:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseNotationDecl, state );
						return false;
					}
					break;
				case Ws2:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseNotationDecl, state );
						return false;
					}
					break;
				case ExtID:
				case ExtIDR:
					parseExternalID_allowPublicID = true;
					if( !parseExternalID() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseNotationDecl, state );
						return false;
					}
					break;
				case Ws3:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseNotationDecl, state );
						return false;
					}
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse choice [49] or seq [50].

	  Precondition: the beginning '('S? is already read and the head
	  stands on the first non-whitespace character after it.*/
	bool CXmlSimpleReaderPrivate::parseChoiceSeq()
	{
		const signed char Init             = 0;
		const signed char Ws1              = 1; // eat whitespace
		const signed char CoS              = 2; // choice or set
		const signed char Ws2              = 3; // eat whitespace
		const signed char More             = 4; // more cp to read
		const signed char Name             = 5; // read name
		const signed char Done             = 6; //

		const signed char InpWs            = 0; // S
		const signed char InpOp            = 1; // (
		const signed char InpCp            = 2; //)
		const signed char InpQm            = 3; // ?
		const signed char InpAst           = 4; // *
		const signed char InpPlus          = 5; // +
		const signed char InpPipe          = 6; // |
		const signed char InpComm          = 7; // ,
		const signed char InpUnknown       = 8;

		static const signed char table[ 6 ][ 9 ] = 
		{
		 /*  InpWs   InpOp  InpCp  InpQm  InpAst  InpPlus  InpPipe  InpComm  InpUnknown */
			{ -1,     Ws1,   -1,    -1,    -1,     -1,      -1,      -1,      Name  }, // Init
			{ -1,     CoS,   -1,    -1,    -1,     -1,      -1,      -1,      CoS   }, // Ws1
			{ Ws2,    -1,    Done,  Ws2,   Ws2,    Ws2,     More,    More,    -1    }, // CS
			{ -1,     -1,    Done,  -1,    -1,     -1,      More,    More,    -1    }, // Ws2
			{ -1,     Ws1,   -1,    -1,    -1,     -1,      -1,      -1,      Name  }, // More (same as Init)
			{ Ws2,    -1,    Done,  Ws2,   Ws2,    Ws2,     More,    More,    -1    }  // Name (same as CS)
		};
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed(&CXmlSimpleReaderPrivate::parseChoiceSeq, state);
					return false;
				}
			}
		}

		for (;;) 
		{
			switch( state ) 
			{
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseChoiceSeq, state );
				return false;
			}
			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == '(') 
			{
				input = InpOp;
			} 
			else if( c == ')') 
			{
				input = InpCp;
			} 
			else if( c == '?')
			{
				input = InpQm;
			} 
			else if( c == '*' ) 
			{
				input = InpAst;
			} 
			else if( c == '+' ) 
			{
				input = InpPlus;
			} 
			else if( c == '|' ) 
			{
				input = InpPipe;
			} 
			else if( c == ',' ) 
			{
				input = InpComm;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Ws1:
					if( !next_eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseChoiceSeq, state );
						return false;
					}
					break;
				case CoS:
					if( !parseChoiceSeq() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseChoiceSeq, state );
						return false;
					}
					break;
				case Ws2:
					if( !next_eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseChoiceSeq, state );
						return false;
					}
					break;
				case More:
					if( !next_eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseChoiceSeq, state );
						return false;
					}
					break;
				case Name:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseChoiceSeq, state );
						return false;
					}
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse a EntityDecl [70].

	  Precondition: the beginning '<!E' is already read and the head
	  stand on the 'N' of '<!ENTITY'
	*/
	bool CXmlSimpleReaderPrivate::parseEntityDecl()
	{
		const signed char Init             =  0;
		const signed char Ent              =  1; // parse "ENTITY"
		const signed char Ws1              =  2; // white space read
		const signed char Name             =  3; // parse name
		const signed char Ws2              =  4; // white space read
		const signed char EValue           =  5; // parse entity value
		const signed char EValueR          =  6; // same as EValue, but already reported
		const signed char ExtID            =  7; // parse ExternalID
		const signed char Ws3              =  8; // white space read
		const signed char Ndata            =  9; // parse "NDATA"
		const signed char Ws4              = 10; // white space read
		const signed char NNam             = 11; // parse name
		const signed char NNamR            = 12; // same as NNam, but already reported
		const signed char PEDec            = 13; // parse PEDecl
		const signed char Ws6              = 14; // white space read
		const signed char PENam            = 15; // parse name
		const signed char Ws7              = 16; // white space read
		const signed char PEVal            = 17; // parse entity value
		const signed char PEValR           = 18; // same as PEVal, but already reported
		const signed char PEEID            = 19; // parse ExternalID
		const signed char PEEIDR           = 20; // same as PEEID, but already reported
		const signed char WsE              = 21; // white space read
		const signed char Done             = 22;
		const signed char EDDone           = 23; // done, but also report an external, unparsed entity decl

		const signed char InpWs            = 0; // white space
		const signed char InpPer           = 1; // %
		const signed char InpQuot          = 2; // " or '
		const signed char InpGt            = 3; // >
		const signed char InpN             = 4; // N
		const signed char InpUnknown       = 5;

		static const signed char table[ 22 ][ 6 ] = 
		{
		 /*  InpWs  InpPer  InpQuot  InpGt  InpN    InpUnknown */
			{ -1,    -1,     -1,      -1,    Ent,    -1      }, // Init
			{ Ws1,   -1,     -1,      -1,    -1,     -1      }, // Ent
			{ -1,    PEDec,  -1,      -1,    Name,   Name    }, // Ws1
			{ Ws2,   -1,     -1,      -1,    -1,     -1      }, // Name
			{ -1,    -1,     EValue,  -1,    -1,     ExtID   }, // Ws2
			{ WsE,   -1,     -1,      Done,  -1,     -1      }, // EValue
			{ WsE,   -1,     -1,      Done,  -1,     -1      }, // EValueR
			{ Ws3,   -1,     -1,      EDDone,-1,     -1      }, // ExtID
			{ -1,    -1,     -1,      EDDone,Ndata,  -1      }, // Ws3
			{ Ws4,   -1,     -1,      -1,    -1,     -1      }, // Ndata
			{ -1,    -1,     -1,      -1,    NNam,   NNam    }, // Ws4
			{ WsE,   -1,     -1,      Done,  -1,     -1      }, // NNam
			{ WsE,   -1,     -1,      Done,  -1,     -1      }, // NNamR
			{ Ws6,   -1,     -1,      -1,    -1,     -1      }, // PEDec
			{ -1,    -1,     -1,      -1,    PENam,  PENam   }, // Ws6
			{ Ws7,   -1,     -1,      -1,    -1,     -1      }, // PENam
			{ -1,    -1,     PEVal,   -1,    -1,     PEEID   }, // Ws7
			{ WsE,   -1,     -1,      Done,  -1,     -1      }, // PEVal
			{ WsE,   -1,     -1,      Done,  -1,     -1      }, // PEValR
			{ WsE,   -1,     -1,      Done,  -1,     -1      }, // PEEID
			{ WsE,   -1,     -1,      Done,  -1,     -1      }, // PEEIDR
			{ -1,    -1,     -1,      Done,  -1,     -1      }  // WsE
		};
		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
					return false;
				}
			}
		}

		for (;;) 
		{
			switch( state ) 
			{
				case EValue:
					if( !entityExist(name()) ) 
					{
						entities.insert( std::make_pair( name(), string() ) );
						if(declHnd) 
						{
							if( !declHnd->InternalEntityDecl(name(), string()) ) 
							{
								reportParseError( declHnd->ErrorString() );
								return false;
							}
						}
					}
					state = EValueR;
					break;
				case NNam:
					if( !entityExist(name()) ) 
					{
						externEntities.insert( std::make_pair( name(), CXmlSimpleReaderPrivate::ExternEntity( publicId, systemId, ref() ) ) );
						if( dtdHnd ) 
						{
							if( !dtdHnd->UnparsedEntityDecl( name(), publicId, systemId, ref() ) ) 
							{
								reportParseError( declHnd->ErrorString() );
								return false;
							}
						}
					}
					state = NNamR;
					break;
				case PEVal:
					if( !entityExist( name() ) ) 
					{
						parameterEntities.insert( std::make_pair( name(), string() ) );
						if( declHnd ) 
						{
							if( !declHnd->InternalEntityDecl( '%' + name(), string() ) ) 
							{
								reportParseError( declHnd->ErrorString() );
								return false;
							}
						}
					}
					state = PEValR;
					break;
				case PEEID:
					if( !entityExist( name() ) ) 
					{
						externParameterEntities.insert( std::make_pair( name(), CXmlSimpleReaderPrivate::ExternParameterEntity( publicId, systemId ) ) );
						if( declHnd ) 
						{
							if( !declHnd->ExternalEntityDecl( '%' + name(), publicId, systemId ) ) 
							{
								reportParseError( declHnd->ErrorString() );
								return false;
							}
						}
					}
					state = PEEIDR;
					break;
				case EDDone:
					if( !entityExist( name() ) ) 
					{
						externEntities.insert( std::make_pair( name(), CXmlSimpleReaderPrivate::ExternEntity( publicId, systemId, nsCodeQOR::CUCS2String() ) ) );
						if( declHnd ) 
						{
							if( !declHnd->ExternalEntityDecl( name(), publicId, systemId ) ) 
							{
								reportParseError( declHnd->ErrorString() );
								return false;
							}
						}
					}
					return true;
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_LETTEREXPECTED ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof(&CXmlSimpleReaderPrivate::parseEntityDecl, state);
				return false;
			}

			if( is_S( c ) ) 
			{
				input = InpWs;
			} 
			else if( c == '%' ) 
			{
				input = InpPer;
			} 
			else if( c == '"' || c == '\'' ) 
			{
				input = InpQuot;
			} 
			else if( c == '>' ) 
			{
				input = InpGt;
			} 
			else if( c == 'N' ) 
			{
				input = InpN;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Ent:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( "NTITY" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case Ws1:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case Name:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case Ws2:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case EValue:
				case EValueR:
					if( !parseEntityValue() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case ExtID:
					parseExternalID_allowPublicID = false;
					if( !parseExternalID() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case Ws3:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case Ndata:
					parseString_s = nsCodeQOR::CUCS2String( _TXT( " NDATA" ) );
					if( !parseString() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case Ws4:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case NNam:
				case NNamR:
					parseName_useRef = true;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case PEDec:
					next();
					break;
				case Ws6:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case PENam:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case Ws7:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case PEVal:
				case PEValR:
					if( !parseEntityValue() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case PEEID:
				case PEEIDR:
					parseExternalID_allowPublicID = false;
					if( !parseExternalID() )
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case WsE:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityDecl, state );
						return false;
					}
					break;
				case EDDone:
					next();
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	//Parse a EntityValue [9]
	bool CXmlSimpleReaderPrivate::parseEntityValue()
	{
		const signed char Init             = 0;
		const signed char Dq               = 1; // EntityValue is double quoted
		const signed char DqC              = 2; // signed character
		const signed char DqPER            = 3; // PERefence
		const signed char DqRef            = 4; // Reference
		const signed char Sq               = 5; // EntityValue is double quoted
		const signed char SqC              = 6; // signed character
		const signed char SqPER            = 7; // PERefence
		const signed char SqRef            = 8; // Reference
		const signed char Done             = 9;

		const signed char InpDq            = 0; // "
		const signed char InpSq            = 1; // '
		const signed char InpAmp           = 2; // &
		const signed char InpPer           = 3; // %
		const signed char InpUnknown       = 4;

		static const signed char table[ 9 ][ 5 ] = 
		{
		 /*  InpDq  InpSq  InpAmp  InpPer  InpUnknown */
			{ Dq,    Sq,    -1,     -1,     -1    }, // Init
			{ Done,  DqC,   DqRef,  DqPER,  DqC   }, // Dq
			{ Done,  DqC,   DqRef,  DqPER,  DqC   }, // DqC
			{ Done,  DqC,   DqRef,  DqPER,  DqC   }, // DqPER
			{ Done,  DqC,   DqRef,  DqPER,  DqC   }, // DqRef
			{ SqC,   Done,  SqRef,  SqPER,  SqC   }, // Sq
			{ SqC,   Done,  SqRef,  SqPER,  SqC   }, // SqC
			{ SqC,   Done,  SqRef,  SqPER,  SqC   }, // SqPER
			{ SqC,   Done,  SqRef,  SqPER,  SqC   }  // SqRef
		};

		signed char state;
		signed char input;

		if( parseStack==0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				
				if( !(this->*function)() ) 
				{
					parseFailed(&CXmlSimpleReaderPrivate::parseEntityValue, state);
					return false;
				}
			}
		}

		for (;;) 
		{
			switch( state ) 
			{
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_LETTEREXPECTED ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseEntityValue, state );
				return false;
			}

			if( c == '"' ) 
			{
				input = InpDq;
			} 
			else if( c == '\'' ) 
			{
				input = InpSq;
			} 
			else if( c == '&' ) 
			{
				input = InpAmp;
			} 
			else if( c == '%' ) 
			{
				input = InpPer;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Dq:
				case Sq:
					stringClear();
					next();
					break;
				case DqC:
				case SqC:
					stringAddC();
					next();
					break;
				case DqPER:
				case SqPER:
					parsePEReference_context = InEntityValue;
					if( !parsePEReference() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityValue, state );
						return false;
					}
					break;
				case DqRef:
				case SqRef:
					parseReference_context = InEntityValue;
					if( !parseReference() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseEntityValue, state );
						return false;
					}
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse a comment [15].

	  Precondition: the beginning '<!' of the comment is already read and the head
	  stands on the first '-' of '<!--'.

	  If this funktion was successful, the head-position is on the first
	  character after the comment.*/
	bool CXmlSimpleReaderPrivate::parseComment()
	{
		const signed char Init             = 0;
		const signed char Dash1            = 1; // the first dash was read
		const signed char Dash2            = 2; // the second dash was read
		const signed char Com              = 3; // read comment
		const signed char Com2             = 4; // read comment (help state)
		const signed char ComE             = 5; // finished reading comment
		const signed char Done             = 6;

		const signed char InpDash          = 0; // -
		const signed char InpGt            = 1; // >
		const signed char InpUnknown       = 2;

		static const signed char table[ 6 ][ 3 ] = 
		{
		 /*  InpDash  InpGt  InpUnknown */
			{ Dash1,   -1,    -1  }, // Init
			{ Dash2,   -1,    -1  }, // Dash1
			{ Com2,    Com,   Com }, // Dash2
			{ Com2,    Com,   Com }, // Com
			{ ComE,    Com,   Com }, // Com2
			{ -1,      Done,  -1  }  // ComE
		};

		signed char state;
		signed char input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed(&CXmlSimpleReaderPrivate::parseComment, state);
					return false;
				}
			}
		}

		for(;;) 
		{
			switch( state ) 
			{
				case Dash2:
					stringClear();
					break;
				case Com2:
					// if next character is not a dash than don't skip it
					if( !atEnd() && c != '-' )
					{
						stringAddC( '-' );
					}
					break;
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_ERRORPARSINGCOMMENT ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof(&CXmlSimpleReaderPrivate::parseComment, state);
				return false;
			}

			if( c == '-' ) 
			{
				input = InpDash;
			} 
			else if( c == '>' ) 
			{
				input = InpGt;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case Dash1:
					next();
					break;
				case Dash2:
					next();
					break;
				case Com:
					stringAddC();
					next();
					break;
				case Com2:
					next();
					break;
				case ComE:
					next();
					break;
				case Done:
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/* Parse an Attribute [41].

		Precondition: the head stands on the first character of the name
		of the attribute (i.e. all whitespaces are already parsed).

		The head stand on the next character after the end quotes. The
		variable name contains the name of the attribute and the variable
		string contains the value of the attribute.
	*/
	bool CXmlSimpleReaderPrivate::parseAttribute()
	{
		const int Init             = 0;
		const int PName            = 1; // parse name
		const int Ws               = 2; // eat ws
		const int Eq               = 3; // the '=' was read
		const int Quotes           = 4; // " or ' were read

		const int InpNameBe        = 0;
		const int InpEq            = 1; // =
		const int InpDq            = 2; // "
		const int InpSq            = 3; // '
		const int InpUnknown       = 4;

		static const int table[ 4 ][ 5 ] = 
		{
		 /*  InpNameBe  InpEq  InpDq    InpSq    InpUnknown */
			{ PName,     -1,    -1,      -1,      -1    }, // Init
			{ -1,        Eq,    -1,      -1,      Ws    }, // PName
			{ -1,        Eq,    -1,      -1,      -1    }, // Ws
			{ -1,        -1,    Quotes,  Quotes,  -1    }  // Eq
		};

		int state;
		int input;

		if( parseStack == 0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}

				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseAttribute, state );
					return false;
				}
			}
		}

		for (;;) 
		{
			switch( state ) 
			{
				case Quotes:
					// Done
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseAttribute, state );
				return false;
			}
			if( determineNameChar( c ) == NameBeginning ) 
			{
				input = InpNameBe;
			} 
			else if( c == '=' ) 
			{
				input = InpEq;
			} 
			else if( c == '"' ) 
			{
				input = InpDq;
			} 
			else if( c == '\'' ) 
			{
				input = InpSq;
			} 
			else 
			{
				input = InpUnknown;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case PName:
					parseName_useRef = false;
					if( !parseName() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttribute, state );
						return false;
					}
					break;
				case Ws:
					if( !eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttribute, state );
						return false;
					}
					break;
				case Eq:
					if( !next_eat_ws() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttribute, state );
						return false;
					}
					break;
				case Quotes:
					if( !parseAttValue() ) 
					{
						parseFailed( &CXmlSimpleReaderPrivate::parseAttribute, state );
						return false;
					}
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	//Parse a Name [5] and store the name in name or ref (if useRef is true).
	bool CXmlSimpleReaderPrivate::parseName()
	{
		const int Init             = 0;
		const int Name1            = 1; // parse first character of the name
		const int Name             = 2; // parse name
		const int Done             = 3;

		static const int table[ 3 ][ 3 ] = 
		{
		 /*  InpNameBe  InpNameCh  InpUnknown */
			{ Name1,     -1,        -1    }, // Init
			{ Name,      Name,      Done  }, // Name1
			{ Name,      Name,      Done  }  // Name
		};
		int state;

		if( parseStack==0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty()) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();

				}

				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseName, state );
					return false;
				}
			}
		}

		for (;;) 
		{
			switch (state) 
			{
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_LETTEREXPECTED ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseName, state );
				return false;
			}

			// we can safely do the (int) cast thanks to the Q_ASSERTs earlier in this function
			state = table[ state ][ (int)fastDetermineNameChar( c ) ];

			switch( state ) 
			{
				case Name1:
					if( parseName_useRef ) 
					{
						refClear();
						refAddC();
					} 
					else 
					{
						nameClear();
						nameAddC();
					}
					next();
					break;

				case Name:
					if( parseName_useRef ) 
					{
						refAddC();
					} 
					else 
					{
						nameAddC();
					}
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	//Parse a Nmtoken [7] and store the name in name.
	bool CXmlSimpleReaderPrivate::parseNmtoken()
	{
		const signed char Init             = 0;
		const signed char NameF            = 1;
		const signed char Name             = 2;
		const signed char Done             = 3;

		const signed char InpNameCh        = 0; // NameChar without InpNameBe
		const signed char InpUnknown       = 1;

		static const signed char table[3][2] = 
		{
		 /*  InpNameCh  InpUnknown */
			{ NameF,     -1    }, // Init
			{ Name,      Done  }, // NameF
			{ Name,      Done  }  // Name
		};
		signed char state;
		signed char input;

		if( parseStack==0 || parseStack->empty() ) 
		{
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed(&CXmlSimpleReaderPrivate::parseNmtoken, state);
					return false;
				}
			}
		}

		for (;;) 
		{
			switch( state ) 
			{
				case Done:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_LETTEREXPECTED ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof( &CXmlSimpleReaderPrivate::parseNmtoken, state );
				return false;
			}

			if( determineNameChar( c ) == NotName ) 
			{
				input = InpUnknown;
			} 
			else 
			{
				input = InpNameCh;
			}
			state = table[ state ][ input ];

			switch( state ) 
			{
				case NameF:
					nameClear();
					nameAddC();
					next();
					break;
				case Name:
					nameAddC();
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*Parse a Reference [67].

	  parseReference_charDataRead is set to true if the reference must not be
	  parsed. The character(s) which the reference mapped to are appended to
	  string. The head stands on the first character after the reference.

	  parseReference_charDataRead is set to false if the reference must be parsed.
	  The charachter(s) which the reference mapped to are inserted at the reference
	  position. The head stands on the first character of the replacement).*/
	bool CXmlSimpleReaderPrivate::parseReference()
	{
		// temporary variables (only used in very local context, so they don't interfere with incremental parsing)
		unsigned int tmp;
		//bool ok;

		const signed char Init             =  0;
		const signed char SRef             =  1; // start of a reference
		const signed char ChRef            =  2; // parse CharRef
		const signed char ChDec            =  3; // parse CharRef decimal
		const signed char ChHexS           =  4; // start CharRef hexadecimal
		const signed char ChHex            =  5; // parse CharRef hexadecimal
		const signed char Name             =  6; // parse name
		const signed char DoneD            =  7; // done CharRef decimal
		const signed char DoneH            =  8; // done CharRef hexadecimal
		const signed char DoneN            =  9; // done EntityRef

		const signed char InpAmp           = 0; // &
		const signed char InpSemi          = 1; // ;
		const signed char InpHash          = 2; // #
		const signed char InpX             = 3; // x
		const signed char InpNum           = 4; // 0-9
		const signed char InpHex           = 5; // a-f A-F
		const signed char InpUnknown       = 6;

		static const signed char table[ 8 ][ 7 ] = 
		{
		 /*  InpAmp  InpSemi  InpHash  InpX     InpNum  InpHex  InpUnknown */
			{ SRef,   -1,      -1,      -1,      -1,     -1,     -1    }, // Init
			{ -1,     -1,      ChRef,   Name,    Name,   Name,   Name  }, // SRef
			{ -1,     -1,      -1,      ChHexS,  ChDec,  -1,     -1    }, // ChRef
			{ -1,     DoneD,   -1,      -1,      ChDec,  -1,     -1    }, // ChDec
			{ -1,     -1,      -1,      -1,      ChHex,  ChHex,  -1    }, // ChHexS
			{ -1,     DoneH,   -1,      -1,      ChHex,  ChHex,  -1    }, // ChHex
			{ -1,     DoneN,   -1,      -1,      -1,     -1,     -1    }  // Name
		};
		signed char state;
		signed char input;

		if( parseStack==0 || parseStack->empty() ) 
		{
			parseReference_charDataRead = false;
			state = Init;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if (function == &CXmlSimpleReaderPrivate::eat_ws) 
				{
					parseStack->pop();
				}
				if( !( this->*function )() ) 
				{
					parseFailed(&CXmlSimpleReaderPrivate::parseReference, state);
					return false;
				}
			}
		}

		for (;;) 
		{
			switch (state) 
			{
				case DoneD:
					return true;
				case DoneH:
					return true;
				case DoneN:
					return true;
				case -1:
					// Error
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_ERRORPARSINGREFERENCE ) ) );
					return false;
			}

			if( atEnd() ) 
			{
				unexpectedEof(&CXmlSimpleReaderPrivate::parseReference, state);
				return false;
			}

			if (c == '&') 
			{
				input = InpAmp;
			} 
			else if (c == ';') 
			{
				input = InpSemi;
			} 
			else if (c == '#') 
			{
				input = InpHash;
			} 
			else if (c == 'x') 
			{
				input = InpX;
			} 
			else if ('0' <= c && c <= '9') 
			{
				input = InpNum;
			} 
			else if ('a' <= c && c <= 'f') 
			{
				input = InpHex;
			} 
			else if ('A' <= c && c <= 'F') 
			{
				input = InpHex;
			} 
			else 
			{
				input = InpUnknown;
			}

			state = table[ state ][ input ];

			switch (state) 
			{
				case SRef:
					refClear();
					next();
					break;
				case ChRef:
					next();
					break;
				case ChDec:
					refAddC();
					next();
					break;
				case ChHexS:
					next();
					break;
				case ChHex:
					refAddC();
					next();
					break;
				case Name:
					// read the name into the ref
					parseName_useRef = true;
					if (!parseName()) 
					{
						parseFailed(&CXmlSimpleReaderPrivate::parseReference, state);
						return false;
					}
					break;

				case DoneD:
					tmp = ref().ToUInt(10);
					stringAddC( char( tmp ) );
/*
					{
						reportParseError( nsCodeQOR::CString( _TXT( XMLERR_ERRORPARSINGREFERENCE ) ) );
						return false;
					}
					*/
					parseReference_charDataRead = true;
					next();
					break;

				case DoneH:
					tmp = ref().ToUInt(16);
					//if( ok ) 
					{
						stringAddC( char( tmp ) );
					} 
					/*
					else 
					{
						reportParseError( nsCodeQOR::CString( _TXT( XMLERR_ERRORPARSINGREFERENCE ) ) );
						return false;
					}
					*/
					parseReference_charDataRead = true;
					next();
					break;

				case DoneN:
					if (!processReference())
						return false;
					next();
					break;
			}
		}
		return false;
	}

	//------------------------------------------------------------------------------
	//Helper function for parseReference()
	bool CXmlSimpleReaderPrivate::processReference()
	{
		nsCodeQOR::CUCS2String reference = ref();
		if( reference == nsCodeQOR::CUCS2String( _TXT( "amp" ) ) ) 
		{
			if( parseReference_context == InEntityValue ) 
			{
				// Bypassed
				stringAddC( '&' ); stringAddC( 'a' ); stringAddC( 'm' ); stringAddC( 'p' ); stringAddC( ';' );
			} 
			else 
			{
				// Included or Included in literal
				stringAddC( '&' );
			}
			parseReference_charDataRead = true;
		} 
		else if( reference == nsCodeQOR::CUCS2String( _TXT( "lt" ) ) ) 
		{
			if( parseReference_context == InEntityValue ) 
			{
				// Bypassed
				stringAddC( '&' );
				stringAddC( 'l' );
				stringAddC( 't' );
				stringAddC( ';' );
			} 
			else 
			{
				// Included or Included in literal
				stringAddC( '<' );
			}
			parseReference_charDataRead = true;
		} 
		else if( reference == nsCodeQOR::CUCS2String( _TXT( "gt" ) ) ) 
		{
			if( parseReference_context == InEntityValue ) 
			{
				// Bypassed
				stringAddC( '&' ); 
				stringAddC( 'g' );
				stringAddC( 't' );
				stringAddC( ';' );
			} 
			else 
			{
				// Included or Included in literal
				stringAddC( '>' );
			}
			parseReference_charDataRead = true;
		} 
		else if( reference == nsCodeQOR::CUCS2String( _TXT( "apos" ) ) ) 
		{
			if( parseReference_context == InEntityValue ) 
			{
				// Bypassed
				stringAddC( '&' );
				stringAddC( 'a' );
				stringAddC( 'p' );
				stringAddC( 'o' );
				stringAddC( 's' );
				stringAddC( ';' );
			} 
			else 
			{
				// Included or Included in literal
				stringAddC( '\'' );
			}
			parseReference_charDataRead = true;
		} 
		else if( reference == nsCodeQOR::CUCS2String( _TXT( "quot" ) ) ) 
		{
			if( parseReference_context == InEntityValue ) 
			{
				// Bypassed
				stringAddC( '&' );
				stringAddC( 'q' );
				stringAddC( 'u' );
				stringAddC( 'o' );
				stringAddC( 't' );
				stringAddC( ';' );
			} 
			else 
			{
				// Included or Included in literal
				stringAddC( '"' );
			}
			parseReference_charDataRead = true;
		} 
		else 
		{
			std::map< const nsCodeQOR::CUCS2String, nsCodeQOR::CUCS2String >::iterator it;
			
			it = entities.find( reference );
			if( it != entities.end() ) 
			{
				// "Internal General"
				switch( parseReference_context ) 
				{
					case InContent:
						// Included
						//TOOD:if( !insertXmlRef( it->second, reference, false ) )
						{
							return false;
						}
						parseReference_charDataRead = false;
						break;
					case InAttributeValue:
						// Included in literal
						if( !insertXmlRef( it->second, reference, true ) )
						{
							return false;
						}
						parseReference_charDataRead = false;
						break;
					case InEntityValue:
						{
							// Bypassed
							stringAddC( '&' );
							for( int i = 0; i < (int)reference.Len(); i++ ) 
							{
								stringAddC( reference[ i ] );
							}
							stringAddC( ';' );
							parseReference_charDataRead = true;
						}
						break;
					case InDTD:
						// Forbidden
						parseReference_charDataRead = false;
						reportParseError( nsCodeQOR::CString( _TXT( XMLERR_INTERNALGENERALENTITYINDTD ) ) );
						return false;
				}
			} 
			else 
			{
				std::map< const nsCodeQOR::CUCS2String, CXmlSimpleReaderPrivate::ExternEntity >::iterator itExtern;
				itExtern = externEntities.find( reference );
				if( itExtern == externEntities.end() ) 
				{
					// entity not declared
					// ### check this case for conformance
					if( parseReference_context == InEntityValue ) 
					{
						// Bypassed
						stringAddC( '&' );
						for( int i = 0; i < (int)reference.Len(); i++ ) 
						{
							stringAddC( reference[ i ] );
						}
						stringAddC( ';' );
						parseReference_charDataRead = true;
					} 
					else 
					{
						// if we have some char data read, report it now
						if( parseReference_context == InContent ) 
						{
							if( contentCharDataRead ) 
							{
								nsCodeQOR::CUCS2String strSimplified = simplify( string() );
								if( reportWhitespaceCharData || !strSimplified.IsEmpty() ) 
								{
									if( contentHnd != 0 && !contentHnd->Characters(string()) ) 
									{
										reportParseError( contentHnd->ErrorString() );
										return false;
									}
								}
								stringClear();
								contentCharDataRead = false;
							}
						}

						if (contentHnd) 
						{
							qt_xml_skipped_entity_in_content = parseReference_context == InContent;
							if (!contentHnd->SkippedEntity(reference)) 
							{
								qt_xml_skipped_entity_in_content = false;
								reportParseError(contentHnd->ErrorString());
								return false; // error
							}
							qt_xml_skipped_entity_in_content = false;
						}
					}
				} 
				else if( (*itExtern).second.notation.IsEmpty() ) 
				{
					// "External Parsed General"
					switch( parseReference_context ) 
					{
						case InContent:
							{
								// Included if validating
								bool skipIt = true;
								if (entityRes) 
								{
									CXmlInputSource *ret = 0;
									if (!entityRes->ResolveEntity((*itExtern).second.publicId, (*itExtern).second.systemId, ret)) 
									{
										delete ret;
										reportParseError(entityRes->ErrorString());
										return false;
									}
									if( ret ) 
									{
										nsCodeQOR::CUCS2String xmlRefString;
										nsCodeQOR::CUCS2String buffer = ret->Data();
										while( buffer.Len() > 0 )
										{
											xmlRefString.Append( buffer );
											ret->FetchData();
											buffer = ret->Data();
										}
										delete ret;
										if( !stripTextDecl( xmlRefString ) ) 
										{
											reportParseError( nsCodeQOR::CString( _TXT( XMLERR_ERRORINTEXTDECL ) ) );
											return false;
										}
										if( !insertXmlRef( xmlRefString, reference, false ) )
										{
											return false;
										}
										skipIt = false;
									}
								}
								if( skipIt && contentHnd ) 
								{
									qt_xml_skipped_entity_in_content = true;
									if (!contentHnd->SkippedEntity(reference)) 
									{
										qt_xml_skipped_entity_in_content = false;
										reportParseError(contentHnd->ErrorString());
										return false; // error
									}
									qt_xml_skipped_entity_in_content = false;
								}
								parseReference_charDataRead = false;
							} break;
						case InAttributeValue:
							// Forbidden
							parseReference_charDataRead = false;
							reportParseError( nsCodeQOR::CString( _TXT( XMLERR_EXTERNALGENERALENTITYINAV ) ) );
							return false;
						case InEntityValue:
							{
								// Bypassed
								stringAddC( '&' );
								for( int i = 0; i < (int)reference.Len(); i++ ) 
								{
									stringAddC( reference[ i ] );
								}
								stringAddC( ';' );
								parseReference_charDataRead = true;
							}
							break;
						case InDTD:
							// Forbidden
							parseReference_charDataRead = false;
							reportParseError( nsCodeQOR::CString( _TXT( XMLERR_EXTERNALGENERALENTITYINDTD ) ) );
							return false;
					}
				} 
				else 
				{
					// "Unparsed"
					// ### notify for "Occurs as Attribute Value" missing (but this is no refence, anyway)
					// Forbidden
					parseReference_charDataRead = false;
					reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNPARSEDENTITYREFERENCE ) ) );
					return false; // error
				}
			}
		}
		return true; // no error
	}

	//------------------------------------------------------------------------------
	/*Parses over a simple string.
	  After the string was successfully parsed, the head is on the first character after the string.*/
	bool CXmlSimpleReaderPrivate::parseString()
	{
		const signed char InpCharExpected  = 0; // the character that was expected
		const signed char InpUnknown       = 1;

		signed char state; // state in this function is the position in the string s
		signed char input;

		if( parseStack==0 || parseStack->empty() ) 
		{
			Done = static_cast< char >( parseString_s.Len() );
			state = 0;
		} 
		else 
		{
			state = parseStack->top().state;
			parseStack->pop();

			if( !parseStack->empty() ) 
			{
				ParseFunction function = parseStack->top().function;
				if( function == &CXmlSimpleReaderPrivate::eat_ws ) 
				{
					parseStack->pop();
				}
				if( !(this->*function)() ) 
				{
					parseFailed( &CXmlSimpleReaderPrivate::parseString, state );
					return false;
				}
			}
		}

		for (;;) 
		{
			if (state == Done) 
			{
				return true;
			}

			if (atEnd()) 
			{
				unexpectedEof(&CXmlSimpleReaderPrivate::parseString, state);
				return false;
			}

			if( c == parseString_s[ (int)state ] ) 
			{
				input = InpCharExpected;
			} 
			else 
			{
				input = InpUnknown;
			}
			
			if( input == InpCharExpected ) 
			{
				state++;
			} 
			else 
			{
				// Error
				reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDCHARACTER ) ) );
				return false;
			}

			next();
		}
		return false;
	}

	//------------------------------------------------------------------------------
	/*This private function inserts and reports an entity substitution. The
	  substituted string is \a data and the name of the entity reference is \a
	  name. If \a inLiteral is true, the entity is IncludedInLiteral (i.e., " and '
	  must be quoted. Otherwise they are not quoted.

	  This function returns false on error.
	*/
	bool CXmlSimpleReaderPrivate::insertXmlRef( const nsCodeQOR::CUCS2String& data, const nsCodeQOR::CUCS2String& name, bool inLiteral )
	{
		if( inLiteral ) 
		{
			

			//nsCodeQOR::CCharReplaceProcessorFunctor< nsCodeQOR::CUCS2String::char_type, nsCodeQOR::CUCS2String::allocator_type > DoubleQuoteReplacer( nsCodeQOR::CUCS2String::char_type( '\"' ), nsCodeQOR::CUCS2String( _TXT( "&quot;" ) ) );
			//nsCodeQOR::CCharReplaceProcessorFunctor< nsCodeQOR::CUCS2String::char_type, nsCodeQOR::CUCS2String::allocator_type > SinleQuoteReplacer( nsCodeQOR::CUCS2String::char_type( '\'' ), nsCodeQOR::CUCS2String( _TXT( "&apos;" ) ) );
			nsCodeQOR::CUCS2String tmp = data;

			tmp.Replace( '\"', nsCodeQOR::CUCS2String( _TXT( "&quot;" ) ) );
			tmp.Replace( '\'', nsCodeQOR::CUCS2String( _TXT( "&apos;" ) ) );
			//tmp.ProcessByChar( DoubleQuoteReplacer );
			//tmp.ProcessByChar( SinleQuoteReplacer );
			//tmp = replace_all( tmp, nsCodeQOR::CUCS2String( "\"" ), nsCodeQOR::CUCS2String( "&quot;" ) );
			//tmp = replace_all( tmp, nsCodeQOR::CUCS2String( "\'" ), nsCodeQOR::CUCS2String( "&apos;" ) );			
			xmlRefStack.push( XmlRef( name, tmp ) );
		} 
		else 
		{
			xmlRefStack.push( XmlRef( name, data ) );
		}
		int n = std::max( parameterEntities.size(), entities.size() );

		if( xmlRefStack.size() > size_t(n + 1) ) 
		{
			// recursive entities
			reportParseError( nsCodeQOR::CString( _TXT( XMLERR_RECURSIVEENTITIES ) ) );
			return false;
		}
		if( reportEntities && lexicalHnd ) 
		{
			if( !lexicalHnd->StartEntity( name ) ) 
			{
				reportParseError( lexicalHnd->ErrorString() );
				return false;
			}
		}
		return true;
	}

	//------------------------------------------------------------------------------
	//This private function moves the cursor to the next character.
	void CXmlSimpleReaderPrivate::next()
	{
		int count = xmlRefStack.size();
		while( count != 0 ) 
		{
			if( xmlRefStack.top().isEmpty() ) 
			{
				xmlRefStack.pop();
				count--;
			} 
			else 
			{
				c = xmlRefStack.top().next();
				return;
			}
		}

		// the following could be written nicer, but since it is a time-critical
		// function, rather optimize for speed
		nsCodeQOR::CChar16 bc = c;

		c = NextChar();
		// If we are not incremental parsing, we just skip over EndOfData chars to give the
		// parser an uninterrupted stream of document chars.
		if( c == CXmlInputSource::EndOfData && parseStack == 0 )
		{
			c = NextChar();
		}
		if( bc == '\n' )
		{
			lineNr++;
			columnNr = -1;
		} 
		else if( bc == '\r' ) 
		{
			if( c != '\n' ) 
			{
				lineNr++;
				columnNr = -1;
			}
		}
		++columnNr;
	}

	//------------------------------------------------------------------------------
	/*This private function moves the cursor to the next non-whitespace character.
	  This function does not move the cursor if the actual cursor position is a
	  non-whitespace charcter.

	  Returns false when you use incremental parsing and this function reaches EOF
	  with reading only whitespace characters. In this case it also poplulates the
	  parseStack with useful information. In all other cases, this function returns
	  true.*/
	bool CXmlSimpleReaderPrivate::eat_ws()
	{
		while (!atEnd()) 
		{
			if (!is_S(c)) 
			{
				return true;
			}
			next();
		}

		if (parseStack != 0) 
		{
			unexpectedEof(&CXmlSimpleReaderPrivate::eat_ws, 0);
			return false;
		}
		return true;
	}

	//------------------------------------------------------------------------------
	bool CXmlSimpleReaderPrivate::next_eat_ws()
	{
		next();
		return eat_ws();
	}


	//------------------------------------------------------------------------------
	// This private function initializes the reader. 
	// i is the input source to read the data from.
	void CXmlSimpleReaderPrivate::init( const CBFSource* i )
	{
		lineNr = 0;
		columnNr = -1;
		m_pInputSource = const_cast< CBFSource* >( i );
		initData();

		externParameterEntities.clear();
		parameterEntities.clear();
		externEntities.clear();
		entities.clear();

		while( !tags.empty() )
		{
			tags.pop();
		}

		doctype.Clear();
		xmlVersion.Clear();
		encoding.Clear();
		standalone = CXmlSimpleReaderPrivate::Unknown;
		error.Clear();
	}

	//------------------------------------------------------------------------------
	// This private function initializes the XML data related variables. 
	// Especially, it reads the data from the input source.
	void CXmlSimpleReaderPrivate::initData()
	{
		c = CXmlInputSource::EndOfData;
		while( !xmlRefStack.empty() )
		{
			xmlRefStack.pop();
		}
		next();
	}

	//------------------------------------------------------------------------------
	// Returns true if a entity with the name exists, otherwise returns false.
	bool CXmlSimpleReaderPrivate::entityExist( const nsCodeQOR::CUCS2String& e) const
	{
		if( parameterEntities.find(e) == parameterEntities.end() && externParameterEntities.find( e ) == externParameterEntities.end() && externEntities.find(e) == externEntities.end() && entities.find(e) == entities.end() ) 
		{
			return false;
		} 
		else 
		{
			return true;
		}
	}

	//------------------------------------------------------------------------------
	void CXmlSimpleReaderPrivate::reportParseError( const nsCodeQOR::CString& error )
	{
		this->error = error;
		if (errorHnd) 
		{
			if( this->error.IsEmpty() ) 
			{
				nsCodeQOR::CUCS2String strError;
				nsCodeQOR::ExtAssignFromAString( strError, _ATXT( XMLERR_OK ) );
				
				const CXmlParseException ex( strError, columnNr+1, lineNr+1, thisPublicId, thisSystemId );
				errorHnd->FatalError(ex);
			} 
			else 
			{
				nsCodeQOR::CUCS2String strError;
				//TODO: nsCodeQOR::ExtAssignFromAString( strError, this->error.GetBuffer() );
				const CXmlParseException ex( strError, columnNr+1, lineNr+1, thisPublicId, thisSystemId );
				errorHnd->FatalError(ex);
			}
		}
	}

	//------------------------------------------------------------------------------
	//This private function is called when a parsing function encounters an unexpected EOF. 
	//It decides what to do (depending on incremental parsing or not).
	//where is a pointer to the function where the error occurred and state is the parsing state in this function.
	void CXmlSimpleReaderPrivate::unexpectedEof(ParseFunction where, int state)
	{
		if( parseStack == 0 ) 
		{
			reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDEOF ) ) );
		} 
		else 
		{
			if (c == CXmlInputSource::EndOfDocument) 
			{
				reportParseError( nsCodeQOR::CString( _TXT( XMLERR_UNEXPECTEDEOF ) ) );
			} 
			else 
			{
				pushParseState(where, state);
			}
		}
	}

	//------------------------------------------------------------------------------
	//This private function is called when a parse...() function returned false. 
	//It determines if there was an error or if incremental parsing simply went out of data and does the right thing for the case. 
	// where is a pointer to the function where the error occurred and state is the parsing state in this function.
	void CXmlSimpleReaderPrivate::parseFailed( ParseFunction where, int state )
	{
		if( parseStack != 0 && error.IsEmpty() ) 
		{
			pushParseState( where, state );
		}
	}

	//------------------------------------------------------------------------------
	//This private function pushes the function pointer and state to the parse stack. This is used when you are doing an incremental parsing and reach the end of file too early.
	// Only call this function when d->parseStack!=0.
	void CXmlSimpleReaderPrivate::pushParseState( ParseFunction function, int state )
	{
		CXmlSimpleReaderPrivate::ParseState ps;
		ps.function = function;
		ps.state = state;
		parseStack->push( ps );
	}

	//------------------------------------------------------------------------------
	inline static void updateValue( nsCodeQOR::CUCS2String& value, const nsCodeQOR::CChar16* array, int& arrayPos, int& valueLen )
	{
		memcpy( value.GetBufferSetLength( valueLen + arrayPos ) + valueLen, array, arrayPos * sizeof( nsCodeQOR::CChar16 ) );
		valueLen += arrayPos;
		arrayPos = 0;
	}

	//------------------------------------------------------------------------------
	const nsCodeQOR::CUCS2String& CXmlSimpleReaderPrivate::string()
	{
		updateValue( stringValue, stringArray, stringArrayPos, stringValueLen );
		return stringValue;
	}

	//------------------------------------------------------------------------------
	const nsCodeQOR::CUCS2String& CXmlSimpleReaderPrivate::name()
	{
		updateValue( nameValue, nameArray, nameArrayPos, nameValueLen );
		return nameValue;
	}

	//------------------------------------------------------------------------------
	const nsCodeQOR::CUCS2String& CXmlSimpleReaderPrivate::ref()
	{
		updateValue( m_RefValue, m_RefArray, m_RefArrayPos, m_RefValueLen );
		return m_RefValue;
	}

	//------------------------------------------------------------------------------
	void CXmlSimpleReaderPrivate::stringAddC( nsCodeQOR::CChar16 ch )
	{
		if( stringArrayPos == 256 )
		{
			updateValue( stringValue, stringArray, stringArrayPos, stringValueLen );
		}
		stringArray[ stringArrayPos++ ] = ch;
	}

	//------------------------------------------------------------------------------
	void CXmlSimpleReaderPrivate::nameAddC( nsCodeQOR::CChar16 ch )
	{
		if( nameArrayPos == 256 )
		{
			updateValue( nameValue, nameArray, nameArrayPos, nameValueLen );
		}
		nameArray[ nameArrayPos++ ] = ch;
	}

	//------------------------------------------------------------------------------
	void CXmlSimpleReaderPrivate::refAddC( nsCodeQOR::CChar16 ch )
	{
		if( m_RefArrayPos == 256 )
		{
			updateValue( m_RefValue, m_RefArray, m_RefArrayPos, m_RefValueLen );
		}
		m_RefArray[ m_RefArrayPos++ ] = ch;
	}

	//------------------------------------------------------------------------------
	nsCodeQOR::CChar16 CXmlSimpleReaderPrivate::NextChar()
	{
		nsCodeQOR::CChar16 NextChar = 0XFF;
		unsigned long ulUnitsRead = 0;
		m_pInputSource->Read( ulUnitsRead );
		unsigned long ulUnitsToRead = 1;
		byte* pData = m_pInputSource->GetBuffer()->ReadRequest( ulUnitsToRead );
		if( ulUnitsToRead == 1 )
		{
			NextChar = reinterpret_cast< nsCodeQOR::CChar16* >( pData )[ 0 ];
			m_pInputSource->GetBuffer()->ReadAcknowledge( ulUnitsToRead );
		}
		return NextChar;
	}

}//nsBluefoot
