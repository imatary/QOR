//assert.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CompilerQOR.h"

#if defined __cplusplus
    #define __ASSERT_VOID_CAST static_cast<void>
#else
    #define __ASSERT_VOID_CAST (void)
#endif

// void assert (int expression);
// If NDEBUG is defined, do nothing.
// If not, and EXPRESSION is zero, print an error message and abort.  */

#ifdef	NDEBUG
#	define assert(expr)	(__ASSERT_VOID_CAST (0))			//In release builds assert vanishes
#else
#	if __QCMP_SUPPORTS__FUNCSIG__
#		define __ASSERT_FUNCTION	__QCMP_FUNCSIG__( "" )
#	else
#		define __ASSERT_FUNCTION	( (const char*)"unknown function" )
#	endif

#	define assert(expr)		( (expr) ? __ASSERT_VOID_CAST( 0 ) :											\
    ( __assert_fail ( __QCMP_STRINGIZEA( expr ), __FILE__, __LINE__, __ASSERT_FUNCTION ), __ASSERT_VOID_CAST( 0 ) ) )

#endif//NDEBUG

#ifndef	QOR_ASSERT_H_3
#define QOR_ASSERT_H_3

#include "SystemQOR.h"

__QCMP_STARTLINKAGE_C
	__QOR_INTERFACE( __CQOR ) void _assert ( void );
    __QCMP_DECLARE_NORETURN __QOR_INTERFACE( __CQOR ) void __assert_fail( const char* __assertion, const char* __file, unsigned int __line, const char* __function ) __QCMP_THROW; // This prints an "Assertion failed" message and aborts.
    __QCMP_DECLARE_NORETURN __QOR_INTERFACE( __CQOR ) void __assert_perror_fail( int __errnum, const char* __file, unsigned int __line, const char* __function ) __QCMP_THROW;// Likewise, but prints the error text for ERRNUM.
    __QCMP_DECLARE_NORETURN __QOR_INTERFACE( __CQOR ) void __assert( const char* __assertion, const char* __file, int __line ) __QCMP_THROW;// The following is needed for standard compliance.

__QCMP_ENDLINKAGE_C

#endif//QOR_ASSERT_H_3
