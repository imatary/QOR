//UTF8CodePointFilter.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef BLUEFOOT_FILTERS_UTF8CODEPOINT_H_3
#define BLUEFOOT_FILTERS_UTF8CODEPOINT_H_3

//Defines a filter converting UTF-8 encoded Unicode text to Unicode code points
//This filter can be operated in both Push and Pull modes

#include "BluefootQOR/BfFilter.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	//------------------------------------------------------------------------------
	class __QOR_INTERFACE( __BLUEFOOTQOR ) CUTF8CodePointFilter : public CFilter
	{
	public:

		//------------------------------------------------------------------------------
		enum ePart
		{
			BOM,
			Text,
		};

		static byte scBOM[ 3 ];

		CUTF8CodePointFilter();
		virtual ~CUTF8CodePointFilter();
		CUTF8CodePointFilter( const CUTF8CodePointFilter& src );
		CUTF8CodePointFilter& operator = ( const CUTF8CodePointFilter& src );
		virtual bool Read( unsigned long& ulUnitsRead, unsigned long ulUnitsToRead );
		bool Write( unsigned long& ulUnitsWritten, unsigned long ulUnitsToWrite );
		virtual CBuffer* GetSourceBuffer( void );

	protected:

		ePart m_Part;
		unsigned char m_ucSequenceLength;
		unsigned char m_ucSequence;	//0-3
		byte m_code_unit[ 4 ];
		CPODStreamBuffer< unsigned int > m_SourceBuffer;		//Internal buffer to use when behaving as a Source.
		bool m_bBOMPresent;

	private:

		void ClearCodeUnits( void );
		void ProcessBOMUnit( byte testByte, unsigned long& ulIndex );
		void ProcessFirstCodeUnit( byte testByte );
		void ProcessSecondCodeUnit( byte testByte );
		void ProcessThirdCodeUnit( byte testByte );
		void ProcessFourthCodeUnit( byte testByte );
		bool WriteCodePoint( unsigned int uiCodePoint );
		void ReadNextBytesFromSourceBuffer( unsigned char ucBytes = 1 );
		bool ReadACodePointFromAUTF8Source( unsigned long& ulUnitsRead );
	};
}

#endif//BLUEFOOT_FILTERS_UTF8CODEPOINT_H_3

