//ThreadLocalEventManager.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR.h"
#include "CodeQOR/Events/ThreadLocalEventManager.h"
#include "CodeQOR/Events/ThreadLocalEvent.h"
#include "CodeQOR/Events/ThreadLocalEventSink.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CThreadLocalEventManager::CThreadLocalEventManager()
	{
	}

	//--------------------------------------------------------------------------------
	CThreadLocalEventManager::~CThreadLocalEventManager()
	{
	}

	//--------------------------------------------------------------------------------
	void CThreadLocalEventManager::Publish( CThreadLocalEvent* pEvent )
	{
		if( m_EventSubscriberMap.Find( pEvent ) == 0 )
		{
			m_EventSubscriberMap.Insert( pEvent, new CTLinkedList< CThreadLocalEventSink > );
		}
	}

	//--------------------------------------------------------------------------------
	void CThreadLocalEventManager::Revoke( CThreadLocalEvent* pEvent )
	{
		m_EventSubscriberMap.Remove( pEvent );
	}

	//--------------------------------------------------------------------------------
	void CThreadLocalEventManager::Raise( CThreadLocalEvent* pEvent )
	{
		CTLinkedList< CThreadLocalEventSink >* pSubscriberList = m_EventSubscriberMap.Find( pEvent );

		if( pSubscriberList )
		{
			pSubscriberList->Walk( &Raiser );
		}
	}

	//--------------------------------------------------------------------------------
	bool CThreadLocalEventManager::Subscribe( CThreadLocalEventSink* pSink, CThreadLocalEvent* pEvent )
	{
		bool bResult = false;
		CTLinkedList< CThreadLocalEventSink >* pSubscriberList = m_EventSubscriberMap.Find( pEvent );

		if( pSubscriberList )
		{
			pSubscriberList->Append( pSink );
			bResult = true;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CThreadLocalEventManager::Unsubscribe( CThreadLocalEventSink* pSink, CThreadLocalEvent* pEvent )
	{
		bool bResult = false;
		CTLinkedList< CThreadLocalEventSink >* pSubscriberList = m_EventSubscriberMap.Find( pEvent );

		if( pSubscriberList )
		{
			unsigned int uiItem = 1;
			while( uiItem <= pSubscriberList->GetCount() )
			{
				CThreadLocalEventSink* pItem = pSubscriberList->GetItem( uiItem );
				if( pItem == pSink )
				{
					pSubscriberList->Remove( uiItem );
					bResult = true;
					break;
				}
				uiItem++;
			}			
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CThreadLocalEventManager::Raiser( CThreadLocalEventSink* pSink )
	{
		if( pSink != 0 )
		{
			(pSink)->operator()();
		}
		return true;
	}


}//nsCodeQOR
