//BfProtocol.cpp

// Copyright Querysoft Limited 2013, 2016, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Implementation of Bluefoot protocol class

#include "CompilerQOR.h"
#include "BluefootQOR/BfProtocol.h"
#include "BluefootQOR/BfPlug.h"

//------------------------------------------------------------------------------
namespace nsBluefoot
{
	__QOR_IMPLEMENT_OCLASS_LUID(CProtocol);

	//------------------------------------------------------------------------------
	CProtocol::CProtocol( nsQOR::IApplication::ref_type Application) : nsQOR::CWorkflow( Application ), m_StoppedState( ref(*this) ), m_ReadingState(ref(*this)), m_WritingState(ref(*this))
	,	m_ulDataSize( 0 )
	,	m_pInPipe( 0 )
	,	m_pOutPipe( 0 )
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::CProtocol");
	}

	//------------------------------------------------------------------------------
	CProtocol::~CProtocol()
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::~CProtocol");
	}

	//------------------------------------------------------------------------------
	CProtocol::CProtocol(const CProtocol& src) : CProtocol( src.GetApplication() )
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::CProtocol");
		*this = src;
	}

	//------------------------------------------------------------------------------
	CProtocol& CProtocol::operator = ( const CProtocol& src )
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::operator=");
		if( &src != this )
		{
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	nsQOR::IState::ref_type CProtocol::InitialState() const
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::InitialState");
		return m_StoppedState.Ref();
	}

	//------------------------------------------------------------------------------
	void CProtocol::SetConnection(CPlug* pConnection)
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::SetConnection");
		m_pConnection = pConnection;
		nsQOR::IThread::ref_type pThread = nsQOR::CThread::GetCurrent();
		if (pThread)
		{
			pThread->LocalEventManager().Subscribe(IEventHandler::Ref(), pConnection->Connected.Ref(), CProtocolState::Connected);
			pThread->LocalEventManager().Subscribe(IEventHandler::Ref(), pConnection->ConnectionError.Ref(), CProtocolState::ConnectionError);
			pThread->LocalEventManager().Subscribe(IEventHandler::Ref(), pConnection->Disconnected.Ref(), CProtocolState::Disconnected);
			pThread->LocalEventManager().Subscribe(IEventHandler::Ref(), pConnection->DisconnectionError.Ref(), CProtocolState::DisconnectionError);
		}
	}

	//------------------------------------------------------------------------------
	void CProtocol::SetOutPipe( CPipeline* pOutPipe )
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::SetOutPipe");
		m_pOutPipe = pOutPipe;
		nsQOR::IThread::ref_type pThread = nsQOR::CThread::GetCurrent();
		if (pThread)
		{
			pThread->LocalEventManager().Subscribe(IEventHandler::Ref(), m_pOutPipe->GetSink()->WriteError.Ref(), CProtocolState::WriteError);
			pThread->LocalEventManager().Subscribe(IEventHandler::Ref(), m_pOutPipe->GetSink()->WriteSuccess.Ref(), CProtocolState::WriteSuccess);
		}
	}

	//------------------------------------------------------------------------------
	CPipeline* CProtocol::GetOutPipe( void )
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::GetOutPipt");
		return m_pOutPipe;
	}

	//------------------------------------------------------------------------------
	void CProtocol::SetInPipe( CPipeline* pInPipe )
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::SetInPipe");
		m_pInPipe = pInPipe;

		nsQOR::IThread::ref_type pThread = nsQOR::CThread::GetCurrent();
		if (pThread)
		{
			pThread->LocalEventManager().Subscribe(IEventHandler::Ref(), m_pInPipe->GetSource()->ReadError.Ref(), CProtocolState::ReadError);
			pThread->LocalEventManager().Subscribe(IEventHandler::Ref(), m_pInPipe->GetSource()->ReadSuccess.Ref(), CProtocolState::ReadSuccess);
			pThread->LocalEventManager().Subscribe(IEventHandler::Ref(), m_pInPipe->GetSource()->EndOfData.Ref(), CProtocolState::EndOfData);
		}
	}

	//------------------------------------------------------------------------------
	CPipeline* CProtocol::GetInPipe( void )
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::GetInPipe");
		return m_pInPipe;
	}

	//--------------------------------------------------------------------------------
	void CProtocol::GetNextReadCount( void )
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::GetNextReadCount");
		m_ulDataSize = 0;
	}

	//--------------------------------------------------------------------------------
	void CProtocol::GetNextWriteCount( void )
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::GetNextWriteCount");
		m_ulDataSize = 0;
	}

	//--------------------------------------------------------------------------------
	bool CProtocol::Read()
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::Read");
		bool bResult = false;
		GetNextReadCount();
		if( m_ulDataSize > 0 && m_pInPipe )
		{
			unsigned long ulNumberOfUnitsPumped = 0;
			bResult = m_pInPipe->Pump( ulNumberOfUnitsPumped, m_ulDataSize );
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CProtocol::Write()
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::Write");
		bool bResult = false;
		GetNextWriteCount();
		if( m_ulDataSize > 0 && m_pOutPipe)
		{
			unsigned long ulWritten = 0;
			bResult = m_pOutPipe->Pump( ulWritten, m_ulDataSize );
		}
		return bResult;
	}


	__QOR_IMPLEMENT_OCLASS_LUID(CProtocol::CProtocolState);

	//--------------------------------------------------------------------------------
	CProtocol::CProtocolState::CProtocolState(IWorkflow::ref_type pWorkflow) : nsQOR::CCompoundState(pWorkflow)
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::CProtocolState::CProtocolState");
		m_pProtocol = pWorkflow.As< CProtocol >();
	}

	//--------------------------------------------------------------------------------
	void CProtocol::CProtocolState::GetNextReadCount(void)
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::CProtocolState::GetNextReadCount");
		m_pProtocol->m_ulDataSize = 0;
	}

	//--------------------------------------------------------------------------------
	void CProtocol::CProtocolState::GetNextWriteCount(void)
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::CProtocolState::GetNextWriteCount");
		m_pProtocol->m_ulDataSize = 0;
	}

	//--------------------------------------------------------------------------------
	bool CProtocol::CProtocolState::operator()(nsQOR::IEvent::ref_type _event, int iCookie)
	{
		__QCS_MEMBER_FCONTEXT("CProtocol::CProtocolState::operator()");
		bool bHandled = false;
		if (_event )
		{
			if ( m_pInternalWorkflow)
			{
				bHandled = m_pInternalWorkflow->CurrentState()->operator()(_event, iCookie);
			}

			if (!bHandled && m_pProtocol)
			{
				switch (static_cast<eProtocolEvents>(iCookie))
				{
				case ConnectionError:
					m_pProtocol->SetState(m_pProtocol->m_StoppedState.Ref(), _event);
					bHandled = true;
					break;
				case DisconnectionError:
					m_pProtocol->SetState(m_pProtocol->m_StoppedState.Ref(), _event);
					bHandled = true;
					break;
				case Connected:
					m_pProtocol->SetState(m_pProtocol->m_ReadingState.Ref(), _event);
					bHandled = true;
					break;
				case Disconnected:
					m_pProtocol->SetState(m_pProtocol->m_StoppedState.Ref(), _event);
					bHandled = true;
					break;
				case ReadError:
					m_pProtocol->SetState(m_pProtocol->m_StoppedState.Ref(), _event);
					bHandled = true;
					break;
				case ReadSuccess:
					m_pProtocol->SetState(m_pProtocol->m_ReadingState.Ref(), _event);
					bHandled = true;
					break;
				case EndOfData:
					m_pProtocol->SetState(m_pProtocol->m_WritingState.Ref(), _event);
					bHandled = true;
					break;
				case WriteError:
					m_pProtocol->SetState(m_pProtocol->m_StoppedState.Ref(), _event);
					bHandled = true;
					break;
				case WriteSuccess:
					m_pProtocol->SetState(m_pProtocol->m_WritingState.Ref(), _event);
					bHandled = true;
					break;
				}
			}
		}
		return bHandled;
	}

}//nsBluefoot

