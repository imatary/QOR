//WinQLVolume.h

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_FILESYSTEM_VOLUME_H_3
#define WINQL_FILESYSTEM_VOLUME_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include <vector>
#include "CodeQOR/DataTypes/Property.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/FileSystem/WinQLFile.h"
#include "WinQL/System/Devices/WinQLDeviceFile.h"

__QOR_DECLARE_REF(nsWin32, __WINQL, CVolume, CTRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	//Stateless helper for Volume functions
	class __QOR_INTERFACE(__WINQL) CVolumeHelper
	{
	public:

		//--------------------------------------------------------------------------------
		struct VolumeInformation
		{
			CTString strName;
			unsigned long ulSerialNumber;
			unsigned long ulMaximumComponentLength;
			unsigned long ulFileSystemFlags;
			CTString strFileSystemName;
		};

		//--------------------------------------------------------------------------------
		struct ByHandleVolumeInformation
		{
			CWString strName;
			unsigned long ulSerialNumber;
			unsigned long ulMaximumComponentLength;
			unsigned long ulFileSystemFlags;
			CWString strFileSystemName;
		};

		__QOR_DECLARE_OCLASS_ID(CVolumeHelper);

		CVolumeHelper();
		CVolumeHelper(const CVolumeHelper&);
		CVolumeHelper& operator = (const CVolumeHelper&);
		~CVolumeHelper();
		bool SetLabel(const TCHAR* lpRootPathName, const TCHAR* lpVolumeName);
		bool GetInformation(const TCHAR* lpRootPathName, VolumeInformation& VolumeInfo);
		bool GetInformationByHandle(CFile& File, ByHandleVolumeInformation& VolumeInfo);
		bool GetInformationByHandle(CFile& File, wchar_t* lpVolumeNameBuffer, unsigned long nVolumeNameSize, unsigned long* lpVolumeSerialNumber, unsigned long* lpMaximumComponentLength, unsigned long* lpFileSystemFlags, wchar_t* lpFileSystemNameBuffer, unsigned long nFileSystemNameSize);
		bool GetPathName(const TCHAR* lpszFileName, TCHAR* lpszVolumePathName, unsigned long cchBufferLength);
		bool GetPathNamesForName(const TCHAR* lpszVolumeName, TCHAR* lpszVolumePathNames, unsigned long cchBufferLength, unsigned long* lpcchReturnLength);
	};

	//--------------------------------------------------------------------------------	
	//A read only Volume object
	class __QOR_INTERFACE( __WINQL ) CVolume
	{
	public:

		__QOR_DECLARE_REF_TYPE(CVolume);

		CVolume( CTStringRef VolumeGUID );
		CVolume( const CVolume& );
		CVolume& operator = ( const CVolume& );
		virtual ~CVolume();

		nsCodeQOR::CRefProperty< CVolume, CTString > GUID;
		nsCodeQOR::CRefProperty< CVolume, CTString > DeviceName;
		nsCodeQOR::CRefProperty< CVolume, std::vector< CTString > > PathNames;
		nsCodeQOR::CRefProperty< CVolume, std::vector< CTString > > MountPoints;

	private:

		CTString m_GUID;
		CTString m_DeviceName;
		std::vector< CTString > m_VecPathNames;
		std::vector< CTString > m_VecMountPoints;
		CVolumeHelper m_Helper;

		CVolume();//No default construction

		CTString GetGuid(void);
		CTString GetDeviceName(void);
		std::vector< CTString > GetPathNames(void);
		std::vector< CTString > GetMountPoints(void);
	};

}//nsWin32

#endif//WINQL_FILESYSTEM_VOLUME_H_3
