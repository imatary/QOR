//WinQLProcessHelper.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A stateless helper class for Process related functions

#include <limits.h>
#include "CodeQOR/ErrorSystem/Error.h"
#include "AppocritaQOR/Controller.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/ErrorDomain.h"
#include "../Source/SystemQOR/MSWindows/WinQAPI/include/DynamicLibrary.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Process/WinQLProcess.h"
#include "WinQL/Application/Threading/WinQLThread.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/User32.h"
#include "WinQAPI/PSAPI.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	// {B581519C-9BA8-442B-AF56-56D25E9ACAB2}
	__QOR_IMPLEMENT_OCLASS_GUID( CProcessHelper, 0xb581519c, 0x9ba8, 0x442b, 0xaf, 0x56, 0x56, 0xd2, 0x5e, 0x9a, 0xca, 0xb2 )

	//--------------------------------------------------------------------------------
	CProcessHelper::CProcessHelper() : m_PSAPI( CPSAPI::Instance() )
	{
		_WINQ_FCONTEXT( "CProcessHelper::CProcessHelper" );
	}

	//--------------------------------------------------------------------------------
	CProcessHelper::CProcessHelper( const CProcessHelper& ) : m_PSAPI( CPSAPI::Instance() )
	{
	}

	//--------------------------------------------------------------------------------
	CProcessHelper& CProcessHelper::operator=( const CProcessHelper& )
	{
		return *this;
	}

	//--------------------------------------------------------------------------------
	CProcessHelper::~CProcessHelper()
	{
		_WINQ_FCONTEXT( "CProcessHelper::~CProcessHelper" );
	}

	//------------------------------------------------------------------------------
	TCHAR* CProcessHelper::GetCommandLineT()
	{
		_WINQ_FCONTEXT( "CProcessHelper::GetCommandLine" );
		LPTSTR pResult = 0;
		__QOR_PROTECT
		{
			pResult = CKernel32::GetCommandLine();
		}__QOR_ENDPROTECT
		return pResult;
	}

	//------------------------------------------------------------------------------
	bool CProcessHelper::FreeEnvironmentStringsT( TCHAR* lpszEnvironmentBlock )
	{
		_WINQ_FCONTEXT( "CProcessHelper::FreeEnvironmentStringsT" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().FreeEnvironmentStrings( lpszEnvironmentBlock ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	void* CProcessHelper::GetEnvironmentStringsT( void )
	{
		_WINQ_FCONTEXT( "CProcessHelper::GetEnvironmentStringsT" );
		void* pResult = 0;
		__QOR_PROTECT
		{
			pResult = CKernel32::Instance().GetEnvironmentStrings();
		}__QOR_ENDPROTECT
		return pResult;
	}

	//------------------------------------------------------------------------------
	unsigned long CProcessHelper::GetEnvironmentVariableT( const TCHAR* lpName, TCHAR* lpBuffer, unsigned long nSize )
	{
		_WINQ_FCONTEXT( "CProcessHelper::GetEnvironmentVariableT" );
		unsigned long ulResult = 0;
		__QOR_PROTECT
		{
			ulResult = CKernel32::Instance().GetEnvironmentVariable( lpName, lpBuffer, nSize );
		}__QOR_ENDPROTECT
		return ulResult;
	}

	//------------------------------------------------------------------------------
	nsWin32::STARTUPINFO CProcessHelper::StartupInfo()
	{
		_WINQ_SFCONTEXT( "CProcessHelper::GetStartupInfo" );
		nsWin32::STARTUPINFO StartupInfo;
		StartupInfo.cb = sizeof( nsWin32::STARTUPINFO );		
		CKernel32::GetStartupInfo( reinterpret_cast< ::LPSTARTUPINFO >( &StartupInfo ) );
		return StartupInfo;
	}

	//--------------------------------------------------------------------------------
	bool CProcessHelper::SetEnvironmentVariableT( const TCHAR* lpName, const TCHAR* lpValue )
	{
		_WINQ_FCONTEXT( "CProcessHelper::SetEnvironmentVariableT" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().SetEnvironmentVariable( lpName, lpValue ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned int CProcessHelper::WinExec( const char* lpCmdLine, unsigned int uCmdShow )
	{
		_WINQ_FCONTEXT( "CProcessHelper::WinExec" );
		unsigned int uiResult = 0;
		__QOR_PROTECT
		{
			uiResult = CKernel32::Instance().WinExec( lpCmdLine, uCmdShow );
		}__QOR_ENDPROTECT
		return uiResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CProcessHelper::LoadModule( const char* lpModuleName, void* lpParameterBlock )
	{
		_WINQ_FCONTEXT( "CProcessHelper::LoadModule" );
		unsigned long ulResult = 0;
		__QOR_PROTECT
		{
			ulResult = CKernel32::Instance().LoadModule( lpModuleName, lpParameterBlock );
		}__QOR_ENDPROTECT
		return ulResult;
	}

	//--------------------------------------------------------------------------------
	bool CProcessHelper::NeedCurrentDirectoryForExePathT( const TCHAR* ExeName )
	{
		_WINQ_FCONTEXT( "CProcessHelper::NeedCurrentDirectoryForExePathT" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::Instance().NeedCurrentDirectoryForExePath( ExeName ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	CTString CProcessHelper::GetFileName( void )
	{
		_WINQ_FCONTEXT( "CProcessHelper::GetFileName" );
		CTString strResult;
		strResult.ValidateBuffer( static_cast< unsigned short >( CKernel32::GetModuleFileName( 0, strResult.GetBufferSetLength( MaxPath ), MaxPath ) ) );
		return strResult;
	}

	//--------------------------------------------------------------------------------
	bool CProcessHelper::EnumProcessModules( ModuleHandle hProcess, ModuleHandle* lphModule, unsigned long cb, unsigned long* lpcbNeeded )
	{
		_WINQ_FCONTEXT( "CProcessHelper::EnumProcessModules" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_PSAPI.EnumProcessModules( hProcess, reinterpret_cast< HMODULE* >( lphModule ), cb, lpcbNeeded ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CProcessHelper::EnumProcessModulesEx( ModuleHandle hProcess, ModuleHandle* lphModule, unsigned long cb, unsigned long* lpcbNeeded, unsigned long dwFilterFlag )
	{
		_WINQ_FCONTEXT( "CProcessHelper::EnumProcessModulesEx" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = m_PSAPI.EnumProcessModulesEx( hProcess, reinterpret_cast< HMODULE* >( lphModule ), cb, lpcbNeeded, dwFilterFlag ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32

