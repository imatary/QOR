//WindowStation.h

// Copyright Querysoft Limited 2013, 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_GUI_WINSTA_H_3
#define WINQL_GUI_WINSTA_H_3

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "CodeQOR/DataStructures/TSyncRef.h"
#include "WinQL/WinQL.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Definitions/Handles.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/System/Security/WinQLAuthorization.h"
#include "WinQL/Application/User/WinQLUserObject.h"
#include "WinQL/GUI/Desktop.h"
#include "WinQL/CodeServices/Handles/WinQLRAIISessionHandle.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) CUser32;
}

__QOR_DECLARE_REF(nsWin32, __WINQL_GUI, CWindowStation, CTRef);

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	typedef int ( __QCMP_STDCALLCONVENTION *DesktopEnumProc )( TCHAR*, Cmp_long_ptr );
	typedef int ( __QCMP_STDCALLCONVENTION *WinStaEnumProc )( TCHAR*, Cmp_long_ptr );

	typedef CRAIISessionHandle CWinStationHandle;
	
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CWindowStation
	{

	public:

		__QOR_DECLARE_OCLASS_ID( CWindowStation );
		__QOR_DECLARE_REF_TYPE(CWindowStation);

		CWindowStation();
		CWindowStation(const CWindowStation& src) = delete;
		CWindowStation& operator = (const CWindowStation& src) = delete;
		CWindowStation( TCHAR* lpszWinSta, int fInherit, unsigned long dwDesiredAccess );
		CWindowStation( const TCHAR* lpwinsta, unsigned long dwFlags, unsigned long dwDesiredAccess, nsWin32::LPSECURITY_ATTRIBUTES lpsa );		
		virtual ~CWindowStation();
		
		bool SetAsProcessWindowStation( void );
		bool EnumDesktopsT( nsWin32::DesktopEnumProc lpEnumFunc, Cmp_long_ptr lParam );
		CDesktop::refType GetThreadDesktop( unsigned long dwThreadId );
		bool GetInformation( int nIndex, nsCodeQOR::CTLRef< byte >& RefData );
		bool SetInformation( int nIndex, const void* pvInfo, unsigned long nLength );
		int Status( void );
		CTString GetName( void );
		bool GetFlags( nsWin32::USEROBJECTFLAGS& Flags );
		bool SetFlags( nsWin32::USEROBJECTFLAGS& Flags );
		CTString GetType( void );
		CSID GetSID();
		CDesktop::refType Desktop( CTString StrDesktop = CTString(), const TCHAR* lpszDevice = 0, nsWin32::LPDEVMODE pDevmode = 0, unsigned long dwFlags = 0, bool fInherit = false, unsigned long dwDesiredAccess = 0, nsWin32::LPSECURITY_ATTRIBUTES lpsa = 0 );

		/*
		WTSRegisterSessionNotificationEx
		WTSUnRegisterSessionNotificationEx
		WinStationCloseServer
		WinStationConnectW
		WinStationDisconnect
		WinStationEnableChildSessions
		WinStationEnumerateProcesses
		WinStationEnumerateW
		WinStationFreeEXECENVDATAEX
		WinStationFreeGAPMemory
		WinStationFreeMemory
		WinStationGetAllProcesses
		WinStationGetAllSessionsEx
		WinStationGetChildSessionId
		WinStationGetDeviceId
		WinStationIsChildSessionsEnabled
		WinStationIsSessionRemoteable
		WinStationOpenServerA
		WinStationOpenServerExA
		WinStationOpenServerExW
		WinStationOpenServerW
		WinStationQueryInformationW
		WinStationQuerySessionVirtualIP
		WinStationRegisterConsoleNotification
		WinStationReset
		WinStationSendMessageA
		WinStationSendMessageW
		WinStationSetRenderHint
		WinStationShadow
		WinStationShadowStop
		WinStationShutdownSystem
		WinStationTerminateProcess
		WinStationUnRegisterConsoleNotification
		WinStationVirtualOpenEx
		WinStationWaitSystemEvent
		WinStationGetLoggedOnCount
		WinStationSetAutologonPassword
		WinStationRegisterConsoleNotificationEx2
		LogonIdFromWinStationNameA
		LogonIdFromWinStationNameW
		RemoteAssistancePrepareSystemRestore
		ServerGetInternetConnectorStatus
		ServerLicensingClose
		ServerLicensingDeactivateCurrentPolicy
		ServerLicensingFreePolicyInformation
		ServerLicensingGetAvailablePolicyIds
		ServerLicensingGetPolicy
		ServerLicensingGetPolicyInformationA
		ServerLicensingGetPolicyInformationW
		ServerLicensingLoadPolicy
		ServerLicensingOpenA
		ServerLicensingOpenW
		ServerLicensingSetPolicy
		ServerLicensingUnloadPolicy
		ServerQueryInetConnectorInformationA
		ServerQueryInetConnectorInformationW
		ServerSetInternetConnectorStatus
		WinStationActivateLicense
		WinStationAutoReconnect
		WinStationBroadcastSystemMessage
		WinStationCheckAccess
		WinStationCheckLoopBack
		WinStationConnectA
		WinStationConnectAndLockDesktop
		WinStationConnectCallback
		WinStationConnectEx
		WinStationCreateChildSessionTransport
		WinStationEnumerateA
		WinStationEnumerateExW
		WinStationEnumerateLicenses
		WinStationEnumerate_IndexedA
		WinStationEnumerate_IndexedW
		WinStationFreeConsoleNotification
		WinStationFreePropertyValue
		WinStationFreeUserCertificates
		WinStationFreeUserCredentials
		WinStationFreeUserSessionInfo
		WinStationGenerateLicense
		WinStationGetAllSessionsW
		WinStationGetAllUserSessions
		WinStationGetConnectionProperty
		WinStationGetCurrentSessionCapabilities
		WinStationGetCurrentSessionConnectionProperty
		WinStationGetCurrentSessionTerminalName
		WinStationGetInitialApplication
		WinStationGetLanAdapterNameA
		WinStationGetLanAdapterNameW
		WinStationGetMachinePolicy
		WinStationGetParentSessionId
		WinStationGetProcessSid
		WinStationGetRedirectAuthInfo
		WinStationGetRestrictedLogonInfo
		WinStationGetSessionIds
		WinStationGetTermSrvCountersValue
		WinStationGetUserCertificates
		WinStationGetUserCredentials
		WinStationGetUserProfile
		WinStationInstallLicense
		WinStationIsCurrentSessionRemoteable
		WinStationIsHelpAssistantSession
		WinStationIsSessionPermitted
		WinStationNameFromLogonIdA
		WinStationNameFromLogonIdW
		WinStationNegotiateSession
		WinStationNtsdDebug
		WinStationPreCreateGlassReplacementSession
		WinStationQueryAllowConcurrentConnections
		WinStationQueryCurrentSessionInformation
		WinStationQueryEnforcementCore
		WinStationQueryInformationA
		WinStationQueryLicense
		WinStationQueryLogonCredentialsW
		WinStationQueryUpdateRequired
		WinStationRcmShadow2
		WinStationRedirectErrorMessage
		WinStationRedirectLogonBeginPainting
		WinStationRedirectLogonError
		WinStationRedirectLogonMessage
		WinStationRedirectLogonStatus
		WinStationRegisterConsoleNotificationEx
		WinStationRegisterCurrentSessionNotificationEvent
		WinStationRegisterNotificationEvent
		WinStationRemoveLicense
		WinStationRenameA
		WinStationRenameW
		WinStationReportUIResult
		WinStationRevertFromServicesSession
		WinStationSendWindowMessage
		WinStationServerPing
		WinStationSetInformationA
		WinStationSetInformationW
		WinStationSetPoolCount
		WinStationShadowAccessCheck
		WinStationShadowStop2
		WinStationSwitchToServicesSession
		WinStationSystemShutdownStarted
		WinStationSystemShutdownWait
		WinStationTerminateGlassReplacementSession
		WinStationUnRegisterNotificationEvent
		WinStationUserLoginAccessCheck
		WinStationVerify
		WinStationVirtualOpen
		_NWLogonQueryAdmin
		_NWLogonSetAdmin
		_WinStationAnnoyancePopup
		_WinStationBeepOpen
		_WinStationBreakPoint
		_WinStationCallback
		_WinStationCheckForApplicationName
		_WinStationFUSCanRemoteUserDisconnect
		_WinStationGetApplicationInfo
		_WinStationNotifyDisconnectPipe
		_WinStationNotifyLogoff
		_WinStationNotifyLogon
		_WinStationNotifyNewSession
		_WinStationOpenSessionDirectory
		_WinStationReInitializeSecurity
		_WinStationReadRegistry
		_WinStationSessionInitialized
		_WinStationShadowTarget2
		_WinStationShadowTarget
		_WinStationShadowTargetSetup
		_WinStationUpdateClientCachedCredentials
		_WinStationUpdateSettings
		_WinStationUpdateUserConfig
		_WinStationWaitForConnect
		*/
	protected:

		typedef nsCodeQOR::CTMap< CTString, CDesktop*, CWinQLPolicy > DesktopNameMap;
		typedef nsCodeQOR::CTMap< CTString, CDesktop*, CWinQLPolicy >::TItem DesktopNameMapItem;

		DesktopNameMap m_DesktopNameMap;
			
		CWinStationHandle m_Handle;
		bool m_bNeedsClose;
		int m_iStatus;

	private:

		static int __QCMP_STDCALLCONVENTION EnumAllDesktopsProc( TCHAR* StrName, Cmp_long_ptr lParam );
		bool EnumDesktop( TCHAR* StrName );
		bool EnumAllDesktops();
		bool m_bDesktopsEnumerated;
			
		nsWinQAPI::CUser32& m_User32Library;
		
	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_GUI ) CWindowStationManager
	{

	public:

		__QOR_DECLARE_OCLASS_ID( CWindowStationManager );

		CWindowStationManager();
		~CWindowStationManager();

		CWindowStation::ref_type Current( void );
		CWindowStation::ref_type Open( CTString& strWindowStation, bool bInherit, unsigned long ulDesiredAccess );
		CWindowStation::ref_type Create( CTString& strWindowStation, unsigned long ulFlags, unsigned long ulDesiredAccess, SECURITY_ATTRIBUTES* pSA );

		bool Enumerate( nsWin32::WinStaEnumProc lpEnumFunc, Cmp_long_ptr lParam );

	private:
			
		nsWinQAPI::CUser32& m_User32Library;
		__QCS_DECLARE_NONCOPYABLE( CWindowStationManager );
	};

}//nsWin32

#endif//WINQL_GUI_WINSTA_H_3
