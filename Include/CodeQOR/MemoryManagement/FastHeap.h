//FastHeap.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//A heap that trades in size efficiency to get speedy allocation and deletion

#ifndef CODEQOR_FASTHEAP_H_2
#define CODEQOR_FASTHEAP_H_2

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "SystemQOR.h"
#include <stdlib.h>
#include "FastBucket.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	template< typename T > struct TFHFunctor;

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __CODEQOR ) CFastHeap
	{
	public:

		__QCMP_STATIC_CONSTANT( unsigned int, suiRootBuckets = 8 );

		CFastHeap();
		~CFastHeap();

		CFastBucket* Bucket( Cmp_uint_ptr uiAllocSize );

		//--------------------------------------------------------------------------------
		template< typename T >
		T* Allocate( Cmp_uint_ptr uiCount = 1, unsigned int uiLine = 0, const char* pFile = 0 )
		{
			return TFHFunctor< T >::Allocate( *this, uiCount, uiLine, pFile );
		}

		//--------------------------------------------------------------------------------
		template< typename T >
		void Free( T* pT, Cmp_uint_ptr uiCount = 1 )
		{
			TFHFunctor< T >::Free( *this, pT, uiCount );
		}

		void Analyse( void(*pTrace)( char* ) );

		CFastBucket m_InitialPages[ suiRootBuckets ];
		Cmp_uint_ptr m_uiTotalAlloc;
		Cmp_uint_ptr m_uiMaxAlloc;
		Cmp_uint_ptr m_ulAllocIndex;
	};

	//--------------------------------------------------------------------------------
	//template to manage allocation and deletion
	template< typename T > struct TFHFunctor
	{
		//--------------------------------------------------------------------------------
		static T* Allocate( CFastHeap& Heap, Cmp_uint_ptr uiCount = 1, unsigned int uiLine = 0, const char* pFile = 0 )
		{
			Cmp_uint_ptr uiAllocSize = sizeof( T ) * uiCount;
			CFastBucket* pBucket = Heap.Bucket( uiAllocSize );
			byte* pMemory = 0;
			pMemory = reinterpret_cast< byte* >( pBucket->Allocate( uiAllocSize, uiLine, pFile, Heap.m_ulAllocIndex++ ) );
			for( unsigned int uiItem = 0; uiItem < uiCount; uiItem++ )
			{
				new( pMemory + ( sizeof( T ) * uiItem ) ) T;
			}

			Heap.m_uiTotalAlloc += uiAllocSize;
			if( Heap.m_uiTotalAlloc > Heap.m_uiMaxAlloc )
			{
				Heap.m_uiMaxAlloc = Heap.m_uiTotalAlloc;
			}

			return reinterpret_cast< T* >( pMemory );
		}

		//--------------------------------------------------------------------------------
		static void Free( CFastHeap& Heap, T* pT, Cmp_uint_ptr uiCount )
		{
			Cmp_uint_ptr uiAllocSize = sizeof( T ) * uiCount;
			CFastBucket* pBucket = Heap.Bucket( uiAllocSize );
			if( pBucket )
			{
				for( unsigned int uiItem = 0; uiItem < uiCount; uiItem++ )
				{
					pT[ uiItem ].~T();
				}
				pBucket->Free( pT );
				Heap.m_uiTotalAlloc -= uiAllocSize;
			}
		}
	};

	//--------------------------------------------------------------------------------
	template<> struct TFHFunctor< void >
	{
		//--------------------------------------------------------------------------------
		static void* Allocate( CFastHeap& Heap, Cmp_uint_ptr uiCount, unsigned int uiLine, const char* pFile )
		{
			void* pMemory = 0;
			CFastBucket* pBucket = Heap.Bucket( uiCount );
			pMemory = pBucket ? pBucket->Allocate( uiCount, uiLine, pFile, Heap.m_ulAllocIndex++ ) : 0;

			Heap.m_uiTotalAlloc += uiCount;
			if( Heap.m_uiTotalAlloc > Heap.m_uiMaxAlloc )
			{
				Heap.m_uiMaxAlloc = Heap.m_uiTotalAlloc;
			}

			return pMemory;
		}

		//--------------------------------------------------------------------------------
		static void Free( CFastHeap& Heap, void* pT, Cmp_uint_ptr uiCount )
		{
			CStackPage::Info* pInfo = ( ( reinterpret_cast< CStackPage::Info* >( pT ) ) - 1 );
			CFastBucket* pBucket = Heap.Bucket( pInfo->m_lSize );
			Heap.m_uiTotalAlloc -= abs( pInfo->m_lSize );
			pBucket->Free( pT );
		}
	};

}//nsCodeQOR

#endif//CODEQOR_FASTHEAP_H_2
