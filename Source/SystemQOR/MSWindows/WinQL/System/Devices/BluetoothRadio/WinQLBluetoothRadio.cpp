//WinQLBluetoothRadio.cpp

// Copyright Querysoft Limited 2013, 2016, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/BluetoothRadio/WinQLBluetoothRadio.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterfaceClass.h"
#include "WinQL/System/WinQLSystem.h"
#include "WinQAPI/Kernel32.h"
#include "WinQAPI/BthProps.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	__QOR_IMPLEMENT_OCLASS_GUID( CBluetoothRadio, 0x0850302A, 0xB344, 0x4fda, 0x9B, 0xE9, 0x90, 0x57, 0x6B, 0x8D, 0x46, 0xF0 );

	nsCodeQOR::CTExternalRegEntry< CBluetoothRadio > CBluetoothRadio::RegEntry;

	nsCodeQOR::mxGUID CBluetoothRadio::GUID_BLUETOOTH_HCI_EVENT					= { 0xfc240062, 0x1541, 0x49be, { 0xb4, 0x63, 0x84, 0xc4, 0xdc, 0xd7, 0xbf, 0x7f } };
	nsCodeQOR::mxGUID CBluetoothRadio::GUID_BLUETOOTH_L2CAP_EVENT				= { 0x7eae4030, 0xb709, 0x4aa8, { 0xac, 0x55, 0xe9, 0x53, 0x82, 0x9c, 0x9d, 0xaa } };
	nsCodeQOR::mxGUID CBluetoothRadio::GUID_BLUETOOTH_RADIO_IN_RANGE			= { 0xea3b5b82, 0x26ee, 0x450e, { 0xb0, 0xd8, 0xd2, 0x6f, 0xe3, 0x0a, 0x38, 0x69 } };
	nsCodeQOR::mxGUID CBluetoothRadio::GUID_BLUETOOTH_RADIO_OUT_OF_RANGE		= { 0xe28867c9, 0xc2aa, 0x4ced, { 0xb9, 0x69, 0x45, 0x70, 0x86, 0x60, 0x37, 0xc4 } };

	//--------------------------------------------------------------------------------
	CBluetoothRadio::CBluetoothRadio() : CDeviceInterface(), m_Library( CBthProps::Instance() ), m_bNotificationsEnabled( false ), m_NotificationFilter( CNotificationFilter::eNotifyHandle )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::CBluetoothRadio" );		
	}

	//--------------------------------------------------------------------------------
	CBluetoothRadio::CBluetoothRadio( CDeviceHandle& hExisting ) : CDeviceInterface( hExisting ), m_Library( CBthProps::Instance() ), m_bNotificationsEnabled( false ), m_NotificationFilter( CNotificationFilter::eNotifyHandle )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::CBluetoothRadio" );
		Open();
	}

	//--------------------------------------------------------------------------------
	CBluetoothRadio::CBluetoothRadio( const CBluetoothRadio& src ) : CDeviceInterface( src ), m_Library( CBthProps::Instance() )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::CBluetoothRadio" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CBluetoothRadio& CBluetoothRadio::operator = ( const CBluetoothRadio& src )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::operator =" );
		if( &src != this )
		{
			m_bNotificationsEnabled = src.m_bNotificationsEnabled;
			//TODO: copy notification filter
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CBluetoothRadio::~CBluetoothRadio()
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::~CBluetoothRadio" );
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::SetHandle(CDeviceHandle& hExisting)
	{
		m_Session = ref(*(reinterpret_cast<CIODeviceFile*>(hExisting.Object())));
		SetupNotificationFilter();
	}

	//--------------------------------------------------------------------------------
	void* CBluetoothRadio::GetSessionHandle(void)
	{
		void* pResult = nullptr;
		if (!m_Session.IsNull())
		{
			pResult = m_Session().Handle()().Use();
		}
		return pResult;
	}
	//--------------------------------------------------------------------------------
	void CBluetoothRadio::Open()
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::Open" );
		m_Session = CDeviceInterface::Open( Generic_Read | Generic_Write, File_Share_Read | File_Share_Write, File_Attribute_Normal );
		SetupNotificationFilter();
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::Close()
	{
		_WINQ_FCONTEXT("CBluetoothRadio::Close");
		m_Session.Dispose();
	}
	//--------------------------------------------------------------------------------
	void CBluetoothRadio::AuthenticateDevice( COSWindow::refType ParentWindow, CBluetoothRemoteDevice::ref_type Device, CWString strPassKey )
	{
		_WINQ_FCONTEXT( "CBluetoothRemoteDevice::Authenticate" );

		if( !m_Session.IsNull() )
		{
			unsigned long ulErrorCode = m_Library.BluetoothAuthenticateDevice( 
				ParentWindow.IsNull() ? 0 : reinterpret_cast< ::HWND >( ParentWindow->Handle()->Use() ),
				m_Session->Handle()->Use(),
				reinterpret_cast< ::BLUETOOTH_DEVICE_INFO* >( Device.As< CBluetoothRemoteDevice >()->GetInfo() ),
				strPassKey.IsEmpty() ? 0 : strPassKey.GetBuffer(),
				min( strPassKey.Len(), BLUETOOTH_MAX_PASSKEY_SIZE ) );
			strPassKey.ReleaseBuffer();
			if (ulErrorCode != ERROR_SUCCESS)
			{
				//TODO: Raise the appropriate Error
			}
		}
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::AuthenticateDeviceEx( COSWindow::refType ParentWindow, CBluetoothRemoteDevice::ref_type Device, BluetoothOutOfBandData* pbtOobData, CBluetoothRemoteDevice::Authentication_Requirements AuthentRequirements )
	{
		_WINQ_FCONTEXT( "CBluetoothRemoteDevice::AuthenticateEx" );

		if (!m_Session.IsNull())
		{
			unsigned long ulErrCode = m_Library.BluetoothAuthenticateDeviceEx(
				ParentWindow.IsNull() ? 0 : reinterpret_cast< ::HWND >( ParentWindow->Handle()->Use() ),
				m_Session->Handle()->Use(),
				reinterpret_cast< ::BLUETOOTH_DEVICE_INFO* >( Device.As< CBluetoothRemoteDevice >()->GetInfo() ),
				reinterpret_cast< PBLUETOOTH_OOB_DATA_INFO >( pbtOobData ),
				static_cast< ::AUTHENTICATION_REQUIREMENTS >( AuthentRequirements ) );
			if (ulErrCode != ERROR_SUCCESS)
			{
				//TODO: Raise the appropriate Error
			}
		}
	}

	//--------------------------------------------------------------------------------
	bool CBluetoothRadio::EnableDiscovery( bool bEnabled )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::EnableDiscovery" );

		bool bResult = false;
		if (!m_Session.IsNull())
		{
			bResult = m_Library.BluetoothEnableDiscovery( m_Session->Handle()->Use(), bEnabled ? TRUE : FALSE ) ? true : false;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CBluetoothRadio::EnableIncomingConnections( bool bEnabled )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::EnableIncomingConnections" );

		bool bResult = false;
		if (!m_Session.IsNull())
		{
			bResult = m_Library.BluetoothEnableIncomingConnections( m_Session->Handle()->Use(), bEnabled ? TRUE : FALSE ) ? true : false;
		}
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CBluetoothRadio::EnumerateInstalledServices( CBluetoothRemoteDevice::ref_type Device, nsCodeQOR::__mxGUID** ppGuidServices )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::EnumerateInstalledServices" );

		unsigned long ulCountServices = 0;

		if (!m_Session.IsNull())
		{
			m_Library.BluetoothEnumerateInstalledServices( m_Session->Handle()->Use(), 
				reinterpret_cast< ::BLUETOOTH_DEVICE_INFO* >( Device.As< CBluetoothRemoteDevice >()->GetInfo() ), &ulCountServices, 0 );

			if( ulCountServices > 0 && ppGuidServices && !*ppGuidServices )
			{
				*ppGuidServices = new nsCodeQOR::__mxGUID[ ulCountServices ];
				m_Library.BluetoothEnumerateInstalledServices(m_Session->Handle()->Use(), reinterpret_cast< ::BLUETOOTH_DEVICE_INFO* >( Device.As< CBluetoothRemoteDevice >()->GetInfo() ), &ulCountServices, reinterpret_cast< ::GUID* >( *ppGuidServices ) );
			}
		}
		return ulCountServices;		
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::GetDeviceInfo( CBluetoothRemoteDevice::ref_type Device )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::GetDeviceInfo" );

		if (!m_Session.IsNull())
		{
			m_Library.BluetoothGetDeviceInfo( m_Session->Handle()->Use(), reinterpret_cast< ::BLUETOOTH_DEVICE_INFO* >( Device.As< CBluetoothRemoteDevice >()->GetInfo() ) );
		}
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::GetInfo()
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::GetInfo" );

		if (!m_Session.IsNull())
		{
			m_Library.BluetoothGetRadioInfo( m_Session->Handle()->Use(), reinterpret_cast< ::PBLUETOOTH_RADIO_INFO >( &m_Info ) );
		}
	}

	//--------------------------------------------------------------------------------
	bool CBluetoothRadio::IsConnectable()
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::IsConnectable" );

		bool bResult = false;

		if (!m_Session.IsNull())
		{
			bResult = m_Library.BluetoothIsConnectable(m_Session->Handle()->Use() ) ? true : false;
		}

		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CBluetoothRadio::IsDiscoverable()
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::IsDiscoverable" );

		bool bResult = false;
		if (!m_Session.IsNull())
		{
			bResult = m_Library.BluetoothIsDiscoverable( m_Session->Handle()->Use() ) ? true : false;
		}

		return bResult;
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::SendAuthenticationResponse( CBluetoothRemoteDevice::Info* pDeviceInfo, CWString strPassKey )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::SendAuthenticationResponse" );

		if (!m_Session.IsNull())
		{
			m_Library.BluetoothSendAuthenticationResponse( 
				m_Session->Handle()->Use(),
				reinterpret_cast< ::BLUETOOTH_DEVICE_INFO* >( pDeviceInfo ),
				strPassKey.GetBuffer() );
			strPassKey.ReleaseBuffer();
		}
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::SendAuthenticationResponseEx( void* pResponse )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::SendAuthenticationResponseEx" );

		if (!m_Session.IsNull())
		{
			m_Library.BluetoothSendAuthenticationResponseEx(
				m_Session->Handle()->Use(),
				reinterpret_cast< ::PBLUETOOTH_AUTHENTICATE_RESPONSE >( pResponse ) );
		}
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::SetLocalServiceInfo( nsCodeQOR::mxGUID* pClassGuid, unsigned long ulInstance, const BluetoothLocalServiceInfo* pServiceInfoIn )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::SetLocalServiceInfo" );

		if (!m_Session.IsNull())		
		{
			m_Library.BluetoothSetLocalServiceInfo(
				m_Session->Handle()->Use(),
				reinterpret_cast< const ::GUID* >( pClassGuid ),
				ulInstance,
				reinterpret_cast< const BLUETOOTH_LOCAL_SERVICE_INFO* >( pServiceInfoIn ) );
		}
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::SetServiceState( CBluetoothRemoteDevice::ref_type Device, nsCodeQOR::__mxGUID* pGuidService , unsigned long ulServiceFlags )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::SetServiceState" );

		if (!m_Session.IsNull())
		{
			m_Library.BluetoothSetServiceState( 
				m_Session->Handle()->Use(),
				reinterpret_cast< ::BLUETOOTH_DEVICE_INFO_STRUCT* >( Device.As< CBluetoothRemoteDevice >()->GetInfo() ),
				reinterpret_cast< ::GUID* >( pGuidService ),
				ulServiceFlags );
		}
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::SetupNotificationFilter()
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::SetupNotificationFilter" );
		if (!m_Session.IsNull())
		{
			m_NotificationFilter.AddHandleFilter(m_Session->Handle()->Use(), &GUID_BLUETOOTH_HCI_EVENT);
			m_NotificationFilter.AddHandleFilter(m_Session->Handle()->Use(), &GUID_BLUETOOTH_L2CAP_EVENT);
			m_NotificationFilter.AddHandleFilter(m_Session->Handle()->Use(), &GUID_BLUETOOTH_RADIO_IN_RANGE);
			m_NotificationFilter.AddHandleFilter(m_Session->Handle()->Use(), &GUID_BLUETOOTH_RADIO_OUT_OF_RANGE);
		}
	}

	//--------------------------------------------------------------------------------
	void CBluetoothRadio::EnableNotifications( CHandle& hRecipient, bool bEnable )
	{
		_WINQ_FCONTEXT( "CBluetoothRadio::EnableNotifications" );

		if (!m_Session.IsNull())
		{
			if( !m_bNotificationsEnabled )
			{
				Notification = CreateWindowDeviceNotification( hRecipient, m_NotificationFilter );
				m_bNotificationsEnabled = true;
			}
			else
			{
				Notification.Dispose();
				m_bNotificationsEnabled = false;
			}
		}
	}

}//nsWin32
