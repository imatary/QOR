//WinQLServer.cpp

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//WinQL Server Subsystem

#include "WinQL/WinQL.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Application/Subsystems/WinQLServer.h"
#include "WinQL/Application/WinQLApplication.h"

#define NOMINMAX
#include "WinQAPI/Kernel32.h"
#include <errno.h>
#include <algorithm>

//--------------------------------------------------------------------------------
namespace nsWin32
{
	//--------------------------------------------------------------------------------
	CServerEvent::CServerEvent( CServer& Server, SECURITY_ATTRIBUTES* lpEventAttributes, const TCHAR* lpName, unsigned long dwFlags, unsigned long dwDesiredAccess, bool* pbAlreadyExists ) : CEvent( lpEventAttributes, lpName, dwFlags, dwDesiredAccess, pbAlreadyExists )
	,	m_Server( Server )
	{
	}

	//--------------------------------------------------------------------------------
	CServerEvent::~CServerEvent()
	{
	}

	//--------------------------------------------------------------------------------
	void CServerEvent::OnSignaled( void )
	{
		m_Server.OnSignaled();
	}


	// {7B0E3D85-C684-483B-94F0-89C3A9669FD6}
	__QOR_IMPLEMENT_EXTERNAL_FACTORY( CServer, 0x7b0e3d85, 0xc684, 0x483b, 0x94, 0xf0, 0x89, 0xc3, 0xa9, 0x66, 0x9f, 0xd6 );

	//--------------------------------------------------------------------------------
	CServer::CServer() : nsQOR::CSubSystem(), m_ConnectEvent( *this, 0, 0, CEvent::_CREATE_EVENT_MANUAL_RESET | CEvent::_CREATE_EVENT_INITIAL_SET, Event_Modify_State | Synchronize | Read_Control )
	{
		_WINQ_FCONTEXT( "CIOServer::CIOServer" );
		m_bPendingIO = false;
		memset( &m_Overlapped, 0, sizeof( OVERLAPPED ) );
		m_Overlapped.hEvent = m_ConnectEvent.Handle()->ptr();
	}

	//--------------------------------------------------------------------------------
	CServer::~CServer()
	{
	}

	//--------------------------------------------------------------------------------
	void CServer::Setup( nsQOR::IApplication& Application )
	{		
		m_Application = Application.Ref();

		m_bPendingIO = OnListenResult( Listen() );

		m_Application.As< CWin32Application >()->AddWaitableObject( m_ConnectEvent.Ref() );
	}

	//--------------------------------------------------------------------------------
	void CServer::Shutdown( nsQOR::IApplication& Application )
	{
		m_Application.As< CWin32Application >()->RemoveWaitableObject( m_ConnectEvent.Ref() );
	}

	//--------------------------------------------------------------------------------
	void CServer::SetConnectionPool( nsBluefoot::CBFConnectionPool::refType refConnectionPool )			//Attach a connection pool to allow the server to request new connections from a pool
	{
		m_refConnectionPool = refConnectionPool;
	}

	//--------------------------------------------------------------------------------
	nsBluefoot::CBFConnectionPool::refType CServer::GetConnectionPool( void )
	{
		return m_refConnectionPool;
	}

	//--------------------------------------------------------------------------------
	void CServer::SetupConnection( nsBluefoot::CBFPlug::refPlugType& refConnector )
	{
		_WINQ_FCONTEXT( "CServer::SetupConnection" );
		//Override to set device specific properties for the Connection
	}

	//------------------------------------------------------------------------------
	nsBluefoot::CBFPlug::refPlugType CServer::CreateConnection()
	{
		nsBluefoot::CBFPlug::refPlugType refServerConnection( 0 );

		if( !m_refConnectionPool.IsNull() )
		{
			refServerConnection = m_refConnectionPool->Get();

			if( !refServerConnection.IsNull() )
			{
				refServerConnection->SetSyncObject( &m_Overlapped );

				SetupConnection( refServerConnection );
			}
		}

		return refServerConnection;
	}

	//--------------------------------------------------------------------------------
	bool CServer::Listen()
	{
		_WINQ_FCONTEXT( "CServer::Listen" );

		m_refPendingIOConnection = CreateConnection();

		return ( !m_refPendingIOConnection.IsNull() ) && m_refPendingIOConnection->Connect();
	}

	//--------------------------------------------------------------------------------
	bool CServer::OnListenResult( bool bConnected )
	{
		_WINQ_FCONTEXT( "CServer::OnListenResult" );

		if( m_refPendingIOConnection->AsyncConnection() )
		{
			return m_refPendingIOConnection->HandlePendingConnectionResult( bConnected );//For Windows Async device connections this is device type specific
		}
		else
		{
			return bConnected;
		}
	}

/*
	//--------------------------------------------------------------------------------
	void CServer::Run( void )
	{
		_WINQ_FCONTEXT( "CServer::Run" );

		bool bSuccess = false;
		bool bPendingIO = OnListenResult( Listen() );
		unsigned long ulWaitResult = (unsigned long)( -1 );
		unsigned long ulCountBytes = 0;
		unsigned long ulDataSize = 0;

		while( !m_bStopping )
		{
			ulWaitResult = m_ConnectEvent.Wait( Infinite, true );

			switch( ulWaitResult )
			{
			case 0:


				break;

			case Wait_IO_Completion:
				break;

			default:
				m_refPendingIOConnection->OnConnectionError();
				return;
			}
		}
	}
*/
	//--------------------------------------------------------------------------------
	void CServer::OnSignaled()
	{
		// If an operation is pending, get the result of the connect operation. 

		if( m_bPendingIO )
		{
			unsigned long ulCountBytes = 0;
			bool bSuccess = nsWinQAPI::CKernel32::Instance().GetOverlappedResult( m_ConnectEvent.Handle()->Use(), reinterpret_cast< ::OVERLAPPED* >( &m_Overlapped ), &ulCountBytes, false ) ? true : false;    // does not wait 

			if( !bSuccess )
			{
				unsigned long ulLastError = m_ErrorHelper.GetLastError();

				if( ulLastError == ErrorIOPending )
				{
					bSuccess = true;
				}
				else
				{
					//Raise an application level error
					return;
				}
			}
			else
			{
				m_bPendingIO = false;
			}

		}
		m_refPendingIOConnection->OnConnected();
		m_ConnectEvent.Reset();

		if( !m_bPendingIO )
		{
			m_bPendingIO = Listen();
		}
	}

	//--------------------------------------------------------------------------------
	void CServer::Stop()
	{
		_WINQ_FCONTEXT( "CServer::Stop" );
		m_Application.As< CWin32Application >()->RemoveWaitableObject( m_ConnectEvent.Ref() );
	}

}//nsWin32
