//InterParamChecks.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Support for checking conditions involving more than one of the parameters on a call

#include "CompilerQOR.h"
#include "AppocritaQOR/SubSystems/Thread.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/Parameters/InterParamChecks.h"
#include "CodeQOR/Modules/ProcessBase.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	//--------------------------------------------------------------------------------
	CInterCheckBase::CInterCheckBase()
	{
		nsQOR::IThread::ref_type pThreadContext = nsQOR::CThread::GetCurrent();
		nsCodeQOR::CFunctionContextBase* pFunctionContext = ( pThreadContext.IsNull() ) ? 0 : pThreadContext->FunctionContext();
		nsCodeQOR::CCallContextBase* pCallContext = ( pFunctionContext == 0 ) ? 0 : pFunctionContext->CallContext();
		if( pCallContext != 0 )
		{
			pCallContext->Register( *this );
		}
	}

	//--------------------------------------------------------------------------------
	CInterCheckBase::~CInterCheckBase()
	{
	}

	//--------------------------------------------------------------------------------		
	CParameterBase* CInterCheckBase::GetParameter( int iParam )
	{		
		nsCodeQOR::CParameterBase* pParamBase = 0;
		nsQOR::IThread::ref_type pThreadContext = nsQOR::CThread::GetCurrent();
		if( pThreadContext )
		{
			nsCodeQOR::CFunctionContextBase* pFunctionContext = ( pThreadContext.IsNull() ) ? 0 : pThreadContext->FunctionContext();
			nsCodeQOR::CCallContextBase* pCallContext = ( pFunctionContext == 0 ) ? 0 : pFunctionContext->CallContext();

			if( pCallContext != 0 )
			{
				pParamBase = &( pCallContext->Parameters()[ iParam ] );
			}
		}
		return pParamBase;
	}

}//nsCodeQOR
