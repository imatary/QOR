//Workflow.cpp

// Copyright Querysoft Limited 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "CodeQOR/Instancing/TInstancePtr.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "AppocritaQOR/AppocritaQOR.h"
#include "AppocritaQOR/Workflow.h"

//------------------------------------------------------------------------------
namespace nsQOR
{
	__QOR_IMPLEMENT_OCLASS_LUID( CWorkflow );

	//------------------------------------------------------------------------------
	CWorkflow::CWorkflow()
	{
		__QCS_FCONTEXT( "CWorkflow::CWorkflow" );
	}

	//------------------------------------------------------------------------------
	CWorkflow::CWorkflow( IApplication::ref_type Application ) : m_Application( Application )
	{
		__QCS_FCONTEXT( "CWorkflow::CWorkflow" );
	}

	//------------------------------------------------------------------------------
	CWorkflow::~CWorkflow()
	{
		__QCS_FCONTEXT( "CWorkflow::~CWorkflow" );
	}
	
	//------------------------------------------------------------------------------
	CWorkflow::CWorkflow( const CWorkflow& src ) : m_Application( src.m_Application )
	{
		__QCS_FCONTEXT( "CWorkflow::CWorkflow" );
		*this = src;
	}
	
	//------------------------------------------------------------------------------
	CWorkflow& CWorkflow::operator = ( const CWorkflow& src )
	{
		__QCS_FCONTEXT( "CWorkflow::operator = " );
		if( &src != this )
		{
			m_CurrentStateStack = src.m_CurrentStateStack;
		}
		return *this;
	}

	//------------------------------------------------------------------------------
	void CWorkflow::SetApplication( IApplication::ref_type Application )
	{
		__QCS_FCONTEXT( "CWorkflow::SetApplication" );
		m_Application = Application;
	}

	//------------------------------------------------------------------------------
	IApplication::ref_type CWorkflow::GetApplication() const
	{
		__QCS_FCONTEXT( "CWorkflow::GetApplication" );
		return m_Application->Ref();
	}

	//------------------------------------------------------------------------------
	IState::ref_type CWorkflow::CurrentState() const
	{
		__QCS_FCONTEXT( "CWorkflow::CurrentState" );
		IState::ref_type pState = nullptr;
		if( m_CurrentStateStack.size() > 0 )
		{
			pState = m_CurrentStateStack.top();
		}
		return pState;
	}
	
	//------------------------------------------------------------------------------
	void CWorkflow::SetState( IState::ref_type pNewState, IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CWorkflow::SetState" );
		IState::ref_type pCurrentState = CurrentState();
		if( pCurrentState )
		{
			pCurrentState->OnLeave( pEvent );
			m_CurrentStateStack.pop();
		}			
		if( pNewState )
		{
			m_CurrentStateStack.push( pNewState );
			pNewState->OnEnter( pEvent );
		}
	}
	
	//------------------------------------------------------------------------------
	void CWorkflow::PushState( IState::ref_type pNewState, IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CWorkflow::PushState" );
		IState* pCurrentState = CurrentState();
		if( pCurrentState )
		{
			pCurrentState->OnSuspend( pEvent );
		}
		if( pNewState )
		{
			m_CurrentStateStack.push( pNewState );
			pNewState->OnEnter( pEvent );
		}
	}
	
	//------------------------------------------------------------------------------
	void CWorkflow::PopState( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CWorkflow::PopState" );
		IState::ref_type pCurrentState = CurrentState();
		if( pCurrentState )
		{
			pCurrentState->OnLeave( pEvent );
			m_CurrentStateStack.pop();
		}
		pCurrentState = CurrentState();
		if( pCurrentState )
		{
			pCurrentState->OnResume( pEvent );
		}
	}

	//------------------------------------------------------------------------------
	IState::ref_type CWorkflow::InitialState( void ) const
	{
		__QCS_FCONTEXT( "CWorkflow::InitialState" );
		return nullptr;
	}

	//------------------------------------------------------------------------------
	bool CWorkflow::DefaultHandleEvent( IEvent::ref_type pEvent )
	{
		__QCS_FCONTEXT( "CWorkflow::DefaultHandleEvent" );
		bool bHandled = false;
		if( pEvent )
		{			
			bHandled = true;
		}
		return bHandled;
	}

	//------------------------------------------------------------------------------
	void CWorkflow::OnIdle()
	{
		__QCS_FCONTEXT("CWorkflow::OnIdle");
	}

}//nsQOR
