//WinQLThreading.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Process/WinQLProcessHelper.h"
#include "WinQAPI/Kernel32.h"

//------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//--Thread Helper-----------------------------------------------------------------

	__QOR_IMPLEMENT_OCLASS_LUID( CThreadHelper );

	//--------------------------------------------------------------------------------
	CThreadHelper::CThreadHelper()
	{
		_WINQ_FCONTEXT( "CThreadHelper::CThreadHelper" );
	}

	//--------------------------------------------------------------------------------
	CThreadHelper::CThreadHelper( const CThreadHelper& src )
	{
		_WINQ_FCONTEXT( "CThreadHelper::CThreadHelper" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CThreadHelper& CThreadHelper::operator = ( const CThreadHelper& )
	{
		_WINQ_FCONTEXT( "CThreadHelper::operator =" );
		return *this;
	}

	//--------------------------------------------------------------------------------
	CThreadHelper::~CThreadHelper()
	{
		_WINQ_FCONTEXT( "CThreadHelper::~CThreadHelper" );
	}

	//--------------------------------------------------------------------------------
	bool CThreadHelper::SetThreadStackGuarantee( unsigned long* StackSizeInBytes )
	{
		_WINQ_FCONTEXT( "CThreadHelper::SetThreadStackGuarantee" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetThreadStackGuarantee( StackSizeInBytes ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//------------------------------------------------------------------------------
	void CThreadHelper::Sleep( unsigned long dwMilliseconds )
	{
		_WINQ_FCONTEXT( "CThreadHelper::Sleep" );
		__QOR_PROTECT
		{
			CKernel32::Sleep( dwMilliseconds );
		}__QOR_ENDPROTECT
	}

	//------------------------------------------------------------------------------
	unsigned long CThreadHelper::SleepEx( unsigned long dwMilliseconds, bool bAlertable )
	{
		_WINQ_FCONTEXT( "CThreadHelper::SleepEx" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::SleepEx( dwMilliseconds, bAlertable ? TRUE : FALSE );
		}__QOR_ENDPROTECT
		return dwResult;
	}

	//--------------------------------------------------------------------------------
	void CThreadHelper::SwitchToFiber( void* lpFiber )
	{	
		_WINQ_FCONTEXT( "CThreadHelper::SwitchToFiber" );
		__QOR_PROTECT
		{
			CKernel32::SwitchToFiber( lpFiber );
		}__QOR_ENDPROTECT
	}	

	//------------------------------------------------------------------------------
	bool CThreadHelper::SwitchToThread()
	{
		_WINQ_FCONTEXT( "CThreadHelper::SwitchToThread" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SwitchToThread() ? true : false; 
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CThreadHelper::GetCurrentProcessorNumber()
	{
		_WINQ_FCONTEXT( "CThreadHelper::GetCurrentProcessorNumber" );
		DWORD dwResult = 0;
		__QOR_PROTECT
		{
			dwResult = CKernel32::GetCurrentProcessorNumber();
		}__QOR_ENDPROTECT
		return dwResult;
	}
	
}//nsWin32
