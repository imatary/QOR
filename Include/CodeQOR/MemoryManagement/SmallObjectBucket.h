/// SmallObjectBucket.h

// Copyright Querysoft Limited 2015
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

// A small object heap bucket
// A container for 'small' items < 64K bytes

#ifndef CODEQOR_MEMMAN_SMALLOBJECTBUCKET_H_2
#define CODEQOR_MEMMAN_SMALLOBJECTBUCKET_H_2

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "SmallObjectPage.h"
#include "CodeQOR/DataStructures/TMap.h"
#include "CodeQOR/DataStructures/TRangePair.h"

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
        template class CTRangePair< Cmp_uint_ptr >;
        typedef __QOR_INTERFACE( __CODEQOR ) CTRangePair< Cmp_uint_ptr > t_AddressRange;
        template class CTMap< t_AddressRange, CSmallObjectPage* >;
        typedef __QOR_INTERFACE( __CODEQOR ) CTMap< t_AddressRange, CSmallObjectPage* > t_PageMap;

        //--------------------------------------------------------------------------------
        class __QOR_INTERFACE( __CODEQOR ) CSmallObjectBucket
        {
        public:

                CSmallObjectBucket( Cmp_uint_ptr uiUnitSize );
                CSmallObjectBucket( const CSmallObjectBucket& src );
                CSmallObjectBucket& operator = ( const CSmallObjectBucket& src );
                virtual ~CSmallObjectBucket();

                virtual void* Allocate( Cmp_uint_ptr uiAllocSize );                             //Allocate uiAllocSize bytes
                virtual bool IsEmpty( void );                                                   //Is this and all subsequent pages empty?
                virtual bool Free( void* pElement, Cmp_uint_ptr uiAllocSize );                  //Free the uiAllocSize item at pElement
                virtual void Analyse( void(*pTrace)( char* ) );
				virtual bool Test( void* pElement, Cmp_uint_ptr uiAllocSize );
                Cmp_uint_ptr UnitSize( void );                                                  //Get allocation element size, all allocations in this bucket are this size
				

        protected:

                CSmallObjectPage* Page( void );                                                 //Get a page in which to allocate
                CSmallObjectPage* Page( byte*, Cmp_uint_ptr );                                  //Get the page containing the address
                CSmallObjectPage* AddPage( void );                                              //Add a new page to the bucket
                void FreePage( CSmallObjectPage* pCheckPage, byte* pElement );					//Free an empty page

                Cmp_uint_ptr m_uiUnitSize;                                                      //The size of each allocation element in this page

                typedef CTMap< t_AddressRange, CSmallObjectPage* >::TItem t_Item;
                t_PageMap m_PageMap;                                                            //Map of memory ranges to pages
                CSmallObjectPage* m_pLastPage;                                                  //Shortcut to the last page used
                Cmp_uint_ptr m_uiAllocCount;                                                    //Count of allocations in this bucket
        };

}//nsCodeQOR

#endif//CODEQOR_MEMMAN_SMALLOBJECTBUCKET_H_2
