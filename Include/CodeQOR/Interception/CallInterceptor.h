//CallInterceptor.h

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organisation
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

//Call interceptor or 'join point' class

#ifndef CODEQOR_INTERCEPTOR_CALL_H_1
#define CODEQOR_INTERCEPTOR_CALL_H_1

#include "CodeQOR/ClassReg/TFlyer.h"
#include "CodeQOR.h"
#include "CodeQOR/Interception/FlyStrapBase.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

//--------------------------------------------------------------------------------
namespace nsCodeQOR
{
	class __QOR_INTERFACE( __CODEQOR ) CCallContextBase;
	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __CODEQOR ) CCallInterceptor : public CTFlyer< CCallInterceptor, CFlyStrapBase >
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CCallInterceptor );

		CCallInterceptor();
		virtual ~CCallInterceptor();
		virtual void CallMade( CCallContextBase* pCall, CFunctionContextBase* pFunction );
		virtual void OnReturnAssignment( CCallContextBase* pCall );
		virtual void CallCompleted( CCallContextBase* pCall );

	};

	//Make sure the compiler genrates code for the base class template and base class static members
#if     ( ( __QCMP_COMPILER != __QCMP_CLANG ) && ( __QCMP_COMPILER != __QCMP_INTEL ) )
	template struct sTOB< CTFlyerRegEntry< CCallInterceptor > >;
	template class CTFlyer< CCallInterceptor, CFlyStrapBase >;
#else
    typedef sTOB< CTFlyerRegEntry< CCallInterceptor > > CCallInterceptorRegEntry;
    typedef CTFlyer< CCallInterceptor, CFlyStrapBase > CCallInterceptorBase;
#endif

}//nsCodeQOR

#if     ( ( __QCMP_COMPILER != __QCMP_CLANG ) && ( __QCMP_COMPILER != __QCMP_INTEL ) )
#	if	( !__QCMP_FEATURE_TEMPLATE_MEMBER_TEMPLATES_MSVC_BUGGED )
#		if( __QCMP_COMPILER == __QCMP_CODEGEAR )
//template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CCallInterceptor > >	nsCodeQOR::CTFlyer< nsCodeQOR::CCallInterceptor, nsCodeQOR::CFlyStrapBase >::RegEntry;
#		else
//template<> __QOR_INTERFACE( __CODEQOR ) nsCodeQOR::sTOB< nsCodeQOR::CTFlyerRegEntry< nsCodeQOR::CCallInterceptor > >	nsCodeQOR::CTFlyer< nsCodeQOR::CCallInterceptor, nsCodeQOR::CFlyStrapBase >::RegEntry((void*)(0));
#		endif
#	endif
#endif//( ( __QCMP_COMPILER != __QCMP_CLANG ) && ( __QCMP_COMPILER != __QCMP_INTEL ) )

#endif//CODEQOR_INTERCEPTOR_CALL_H_1
