//WinQLBattery.cpp

// Copyright Querysoft Limited 2013, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/CodeServices/WinQLPolicy.h"
#include "WinQL/Application/Threading/WinQLCriticalSection.h"
#include "WinQL/Definitions/Constants.h"
#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/CodeServices/Text/WinString.h"
#include "WinQL/System/Devices/Battery/WinQLBattery.h"
#include "WinQL/System/Devices/Interfaces/WinQLDeviceInterfaceClass.h"
#include "WinQL/System/WinQLSystem.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	__QOR_IMPLEMENT_OCLASS_GUID( CBattery, 0x72631E54, 0x78A4, 0x11D0, 0xBC, 0xF7, 0x00, 0xAA, 0x00, 0xB7, 0xB3, 0x2A );

	nsCodeQOR::CTExternalRegEntry< CBattery > CBattery::RegEntry;

	//--------------------------------------------------------------------------------
	CBattery::CBattery() : CDeviceInterface()
	,	m_bTagAcquired( false )
	,	m_bAcquiredInfo( false )
	,	m_ucGranularityCount( 0 )
	,	m_bPresent( true )
	{
		_WINQ_FCONTEXT( "CBattery::CBattery" );
		m_BQI.AtRate = 0;
		m_BQI.BatteryTag = 0;
		m_BQI.InformationLevel = BatteryInformation;
		m_Status.Capacity = 0;
		m_Status.PowerState = 0;
		m_Status.Voltage = 0;
		m_Status.Rate = 0;
	}

	//--------------------------------------------------------------------------------
	CBattery::CBattery( unsigned long ulBatteryIndex ) : CDeviceInterface()
	,	m_bTagAcquired( false )
	,	m_bAcquiredInfo( false )
	,	m_ucGranularityCount( 0 )
	,	m_bPresent( false )
	{
		_WINQ_FCONTEXT( "CBattery::CBattery" );
		/*TODO: restore this to wokring order
		unsigned long ulCountDevicesWithBatteryInterface = System().Devices(QOR_PP_SHARED_OBJECT_ACCESS).RegisteredLocalInterfaceClasses()[CDeviceInterfaceClassCollection::Battery]->Interfaces().Size();
		if( ulCountDevicesWithBatteryInterface > ulBatteryIndex )
		{
			CBattery::refType RefBattery( System().Devices(QOR_PP_SHARED_OBJECT_ACCESS).RegisteredLocalInterfaceClasses()[ CDeviceInterfaceClassCollection::Battery ]->Interfaces()[ulBatteryIndex] );
			if( !RefBattery.IsNull() )
			{
				*this = *RefBattery;
				m_bPresent = true;
			}
		}
		*/
	}

	//--------------------------------------------------------------------------------
	CBattery::CBattery( const CBattery& src ) : CDeviceInterface( src )
	{
		_WINQ_FCONTEXT( "CBattery::CBattery" );
		*this = src;
	}

	//--------------------------------------------------------------------------------
	CBattery& CBattery::operator = ( const CBattery& src )
	{
		_WINQ_FCONTEXT( "CBattery::operator =" );
		if( &src != this )
		{
			CDeviceInterface::operator=( src );

			m_bPresent = src.m_bPresent;
			m_bTagAcquired = src.m_bTagAcquired;
			m_bAcquiredInfo = src.m_bAcquiredInfo;
			m_ucGranularityCount = src.m_ucGranularityCount;
			m_BQI = src.m_BQI;
			m_BI = src.m_BI;
			m_Status = src.m_Status;
			for( unsigned char ucCount = 0; ucCount < m_ucGranularityCount; ucCount++ )
			{
				m_Scales[ ucCount ] = src.m_Scales[ ucCount ];
			}
			//m_pIODevice = src.m_pIODevice;
			m_ulTemperature = src.m_ulTemperature;
		}
		return *this;
	}

	//--------------------------------------------------------------------------------
	CBattery::~CBattery()
	{
		_WINQ_FCONTEXT( "CBattery::~CBattery" );
		m_Session.Dispose();
	}

	//--------------------------------------------------------------------------------
	unsigned long CBattery::GetTag()
	{
		_WINQ_FCONTEXT( "CBattery::GetTag" );
		if( !m_bTagAcquired )
		{
			InternalGetTag();
		}
		return m_BQI.BatteryTag;
	}

	//--------------------------------------------------------------------------------
	bool CBattery::IsSystemBattery()
	{
		_WINQ_FCONTEXT( "CBattery::IsSystemBattery" );
		if( !m_bAcquiredInfo )
		{
			InternalGetInfo();
		}
		return ( m_BI.Capabilities & System_Battery ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CBattery::IsCapacityRelative()
	{
		_WINQ_FCONTEXT( "CBattery::IsCapacityRelative" );
		if( !m_bAcquiredInfo )
		{
			InternalGetInfo();
		}
		return ( m_BI.Capabilities & Capacity_Relative ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CBattery::IsShortTerm()
	{
		_WINQ_FCONTEXT( "CBattery::IsShortTerm" );
		if( !m_bAcquiredInfo )
		{
			InternalGetInfo();
		}
		return ( m_BI.Capabilities & Is_Short_Tem ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CBattery::IsSetChargeSupported()
	{
		_WINQ_FCONTEXT( "CBattery::IsSetChargeSupported" );
		if( !m_bAcquiredInfo )
		{
			InternalGetInfo();
		}
		return ( m_BI.Capabilities & Set_Charge_Supported ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CBattery::IsSetDischargeSupported()
	{
		_WINQ_FCONTEXT( "CBattery::IsSetDischargeSupported" );
		if( !m_bAcquiredInfo )
		{
			InternalGetInfo();
		}
		return ( m_BI.Capabilities & Set_Discharge_Supported ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	unsigned long CBattery::GetPowerState()
	{
		_WINQ_FCONTEXT( "CBattery::GetPowerState" );
		InternalGetStatus();

		return m_Status.PowerState;
	}

	//--------------------------------------------------------------------------------
	unsigned long CBattery::GetCapacity()
	{
		_WINQ_FCONTEXT( "CBattery::GetCapacity" );
		InternalGetStatus();

		return m_Status.Capacity;
	}

	//--------------------------------------------------------------------------------
	unsigned long CBattery::GetVoltage()
	{
		_WINQ_FCONTEXT( "CBattery::GetVoltage" );
		InternalGetStatus();

		return m_Status.Voltage;
	}

	//--------------------------------------------------------------------------------
	long CBattery::GetRate()
	{
		_WINQ_FCONTEXT( "CBattery::GetRate" );
		InternalGetStatus();
		return m_Status.Rate;
	}

	//--------------------------------------------------------------------------------
	bool CBattery::IsOnLine()
	{
		_WINQ_FCONTEXT( "CBattery::IsOnLine" );
		InternalGetStatus();
		return ( m_Status.PowerState & PowerStatus_On_Line ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CBattery::IsDischarging()
	{
		_WINQ_FCONTEXT( "CBattery::IsDischarging" );
		InternalGetStatus();
		return ( m_Status.PowerState & PowerStatus_Discharging ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CBattery::IsCharging()
	{
		_WINQ_FCONTEXT( "CBattery::IsCharging" );
		InternalGetStatus();
		return ( m_Status.PowerState & PowerStatus_Charging ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	bool CBattery::IsCritical()
	{
		_WINQ_FCONTEXT( "CBattery::IsCritical" );
		InternalGetStatus();
		return ( m_Status.PowerState & PowerStatus_Critical ) ? true : false;
	}

	//--------------------------------------------------------------------------------
	double CBattery::GetTemperatureDegreesC()
	{
		_WINQ_FCONTEXT( "CBattery::GetTemperatureDegreesC" );
		InternalGetTemperature();

		double dResult = ((double)m_ulTemperature) - 273.15;
		dResult /= 10;
		return dResult;
	}

	//--------------------------------------------------------------------------------
	unsigned long CBattery::EstimateTimeInSeconds( unsigned long ulRate )
	{
		_WINQ_FCONTEXT( "CBattery::EstimateTimeInSeconds" );
		if( !m_bTagAcquired )
		{
			InternalGetTag();
		}

		m_BQI.InformationLevel = BatteryEstimatedTime;
		m_BQI.AtRate = ulRate;

		unsigned long ulOut = 0;
		unsigned long ulEstimate = 0;
		
		if(m_Session->Control( __WINQL_DEVICE_CONTROL_CODE( File_Device_Battery, Query_Information, Method_Buffered, File_Read_Access ), &m_BQI, sizeof( m_BQI ), &ulEstimate, sizeof( ulEstimate) , &ulOut, 0 ) )
		{
			
		}
		return ulEstimate;
	}

	//--------------------------------------------------------------------------------
	CWString CBattery::GetSerialNumber()
	{
		_WINQ_FCONTEXT( "CBattery::GetSerialNumber" );
		CWString strSerialNumber;

		if( !m_bTagAcquired )
		{
			InternalGetTag();
		}

		m_BQI.InformationLevel = BatterySerialNumber;

		unsigned long ulOut = 0;
		
		if(m_Session->Control( __WINQL_DEVICE_CONTROL_CODE( File_Device_Battery, Query_Information, Method_Buffered, File_Read_Access ), &m_BQI, sizeof( m_BQI ), strSerialNumber.GetBufferSetLength( MaxPath ), MaxPath, &ulOut, 0 ) )
		{
			strSerialNumber.ValidateBuffer( static_cast< unsigned short >( ulOut ) );	
		}

		return strSerialNumber;
	}

	//--------------------------------------------------------------------------------
	CWString CBattery::GetManufacturerName()
	{
		_WINQ_FCONTEXT( "CBattery::GetManufacturerName" );
		CWString strManufacturerName;

		if( !m_bTagAcquired )
		{
			InternalGetTag();
		}

		m_BQI.InformationLevel = BatteryManufactureName;

		unsigned long ulOut = 0;
		
		if(m_Session->Control( __WINQL_DEVICE_CONTROL_CODE( File_Device_Battery, Query_Information, Method_Buffered, File_Read_Access ), &m_BQI, sizeof( m_BQI ), strManufacturerName.GetBufferSetLength( MaxPath ), MaxPath, &ulOut, 0 ) )
		{
			strManufacturerName.ValidateBuffer( static_cast< unsigned short >( ulOut ) );	
		}
		return strManufacturerName;
	}

	//--------------------------------------------------------------------------------
	CTString CBattery::GetManufactureDate()
	{
		_WINQ_FCONTEXT( "CBattery::GetManufactureDate" );
		CTString strManufactureDate;

		if( !m_bTagAcquired )
		{
			InternalGetTag();
		}

		m_BQI.InformationLevel = BatteryManufactureDate;

		Battery_Manufacture_Date Date;
		unsigned long ulOut = 0;
		
		if(m_Session->Control( __WINQL_DEVICE_CONTROL_CODE( File_Device_Battery, Query_Information, Method_Buffered, File_Read_Access ), &m_BQI, sizeof( m_BQI ), &Date, sizeof(Date), &ulOut, 0 ) )
		{
			//TOOD: Use current locale information to turn the date into a string
			strManufactureDate = CTString( _TXT( "Date of manufacture" ) );
		}

		return strManufactureDate;
	}

	//--------------------------------------------------------------------------------
	CWString CBattery::GetDeviceName()
	{
		_WINQ_FCONTEXT( "CBattery::GetDeviecName" );
		CWString strDeviceName;

		if( !m_bTagAcquired )
		{
			InternalGetTag();
		}

		m_BQI.InformationLevel = BatteryDeviceName;

		unsigned long ulOut = 0;
		
		if(m_Session->Control( __WINQL_DEVICE_CONTROL_CODE( File_Device_Battery, Query_Information, Method_Buffered, File_Read_Access ), &m_BQI, sizeof( m_BQI ), strDeviceName.GetBufferSetLength( MaxPath ), MaxPath, &ulOut, 0 ) )
		{
			strDeviceName.ValidateBuffer( static_cast< unsigned short >( ulOut ) );	
		}
		return strDeviceName;
	}

	//--------------------------------------------------------------------------------
	void CBattery::InternalGetTag()
	{
		_WINQ_FCONTEXT( "CBattery::InternalGetTag" );
		unsigned long ulWait = 0;
		unsigned long ulOut = 0;		

		if (m_Session.IsNull())
		{
			m_Session = Open(Generic_Read | Generic_Write, File_Share_Read | File_Share_Write, File_Attribute_Normal);
		}

		if(m_Session->Control( __WINQL_DEVICE_CONTROL_CODE( File_Device_Battery, Query_Tag, Method_Buffered, File_Read_Access ), &ulWait, sizeof( ulWait ), &m_BQI.BatteryTag, sizeof( m_BQI.BatteryTag ), &ulOut, 0 ) )
		{
			m_bTagAcquired = true;
		}
	}

	//--------------------------------------------------------------------------------
	void CBattery::InternalGetTemperature()
	{
		_WINQ_FCONTEXT( "CBattery::InternalGetTemperature" );
		if( !m_bTagAcquired )
		{
			InternalGetTag();
		}

		m_BQI.InformationLevel = BatteryTemperature;

		unsigned long ulOut = 0;
		
		if(m_Session->Control( __WINQL_DEVICE_CONTROL_CODE( File_Device_Battery, Query_Information, Method_Buffered, File_Read_Access ), &m_BQI, sizeof( m_BQI ), &m_ulTemperature, sizeof( m_ulTemperature ), &ulOut, 0 ) )
		{
			
		}
	}

	//--------------------------------------------------------------------------------
	void CBattery::InternalGetGranularity()
	{
		_WINQ_FCONTEXT( "CBattery::InternalGetGranularity" );
		if( !m_bTagAcquired )
		{
			InternalGetTag();
		}

		m_BQI.InformationLevel = BatteryGranularityInformation;

		unsigned long ulOut = 0;
		
		if(m_Session->Control( __WINQL_DEVICE_CONTROL_CODE( File_Device_Battery, Query_Information, Method_Buffered, File_Read_Access ), &m_BQI, sizeof( m_BQI ), m_Scales, sizeof( Battery_Reporting_Scale ) * 4, &ulOut, 0 ) )
		{
			m_ucGranularityCount = static_cast< unsigned char >( ulOut / sizeof( Battery_Reporting_Scale ) );
		}
	}

	//--------------------------------------------------------------------------------
	void CBattery::InternalGetInfo()
	{
		_WINQ_FCONTEXT( "CBattery::InternalGetInfo" );
		if( !m_bTagAcquired )
		{
			InternalGetTag();
		}

		m_BQI.InformationLevel = BatteryInformation;

		unsigned long ulOut = 0;
		if(m_Session->Control( __WINQL_DEVICE_CONTROL_CODE( File_Device_Battery, Query_Information, Method_Buffered, File_Read_Access ), &m_BQI, sizeof( m_BQI ), &m_BI, sizeof( m_BI ), &ulOut, 0 ) )
		{
			m_bAcquiredInfo = true;
		}
	}

	//--------------------------------------------------------------------------------
	void CBattery::InternalGetStatus()
	{
		_WINQ_FCONTEXT( "CBattery::InternalGetStatus" );
		if( !m_bTagAcquired )
		{
			InternalGetTag();
		}

		Battery_Wait_Status WaitStatus = {0};
		WaitStatus.BatteryTag = m_BQI.BatteryTag;
		unsigned long ulOut = 0;

		m_Session->Control( __WINQL_DEVICE_CONTROL_CODE( File_Device_Battery, Query_Status, Method_Buffered, File_Read_Access ), &WaitStatus, sizeof( WaitStatus ), &m_Status, sizeof( m_Status ), &ulOut, 0 );
	}

	//--------------------------------------------------------------------------------
	//Call to ensure cached data is requeryed after a change of Tag
	void CBattery::OnTagChange( void )
	{
		_WINQ_FCONTEXT( "CBattery::OnTagChange" );
		m_bTagAcquired = false;
		m_bAcquiredInfo = false;
		m_ucGranularityCount = 0;
	}

}//nsWin32
