//CQOR0.cpp

// Copyright Querysoft Limited 2013
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "SystemQOR.h"
#include "CQOR.h"
#include "errno.h"
#include "CodeQOR/DataTypes/GUID.h"
#include "CodeQOR/Modules/LoadableModuleBase.h"
#include "CodeQOR/Tracing/FunctionContextBase.h"
#include "CodeQOR/ErrorSystem/Error.h"
#include <new>

//------------------------------------------------------------------------------
//Only for shared library builds as one of a network of shared libraries
#ifndef QOR_MONOLITHIC
#	ifdef _USRDLL

__QCMP_STARTLINKAGE_C

	extern int _cdecl QORStaticInit( void );

	//------------------------------------------------------------------------------
	__QCMP_EXPORT int _cdecl QORinit( void )
	{
		QORStaticInit();
		return 1;
	}

	//------------------------------------------------------------------------------
	//This gives the CQOR library a unique identity
	__QCMP_EXPORT nsCodeQOR::mxGUID* QORidentity( void )
	{
		static nsCodeQOR::mxGUID CQOR = { 0x2c101426, 0x4e38, 0x49c0, { 0x91, 0xc8, 0xc, 0xea, 0xf5, 0x14, 0xbc, 0x2 } };
		return &CQOR;
	}

__QCMP_ENDLINKAGE_C

//------------------------------------------------------------------------------
nsCodeQOR::CLoadableModuleBase& ThisModule( void )
{
	static nsCodeQOR::CLoadableModuleBase CQORModule( "Querysoft Open Runtime 'C' library (CQOR)" );
	return CQORModule;
}

//------------------------------------------------------------------------------
const char* __QCMP_LOCAL ThisModuleVersion(void)
{
	return QOR_PP_STRINGIZE(__DATE__:__TIME__);
}

#	endif//_USRDLL
#endif//QOR_MONOLITHIC

__QOR_IMPLEMENT_OCLASS_LUID( CmxCRT );

//--------------------------------------------------------------------------------
CmxCRT::CmxCRT()
{
	__QCS_MEMBER_FCONTEXT( "CmxCRT::CmxCRT" );
    Init();
}

//--------------------------------------------------------------------------------
CmxCRT::~CmxCRT()
{
	__QCS_MEMBER_FCONTEXT( "CmxCRT::~CmxCRT" );
}

//--------------------------------------------------------------------------------
void CmxCRT::Init()
{
	__QCS_MEMBER_FCONTEXT( "CmxCRT::Init" );
}

//--------------------------------------------------------------------------------
void CmxCRT::Cleanup()
{
	__QCS_MEMBER_FCONTEXT( "CmxCRT::Cleanup" );
}

/*
//--------------------------------------------------------------------------------
///The O/S calls us when it needs a new CRT EC
__QOR_INTERFACE( __CQOR ) clib_execution_context* create_execution_context( void )
{
    __QCS_FCONTEXT( "create_execution_context" );
    clib_execution_context* pnewCLibEC = 0;
    __QCS_PROTECT
    {
        pnewCLibEC = new clib_execution_context;
        //(*__dyn_tls_init_callback)(NULL, DLL_THREAD_ATTACH, NULL); //Initialize PER_THREAD variables
        //TODO: Initialize the clib_execution_context
        pnewCLibEC->_ch_buf_used = 0;
    }__QCS_ENDPROTECT
    return pnewCLibEC;
}
*/
//--------------------------------------------------------------------------------
///We provide an interface to everything else to get the current EC which this retrieves from the O/S
__QOR_INTERFACE( __CQOR ) clib_execution_context* get_execution_context( void )
{
    __QCS_FCONTEXT( "get_execution_context" );
    clib_execution_context* pEC = 0;
    __QCS_PROTECT
    {
        pEC = 0;//TODO: reinterpret_cast< clib_execution_context* >( g_pCRT->GetExecutionContext() );
    }__QCS_ENDPROTECT
    return pEC;
}


//--------------------------------------------------------------------------------
#ifdef __MINGW32__
__QCMP_STARTLINKAGE_C

//Compatability extension: MinGW32 expects to find this in the C Library
__QOR_INTERFACE( __CQOR ) _onexit_t __cdecl __dllonexit ( _onexit_t func, _PVFV ** pbegin, _PVFV ** pend )
{
	return 0;
}

__QOR_INTERFACE( __CQOR ) int __mingwthr_key_dtor( unsigned long key, void(*dtor)(void*) )
{
	return 0;
}
__QCMP_ENDLINKAGE_C
#endif

