//WinQLComm.cpp

// Copyright Querysoft Limited 2013, 2016
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include "WinQL/Application/ErrorSystem/WinQLError.h"
#include "WinQL/Application/Comms/Serial/WinQLComm.h"
#include "WinQAPI/Kernel32.h"

//--------------------------------------------------------------------------------
namespace nsWin32
{
	using namespace nsWinQAPI;

	//e.g.TEXT("\\\\.\\COM10")
	//--------------------------------------------------------------------------------
	CComPort::CComPort( const TCHAR* lpPortName, unsigned long dwDesiredAccess ) : CDeviceFile( lpPortName, dwDesiredAccess, 0, 0 )
	{
		_WINQ_FCONTEXT( "CComPort::CComPort" );
	}

	//--------------------------------------------------------------------------------
	CComPort::~CComPort()
	{
		_WINQ_FCONTEXT( "CComPort::~CComPort" );
	}

	//--------------------------------------------------------------------------------
	bool CComPort::GetConfig( nsWin32::LPCOMMCONFIG lpCC, unsigned long* lpdwSize )
	{
		_WINQ_FCONTEXT( "CComPort::GetConfig" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetCommConfig( m_Handle().Use(), reinterpret_cast< ::LPCOMMCONFIG >( lpCC ), lpdwSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::SetConfig( nsWin32::LPCOMMCONFIG lpCC, unsigned long dwSize )
	{
		_WINQ_FCONTEXT( "CComPort::SetConfig" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetCommConfig( m_Handle().Use(), reinterpret_cast< ::LPCOMMCONFIG >( lpCC ), dwSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::ClearBreak( void )
	{
		_WINQ_FCONTEXT( "CComPort::ClearBreak" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ClearCommBreak( m_Handle().Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::ClearError( unsigned long* lpErrors, nsWin32::LPCOMSTAT lpStat )
	{
		_WINQ_FCONTEXT( "CComPort::ClearError" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::ClearCommError( m_Handle().Use(), lpErrors, reinterpret_cast< ::LPCOMSTAT >( lpStat ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::EscapeFunction( unsigned long dwFunc )
	{
		_WINQ_FCONTEXT( "CComPort::EscapeFunction" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::EscapeCommFunction( m_Handle().Use(), dwFunc ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::GetMask( unsigned long* lpEvtMask )
	{
		_WINQ_FCONTEXT( "CComPort::GetMask" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetCommMask( m_Handle().Use(), lpEvtMask ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::GetModemStatus( unsigned long* lpModemStat )
	{
		_WINQ_FCONTEXT( "CComPort::GetModemStatus" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetCommModemStatus( m_Handle().Use(), lpModemStat ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::GetProperties( nsWin32::LPCOMMPROP lpCommProp )
	{
		_WINQ_FCONTEXT( "CComPort::GetProperties" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetCommProperties( m_Handle().Use(), reinterpret_cast< ::LPCOMMPROP >( lpCommProp ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::GetState( nsWin32::LPDCB lpDCB )
	{
		_WINQ_FCONTEXT( "CComPort::GetState" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetCommState( m_Handle().Use(), reinterpret_cast< ::LPDCB >( lpDCB ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::Purge( unsigned long dwFlags )
	{
		_WINQ_FCONTEXT( "CComPort::Purge" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::PurgeComm( m_Handle().Use(), dwFlags ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::SetBreak()
	{
		_WINQ_FCONTEXT( "CComPort::SetBreak" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetCommBreak( m_Handle().Use() ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::SetMask( unsigned long dwEvtMask )
	{
		_WINQ_FCONTEXT( "CComPort::SetMask" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetCommMask( m_Handle().Use(), dwEvtMask ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::SetState( nsWin32::LPDCB lpDCB )
	{
		_WINQ_FCONTEXT( "CComPort::SetState" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetCommState( m_Handle().Use(), reinterpret_cast< ::LPDCB >( lpDCB ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::GetTimeouts( nsWin32::LPCOMMTIMEOUTS lpCommTimeouts )
	{
		_WINQ_FCONTEXT( "CComPort::GetTimeouts" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetCommTimeouts( m_Handle().Use(), reinterpret_cast< ::LPCOMMTIMEOUTS >( lpCommTimeouts ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::SetTimeouts( nsWin32::LPCOMMTIMEOUTS lpCommTimeouts )
	{
		_WINQ_FCONTEXT( "CComPort::SetTimeouts" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetCommTimeouts( m_Handle().Use(), reinterpret_cast< ::LPCOMMTIMEOUTS >( lpCommTimeouts ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::Setup( unsigned long dwInQueue, unsigned long dwOutQueue )
	{
		_WINQ_FCONTEXT( "CComPort::Setup" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetupComm( m_Handle().Use(), dwInQueue, dwOutQueue ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::TransmitChar( char cChar )
	{
		_WINQ_FCONTEXT( "CComPort::TransmitChar" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::TransmitCommChar( m_Handle().Use(), cChar ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::WaitEvent( unsigned long* lpEvtMask, nsWin32::LPOVERLAPPED lpOverlapped )
	{
		_WINQ_FCONTEXT( "CComPort::WaitEvent" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::WaitCommEvent( m_Handle().Use(), lpEvtMask, reinterpret_cast< ::LPOVERLAPPED >( lpOverlapped ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//static class operations

	//--------------------------------------------------------------------------------
	bool CComPort::BuildDCB( const TCHAR* lpDef, nsWin32::LPDCB lpDCB )
	{
		_WINQ_SFCONTEXT( "CComPort::BuildDCB" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::BuildCommDCB( lpDef, reinterpret_cast< ::LPDCB >( lpDCB ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::BuildDCBAndTimeouts( const TCHAR* lpDef, nsWin32::LPDCB lpDCB, nsWin32::LPCOMMTIMEOUTS lpCommTimeouts )
	{
		_WINQ_SFCONTEXT( "CComPort::BuildDCBAndTimeouts" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::BuildCommDCBAndTimeouts( lpDef, reinterpret_cast< ::LPDCB >( lpDCB ), reinterpret_cast< ::LPCOMMTIMEOUTS >( lpCommTimeouts ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::ConfigDialog( const TCHAR* lpszName, CWindowHandle& hWnd, nsWin32::LPCOMMCONFIG lpCC )
	{
		_WINQ_SFCONTEXT( "CComPort::ConfigDialog" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::CommConfigDialog( lpszName, reinterpret_cast< ::HWND >( hWnd.Use() ), reinterpret_cast< ::LPCOMMCONFIG >( lpCC ) ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::GetDefaultConfig( const TCHAR* lpszName, nsWin32::LPCOMMCONFIG lpCC, unsigned long* lpdwSize )
	{
		_WINQ_SFCONTEXT( "CComPort::GetDefaultConfig" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::GetDefaultCommConfig( lpszName, reinterpret_cast< ::LPCOMMCONFIG >( lpCC ), lpdwSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

	//--------------------------------------------------------------------------------
	bool CComPort::SetDefaultConfig( const TCHAR* lpszName, nsWin32::LPCOMMCONFIG lpCC, unsigned long dwSize )
	{
		_WINQ_SFCONTEXT( "CComPort::SetDefaultConfig" );
		bool bResult = false;
		__QOR_PROTECT
		{
			bResult = CKernel32::SetDefaultCommConfig( lpszName, reinterpret_cast< ::LPCOMMCONFIG >( lpCC ), dwSize ) ? true : false;
		}__QOR_ENDPROTECT
		return bResult;
	}

}//nsWin32

