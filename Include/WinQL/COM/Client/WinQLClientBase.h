//WinQLClientBase.h

// Copyright Querysoft Limited 2013, 2015, 2017
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef WINQL_COM_CLIENTBASE_H_3
#define WINQL_COM_CLIENTBASE_H_3

#include "CompilerQOR.h"

#ifdef	__QCMP_OPTIMIZEINCLUDE
#pragma	__QCMP_OPTIMIZEINCLUDE
#endif//__QCMP_OPTIMIZEINCLUDE

#include "WinQL/Definitions/Constants.h"
#include "WinQL/Definitions/Security.h"
#include "WinQL/Definitions/Interfaces.h"
#include "WinQL/COM/Server/BaseParts/WinQLCOObjectBase.h"
#include "WinQL/COM/Server/BaseParts/WinQLUnknownImplBase.h"

//--------------------------------------------------------------------------------
namespace nsWinQAPI
{
	class __QOR_INTERFACE( __WINQAPI ) COLE32;
}

//--------------------------------------------------------------------------------
namespace nsWin32
{

	//--------------------------------------------------------------------------------
	enum CLSCTX
    {	
		CLSCTX_INPROC_SERVER	= 0x1,
		CLSCTX_INPROC_HANDLER	= 0x2,
		CLSCTX_LOCAL_SERVER	= 0x4,
		CLSCTX_INPROC_SERVER16	= 0x8,
		CLSCTX_REMOTE_SERVER	= 0x10,
		CLSCTX_INPROC_HANDLER16	= 0x20,
		CLSCTX_RESERVED1	= 0x40,
		CLSCTX_RESERVED2	= 0x80,
		CLSCTX_RESERVED3	= 0x100,
		CLSCTX_RESERVED4	= 0x200,
		CLSCTX_NO_CODE_DOWNLOAD	= 0x400,
		CLSCTX_RESERVED5	= 0x800,
		CLSCTX_NO_CUSTOM_MARSHAL	= 0x1000,
		CLSCTX_ENABLE_CODE_DOWNLOAD	= 0x2000,
		CLSCTX_NO_FAILURE_LOG	= 0x4000,
		CLSCTX_DISABLE_AAA	= 0x8000,
		CLSCTX_ENABLE_AAA	= 0x10000,
		CLSCTX_FROM_DEFAULT_CONTEXT	= 0x20000,
		CLSCTX_ACTIVATE_32_BIT_SERVER	= 0x40000,
		CLSCTX_ACTIVATE_64_BIT_SERVER	= 0x80000,
		CLSCTX_ENABLE_CLOAKING	= 0x100000,
		CLSCTX_PS_DLL	= ( int  )0x80000000
    };

	//--------------------------------------------------------------------------------
	template< class TInterface >
	class CComPtr : public CCOObjectBase
	{
	public:

		//--------------------------------------------------------------------------------
		CComPtr() : m_p( 0 )
		{
			_WINQ_SFCONTEXT( "CComPtr::CComPtr" );
		}

		//--------------------------------------------------------------------------------
		CComPtr( TInterface* p ) : m_p( p )
		{
			_WINQ_SFCONTEXT( "CComPtr::CComPtr" );
		}

		//--------------------------------------------------------------------------------
		CComPtr( const CComPtr< TInterface >& src )
		{
			*this = src;
		}

		//--------------------------------------------------------------------------------
		CComPtr& operator = ( const CComPtr< TInterface >& src )
		{
			if( src.m_p != m_p )
			{
				if( m_p )
				{
					m_p->Release();
				}
				m_p = src.m_p;
				m_p->AddRef();
			}

			return *this;
		}

		//--------------------------------------------------------------------------------
		virtual ~CComPtr()
		{
			_WINQ_SFCONTEXT( "CComPtr::~CComPtr" );
			if( m_p )
			{
				m_p->Release();
			}
		}

		//--------------------------------------------------------------------------------
		operator TInterface*() const
		{
			return m_p;
		}

		//--------------------------------------------------------------------------------
		TInterface* operator -> () const
		{
			return m_p;
		}

		//--------------------------------------------------------------------------------
		TInterface** operator &()
		{
			return &m_p;
		}

		//--------------------------------------------------------------------------------
		bool IsNull( void )
		{
			return m_p == 0 ? true : false;
		}

	protected:

		TInterface* m_p;

	};

	//--------------------------------------------------------------------------------
	class __QOR_INTERFACE( __WINQL_COM ) CClientBase : public CCOObjectBase, public CIUnknownImplBase<>
	{
	public:

		__QOR_DECLARE_OCLASS_ID( CClientBase );

		CClientBase();
		virtual ~CClientBase();

		long QueryProxyBlanket( void* pProxy, unsigned long* pwAuthnSvc, unsigned long* pAuthzSvc, wchar_t** pServerPrincName, unsigned long* pAuthnLevel, unsigned long* pImpLevel, void** pAuthInfo, unsigned long* pCapabilities );
		long SetProxyBlanket( IUnknown* pProxy, unsigned long ulAuthnSvc, unsigned long ulAuthzSvc, wchar_t* pServicePrincName, unsigned long ulAuthnLevel, unsigned long ulImpLevel, void* pAuthInfo, unsigned long ulCapabilities );

	private:

		CClientBase( const CClientBase& );
		CClientBase& operator = ( const CClientBase& );
	};

}//nsWin32

#endif//WINQL_COM_CLIENTBASE_H_3

